Course,Chapters,ALL Headings,Paragraphs,Unordered List Items,Ordered List Items,Tables,Code Examples
Learn MATLAB,MATLAB Tutorial,MATLAB Tutorial@@@Audience@@@Prerequisites|||Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB is a programming language developed by MathWorks. It started out as a matrix programming language where linear algebra programming was simple. It can be run both under interactive sessions and as a batch job. This tutorial gives you aggressively a gentle introduction of MATLAB programming language. It is designed to give students fluency in MATLAB programming language. Problem-based MATLAB examples have been given in simple and easy way to make your learning fast and effective.|||This tutorial has been prepared for the beginners to help them understand basic to advanced functionality of MATLAB. After completing this tutorial you will find yourself at a moderate level of expertise in using MATLAB from where you can take yourself to next levels.|||We assume you have a little knowledge of any computer programming and understand concepts like variables, constants, expression, statements, etc. If you have done programming in any other high-level programming language like C, C++ or Java, then it will be very much beneficial and learning MATLAB will be like a fun for you.",,,,
Learn MATLAB,MATLAB - Overview,MATLAB - Overview|||MATLAB's Power of Computational Mathematics@@@Features of MATLAB@@@Uses of MATLAB@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB (matrix laboratory) is a fourth-generation high-level programming language and interactive environment for numerical computation, visualization and programming.|||It allows matrix manipulations; plotting of functions and data; implementation of algorithms; creation of user interfaces; interfacing with programs written in other languages, including C, C++, Java, and FORTRAN; analyze data; develop algorithms; and create models and applications.|||It has numerous built-in commands and math functions that help you in mathematical calculations, generating plots, and performing numerical methods.|||MATLAB is used in every facet of computational mathematics. Following are some commonly used mathematical calculations where it is used most commonly −|||Following are the basic features of MATLAB −|||It is a high-level language for numerical computation, visualization and application development.|||It also provides an interactive environment for iterative exploration, design and problem solving.|||It provides vast library of mathematical functions for linear algebra, statistics, Fourier analysis, filtering, optimization, numerical integration and solving ordinary differential equations.|||It provides built-in graphics for visualizing data and tools for creating custom plots.|||MATLAB's programming interface gives development tools for improving code quality maintainability and maximizing performance.|||It provides tools for building applications with custom graphical interfaces.|||It provides functions for integrating MATLAB based algorithms with external applications and languages such as C, Java, .NET and Microsoft Excel.|||MATLAB is widely used as a computational tool in science and engineering encompassing the fields of physics, chemistry, math and all engineering streams. It is used in a range of applications including −","Dealing with Matrices and Arrays@@@2-D and 3-D Plotting and graphics@@@Linear Algebra@@@Algebraic Equations@@@Non-linear Functions@@@Statistics@@@Data Analysis@@@Calculus and Differential Equations@@@Numerical Calculations@@@Integration@@@Transforms@@@Curve Fitting@@@Various other special functions|||It is a high-level language for numerical computation, visualization and application development.@@@It also provides an interactive environment for iterative exploration, design and problem solving.@@@It provides vast library of mathematical functions for linear algebra, statistics, Fourier analysis, filtering, optimization, numerical integration and solving ordinary differential equations.@@@It provides built-in graphics for visualizing data and tools for creating custom plots.@@@MATLAB's programming interface gives development tools for improving code quality maintainability and maximizing performance.@@@It provides tools for building applications with custom graphical interfaces.@@@It provides functions for integrating MATLAB based algorithms with external applications and languages such as C, Java, .NET and Microsoft Excel.|||Signal Processing and Communications@@@Image and Video Processing@@@Control Systems@@@Test and Measurement@@@Computational Finance@@@Computational Biology",,,
Learn MATLAB,MATLAB - Environment Setup,MATLAB - Environment Setup|||Local Environment Setup@@@Understanding the MATLAB Environment@@@Set up GNU Octave@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Setting up MATLAB environment is a matter of few clicks. The installer can be downloaded from here.|||MathWorks provides the licensed product, a trial version and a student version as well. You need to log into the site and wait a little for their approval.|||After downloading the installer the software can be installed through few clicks.||||||MATLAB development IDE can be launched from the icon created on the desktop. The main working window in MATLAB is called the desktop. When MATLAB is started, the desktop appears in its default layout −|||The desktop has the following panels −|||Current Folder − This panel allows you to access the project folders and files.|||Command Window − This is the main area where commands can be entered at the command line. It is indicated by the command prompt (>>).|||Workspace − The workspace shows all the variables created and/or imported from files.|||Command History − This panel shows or return commands that are entered at the command line.|||If you are willing to use Octave on your machine ( Linux, BSD, OS X or Windows ), then kindly download latest version from Download GNU Octave. You can check the given installation instructions for your machine.",Current Folder − This panel allows you to access the project folders and files.|||Command Window − This is the main area where commands can be entered at the command line. It is indicated by the command prompt (>>).|||Workspace − The workspace shows all the variables created and/or imported from files.|||Command History − This panel shows or return commands that are entered at the command line.,,,
Learn MATLAB,MATLAB - Basic Syntax,MATLAB - Basic Syntax|||Hands on Practice@@@Use of Semicolon (;) in MATLAB@@@Adding Comments@@@Commonly used Operators and Special Characters@@@Special Variables and Constants@@@Naming Variables@@@Saving Your Work@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB environment behaves like a super-complex calculator. You can enter commands at the >> command prompt.|||MATLAB is an interpreted environment. In other words, you give a command and MATLAB executes it right away.|||Type a valid expression, for example,|||And press ENTER|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Let us take up few more examples −|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Another example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Another example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Another example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||MATLAB provides some special expressions for some mathematical symbols, like pi for π, Inf for ∞, i (and j) for √-1 etc. Nan stands for 'not a number'.|||Semicolon (;) indicates end of statement. However, if you want to suppress and hide the MATLAB output for an expression, add a semicolon after the expression.|||For example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||The percent symbol (%) is used for indicating a comment line. For example,|||You can also write a block of comments using the block comment operators % {  and % }.|||The MATLAB editor includes tools and context menu items to help you add, remove, or change the format of comments.|||MATLAB supports the following commonly used operators and special characters −|||MATLAB supports the following special variables and constants −|||Variable names consist of a letter followed by any number of letters, digits or underscore.|||MATLAB is case-sensitive.|||Variable names can be of any length, however, MATLAB uses only first N characters, where N is given by the function namelengthmax.|||The save command is used for saving all the variables in the workspace, as a file with .mat extension, in the current directory.|||For example,|||You can reload the file anytime later using the load command.",,,"Operator@@@Purpose|||+@@@Plus; addition operator.|||-@@@Minus; subtraction operator.|||*@@@Scalar and matrix multiplication operator.|||.*@@@Array multiplication operator.|||^@@@Scalar and matrix exponentiation operator.|||.^@@@Array exponentiation operator.|||\@@@Left-division operator.|||/@@@Right-division operator.|||.\@@@Array left-division operator.|||./@@@Array right-division operator.|||:@@@Colon; generates regularly spaced elements and represents an entire row or column.|||( )@@@Parentheses; encloses function arguments and array indices; overrides precedence.|||[ ]@@@Brackets; enclosures array elements.|||.@@@Decimal point.|||…@@@Ellipsis; line-continuation operator|||,@@@Comma; separates statements and elements in a row|||;@@@Semicolon; separates columns and suppresses display.|||%@@@Percent sign; designates a comment and specifies formatting.|||_@@@Quote sign and transpose operator.|||._@@@Nonconjugated transpose operator.|||=@@@Assignment operator.&&&Name@@@Meaning|||ans@@@Most recent answer.|||eps@@@Accuracy of floating-point precision.|||i,j@@@The imaginary unit √-1.|||Inf@@@Infinity.|||NaN@@@Undefined numerical result (not a number).|||pi@@@The number π",5 + 5|||3 ^ 2	       % 3 raised to the power of 2|||sin(pi /2)	  % sine of angle 90o|||7/0		      % Divide by zero|||732 * 20.3	|||x = 3;y = x + 5|||x = 9	     % assign the value 9 to x
Learn MATLAB,MATLAB - Variables,MATLAB - Variables|||Multiple Assignments@@@I have forgotten the Variables!@@@Long Assignments@@@The format Command@@@Creating Vectors@@@Creating Matrices@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"In MATLAB environment, every variable is an array or matrix.|||You can assign variables in a simple way. For example,|||MATLAB will execute the above statement and return the following result −|||It creates a 1-by-1 matrix named x and stores the value 3 in its element. Let us check another example,|||MATLAB will execute the above statement and return the following result −|||Please note that −|||Once a variable is entered into the system, you can refer to it later.|||Variables must have values before they are used.|||When an expression returns a result that is not assigned to any variable, the system assigns it to a variable named ans, which can be used later.|||For example,|||MATLAB will execute the above statement and return the following result −|||You can use this variable ans −|||MATLAB will execute the above statement and return the following result −|||Let's look at another example −|||MATLAB will execute the above statement and return the following result −|||You can have multiple assignments on the same line. For example,|||MATLAB will execute the above statement and return the following result −|||The who command displays all the variable names you have used.|||MATLAB will execute the above statement and return the following result −|||The whos command displays little more about the variables −|||MATLAB will execute the above statement and return the following result −|||The clear command deletes all (or the specified) variable(s) from the memory.|||Long assignments can be extended to another line by using an ellipses (...). For example,|||MATLAB will execute the above statement and return the following result −|||By default, MATLAB displays numbers with four decimal place values. This is known as short format.|||However, if you want more precision, you need to use the format command.|||The format long command displays 16 digits after decimal.|||For example −|||MATLAB will execute the above statement and return the following result−|||Another example,|||MATLAB will execute the above statement and return the following result −|||The format bank command rounds numbers to two decimal places. For example,|||MATLAB will execute the above statement and return the following result −|||MATLAB displays large numbers using exponential notation.|||The format short e command allows displaying in exponential form with four decimal places plus the exponent.|||For example,|||MATLAB will execute the above statement and return the following result −|||The format long e command allows displaying in exponential form with four decimal places plus the exponent. For example,|||MATLAB will execute the above statement and return the following result −|||The format rat command gives the closest rational expression resulting from a calculation. For example,|||MATLAB will execute the above statement and return the following result −|||A vector is a one-dimensional array of numbers. MATLAB allows creating two types of vectors −|||Row vectors are created by enclosing the set of elements in square brackets, using space or comma to delimit the elements.|||For example,|||MATLAB will execute the above statement and return the following result −|||Another example,|||MATLAB will execute the above statement and return the following result −|||Column vectors are created by enclosing the set of elements in square brackets, using semicolon(;) to delimit the elements.|||MATLAB will execute the above statement and return the following result −|||A matrix is a two-dimensional array of numbers.|||In MATLAB, a matrix is created by entering each row as a sequence of space or comma separated elements, and end of a row is demarcated by a semicolon. For example, let us create a 3-by-3 matrix as −|||MATLAB will execute the above statement and return the following result −","Once a variable is entered into the system, you can refer to it later.@@@Variables must have values before they are used.@@@When an expression returns a result that is not assigned to any variable, the system assigns it to a variable named ans, which can be used later.|||Variables currently in memory@@@Type of each variables@@@Memory allocated to each variable@@@Whether they are complex variables or not|||Row vectors@@@Column vectors",,,"x = 3	       % defining x and initializing it with a value|||x = sqrt(16) 	% defining x and initializing it with an expression|||sqrt(78)|||sqrt(78);9876/ans|||x = 7 * 8;y = x * 7.89|||a = 2; b = 7; c = a * b|||initial_velocity = 0;acceleration = 9.8;time = 20;final_velocity = initial_velocity + acceleration * time|||format longx = 7 + 10/3 + 5 ^ 1.2|||format shortx = 7 + 10/3 + 5 ^ 1.2|||format bankdaily_wage = 177.45;weekly_wage = daily_wage * 6|||format short e4.678 * 4.9|||format long ex = pi|||format rat4.678 * 4.9|||r = [7 8 9 10 11]|||r = [7 8 9 10 11];t = [2, 3, 4, 5, 6];res = r + t|||c = [7;  8;  9;  10; 11]|||m = [1 2 3; 4 5 6; 7 8 9]"
Learn MATLAB,MATLAB - Commands,"MATLAB - Commands|||Commands for Managing a Session@@@Commands for Working with the System@@@Input and Output Commands@@@Vector, Matrix and Array Commands@@@Plotting Commands@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab","MATLAB is an interactive program for numerical computation and data visualization. You can enter a command by typing it at the MATLAB prompt '>>' on the Command Window.|||In this section, we will provide lists of commonly used general MATLAB commands.|||MATLAB provides various commands for managing a session. The following table provides all such commands −|||MATLAB provides various useful commands for working with the system, like saving the current work in the workspace as a file and loading the file later.|||It also provides various commands for other system-related activities like, displaying date, listing files in the directory, displaying current directory, etc.|||The following table displays some commonly used system-related commands −|||MATLAB provides the following input and output related commands −|||The fscanf and fprintf commands behave like C scanf and printf functions. They support the following format codes −|||The format function has the following forms used for numeric display −|||The following table shows various commands used for working with arrays, matrices and vectors −|||MATLAB provides numerous commands for plotting graphs. The following table shows some of the commonly used commands for plotting −",,,"Command@@@Purpose|||clc@@@Clears command window.|||clear@@@Removes variables from memory.|||exist@@@Checks for existence of file or variable.|||global@@@Declares variables to be global.|||help@@@Searches for a help topic.|||lookfor@@@Searches help entries for a keyword.|||quit@@@Stops MATLAB.|||who@@@Lists current variables.|||whos@@@Lists current variables (long display).&&&Command@@@Purpose|||cd@@@Changes current directory.|||date@@@Displays current date.|||delete@@@Deletes a file.|||diary@@@Switches on/off diary file recording.|||dir@@@Lists all files in current directory.|||load@@@Loads workspace variables from a file.|||path@@@Displays search path.|||pwd@@@Displays current directory.|||save@@@Saves workspace variables in a file.|||type@@@Displays contents of a file.|||what@@@Lists all MATLAB files in the current directory.|||wklread@@@Reads .wk1 spreadsheet file.&&&Command@@@Purpose|||disp@@@Displays contents of an array or string.|||fscanf@@@Read formatted data from a file.|||format@@@Controls screen-display format.|||fprintf@@@Performs formatted writes to screen or file.|||input@@@Displays prompts and waits for input.|||;@@@Suppresses screen printing.&&&Format Code@@@Purpose|||%s@@@Format as a string.|||%d@@@Format as an integer.|||%f@@@Format as a floating point value.|||%e@@@Format as a floating point value in scientific notation.|||%g@@@Format in the most compact form: %f or %e.|||\n@@@Insert a new line in the output string.|||\t@@@Insert a tab in the output string.&&&Format Function@@@Display up to|||format short@@@Four decimal digits (default).|||format long@@@16 decimal digits.|||format short e@@@Five digits plus exponent.|||format long e@@@16 digits plus exponents.|||format bank@@@Two decimal digits.|||format +@@@Positive, negative, or zero.|||format rat@@@Rational approximation.|||format compact@@@Suppresses some line feeds.|||format loose@@@Resets to less compact display mode.&&&Command@@@Purpose|||cat@@@Concatenates arrays.|||find@@@Finds indices of nonzero elements.|||length@@@Computes number of elements.|||linspace@@@Creates regularly spaced vector.|||logspace@@@Creates logarithmically spaced vector.|||max@@@Returns largest element.|||min@@@Returns smallest element.|||prod@@@Product of each column.|||reshape@@@Changes size.|||size@@@Computes array size.|||sort@@@Sorts each column.|||sum@@@Sums each column.|||eye @@@Creates an identity matrix.|||ones@@@Creates an array of ones.|||zeros@@@Creates an array of zeros.|||cross@@@Computes matrix cross products.|||dot@@@Computes matrix dot products.|||det@@@Computes determinant of an array.|||inv@@@Computes inverse of a matrix.|||pinv@@@Computes pseudoinverse of a matrix.|||rank@@@Computes rank of a matrix.|||rref@@@Computes reduced row echelon form.|||cell@@@Creates cell array.|||celldisp@@@Displays cell array.|||cellplot@@@Displays graphical representation of cell array.|||num2cell@@@Converts numeric array to cell array.|||deal@@@Matches input and output lists.|||iscell@@@Identifies cell array.&&&Command@@@Purpose|||axis@@@Sets axis limits.|||fplot@@@Intelligent plotting of functions.|||grid@@@Displays gridlines.|||plot@@@Generates xy plot.|||print@@@Prints plot or saves plot to a file.|||title@@@Puts text at top of plot.|||xlabel@@@Adds text label to x-axis.|||ylabel@@@Adds text label to y-axis.|||axes@@@Creates axes objects.|||close@@@Closes the current plot.|||close all@@@Closes all plots.|||figure@@@Opens a new figure window.|||gtext@@@Enables label placement by mouse.|||hold@@@Freezes current plot.|||legend@@@Legend placement by mouse.|||refresh@@@Redraws current figure window.|||set@@@Specifies properties of objects such as axes.|||subplot@@@Creates plots in subwindows.|||text @@@Places string in figure.|||bar@@@Creates bar chart.|||loglog@@@Creates log-log plot.|||polar@@@Creates polar plot.|||semilogx@@@Creates semilog plot. (logarithmic abscissa).|||semilogy@@@Creates semilog plot. (logarithmic ordinate).|||stairs@@@Creates stairs plot.|||stem@@@Creates stem plot.",
Learn MATLAB,MATLAB - M-Files,MATLAB - M-Files|||The M Files@@@Creating and Running Script File@@@Useful Video Courses|||Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"So far, we have used MATLAB environment as a calculator. However, MATLAB is also a powerful programming language, as well as an interactive computational environment.|||In previous chapters, you have learned how to enter commands from the MATLAB command prompt. MATLAB also allows you to write series of commands into a file and execute the file as complete unit, like writing a function and calling it.|||MATLAB allows writing two kinds of program files −|||Scripts − script files are program files with .m extension. In these files, you write series of commands, which you want to execute together. Scripts do not accept inputs and do not return any outputs. They operate on data in the workspace.|||Functions − functions files are also program files with .m extension. Functions can accept inputs and return outputs. Internal variables are local to the function.|||You can use the MATLAB editor or any other text editor to create your .mfiles. In this section, we will discuss the script files. A script file contains multiple sequential lines of MATLAB commands and function calls. You can run a script by typing its name at the command line.|||To create scripts files, you need to use a text editor. You can open the MATLAB editor in two ways −|||If you are using the command prompt, type edit in the command prompt. This will open the editor. You can directly type edit and then the filename (with .m extension)|||The above command will create the file in default MATLAB directory. If you want to store all program files in a specific folder, then you will have to provide the entire path.|||Let us create a folder named progs. Type the following commands at the command prompt (>>) −|||If you are creating the file for first time, MATLAB prompts you to confirm it. Click Yes.|||Alternatively, if you are using the IDE, choose NEW -> Script. This also opens the editor and creates a file named Untitled. You can name and save the file after typing the code.|||Type the following code in the editor −|||After creating and saving the file, you can run it in two ways −|||Clicking the Run button on the editor window or|||Just typing the filename (without extension) in the command prompt: >> prog1|||The command window prompt displays the result −|||Create a script file, and type the following code −|||When the above code is compiled and executed, it produces the following result −","Scripts − script files are program files with .m extension. In these files, you write series of commands, which you want to execute together. Scripts do not accept inputs and do not return any outputs. They operate on data in the workspace.@@@Functions − functions files are also program files with .m extension. Functions can accept inputs and return outputs. Internal variables are local to the function.|||Using the command prompt@@@Using the IDE|||Clicking the Run button on the editor window or@@@Just typing the filename (without extension) in the command prompt: >> prog1",,,edit Oredit <filename>|||mkdir progs    % create directory progs under default directorychdir progs    % changing the current directory to progsedit  prog1.m  % creating an m file named prog1.m|||NoOfStudents = 6000;TeachingStaff = 150;NonTeachingStaff = 20;Total = NoOfStudents + TeachingStaff ...   + NonTeachingStaff;disp(Total);|||a = 5; b = 7;c = a + bd = c + sin(b)e = 5 * df = exp(-d)
Learn MATLAB,MATLAB - Data Types,MATLAB - Data Types|||Data Types Available in MATLAB@@@Data Type Conversion@@@Determination of Data Types@@@Useful Video Courses|||Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB does not require any type declaration or dimension statements. Whenever MATLAB encounters a new variable name, it creates the variable and allocates appropriate memory space.|||If the variable already exists, then MATLAB replaces the original content with new content and allocates new storage space, where necessary.|||For example,|||The above statement creates a 1-by-1 matrix named 'Total' and stores the value 42 in it.|||MATLAB provides 15 fundamental data types. Every data type stores data that is in the form of a matrix or array. The size of this matrix or array is a minimum of 0-by-0 and this can grow up to a matrix or array of any size.|||The following table shows the most commonly used data types in MATLAB −|||int8|||8-bit signed integer|||uint8|||8-bit unsigned integer|||int16|||16-bit signed integer|||uint16|||16-bit unsigned integer|||int32|||32-bit signed integer|||uint32|||32-bit unsigned integer|||int64|||64-bit signed integer|||uint64|||64-bit unsigned integer|||single|||single precision numerical data|||double|||double precision numerical data|||logical|||logical values of 1 or 0, represent true and false respectively|||char|||character data (strings are stored as vector of characters)|||cell array|||array of indexed cells, each capable of storing an array of a different dimension and data type|||structure|||C-like structures, each structure having named fields capable of storing an array of a different dimension and data type|||function handle|||pointer to a function|||user classes|||objects constructed from a user-defined class|||java classes|||objects constructed from a Java class|||Create a script file with the following code −|||When the above code is compiled and executed, it produces the following result −|||MATLAB provides various functions for converting, a value from one data type to another. The following table shows the data type conversion functions −|||MATLAB provides various functions for identifying data type of a variable. |||Following table provides the functions for determining the data type of a variable −|||Create a script file with the following code −|||When you run the file, it produces the following result −",,,"Sr.No.@@@Data Type & Description|||1@@@int8
8-bit signed integer|||2@@@uint8
8-bit unsigned integer|||3@@@int16
16-bit signed integer|||4@@@uint16
16-bit unsigned integer|||5@@@int32
32-bit signed integer|||6@@@uint32
32-bit unsigned integer|||7@@@int64
64-bit signed integer|||8@@@uint64
64-bit unsigned integer|||9@@@single
single precision numerical data|||10@@@double
double precision numerical data|||11@@@logical
logical values of 1 or 0, represent true and false respectively|||12@@@char
character data (strings are stored as vector of characters)|||13@@@cell array
array of indexed cells, each capable of storing an array of a different dimension and data type|||14@@@structure
C-like structures, each structure having named fields capable of storing an array of a different dimension and data type|||15@@@function handle
pointer to a function|||16@@@user classes
objects constructed from a user-defined class|||17@@@java classes
objects constructed from a Java class&&&Function@@@Purpose|||char@@@Convert to character array (string)|||int2str@@@Convert integer data to string|||mat2str@@@Convert matrix to string|||num2str@@@Convert number to string|||str2double@@@Convert string to double-precision value|||str2num@@@Convert string to number|||native2unicode@@@Convert numeric bytes to Unicode characters|||unicode2native@@@Convert Unicode characters to numeric bytes|||base2dec@@@Convert base N number string to decimal number|||bin2dec@@@Convert binary number string to decimal number|||dec2base@@@Convert decimal to base N number in string|||dec2bin@@@Convert decimal to binary number in string|||dec2hex@@@Convert decimal to hexadecimal number in string|||hex2dec@@@Convert hexadecimal number string to decimal number|||hex2num@@@Convert hexadecimal number string to double-precision number|||num2hex@@@Convert singles and doubles to IEEE hexadecimal strings|||cell2mat@@@Convert cell array to numeric array|||cell2struct@@@Convert cell array to structure array|||cellstr@@@Create cell array of strings from character array|||mat2cell@@@Convert array to cell array with potentially different sized cells|||num2cell@@@Convert array to cell array with consistently sized cells|||struct2cell@@@Convert structure to cell array&&&Function@@@Purpose|||is@@@Detect state|||isa@@@Determine if input is object of specified class|||iscell@@@Determine whether input is cell array|||iscellstr@@@Determine whether input is cell array of strings|||ischar@@@Determine whether item is character array|||isfield@@@Determine whether input is structure array field|||isfloat@@@Determine if input is floating-point array|||ishghandle@@@True for Handle Graphics object handles|||isinteger@@@Determine if input is integer array|||isjava@@@Determine if input is Java object|||islogical@@@Determine if input is logical array|||isnumeric@@@Determine if input is numeric array|||isobject@@@Determine if input is MATLAB object|||isreal@@@Check if input is real array|||isscalar@@@Determine whether input is scalar|||isstr@@@Determine whether input is character array|||isstruct@@@Determine whether input is structure array|||isvector@@@Determine whether input is vector|||class@@@Determine class of object|||validateattributes@@@Check validity of array|||whos@@@List variables in workspace, with sizes and types",str = 'Hello World!'n = 2345d = double(n)un = uint32(789.50)rn = 5678.92347c = int32(rn)|||x = 3isinteger(x)isfloat(x)isvector(x)isscalar(x)isnumeric(x) x = 23.54isinteger(x)isfloat(x)isvector(x)isscalar(x)isnumeric(x) x = [1 2 3]isinteger(x)isfloat(x)isvector(x)isscalar(x) x = 'Hello'isinteger(x)isfloat(x)isvector(x)isscalar(x)isnumeric(x)
Learn MATLAB,MATLAB - Operators,MATLAB - Operators|||Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Bitwise Operations@@@Set Operations@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. MATLAB is designed to operate primarily on whole matrices and arrays. Therefore, operators in MATLAB work both on scalar and non-scalar data. MATLAB allows the following types of elementary operations −|||MATLAB allows two different types of arithmetic operations −|||Matrix arithmetic operations are same as defined in linear algebra. Array operations are executed element by element, both on one-dimensional and multidimensional array.|||The matrix operators and array operators are differentiated by the period (.) symbol. However, as the addition and subtraction operation is same for matrices and arrays, the operator is same for both cases. The following table gives brief description of the operators −|||Show Examples|||+|||Addition or unary plus. A+B adds the values stored in variables A and B. A and B must have the same size, unless one is a scalar. A scalar can be added to a matrix of any size.|||-|||Subtraction or unary minus. A-B subtracts the value of B from A. A and B must have the same size, unless one is a scalar. A scalar can be subtracted from a matrix of any size.|||*|||Matrix multiplication. C = A*B is the linear algebraic product of the matrices A and B. More precisely,||||||For non-scalar A and B, the number of columns of A must be equal to the number of rows of B. A scalar can multiply a matrix of any size.|||.*|||Array multiplication. A.*B is the element-by-element product of the arrays A and B. A and B must have the same size, unless one of them is a scalar.|||/|||Slash or matrix right division. B/A is roughly the same as B*inv(A). More precisely, B/A = (A'\B')'.|||./|||Array right division. A./B is the matrix with elements A(i,j)/B(i,j). A and B must have the same size, unless one of them is a scalar.|||\|||Backslash or matrix left division. If A is a square matrix, A\B is roughly the same as inv(A)*B, except it is computed in a different way. If A is an n-by-n matrix and B is a column vector with n components, or a matrix with several such columns, then X = A\B is the solution to the equation AX = B. A warning message is displayed if A is badly scaled or nearly singular.|||.\|||Array left division. A.\B is the matrix with elements B(i,j)/A(i,j). A and B must have the same size, unless one of them is a scalar.|||^|||Matrix power. X^p is X to the power p, if p is a scalar. If p is an integer, the power is computed by repeated squaring. If the integer is negative, X is inverted first. For other values of p, the calculation involves eigenvalues and eigenvectors, such that if [V,D] = eig(X), then X^p = V*D.^p/V.|||.^|||Array power. A.^B is the matrix with elements A(i,j) to the B(i,j) power. A and B must have the same size, unless one of them is a scalar.|||'|||Matrix transpose. A' is the linear algebraic transpose of A. For complex matrices, this is the complex conjugate transpose.|||.'|||Array transpose. A.' is the array transpose of A. For complex matrices, this does not involve conjugation.|||Relational operators can also work on both scalar and non-scalar data. Relational operators for arrays perform element-by-element comparisons between two arrays and return a logical array of the same size, with elements set to logical 1 (true) where the relation is true and elements set to logical 0 (false) where it is not.|||The following table shows the relational operators available in MATLAB −|||Show Examples|||<|||Less than|||<=|||Less than or equal to|||>|||Greater than|||>=|||Greater than or equal to|||==|||Equal to|||~=|||Not equal to|||MATLAB offers two types of logical operators and functions −|||Element-wise − These operators operate on corresponding elements of logical arrays.|||Short-circuit − These operators operate on scalar and, logical expressions.|||Element-wise logical operators operate element-by-element on logical arrays. The symbols &, |, and ~ are the logical array operators AND, OR, and NOT.|||Short-circuit logical operators allow short-circuiting on logical operations. The symbols && and || are the logical short-circuit operators AND and OR.|||Show Examples|||Bitwise operators work on bits and perform bit-by-bit operation. The truth tables for &, |, and ^ are as follows −|||Assume if A = 60; and B = 13; Now in binary format they will be as follows −|||A = 0011 1100|||B = 0000 1101|||-----------------|||A&B = 0000 1100|||A|B = 0011 1101|||A^B = 0011 0001|||~A  = 1100 0011|||MATLAB provides various functions for bit-wise operations like 'bitwise and', 'bitwise or' and 'bitwise not' operations, shift operation, etc.|||The following table shows the commonly used bitwise operations −|||Show Examples|||MATLAB provides various functions for set operations, like union, intersection and testing for set membership, etc.|||The following table shows some commonly used set operations −|||Show Examples|||intersect(A,B)|||Set intersection of two arrays; returns the values common to both A and B. The values returned are in sorted order.|||intersect(A,B,'rows')|||Treats each row of A and each row of B as single entities and returns the rows common to both A and B. The rows of the returned matrix are in sorted order.|||ismember(A,B)|||Returns an array the same size as A, containing 1 (true) where the elements of A are found in B. Elsewhere, it returns 0 (false).|||ismember(A,B,'rows')|||Treats each row of A and each row of B as single entities and returns a vector containing 1 (true) where the rows of matrix A are also rows of B. Elsewhere, it returns 0 (false).|||issorted(A)|||Returns logical 1 (true) if the elements of A are in sorted order and logical 0 (false) otherwise. Input A can be a vector or an N-by-1 or 1-by-N cell array of strings. A is considered to be sorted if A and the output of sort(A) are equal.|||issorted(A, 'rows')|||Returns logical 1 (true) if the rows of two-dimensional matrix A is in sorted order, and logical 0 (false) otherwise. Matrix A is considered to be sorted if A and the output of sortrows(A) are equal.|||setdiff(A,B)|||Sets difference of two arrays; returns the values in A that are not in B. The values in the returned array are in sorted order.|||setdiff(A,B,'rows')|||Treats each row of A and each row of B as single entities and returns the rows from A that are not in B. The rows of the returned matrix are in sorted order.|||The 'rows' option does not support cell arrays.|||setxor|||Sets exclusive OR of two arrays|||union|||Sets union of two arrays|||unique|||Unique values in array","Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Bitwise Operations@@@Set Operations|||Matrix arithmetic operations@@@Array arithmetic operations|||Element-wise − These operators operate on corresponding elements of logical arrays.@@@Short-circuit − These operators operate on scalar and, logical expressions.",,"Sr.No.@@@Operator & Description|||1@@@+
Addition or unary plus. A+B adds the values stored in variables A and B. A and B must have the same size, unless one is a scalar. A scalar can be added to a matrix of any size.|||2@@@-
Subtraction or unary minus. A-B subtracts the value of B from A. A and B must have the same size, unless one is a scalar. A scalar can be subtracted from a matrix of any size.|||3@@@*
Matrix multiplication. C = A*B is the linear algebraic product of the matrices A and B. More precisely,

For non-scalar A and B, the number of columns of A must be equal to the number of rows of B. A scalar can multiply a matrix of any size.|||4@@@.*
Array multiplication. A.*B is the element-by-element product of the arrays A and B. A and B must have the same size, unless one of them is a scalar.|||5@@@/
Slash or matrix right division. B/A is roughly the same as B*inv(A). More precisely, B/A = (A'\B')'.|||6@@@./
Array right division. A./B is the matrix with elements A(i,j)/B(i,j). A and B must have the same size, unless one of them is a scalar.|||7@@@\
Backslash or matrix left division. If A is a square matrix, A\B is roughly the same as inv(A)*B, except it is computed in a different way. If A is an n-by-n matrix and B is a column vector with n components, or a matrix with several such columns, then X = A\B is the solution to the equation AX = B. A warning message is displayed if A is badly scaled or nearly singular.|||8@@@.\
Array left division. A.\B is the matrix with elements B(i,j)/A(i,j). A and B must have the same size, unless one of them is a scalar.|||9@@@^
Matrix power. X^p is X to the power p, if p is a scalar. If p is an integer, the power is computed by repeated squaring. If the integer is negative, X is inverted first. For other values of p, the calculation involves eigenvalues and eigenvectors, such that if [V,D] = eig(X), then X^p = V*D.^p/V.|||10@@@.^
Array power. A.^B is the matrix with elements A(i,j) to the B(i,j) power. A and B must have the same size, unless one of them is a scalar.|||11@@@'
Matrix transpose. A' is the linear algebraic transpose of A. For complex matrices, this is the complex conjugate transpose.|||12@@@.'
Array transpose. A.' is the array transpose of A. For complex matrices, this does not involve conjugation.&&&Sr.No.@@@Operator & Description|||1@@@<
Less than|||2@@@<=
Less than or equal to|||3@@@>
Greater than|||4@@@>=
Greater than or equal to|||5@@@==
Equal to|||6@@@~=
Not equal to&&&p@@@q@@@p & q@@@p | q@@@p ^ q|||0@@@0@@@0@@@0@@@0|||0@@@1@@@0@@@1@@@1|||1@@@1@@@1@@@1@@@0|||1@@@0@@@0@@@1@@@1&&&Function@@@Purpose |||bitand(a, b)@@@Bit-wise AND of integers a and b|||bitcmp(a)@@@Bit-wise complement of a|||bitget(a,pos)@@@Get bit at specified position pos, in the integer array a|||bitor(a, b)@@@Bit-wise OR of integers a and b|||bitset(a, pos)@@@Set bit at specific location pos of a|||bitshift(a, k)@@@Returns a shifted to the left by k bits, equivalent to multiplying by 2k. Negative values of k correspond to shifting bits right or dividing by 2|k| and rounding to the nearest integer towards negative infinite. Any overflow bits are truncated.|||bitxor(a, b)@@@Bit-wise XOR of integers a and b|||swapbytes@@@Swap byte ordering&&&Sr.No.@@@Function & Description|||1@@@intersect(A,B)
Set intersection of two arrays; returns the values common to both A and B. The values returned are in sorted order.|||2@@@intersect(A,B,'rows')
Treats each row of A and each row of B as single entities and returns the rows common to both A and B. The rows of the returned matrix are in sorted order.|||3@@@ismember(A,B)
Returns an array the same size as A, containing 1 (true) where the elements of A are found in B. Elsewhere, it returns 0 (false).|||4@@@ismember(A,B,'rows')
Treats each row of A and each row of B as single entities and returns a vector containing 1 (true) where the rows of matrix A are also rows of B. Elsewhere, it returns 0 (false).|||5@@@issorted(A)
Returns logical 1 (true) if the elements of A are in sorted order and logical 0 (false) otherwise. Input A can be a vector or an N-by-1 or 1-by-N cell array of strings. A is considered to be sorted if A and the output of sort(A) are equal.|||6@@@issorted(A, 'rows')
Returns logical 1 (true) if the rows of two-dimensional matrix A is in sorted order, and logical 0 (false) otherwise. Matrix A is considered to be sorted if A and the output of sortrows(A) are equal.|||7@@@setdiff(A,B)
Sets difference of two arrays; returns the values in A that are not in B. The values in the returned array are in sorted order.|||8@@@setdiff(A,B,'rows')
Treats each row of A and each row of B as single entities and returns the rows from A that are not in B. The rows of the returned matrix are in sorted order.
The 'rows' option does not support cell arrays.
|||9@@@setxor
Sets exclusive OR of two arrays|||10@@@union
Sets union of two arrays|||11@@@unique
Unique values in array",
Learn MATLAB,MATLAB - Decision Making,MATLAB - Decision Making|||Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Decision making structures require that the programmer should specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.|||Following is the general form of a typical decision making structure found in most of the programming languages −|||MATLAB provides following types of decision making statements. Click the following links to check their detail −|||An if ... end statement consists of a boolean expression followed by one or more statements.|||An if statement can be followed by an optional else statement, which executes when the boolean expression is false.|||An if statement can be followed by one (or more) optional elseif... and an else statement, which is very useful to test various conditions.|||You can use one if or elseif statement inside another if or elseif statement(s).|||A switch statement allows a variable to be tested for equality against a list of values.|||You can use one switch statement inside another switch statement(s).",,,"Sr.No.@@@Statement & Description|||1@@@if ... end statement
An if ... end statement consists of a boolean expression followed by one or more statements.|||2@@@if...else...end statement
An if statement can be followed by an optional else statement, which executes when the boolean expression is false.|||3@@@If... elseif...elseif...else...end statements
An if statement can be followed by one (or more) optional elseif... and an else statement, which is very useful to test various conditions.|||4@@@nested if statements
You can use one if or elseif statement inside another if or elseif statement(s).|||5@@@switch statement
A switch statement allows a variable to be tested for equality against a list of values.|||6@@@nested switch statements
You can use one switch statement inside another switch statement(s).",
Learn MATLAB,MATLAB - Loop Types,MATLAB - Loop Types|||Loop Control Statements@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially. The first statement in a function is executed first, followed by the second, and so on.|||Programming languages provide various control structures that allow for more complicated execution paths.|||A loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages −|||MATLAB provides following types of loops to handle looping requirements. Click the following links to check their detail −|||Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.|||Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.|||You can use one or more loops inside any another loop.|||Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.|||MATLAB supports the following control statements. Click the following links to check their detail.|||Terminates the loop statement and transfers execution to the statement immediately following the loop.|||Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.",,,"Sr.No.@@@Loop Type & Description|||1@@@while loop
Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.|||2@@@for loop
Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.|||3@@@nested loops
You can use one or more loops inside any another loop.&&&Sr.No.@@@Control Statement & Description|||1@@@break statement
Terminates the loop statement and transfers execution to the statement immediately following the loop.|||2@@@continue statement
Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.",
Learn MATLAB,MATLAB - Vectors,MATLAB - Vectors|||Row Vectors@@@Column Vectors@@@Referencing the Elements of a Vector@@@Vector Operations@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"A vector is a one-dimensional array of numbers. MATLAB allows creating two types of vectors −|||Row vectors are created by enclosing the set of elements in square brackets, using space or comma to delimit the elements.|||MATLAB will execute the above statement and return the following result −|||Column vectors are created by enclosing the set of elements in square brackets, using semicolon to delimit the elements.|||MATLAB will execute the above statement and return the following result −|||You can reference one or more of the elements of a vector in several ways. The ith component of a vector v is referred as v(i). For example −|||MATLAB will execute the above statement and return the following result −|||When you reference a vector with a colon, such as v(:), all the components of the vector are listed.|||MATLAB will execute the above statement and return the following result −|||MATLAB allows you to select a range of elements from a vector.|||For example, let us create a row vector rv of 9 elements, then we will reference the elements 3 to 7 by writing rv(3:7) and create a new vector named sub_rv.|||MATLAB will execute the above statement and return the following result −|||In this section, let us discuss the following vector operations −|||Addition and Subtraction of Vectors|||Scalar Multiplication of Vectors|||Transpose of a Vector|||Appending Vectors|||Magnitude of a Vector|||Vector Dot Product|||Vectors with Uniformly Spaced Elements",Row vectors@@@Column vectors|||Addition and Subtraction of Vectors@@@Scalar Multiplication of Vectors@@@Transpose of a Vector@@@Appending Vectors@@@Magnitude of a Vector@@@Vector Dot Product@@@Vectors with Uniformly Spaced Elements,,,r = [7 8 9 10 11]|||c = [7;  8;  9;  10; 11]|||v = [ 1; 2; 3; 4; 5; 6];	% creating a column vector of 6 elementsv(3)|||v = [ 1; 2; 3; 4; 5; 6];	% creating a column vector of 6 elementsv(:)|||rv = [1 2 3 4 5 6 7 8 9];sub_rv = rv(3:7)
Learn MATLAB,MATLAB - Matrix,MATLAB - Matrix|||Referencing the Elements of a Matrix@@@Deleting a Row or a Column in a Matrix@@@Matrix Operations@@@Useful Video Courses|||Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"A matrix is a two-dimensional array of numbers.|||In MATLAB, you create a matrix by entering elements in each row as comma or space delimited numbers and using semicolons to mark the end of each row.|||For example, let us create a 4-by-5 matrix a −|||MATLAB will execute the above statement and return the following result −|||To reference an element in the mth row and nth column, of a matrix mx, we write −|||For example, to refer to the element in the 2nd row and 5th column, of the matrix a, as created in the last section, we type −|||MATLAB will execute the above statement and return the following result −|||To reference all the elements in the mth column we type A(:,m).|||Let us create a column vector v, from the elements of the 4th row of the matrix a −|||MATLAB will execute the above statement and return the following result −|||You can also select the elements in the mth through nth columns, for this we write −|||Let us create a smaller matrix taking the elements from the second and third columns −|||MATLAB will execute the above statement and return the following result −|||In the same way, you can create a sub-matrix taking a sub-part of a matrix.|||MATLAB will execute the above statement and return the following result −|||In the same way, you can create a sub-matrix taking a sub-part of a matrix.|||For example, let us create a sub-matrix sa taking the inner subpart of a −|||To do this, write −|||MATLAB will execute the above statement and return the following result −|||You can delete an entire row or column of a matrix by assigning an empty set of square braces [] to that row or column. Basically, [] denotes an empty array.|||For example, let us delete the fourth row of a −|||MATLAB will execute the above statement and return the following result −|||Next, let us delete the fifth column of a −|||MATLAB will execute the above statement and return the following result −|||In this example, let us create a 3-by-3 matrix m, then we will copy the second and third rows of this matrix twice to create a 4-by-3 matrix.|||Create a script file with the following code −|||When you run the file, it displays the following result −|||In this section, let us discuss the following basic and commonly used matrix operations −|||Addition and Subtraction of Matrices|||Division of Matrices|||Scalar Operations of Matrices|||Transpose of a Matrix|||Concatenating Matrices |||Matrix Multiplication|||Determinant of a Matrix|||Inverse of a Matrix",Addition and Subtraction of Matrices@@@Division of Matrices@@@Scalar Operations of Matrices@@@Transpose of a Matrix@@@Concatenating Matrices @@@Matrix Multiplication@@@Determinant of a Matrix@@@Inverse of a Matrix,,,"a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8]|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(2,5)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];v = a(:,4)|||a(:,m:n)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(:, 2:3)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(:, 2:3)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];sa = a(2:3,2:4)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a( 4 , : ) = []|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(: , 5)=[]|||a = [ 1 2 3 ; 4 5 6; 7 8 9];new_mat = a([2,3,2,3],:)"
Learn MATLAB,MATLAB - Arrays,"MATLAB - Arrays|||Special Arrays in MATLAB@@@A Magic Square@@@Multidimensional Arrays@@@Array Functions@@@Sorting Arrays@@@Cell Array@@@Accessing Data in Cell Arrays@@@Useful Video Courses|||Example@@@Examples@@@Where,@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab","All variables of all data types in MATLAB are multidimensional arrays. A vector is a one-dimensional array and a matrix is a two-dimensional array.|||We have already discussed vectors and matrices. In this chapter, we will discuss multidimensional arrays. However, before that, let us discuss some special types of arrays.|||In this section, we will discuss some functions that create some special arrays. For all these functions, a single argument creates a square array, double arguments create rectangular array.|||The zeros() function creates an array of all zeros −|||For example −|||MATLAB will execute the above statement and return the following result −|||The ones() function creates an array of all ones −|||For example −|||MATLAB will execute the above statement and return the following result −|||The eye() function creates an identity matrix.|||For example −|||MATLAB will execute the above statement and return the following result −|||The rand() function creates an array of uniformly distributed random numbers on (0,1) −|||For example −|||MATLAB will execute the above statement and return the following result −|||A magic square is a square that produces the same sum, when its elements are added row-wise, column-wise or diagonally.|||The magic() function creates a magic square array. It takes a singular argument that gives the size of the square. The argument must be a scalar greater than or equal to 3.|||MATLAB will execute the above statement and return the following result −|||An array having more than two dimensions is called a multidimensional array in MATLAB. Multidimensional arrays in MATLAB are an extension of the normal two-dimensional matrix.|||Generally to generate a multidimensional array, we first create a two-dimensional array and extend it.|||For example, let's create a two-dimensional array a.|||MATLAB will execute the above statement and return the following result −|||The array a is a 3-by-3 array; we can add a third dimension to a, by providing the values like −|||MATLAB will execute the above statement and return the following result −|||We can also create multidimensional arrays using the ones(), zeros() or the rand() functions.|||For example,|||MATLAB will execute the above statement and return the following result −|||We can also use the cat() function to build multidimensional arrays. It concatenates a list of arrays along a specified dimension −|||Syntax for the cat() function is −|||Where,|||B is the new array created|||A1, A2, ... are the arrays to be concatenated|||dim is the dimension along which to concatenate the arrays|||Create a script file and type the following code into it −|||When you run the file, it displays −|||MATLAB provides the following functions to sort, rotate, permute, reshape, or shift array contents. |||The following examples illustrate some of the functions mentioned above.|||Length, Dimension and Number of elements −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Circular Shifting of the Array Elements −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Cell arrays are arrays of indexed cells where each cell can store an array of a different dimensions and data types.|||The cell function is used for creating a cell array. Syntax for the cell function is −|||C is the cell array;|||dim is a scalar integer or vector of integers that specifies the dimensions of cell array C;|||dim1, ... , dimN are scalar integers that specify the dimensions of C;|||obj is One of the following −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||There are two ways to refer to the elements of a cell array −|||When you enclose the indices in first bracket, it refers to the set of cells.|||Cell array indices in smooth parentheses refer to sets of cells.|||For example −|||MATLAB will execute the above statement and return the following result −|||You can also access the contents of cells by indexing with curly braces.|||For example −|||MATLAB will execute the above statement and return the following result −","B is the new array created@@@A1, A2, ... are the arrays to be concatenated@@@dim is the dimension along which to concatenate the arrays|||C is the cell array;@@@dim is a scalar integer or vector of integers that specifies the dimensions of cell array C;@@@dim1, ... , dimN are scalar integers that specify the dimensions of C;@@@obj is One of the following −

Java array or object
.NET array of type System.String or System.Object

@@@Java array or object@@@.NET array of type System.String or System.Object|||Java array or object@@@.NET array of type System.String or System.Object|||Enclosing the indices in first bracket (), to refer to sets of cells@@@Enclosing the indices in braces {}, to refer to the data within individual cells",,Function@@@Purpose|||length@@@Length of vector or largest array dimension|||ndims@@@Number of array dimensions|||numel@@@Number of array elements|||size@@@Array dimensions|||iscolumn@@@Determines whether input is column vector|||isempty@@@Determines whether array is empty|||ismatrix@@@Determines whether input is matrix|||isrow@@@Determines whether input is row vector|||isscalar@@@Determines whether input is scalar|||isvector@@@Determines whether input is vector|||blkdiag@@@Constructs block diagonal matrix from input arguments|||circshift@@@Shifts array circularly|||ctranspose@@@Complex conjugate transpose|||diag@@@Diagonal matrices and diagonals of matrix|||flipdim@@@Flips array along specified dimension|||fliplr@@@Flips matrix from left to right|||flipud@@@Flips matrix up to down|||ipermute@@@Inverses permute dimensions of N-D array|||permute@@@Rearranges dimensions of N-D array|||repmat@@@Replicates and tile array|||reshape@@@Reshapes array|||rot90@@@Rotates matrix 90 degrees|||shiftdim@@@Shifts dimensions|||issorted@@@Determines whether set elements are in sorted order|||sort@@@Sorts array elements in ascending or descending order|||sortrows@@@Sorts rows in ascending order|||squeeze@@@Removes singleton dimensions|||transpose@@@Transpose|||vectorize@@@Vectorizes expression,"zeros(5)|||ones(4,3)|||eye(4)|||rand(3, 5)|||magic(4)|||a = [7 9 5; 6 1 9; 4 3 2]|||a(:, :, 2)= [ 1 2 3; 4 5 6; 7 8 9]|||b = rand(4,3,2)|||B = cat(dim, A1, A2...)|||a = [9 8 7; 6 5 4; 3 2 1];b = [1 2 3; 4 5 6; 7 8 9];c = cat(3, a, b, [ 2 3 1; 4 7 8; 3 9 0])|||x = [7.1, 3.4, 7.2, 28/4, 3.6, 17, 9.4, 8.9];length(x)      % length of x vectory = rand(3, 4, 5, 2);ndims(y)       % no of dimensions in array ys = ['Zara', 'Nuha', 'Shamim', 'Riz', 'Shadab'];numel(s)       % no of elements in s|||a = [1 2 3; 4 5 6; 7 8 9]  % the original array ab = circshift(a,1)         %  circular shift first dimension values down by 1.c = circshift(a,[1 -1])    % circular shift first dimension values % down by 1                            % and second dimension values to the left % by 1.|||v = [ 23 45 12 9 5 0 19 17]  % horizontal vectorsort(v)                      % sorting vm = [2 6 4; 5 3 9; 2 0 1]    % two dimensional arraysort(m, 1)                   % sorting m along the rowsort(m, 2)                   % sorting m along the column|||C = cell(dim)C = cell(dim1,...,dimN)D = cell(obj)|||c = cell(2, 5);c = {'Red', 'Blue', 'Green', 'Yellow', 'White'; 1 2 3 4 5}|||c = {'Red', 'Blue', 'Green', 'Yellow', 'White'; 1 2 3 4 5};c(1:2,1:2)|||c = {'Red', 'Blue', 'Green', 'Yellow', 'White'; 1 2 3 4 5};c{1, 2:4}"
Learn MATLAB,MATLAB - Colon Notation,MATLAB - Colon Notation|||Example@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"The colon(:) is one of the most useful operator in MATLAB. It is used to create vectors, subscript arrays, and specify for iterations.|||If you want to create a row vector, containing integers from 1 to 10, you write −|||MATLAB executes the statement and returns a row vector containing the integers from 1 to 10 −|||If you want to specify an increment value other than one, for example −|||MATLAB executes the statement and returns the following result −|||Let us take another example −|||MATLAB executes the statement and returns the following result −|||You can use the colon operator to create a vector of indices to select rows, columns or elements of arrays.|||The following table describes its use for this purpose (let us have a matrix A) −|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −",,,"Format@@@Purpose|||A(:,j)@@@is the jth column of A.|||A(i,:)@@@is the ith row of A.|||A(:,:)@@@is the equivalent two-dimensional array. For matrices this is the same as A.|||A(j:k)@@@is A(j), A(j+1),...,A(k).|||A(:,j:k)@@@is A(:,j), A(:,j+1),...,A(:,k).|||A(:,:,k)@@@is the kth page of three-dimensional array A.|||A(i,j,k,:)@@@is a vector in four-dimensional array A. The vector includes A(i,j,k,1), A(i,j,k,2), A(i,j,k,3), and so on.|||A(:)@@@is all the elements of A, regarded as a single column. On the left side of an assignment statement, A(:) fills A, preserving its shape from before. In this case, the right side must contain the same number of elements as A.","1:10|||100: -5: 50|||0:pi/8:pi|||A = [1 2 3 4; 4 5 6 7; 7 8 9 10]A(:,2)      % second column of AA(:,2:3)    % second and third column of AA(2:3,2:3)  % second and third rows and second and third columns"
Learn MATLAB,MATLAB - Numbers,MATLAB - Numbers|||Conversion to Various Numeric Data Types@@@Smallest and Largest Integers@@@Smallest and Largest Floating Point Numbers@@@Useful Video Courses|||Example@@@Example@@@Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB supports various numeric classes that include signed and unsigned integers and single-precision and double-precision floating-point numbers. By default, MATLAB stores all numeric values as double-precision floating point numbers.|||You can choose to store any number or array of numbers as integers or as single-precision numbers.|||All numeric types support basic array operations and mathematical operations.|||MATLAB provides the following functions to convert to various numeric data types −|||Create a script file and type the following code −|||When you run the file, it shows the following result −|||Let us extend the previous example a little more. Create a script file and type the following code −|||When you run the file, it shows the following result −|||The functions intmax() and intmin() return the maximum and minimum values that can be represented with all types of integer numbers.|||Both the functions take the integer data type as the argument, for example, intmax(int8) or intmin(int64) and return the maximum and minimum values that you can represent with the integer data type.|||The following example illustrates how to obtain the smallest and largest values of integers. Create a script file and write the following code in it −|||When you run the file, it shows the following result −|||The functions realmax() and realmin() return the maximum and minimum values that can be represented with floating point numbers.|||Both the functions when called with the argument 'single', return the maximum and minimum values that you can represent with the single-precision data type and when called with the argument 'double', return the maximum and minimum values that you can represent with the double-precision data type.|||The following example illustrates how to obtain the smallest and largest floating point numbers. Create a script file and write the following code in it −|||When you run the file, it displays the following result −",,,Function @@@Purpose |||double@@@Converts to double precision number|||single@@@Converts to single precision number|||int8@@@Converts to 8-bit signed integer|||int16@@@Converts to 16-bit signed integer|||int32@@@Converts to 32-bit signed integer|||int64@@@Converts to 64-bit signed integer|||uint8@@@Converts to 8-bit unsigned integer|||uint16@@@Converts to 16-bit unsigned integer|||uint32@@@Converts to 32-bit unsigned integer|||uint64@@@Converts to 64-bit unsigned integer,"x = single([5.32 3.47 6.28]) .* 7.5x = double([5.32 3.47 6.28]) .* 7.5x = int8([5.32 3.47 6.28]) .* 7.5x = int16([5.32 3.47 6.28]) .* 7.5x = int32([5.32 3.47 6.28]) .* 7.5x = int64([5.32 3.47 6.28]) .* 7.5|||x = int32([5.32 3.47 6.28]) .* 7.5x = int64([5.32 3.47 6.28]) .* 7.5x = num2cell(x)|||% displaying the smallest and largest signed integer datastr = 'The range for int8 is:\n\t%d to %d ';sprintf(str, intmin('int8'), intmax('int8'))str = 'The range for int16 is:\n\t%d to %d ';sprintf(str, intmin('int16'), intmax('int16'))str = 'The range for int32 is:\n\t%d to %d ';sprintf(str, intmin('int32'), intmax('int32'))str = 'The range for int64 is:\n\t%d to %d ';sprintf(str, intmin('int64'), intmax('int64')) % displaying the smallest and largest unsigned integer datastr = 'The range for uint8 is:\n\t%d to %d ';sprintf(str, intmin('uint8'), intmax('uint8'))str = 'The range for uint16 is:\n\t%d to %d ';sprintf(str, intmin('uint16'), intmax('uint16'))str = 'The range for uint32 is:\n\t%d to %d ';sprintf(str, intmin('uint32'), intmax('uint32'))str = 'The range for uint64 is:\n\t%d to %d ';sprintf(str, intmin('uint64'), intmax('uint64'))|||% displaying the smallest and largest single-precision % floating point numberstr = 'The range for single is:\n\t%g to %g and\n\t %g to  %g';sprintf(str, -realmax('single'), -realmin('single'), ...   realmin('single'), realmax('single'))% displaying the smallest and largest double-precision % floating point numberstr = 'The range for double is:\n\t%g to %g and\n\t %g to  %g';sprintf(str, -realmax('double'), -realmin('double'), ...   realmin('double'), realmax('double'))"
Learn MATLAB,MATLAB - Strings,MATLAB - Strings|||Example@@@Rectangular Character Array@@@Combining Strings into a Cell Array@@@String Functions in MATLAB@@@Useful Video Courses|||Example@@@Example@@@Example@@@Examples|||Formatting Strings@@@Joining Strings@@@Finding and Replacing Strings@@@Comparing Strings@@@Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Creating a character string is quite simple in MATLAB. In fact, we have used it many times. For example, you type the following in the command prompt −|||MATLAB will execute the above statement and return the following result −|||MATLAB considers all variables as arrays, and strings are considered as character arrays. Let us use the whos command to check the variable created above −|||MATLAB will execute the above statement and return the following result −|||Interestingly, you can use numeric conversion functions like uint8 or uint16 to convert the characters in the string to their numeric codes. The char function converts the integer vector back to characters −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||The strings we have discussed so far are one-dimensional character arrays; however, we need to store more than that. We need to store more dimensional textual data in our program. This is achieved by creating rectangular character arrays.|||Simplest way of creating a rectangular character array is by concatenating two or more one-dimensional character arrays, either vertically or horizontally as required.|||You can combine strings vertically in either of the following ways −|||Using the MATLAB concatenation operator [] and separating each row with a semicolon (;). Please note that in this method each row must contain the same number of characters. For strings with different lengths, you should pad with space characters as needed.|||Using the char function. If the strings are of different lengths, char pads the shorter strings with trailing blanks so that each row has the same number of characters.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||You can combine strings horizontally in either of the following ways −|||Using the MATLAB concatenation operator, [] and separating the input strings with a comma or a space. This method preserves any trailing spaces in the input arrays.|||Using the string concatenation function, strcat. This method removes trailing spaces in the inputs.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||From our previous discussion, it is clear that combining strings with different lengths could be a pain as all strings in the array has to be of the same length. We have used blank spaces at the end of strings to equalize their length.|||However, a more efficient way to combine the strings is to convert the resulting array into a cell array.|||MATLAB cell array can hold different sizes and types of data in an array. Cell arrays provide a more flexible way to store strings of varying length.|||The cellstr function converts a character array into a cell array of strings.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||MATLAB provides numerous string functions creating, combining, parsing, comparing and manipulating strings.|||Following table provides brief description of the string functions in MATLAB −|||The following examples illustrate some of the above-mentioned string functions −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −","Using the MATLAB concatenation operator [] and separating each row with a semicolon (;). Please note that in this method each row must contain the same number of characters. For strings with different lengths, you should pad with space characters as needed.@@@Using the char function. If the strings are of different lengths, char pads the shorter strings with trailing blanks so that each row has the same number of characters.|||Using the MATLAB concatenation operator, [] and separating the input strings with a comma or a space. This method preserves any trailing spaces in the input arrays.@@@Using the string concatenation function, strcat. This method removes trailing spaces in the inputs.",,"Function@@@Purpose@@@Functions for storing text in character arrays, combine character arrays, etc.@@@Functions for identifying parts of strings, find and replace substrings@@@Functions for string comparison@@@Functions for changing string to upper- or lowercase, creating or removing white space||||||blanks@@@Create string of blank characters|||cellstr@@@Create cell array of strings from character array|||char@@@Convert to character array (string)|||iscellstr@@@Determine whether input is cell array of strings|||ischar@@@Determine whether item is character array|||sprintf@@@Format data into string|||strcat@@@Concatenate strings horizontally|||strjoin@@@Join strings in cell array into single string||||||ischar@@@Determine whether item is character array|||isletter@@@Array elements that are alphabetic letters|||isspace@@@Array elements that are space characters|||isstrprop@@@Determine whether string is of specified category|||sscanf@@@Read formatted data from string|||strfind@@@Find one string within another|||strrep@@@Find and replace substring|||strsplit@@@Split string at specified delimiter|||strtok@@@Selected parts of string|||validatestring@@@Check validity of text string|||symvar@@@Determine symbolic variables in expression|||regexp@@@Match regular expression (case sensitive)|||regexpi@@@Match regular expression (case insensitive)|||regexprep@@@Replace string using regular expression|||regexptranslate@@@Translate string into regular expression||||||strcmp@@@Compare strings (case sensitive)|||strcmpi@@@Compare strings (case insensitive)|||strncmp@@@Compare first n characters of strings (case sensitive)|||strncmpi@@@Compare first n characters of strings (case insensitive)||||||deblank@@@Strip trailing blanks from end of string|||strtrim@@@Remove leading and trailing white space from string|||lower@@@Convert string to lowercase|||upper@@@Convert string to uppercase|||strjust@@@Justify character array","my_string = 'Tutorials Point'|||whos|||my_string = 'Tutorial''s Point';str_ascii = uint8(my_string)        % 8-bit ascii valuesstr_back_to_char= char(str_ascii)  str_16bit = uint16(my_string)       % 16-bit ascii valuesstr_back_to_char = char(str_16bit)  |||doc_profile = ['Zara Ali                             '; ...               'Sr. Surgeon                          '; ...               'R N Tagore Cardiology Research Center']doc_profile = char('Zara Ali', 'Sr. Surgeon', ...                  'RN Tagore Cardiology Research Center')|||name =     'Zara Ali                             ';position = 'Sr. Surgeon                          '; worksAt =  'R N Tagore Cardiology Research Center';profile = [name ', ' position ', ' worksAt]profile = strcat(name, ', ', position, ', ', worksAt)|||name =     'Zara Ali                             ';position = 'Sr. Surgeon                          '; worksAt =  'R N Tagore Cardiology Research Center';profile = char(name, position, worksAt);profile = cellstr(profile);disp(profile)|||A = pi*1000*ones(1,5);sprintf(' %f \n %.2f \n %+.2f \n %12.2f \n %012.2f \n', A)|||%cell array of stringsstr_array = {'red','blue','green', 'yellow', 'orange'};% Join strings in cell array into single stringstr1 = strjoin(str_array, ""-"")str2 = strjoin(str_array, "","")|||students = {'Zara Ali', 'Neha Bhatnagar', ...            'Monica Malik', 'Madhu Gautam', ...            'Madhu Sharma', 'Bhawna Sharma',...            'Nuha Ali', 'Reva Dutta', ...            'Sunaina Ali', 'Sofia Kabir'}; % The strrep function searches and replaces sub-string.new_student = strrep(students(8), 'Reva', 'Poulomi')% Display first namesfirst_names = strtok(students)|||str1 = 'This is test'str2 = 'This is text'if (strcmp(str1, str2))   sprintf('%s and %s are equal', str1, str2)else   sprintf('%s and %s are not equal', str1, str2)end"
Learn MATLAB,MATLAB - Functions,MATLAB - Functions|||Example@@@Anonymous Functions@@@Primary and Sub-Functions@@@Nested Functions@@@Private Functions@@@Global Variables@@@Useful Video Courses|||Example@@@Example@@@Example@@@Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"A function is a group of statements that together perform a task. In MATLAB, functions are defined in separate files. The name of the file and of the function should be the same.|||Functions operate on variables within their own workspace, which is also called the local workspace, separate from the workspace you access at the MATLAB command prompt which is called the base workspace.|||Functions can accept more than one input arguments and may return more than one output arguments.|||Syntax of a function statement is −|||The following function named mymax should be written in a file named mymax.m. It takes five numbers as argument and returns the maximum of the numbers.|||Create a function file, named mymax.m and type the following code in it −|||The first line of a function starts with the keyword function. It gives the name of the function and order of arguments. In our example, the mymax function has five input arguments and one output argument.|||The comment lines that come right after the function statement provide the help text. These lines are printed when you type −|||MATLAB will execute the above statement and return the following result −|||You can call the function as −|||MATLAB will execute the above statement and return the following result −|||An anonymous function is like an inline function in traditional programming languages, defined within a single MATLAB statement. It consists of a single MATLAB expression and any number of input and output arguments.|||You can define an anonymous function right at the MATLAB command line or within a function or script.|||This way you can create simple functions without having to create a file for them.|||The syntax for creating an anonymous function from an expression is|||In this example, we will write an anonymous function named power, which will take two numbers as input and return first number raised to the power of the second number.|||Create a script file and type the following code in it −|||When you run the file, it displays −|||Any function other than an anonymous function must be defined within a file. Each function file contains a required primary function that appears first and any number of optional sub-functions that comes after the primary function and used by it.|||Primary functions can be called from outside of the file that defines them, either from command line or from other functions, but sub-functions cannot be called from command line or other functions, outside the function file.|||Sub-functions are visible only to the primary function and other sub-functions within the function file that defines them.|||Let us write a function named quadratic that would calculate the roots of a quadratic equation. The function would take three inputs, the quadratic co-efficient, the linear co-efficient and the constant term. It would return the roots.|||The function file quadratic.m will contain the primary function quadratic and the sub-function disc, which calculates the discriminant.|||Create a function file quadratic.m and type the following code in it −|||You can call the above function from command prompt as −|||MATLAB will execute the above statement and return the following result −|||You can define functions within the body of another function. These are called nested functions. A nested function contains any or all of the components of any other function.|||Nested functions are defined within the scope of another function and they share access to the containing function's workspace.|||A nested function follows the following syntax −|||Let us rewrite the function quadratic, from previous example, however, this time the disc function will be a nested function.|||Create a function file quadratic2.m and type the following code in it −|||You can call the above function from command prompt as −|||MATLAB will execute the above statement and return the following result −|||A private function is a primary function that is visible only to a limited group of other functions. If you do not want to expose the implementation of a function(s), you can create them as private functions.|||Private functions reside in subfolders with the special name private.|||They are visible only to functions in the parent folder.|||Let us rewrite the quadratic function. This time, however, the disc function calculating the discriminant, will be a private function.|||Create a subfolder named private in working directory. Store the following function file disc.m in it −|||Create a function quadratic3.m in your working directory and type the following code in it −|||You can call the above function from command prompt as −|||MATLAB will execute the above statement and return the following result −|||Global variables can be shared by more than one function. For this, you need to declare the variable as global in all the functions.|||If you want to access that variable from the base workspace, then declare the variable at the command line.|||The global declaration must occur before the variable is actually used in a function. It is a good practice to use capital letters for the names of global variables to distinguish them from other variables.|||Let us create a function file named average.m and type the following code in it −|||Create a script file and type the following code in it −|||When you run the file, it will display the following result −",,,,"function max = mymax(n1, n2, n3, n4, n5)%This function calculates the maximum of the% five numbers given as inputmax =  n1;if(n2 > max)   max = n2;endif(n3 > max)   max = n3;endif(n4 > max)   max = n4;endif(n5 > max)   max = n5;end|||power = @(x, n) x.^n;result1 = power(7, 3)result2 = power(49, 0.5)result3 = power(10, -10)result4 = power (4.5, 1.5)|||function [x1,x2] = quadratic(a,b,c)%this function returns the roots of % a quadratic equation.% It takes 3 input arguments% which are the co-efficients of x2, x and the %constant term% It returns the rootsd = disc(a,b,c); x1 = (-b + d) / (2*a);x2 = (-b - d) / (2*a);end   % end of quadraticfunction dis = disc(a,b,c) %function calculates the discriminantdis = sqrt(b^2 - 4*a*c);end   % end of sub-function|||quadratic(2,4,-4)|||function [x1,x2] = quadratic2(a,b,c)function disc  % nested functiond = sqrt(b^2 - 4*a*c);end   % end of function discdisc;x1 = (-b + d) / (2*a);x2 = (-b - d) / (2*a);end   % end of function quadratic2|||quadratic2(2,4,-4)|||function dis = disc(a,b,c) %function calculates the discriminantdis = sqrt(b^2 - 4*a*c);end      % end of sub-function|||function [x1,x2] = quadratic3(a,b,c)%this function returns the roots of % a quadratic equation.% It takes 3 input arguments% which are the co-efficient of x2, x and the %constant term% It returns the rootsd = disc(a,b,c); x1 = (-b + d) / (2*a);x2 = (-b - d) / (2*a);end      % end of quadratic3|||quadratic3(2,4,-4)|||function avg = average(nums)global TOTALavg = sum(nums)/TOTAL;end|||global TOTAL;TOTAL = 10;n = [34, 45, 25, 45, 33, 19, 40, 34, 38, 42];av = average(n)"
Learn MATLAB,MATLAB - Data Import,MATLAB - Data Import|||Example 1@@@Example 2@@@Example 3@@@Low-Level File I/O@@@Import Text Data Files with Low-Level I/O@@@Example@@@Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Importing data in MATLAB means loading data from an external file. The importdata function allows loading various data files of different formats. It has the following five forms −|||A = importdata(filename)|||Loads data into array A from the file denoted by filename.|||A = importdata('-pastespecial')|||Loads data from the system clipboard rather than from a file.|||A = importdata(___, delimiterIn)|||Interprets delimiterIn as the column separator in ASCII file, filename, or the clipboard data. You can use delimiterIn with any of the input arguments in the above syntaxes.|||A = importdata(___, delimiterIn, headerlinesIn)|||Loads data from ASCII file, filename, or the clipboard, reading numeric data starting from line headerlinesIn+1.|||[A, delimiterOut, headerlinesOut] = importdata(___)|||Returns the detected delimiter character for the input ASCII file in delimiterOut and the detected number of header lines in headerlinesOut, using any of the input arguments in the previous syntaxes.|||Let us load and display an image file. Create a script file and type the following code in it −|||When you run the file, MATLAB displays the image file. However, you must store it in the current directory.|||In this example, we import a text file and specify Delimiter and Column Header. Let us create a space-delimited ASCII file with column headers, named weeklydata.txt.|||Our text file weeklydata.txt looks like this −|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||In this example, let us import data from clipboard.|||Copy the following lines to the clipboard −|||Mathematics is simple|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||The importdata function is a high-level function. The low-level file I/O functions in MATLAB allow the most control over reading or writing data to a file. However, these functions need more detailed information about your file to work efficiently.|||MATLAB provides the following functions for read and write operations at the byte or character level −|||MATLAB provides the following functions for low-level import of text data files −|||The fscanf function reads formatted data in a text or ASCII file.|||The fgetl and fgets functions read one line of a file at a time, where a newline character separates each line.|||The fread function reads a stream of data at the byte or bit level. |||We have a text data file 'myfile.txt' saved in our working directory. The file stores rainfall data for three months; June, July and August for the year 2012. |||The data in myfile.txt contains repeated sets of time, month and rainfall measurements at five places. The header data stores the number of months M; so we have M sets of measurements.|||The file looks like this −|||We will import data from this file and display this data. Take the following steps −|||Open the file with fopen function and get the file identifier. |||Describe the data in the file with format specifiers, such as '%s' for a string, '%d' for an integer, or '%f' for a floating-point number.|||To skip literal characters in the file, include them in the format description. To skip a data field, use an asterisk ('*') in the specifier.|||For example, to read the headers and return the single value for M, we write −|||By default, fscanf reads data according to our format description until it does not find any match for the data, or it reaches the end of the file. Here we will use for loop for reading 3 sets of data and each time, it will read 7 rows and 5 columns.|||We will create a structure named mydata in the workspace to store data read from the file. This structure has three fields - time, month, and raindata array.|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −","The fscanf function reads formatted data in a text or ASCII file.@@@The fgetl and fgets functions read one line of a file at a time, where a newline character separates each line.@@@The fread function reads a stream of data at the byte or bit level. |||Open the file with fopen function and get the file identifier. @@@Describe the data in the file with format specifiers, such as '%s' for a string, '%d' for an integer, or '%f' for a floating-point number.@@@To skip literal characters in the file, include them in the format description. To skip a data field, use an asterisk ('*') in the specifier.
For example, to read the headers and return the single value for M, we write −

M = fscanf(fid, '%*s %*s\n%*s %*s %*s %*s\nM=%d\n\n', 1);

@@@By default, fscanf reads data according to our format description until it does not find any match for the data, or it reaches the end of the file. Here we will use for loop for reading 3 sets of data and each time, it will read 7 rows and 5 columns.@@@We will create a structure named mydata in the workspace to store data read from the file. This structure has three fields - time, month, and raindata array.",,"Sr.No.@@@Function & Description|||1@@@
A = importdata(filename)
Loads data into array A from the file denoted by filename.
|||2@@@
A = importdata('-pastespecial')
Loads data from the system clipboard rather than from a file.
|||3@@@
A = importdata(___, delimiterIn)
Interprets delimiterIn as the column separator in ASCII file, filename, or the clipboard data. You can use delimiterIn with any of the input arguments in the above syntaxes.
|||4@@@
A = importdata(___, delimiterIn, headerlinesIn)
Loads data from ASCII file, filename, or the clipboard, reading numeric data starting from line headerlinesIn+1.
|||5@@@
[A, delimiterOut, headerlinesOut] = importdata(___)
Returns the detected delimiter character for the input ASCII file in delimiterOut and the detected number of header lines in headerlinesOut, using any of the input arguments in the previous syntaxes.
&&&Function@@@Description |||fclose@@@Close one or all open files|||feof@@@Test for end-of-file|||ferror@@@Information about file I/O errors|||fgetl@@@Read line from file, removing newline characters|||fgets@@@Read line from file, keeping newline characters|||fopen@@@Open file, or obtain information about open files|||fprintf@@@Write data to text file|||fread@@@Read data from binary file|||frewind@@@Move file position indicator to beginning of open file|||fscanf@@@Read data from text file|||fseek@@@Move to specified position in file|||ftell@@@Position in open file|||fwrite@@@Write data to binary file","filename = 'smile.jpg';A = importdata(filename);image(A);|||filename = 'weeklydata.txt';delimiterIn = ' ';headerlinesIn = 1;A = importdata(filename,delimiterIn,headerlinesIn);% View datafor k = [1:7]   disp(A.colheaders{1, k})   disp(A.data(:, k))   disp(' ')end|||M = fscanf(fid, '%*s %*s\n%*s %*s %*s %*s\nM=%d\n\n', 1);|||filename = '/data/myfile.txt';rows = 7;cols = 5; % open the filefid = fopen(filename); % read the file headers, find M (number of months)M = fscanf(fid, '%*s %*s\n%*s %*s %*s %*s\nM=%d\n\n', 1); % read each set of measurementsfor n = 1:M   mydata(n).time = fscanf(fid, '%s', 1);   mydata(n).month = fscanf(fid, '%s', 1);    % fscanf fills the array in column order,   % so transpose the results   mydata(n).raindata  = ...      fscanf(fid, '%f', [rows, cols]);endfor n = 1:M   disp(mydata(n).time), disp(mydata(n).month)   disp(mydata(n).raindata)end % close the filefclose(fid);"
Learn MATLAB,MATLAB - Data Output,MATLAB - Data Output|||Example@@@Writing to Diary Files@@@Exporting Data to Text Data Files with Low-Level I/O@@@Useful Video Courses|||Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Data export (or output) in MATLAB means to write into files. MATLAB allows you to use your data in another application that reads ASCII files. For this, MATLAB provides several data export options.|||You can create the following type of files −|||Rectangular, delimited ASCII data file from an array.|||Diary (or log) file of keystrokes and the resulting text output.|||Specialized ASCII file using low-level functions such as fprintf.|||MEX-file to access your C/C++ or Fortran routine that writes to a particular text file format.|||Apart from this, you can also export data to spreadsheets.|||There are two ways to export a numeric array as a delimited ASCII data file −|||Using the save function and specifying the -ascii qualifier|||Using the dlmwrite function|||Syntax for using the save function is −|||where, my_data.out is the delimited ASCII data file created, num_array is a numeric array and  −ascii is the specifier.|||Syntax for using the dlmwrite function is −|||where, my_data.out is the delimited ASCII data file created, num_array is a numeric array and  dlm_char is the delimiter character.|||The following example demonstrates the concept. Create a script file and type the following code −|||When you run the file, it displays the following result −|||Please note that the save -ascii command and the dlmwrite function does not work with cell arrays as input. To create a delimited ASCII file from the contents of a cell array, you can|||Either, convert the cell array to a matrix using the cell2mat function|||Or export the cell array using low-level file I/O functions.|||If you use the save function to write a character array to an ASCII file, it writes the ASCII equivalent of the characters to the file.|||For example, let us write the word 'hello' to a file −|||MATLAB executes the above statements and displays the following result. which is the characters of the string 'hello' in 8-digit ASCII format.|||Diary files are activity logs of your MATLAB session. The diary function creates an exact copy of your session in a disk file, excluding graphics.|||To turn on the diary function, type −||| Optionally, you can give the name of the log file, say −|||To turn off the diary function −|||You can open the diary file in a text editor.|||So far, we have exported numeric arrays. However, you may need to create other text files, including combinations of numeric and character data, nonrectangular output files, or files with non-ASCII encoding schemes. For these purposes, MATLAB provides the low-level fprintf function.|||As in low-level I/O file activities, before exporting, you need to open or create a file with the fopen function and get the file identifier. By default, fopen opens a file for read-only access. You should specify the permission to write or append, such as 'w' or 'a'.|||After processing the file, you need to close it with fclose(fid) function.|||The following example demonstrates the concept −|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −","Rectangular, delimited ASCII data file from an array.@@@Diary (or log) file of keystrokes and the resulting text output.@@@Specialized ASCII file using low-level functions such as fprintf.@@@MEX-file to access your C/C++ or Fortran routine that writes to a particular text file format.|||Using the save function and specifying the -ascii qualifier@@@Using the dlmwrite function|||Either, convert the cell array to a matrix using the cell2mat function@@@Or export the cell array using low-level file I/O functions.",,,"num_array = [ 1 2 3 4 ; 4 5 6 7; 7 8 9 0];save array_data1.out num_array -ascii;type array_data1.outdlmwrite('array_data2.out', num_array, ' ');type array_data2.out|||h = 'hello';save textdata.out h -asciitype textdata.out|||diary|||% create a matrix y, with two rowsx = 0:10:100;y = [x; log(x)]; % open a file for writingfid = fopen('logtable.txt', 'w'); % Table Headerfprintf(fid, 'Log     Function\n\n'); % print values in column order% two values appear on each row of the filefprintf(fid, '%f    %f\n', y);fclose(fid);% display the file createdtype logtable.txt"
Learn MATLAB,MATLAB - Plotting,"MATLAB - Plotting|||Adding Title, Labels, Grid Lines and Scaling on the Graph@@@Drawing Multiple Functions on the Same Graph@@@Setting Colors on Graph@@@Setting Axis Scales@@@Generating Sub-Plots@@@Useful Video Courses|||Example@@@Example@@@Example@@@Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab","To plot the graph of a function, you need to take the following steps −|||Define x, by specifying the range of values for the variable x, for which the function is to be plotted|||Define the function, y = f(x)|||Call the plot command, as plot(x, y)|||Following example would demonstrate the concept. Let us plot the simple function y = x for the range of values for x from 0 to 100, with an increment of 5.|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following plot −|||Let us take one more example to plot the function y = x2. In this example, we will draw two graphs with the same function, but in second time, we will reduce the value of increment. Please note that as we decrease the increment, the graph becomes smoother.|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following plot −|||Change the code file a little, reduce the increment to 5 −|||MATLAB draws a smoother graph −|||MATLAB allows you to add title, labels along the x-axis and y-axis, grid lines and also to adjust the axes to spruce up the graph.|||The xlabel and ylabel commands generate labels along x-axis and y-axis.|||The title command allows you to put a title on the graph.|||The grid on command allows you to put the grid lines on the graph.|||The axis equal command allows generating the plot with the same scale factors and the spaces on both axes.|||The axis square command generates a square plot.|||Create a script file and type the following code −|||MATLAB generates the following graph −|||You can draw multiple graphs on the same plot. The following example demonstrates the concept −|||Create a script file and type the following code −|||MATLAB generates the following graph −|||MATLAB provides eight basic color options for drawing graphs. The following table shows the colors and their codes −|||Let us draw the graph of two polynomials|||f(x) = 3x4 + 2x3+ 7x2 + 2x + 9 and|||g(x) = 5x3 + 9x + 2|||Create a script file and type the following code −|||When you run the file, MATLAB generates the following graph −|||The axis command allows you to set the axis scales. You can provide minimum and maximum values for x and y axes using the axis command in the following way −|||The following example shows this −|||Create a script file and type the following code −|||When you run the file, MATLAB generates the following graph −|||When you create an array of plots in the same figure, each of these plots is called a subplot. The subplot command is used for creating subplots.|||Syntax for the command is −|||where, m and n are the number of rows and columns of the plot array and p specifies where to put a particular plot.|||Each plot created with the subplot command can have its own characteristics. Following example demonstrates the concept −|||Let us generate two plots −|||y = e−1.5xsin(10x)|||y = e−2xsin(10x)|||Create a script file and type the following code −|||When you run the file, MATLAB generates the following graph −","Define x, by specifying the range of values for the variable x, for which the function is to be plotted@@@Define the function, y = f(x)@@@Call the plot command, as plot(x, y)|||The xlabel and ylabel commands generate labels along x-axis and y-axis.@@@The title command allows you to put a title on the graph.@@@The grid on command allows you to put the grid lines on the graph.@@@The axis equal command allows generating the plot with the same scale factors and the spaces on both axes.@@@The axis square command generates a square plot.|||f(x) = 3x4 + 2x3+ 7x2 + 2x + 9 and@@@g(x) = 5x3 + 9x + 2",,Code@@@Color|||w@@@White|||k@@@Black|||b@@@Blue|||r@@@Red|||c@@@Cyan|||g@@@Green|||m@@@Magenta|||y@@@Yellow,"x = [0:5:100];y = x;plot(x, y)|||x = [1 2 3 4 5 6 7 8 9 10];x = [-100:20:100];y = x.^2;plot(x, y)|||x = [-100:5:100];y = x.^2;plot(x, y)|||x = [0:0.01:10];y = sin(x);plot(x, y), xlabel('x'), ylabel('Sin(x)'), title('Sin(x) Graph'),grid on, axis equal|||x = [0 : 0.01: 10];y = sin(x);g = cos(x);plot(x, y, x, g, '.-'), legend('Sin(x)', 'Cos(x)')|||x = [-10 : 0.01: 10];y = 3*x.^4 + 2 * x.^3 + 7 * x.^2 + 2 * x + 9;g = 5 * x.^3 + 9 * x + 2;plot(x, y, 'r', x, g, 'g')|||x = [0 : 0.01: 10];y = exp(-x).* sin(2*x + 3);plot(x, y), axis([0 10 -1 1])|||x = [0:0.01:5];y = exp(-1.5*x).*sin(10*x);subplot(1,2,1)plot(x,y), xlabel('x'),ylabel('exp(–1.5x)*sin(10x)'),axis([0 5 -1 1])y = exp(-2*x).*sin(10*x);subplot(1,2,2)plot(x,y),xlabel('x'),ylabel('exp(–2x)*sin(10x)'),axis([0 5 -1 1])"
Learn MATLAB,MATLAB - Graphics,MATLAB - Graphics|||Drawing Bar Charts@@@Drawing Contours@@@Three Dimensional Plots@@@Useful Video Courses|||Example@@@Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"This chapter will continue exploring the plotting and graphics capabilities of MATLAB. We will discuss −|||The bar command draws a two dimensional bar chart. Let us take up an example to demonstrate the idea.|||Let us have an imaginary classroom with 10 students. We know the percent of marks obtained by these students are 75, 58, 90, 87, 50, 85, 92, 75, 60 and 95. We will draw the bar chart for this data.|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following bar chart −|||A contour line of a function of two variables is a curve along which the function has a constant value. Contour lines are used for creating contour maps by joining points of equal elevation above a given level, such as mean sea level.|||MATLAB provides a contour function for drawing contour maps.|||Let us generate a contour map that shows the contour lines for a given function g = f(x, y). This function has two variables. So, we will have to generate two independent variables, i.e., two data sets x and y. This is done by calling the meshgrid command.|||The meshgrid command is used for generating a matrix of elements that give the range over x and y along with the specification of increment in each case.|||Let us plot our function g = f(x, y), where −5 ≤ x ≤ 5, −3 ≤ y ≤ 3. Let us take an increment of 0.1 for both the values. The variables are set as −|||Lastly, we need to assign the function. Let our function be: x2 + y2|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following contour map −|||Let us modify the code a little to spruce up the map|||When you run the file, MATLAB displays the following contour map −|||Three-dimensional plots basically display a surface defined by a function in two variables, g = f (x,y).|||As before, to define g, we first create a set of (x,y) points over the domain of the function using the meshgrid command. Next, we assign the function itself. Finally, we use the surf command to create a surface plot.|||The following example demonstrates the concept −|||Let us create a 3D surface map for the function g = xe-(x2 + y2)|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following 3-D map −|||You can also use the mesh command to generate a three-dimensional surface. However, the surf command displays both the connecting lines and the faces of the surface in color, whereas, the mesh command creates a wireframe surface with colored lines connecting the defining points.",Drawing bar charts@@@Drawing contours@@@Three dimensional plots,,,"x = [1:10];y = [75, 58, 90, 87, 50, 85, 92, 75, 60, 95];bar(x,y), xlabel('Student'),ylabel('Score'),title('First Sem:')print -deps graph.eps|||[x,y] = meshgrid(–5:0.1:5, –3:0.1:3);|||[x,y] = meshgrid(-5:0.1:5,-3:0.1:3);   %independent variablesg = x.^2 + y.^2;                       % our functioncontour(x,y,g)                         % call the contour functionprint -deps graph.eps|||[x,y] = meshgrid(-5:0.1:5,-3:0.1:3);   %independent variablesg = x.^2 + y.^2;                       % our function[C, h] = contour(x,y,g);               % call the contour functionset(h,'ShowText','on','TextStep',get(h,'LevelStep')*2)print -deps graph.eps|||[x,y] = meshgrid(-2:.2:2);g = x .* exp(-x.^2 - y.^2);surf(x, y, g)print -deps graph.eps"
Learn MATLAB,MATLAB - Algebra,MATLAB - Algebra|||Solving Basic Algebraic Equations in MATLAB@@@Solving Basic Algebraic Equations in Octave@@@Solving Quadratic Equations in MATLAB@@@Solving Quadratic Equations in Octave@@@Solving Higher Order Equations in MATLAB@@@Solving Higher Order Equations in Octave@@@Solving System of Equations in MATLAB@@@Solving System of Equations in Octave@@@Expanding and Collecting Equations in MATLAB@@@Expanding and Collecting Equations in Octave@@@Factorization and Simplification of Algebraic Expressions@@@Useful Video Courses|||Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"So far, we have seen that all the examples work in MATLAB as well as its  GNU, alternatively called Octave. But for solving basic algebraic equations, both MATLAB and Octave are little different, so we will try to cover  MATLAB and Octave in separate sections.|||We will also discuss factorizing and simplification of algebraic expressions.|||The solve function is used for solving algebraic equations. In its simplest form, the solve function takes the equation enclosed in quotes as an argument.|||For example, let us solve for x in the equation x-5 = 0|||MATLAB will execute the above statement and return the following result −|||You can also call the solve function as −|||MATLAB will execute the above statement and return the following result −|||You may even not include the right hand side of the equation −|||MATLAB will execute the above statement and return the following result −|||If the equation involves multiple symbols, then MATLAB by default assumes that you are solving for x, however, the solve function has another form −|||where, you can also mention the variable.|||For example, let us solve the equation v – u – 3t2 = 0, for v. In this case, we should write −|||MATLAB will execute the above statement and return the following result −|||The roots function is used for solving algebraic equations in Octave and you can write above examples as follows −|||For example, let us solve for x in the equation x-5 = 0|||Octave will execute the above statement and return the following result −|||You can also call the solve function as −|||Octave will execute the above statement and return the following result −|||The solve function can also solve higher order equations. It is often used to solve quadratic equations. The function returns the roots of the equation in an array.|||The following example solves the quadratic equation x2 -7x +12 = 0. Create a script file and type the following code −|||When you run the file, it displays the following result −|||The following example solves the quadratic equation x2 -7x +12 = 0 in Octave. Create a script file and type the following code −|||When you run the file, it displays the following result −|||The solve function can also solve higher order equations. For example, let us solve a cubic equation as (x-3)2(x-7) = 0|||MATLAB will execute the above statement and return the following result −|||In case of higher order equations, roots are long containing many terms. You can get the numerical value of such roots by converting them to double. The following example solves the fourth order equation x4 − 7x3 + 3x2 − 5x + 9 = 0.|||Create a script file and type the following code −|||When you run the file, it returns the following result −|||Please note that the last two roots are complex numbers.|||The following example solves the fourth order equation x4 − 7x3 + 3x2 − 5x + 9 = 0.|||Create a script file and type the following code −|||When you run the file, it returns the following result −|||The solve function can also be used to generate solutions of systems of equations involving more than one variables. Let us take up a simple example to demonstrate this use.|||Let us solve the equations −|||5x + 9y = 5|||3x – 6y = 4|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||In same way, you can solve larger linear systems. Consider the following set of equations −|||x + 3y -2z = 5|||3x + 5y + 6z = 7|||2x + 4y + 3z = 8|||We have a little different approach to solve a system of 'n' linear equations in 'n' unknowns. Let us take up a simple example to demonstrate this use.|||Let us solve the equations −|||5x + 9y = 5|||3x – 6y = 4|||Such a system of linear equations can be written as the single matrix equation Ax = b, where A is the coefficient matrix, b is the column vector containing the right-hand side of the linear equations and x is the column vector representing the solution as shown in the below program −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||In same way, you can solve larger linear systems as given below −|||x + 3y -2z = 5|||3x + 5y + 6z = 7|||2x + 4y + 3z = 8|||The expand and the collect function expands and collects an equation respectively. The following example demonstrates the concepts −|||When you work with many symbolic functions, you should declare that your variables are symbolic.|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||You need to have symbolic package, which provides expand and the collect function to expand and collect  an equation, respectively. The following example demonstrates the concepts −|||When you work with many symbolic functions, you should declare that your variables are symbolic but Octave has different approach to define symbolic variables. Notice the use of Sin and Cos, which are also defined in symbolic package.|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||The factor function factorizes an expression and the simplify function simplifies an expression. The following example demonstrates the concept −|||Create a script file and type the following code −|||When you run the file, it displays the following result −",,,,"y = solve('x-5 = 0')|||solve('x-5')|||solve(equation, variable)|||solve('v-u-3*t^2=0', 'v')|||roots([1, -5])|||y = roots([1, -5])|||eq = 'x^2 -7*x + 12 = 0';s = solve(eq);disp('The first root is: '), disp(s(1));disp('The second root is: '), disp(s(2));|||s = roots([1, -7, 12]);disp('The first root is: '), disp(s(1));disp('The second root is: '), disp(s(2));|||solve('(x-3)^2*(x-7)=0')|||eq = 'x^4 - 7*x^3 + 3*x^2 - 5*x + 9 = 0';s = solve(eq);disp('The first root is: '), disp(s(1));disp('The second root is: '), disp(s(2));disp('The third root is: '), disp(s(3));disp('The fourth root is: '), disp(s(4));% converting the roots to double typedisp('Numeric value of first root'), disp(double(s(1)));disp('Numeric value of second root'), disp(double(s(2)));disp('Numeric value of third root'), disp(double(s(3)));disp('Numeric value of fourth root'), disp(double(s(4)));|||v = [1, -7,  3, -5, 9];s = roots(v);% converting the roots to double typedisp('Numeric value of first root'), disp(double(s(1)));disp('Numeric value of second root'), disp(double(s(2)));disp('Numeric value of third root'), disp(double(s(3)));disp('Numeric value of fourth root'), disp(double(s(4)));|||s = solve('5*x + 9*y = 5','3*x - 6*y = 4');s.xs.y|||A = [5, 9; 3, -6];b = [5;4];A \ b|||syms x   %symbolic variable xsyms y   %symbolic variable x% expanding equationsexpand((x-5)*(x+9))expand((x+2)*(x-3)*(x-5)*(x+7))expand(sin(2*x))expand(cos(x+y)) % collecting equationscollect(x^3 *(x-7))collect(x^4*(x-3)*(x-5))|||% first of all load the package, make sure its installed.pkg load symbolic% make symbols module availablesymbols% define symbolic variablesx = sym ('x');y = sym ('y');z = sym ('z');% expanding equationsexpand((x-5)*(x+9))expand((x+2)*(x-3)*(x-5)*(x+7))expand(Sin(2*x))expand(Cos(x+y)) % collecting equationscollect(x^3 *(x-7), z)collect(x^4*(x-3)*(x-5), z)|||syms xsyms yfactor(x^3 - y^3)factor([x^2-y^2,x^3+y^3])simplify((x^4-16)/(x^2-4))"
Learn MATLAB,MATLAB - Calculus,MATLAB - Calculus|||Calculating Limits@@@Calculating Limits using Octave@@@Verification of Basic Properties of Limits@@@Verification of Basic Properties of Limits using Octave@@@Left and Right Sided Limits@@@Useful Video Courses|||Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB provides various ways for solving problems of differential and integral calculus, solving differential equations of any degree and calculation of limits. Best of all, you can easily plot the graphs of complex functions and check maxima, minima and other stationery points on a graph by solving the original function, as well as its derivative.|||This chapter will deal with problems of calculus. In this chapter, we will discuss pre-calculus concepts i.e., calculating limits of functions and verifying the properties of limits.|||In the next chapter Differential, we will compute derivative of an expression and find the local maxima and minima on a graph. We will also discuss solving differential equations.|||Finally, in the Integration chapter, we will discuss integral calculus.|||MATLAB provides the limit function for calculating limits. In its most basic form, the limit function takes expression as an argument and finds the limit of the expression as the independent variable goes to zero.|||For example, let us calculate the limit of a function f(x) = (x3 + 5)/(x4 + 7), as x tends to zero.|||MATLAB will execute the above statement and return the following result −|||The limit function falls in the realm of symbolic computing; you need to use the syms function to tell MATLAB which symbolic variables you are using.  You can also compute limit of a function, as the variable tends to some number other than zero. To calculate lim x->a(f(x)), we use the limit command with arguments. The first being the expression and the second is the number, that x approaches, here it is a.|||For example, let us calculate limit of a function f(x) = (x-3)/(x-1), as x tends to 1.|||MATLAB will execute the above statement and return the following result −|||Let's take another example,|||MATLAB will execute the above statement and return the following result −|||Following is Octave version of the above example using symbolic package, try to execute and compare the result −|||Octave will execute the above statement and return the following result −|||Algebraic Limit Theorem provides some basic properties of limits. These are as follows −|||Let us consider two functions −|||Let us calculate the limits of the functions as x tends to 5, of both functions and verify the basic properties of limits using these two functions and MATLAB.|||Create a script file and type the following code into it −|||When you run the file, it displays −|||Following is Octave version of the above example using symbolic package, try to execute and compare the result −|||Octave will execute the above statement and return the following result −|||When a function has a discontinuity for some particular value of the variable, the limit does not exist at that point. In other words, limits of a function f(x) has discontinuity at x = a, when the value of limit, as x approaches x from left side, does not equal the value of the limit as x approaches from right side.|||This leads to the concept of left-handed and right-handed limits. A left-handed limit is defined as the limit as x -> a, from the left, i.e., x approaches a, for values of x < a. A right-handed limit is defined as the limit as x -> a, from the right, i.e., x approaches a, for values of x > a. When the left-handed limit and right-handed limit are not equal, the limit does not exist.|||Let us consider a function −|||f(x) = (x - 3)/|x - 3||||We will show that limx->3 f(x) does not exist. MATLAB helps us to establish this fact in two ways −|||The left-handed and right-handed limits are computed by passing the character strings 'left' and 'right' to the limit command as the last argument.|||Create a script file and type the following code into it −|||When you run the file, MATLAB draws the following plot|||After this following output is displayed −",f(x) = (3x + 5)/(x - 3)@@@g(x) = x2 + 1.|||By plotting the graph of the function and showing the discontinuity.@@@By computing the limits and showing that both are different.,,,"syms xlimit((x^3 + 5)/(x^4 + 7))|||limit((x - 3)/(x-1),1)|||limit(x^2 + 5, 3)|||pkg load symbolicsymbolsx = sym(""x"");subs((x^3+5)/(x^4+7),x,0)|||syms xf = (3*x + 5)/(x-3);g = x^2 + 1;l1 = limit(f, 4)l2 = limit (g, 4)lAdd = limit(f + g, 4)lSub = limit(f - g, 4)lMult = limit(f*g, 4)lDiv = limit (f/g, 4)|||pkg load symbolicsymbolsx = sym(""x"");f = (3*x + 5)/(x-3);g = x^2 + 1;l1 = subs(f, x, 4)l2 = subs (g, x, 4)lAdd = subs (f+g, x, 4)lSub = subs (f-g, x, 4)lMult = subs (f*g, x, 4)lDiv = subs (f/g, x, 4)|||f = (x - 3)/abs(x-3);ezplot(f,[-1,5])l = limit(f,x,3,'left')r = limit(f,x,3,'right')"
Learn MATLAB,MATLAB - Differential,"MATLAB - Differential|||Example@@@Verification of Elementary Rules of Differentiation@@@Derivatives of Exponential, Logarithmic and Trigonometric Functions@@@Computing Higher Order Derivatives@@@Finding the Maxima and Minima of a Curve@@@Solving Differential Equations@@@Useful Video Courses|||Rule 1@@@Rule 2@@@Rule 3@@@Rule 4@@@Rule 5@@@Rule 6@@@Example@@@Example@@@Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab","MATLAB provides the diff command for computing symbolic derivatives. In its simplest form, you pass the function you want to differentiate to diff command as an argument.|||For example, let us compute the derivative of the function f(t) = 3t2 + 2t-2|||Create a script file and type the following code into it −|||When the above code is compiled and executed, it produces the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||Let us briefly state various equations or rules for differentiation of functions and verify these rules. For this purpose, we will write f'(x) for a first order derivative and f""(x) for a second order derivative.|||Following are the rules for differentiation −|||For any functions f and g and any real numbers a and b are the derivative of the function −|||h(x) = af(x) + bg(x) with respect to x is given by −|||h'(x) = af'(x) + bg'(x)|||The sum and subtraction rules state that if f and g are two functions, f' and g' are their derivatives respectively, then,|||(f + g)' = f' + g'|||(f - g)' = f' - g'|||The product rule states that if f and g are two functions, f' and g' are their derivatives respectively, then,|||(f.g)' = f'.g + g'.f|||The quotient rule states that if f and g are two functions, f' and g' are their derivatives respectively, then,|||(f/g)' = (f'.g - g'.f)/g2|||The polynomial or elementary power rule states that, if y = f(x) = xn, then f' = n. x(n-1)|||A direct outcome of this rule is that the derivative of any constant is zero, i.e., if y = k, any constant, then|||f' = 0|||The chain rule states that, derivative of the function of a function h(x) = f(g(x)) with respect to x is,|||h'(x)= f'(g(x)).g'(x)|||Create a script file and type the following code into it −|||When you run the file, MATLAB displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||The following table provides the derivatives of commonly used exponential, logarithmic and trigonometric functions −|||Create a script file and type the following code into it −|||When you run the file, MATLAB displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||To compute higher derivatives of a function f, we use the syntax diff(f,n).|||Let us compute the second derivative of the function y = f(x) = x .e-3x|||MATLAB executes the code and returns the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||In this example, let us solve a problem. Given that a function y = f(x) = 3 sin(x) + 7 cos(5x). We will have to find out whether the equation f"" + f = -5cos(2x) holds true.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||If we are searching for the local maxima and minima for a graph, we are basically looking for the highest or lowest points on the graph of the function at a particular locality, or for a particular range of values of the symbolic variable.|||For a function y = f(x) the points on the graph where the graph has zero slope are called stationary points. In other words stationary points are where f'(x) = 0.|||To find the stationary points of a function we differentiate, we need to set the derivative equal to zero and solve the equation.|||Let us find the stationary points of the function f(x) = 2x3 + 3x2 − 12x + 17|||Take the following steps −|||First let us enter the function and plot its graph.|||MATLAB executes the code and returns the following plot −|||Here is Octave equivalent code for the above example −|||Our aim is to find some local maxima and minima on the graph, so let us find the local maxima and minima for the interval [-2, 2] on the graph.|||MATLAB executes the code and returns the following plot −|||Here is Octave equivalent code for the above example −|||Next, let us compute the derivative.|||MATLAB executes the code and returns the following result −|||Here is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||Let us solve the derivative function, g, to get the values where it becomes zero.|||MATLAB executes the code and returns the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||This agrees with our plot. So let us evaluate the function f at the critical points x = 1, -2. We can substitute a value in a symbolic function by using the subs command.|||MATLAB executes the code and returns the following result −|||Following is Octave equivalent of the above calculation −||||||Therefore, The minimum and maximum values on the function f(x) = 2x3 + 3x2 − 12x + 17, in the interval [-2,2] are 10 and 37.|||MATLAB provides the dsolve command for solving differential equations symbolically.|||The most basic form of the dsolve command for finding the solution to a single equation is|||where eqn is a text string used to enter the equation.|||It returns a symbolic solution with a set of arbitrary constants that MATLAB labels C1, C2, and so on. |||You can also specify initial and boundary conditions for the problem, as comma-delimited list following the equation as −|||For the purpose of using dsolve command, derivatives are indicated with a D. For example, an equation like f'(t) = -2*f + cost(t) is entered as −|||'Df = -2*f + cos(t)'|||Higher derivatives are indicated by following D by the order of the derivative.|||For example the equation f""(x) + 2f'(x) = 5sin3x should be entered as −|||'D2y + 2Dy = 5*sin(3*x)'|||Let us take up a simple example of a first order differential equation: y' = 5y.|||MATLAB executes the code and returns the following result −|||Let us take up another example of a second order differential equation as: y"" - y = 0, y(0) = -1, y'(0) = 2.|||MATLAB executes the code and returns the following result −",,,"Function@@@Derivative|||ca.x@@@ca.x.ln c.a (ln is natural logarithm)|||ex@@@ex|||ln x@@@1/x|||lncx@@@1/x.ln c|||xx@@@xx.(1 + ln x)|||sin(x)@@@cos(x)|||cos(x)@@@-sin(x)|||tan(x)@@@sec2(x), or  1/cos2(x),  or  1 + tan2(x)|||cot(x)@@@-csc2(x), or  -1/sin2(x), or  -(1 + cot2(x))|||sec(x)@@@sec(x).tan(x)|||csc(x)@@@-csc(x).cot(x)","syms tf = 3*t^2 + 2*t^(-2);diff(f)|||pkg load symbolicsymbolst = sym(""t"");f = 3*t^2 + 2*t^(-2);differentiate(f,t)|||syms xsyms tf = (x + 2)*(x^2 + 3)der1 = diff(f)f = (t^2 + 3)*(sqrt(t) + t^3)der2 = diff(f)f = (x^2 - 2*x + 1)*(3*x^3 - 5*x^2 + 2)der3 = diff(f)f = (2*x^2 + 3*x)/(x^3 + 1)der4 = diff(f)f = (x^2 + 1)^17der5 = diff(f)f = (t^3 + 3* t^2 + 5*t -9)^(-6)der6 = diff(f)|||pkg load symbolicsymbolsx = sym(""x"");t = sym(""t"");f = (x + 2)*(x^2 + 3) der1 = differentiate(f,x) f = (t^2 + 3)*(t^(1/2) + t^3) der2 = differentiate(f,t) f = (x^2 - 2*x + 1)*(3*x^3 - 5*x^2 + 2) der3 = differentiate(f,x) f = (2*x^2 + 3*x)/(x^3 + 1) der4 = differentiate(f,x) f = (x^2 + 1)^17 der5 = differentiate(f,x) f = (t^3 + 3* t^2 + 5*t -9)^(-6) der6 = differentiate(f,t)|||syms xy = exp(x)diff(y)y = x^9diff(y)y = sin(x)diff(y)y = tan(x)diff(y)y = cos(x)diff(y)y = log(x)diff(y)y = log10(x)diff(y)y = sin(x)^2diff(y)y = cos(3*x^2 + 2*x + 1)diff(y)y = exp(x)/sin(x)diff(y)|||pkg load symbolicsymbolsx = sym(""x"");y = Exp(x)differentiate(y,x)y = x^9differentiate(y,x)y = Sin(x)differentiate(y,x)y = Tan(x)differentiate(y,x)y = Cos(x)differentiate(y,x)y = Log(x)differentiate(y,x)% symbolic packages does not have this support%y = Log10(x)%differentiate(y,x)y = Sin(x)^2differentiate(y,x)y = Cos(3*x^2 + 2*x + 1)differentiate(y,x)y = Exp(x)/Sin(x)differentiate(y,x)|||f = x*exp(-3*x);diff(f, 2)|||pkg load symbolicsymbolsx = sym(""x"");f = x*Exp(-3*x);differentiate(f, x, 2)|||syms xy = 3*sin(x)+7*cos(5*x);  % defining the functionlhs = diff(y,2)+y;        %evaluting the lhs of the equationrhs = -5*cos(2*x);        %rhs of the equationif(isequal(lhs,rhs))   disp('Yes, the equation holds true');else   disp('No, the equation does not hold true');enddisp('Value of LHS is: '), disp(lhs);|||pkg load symbolicsymbolsx = sym(""x"");y = 3*Sin(x)+7*Cos(5*x);           % defining the functionlhs = differentiate(y, x, 2) + y;  %evaluting the lhs of the equationrhs = -5*Cos(2*x);                 %rhs of the equationif(lhs == rhs)   disp('Yes, the equation holds true');else   disp('No, the equation does not hold true');enddisp('Value of LHS is: '), disp(lhs);|||syms xy = 2*x^3 + 3*x^2 - 12*x + 17;   % defining the functionezplot(y)|||pkg load symbolicsymbolsx = sym('x');y = inline(""2*x^3 + 3*x^2 - 12*x + 17"");ezplot(y)print -deps graph.eps|||syms xy = 2*x^3 + 3*x^2 - 12*x + 17;   % defining the functionezplot(y, [-2, 2])|||pkg load symbolicsymbolsx = sym('x');y = inline(""2*x^3 + 3*x^2 - 12*x + 17"");ezplot(y, [-2, 2])print -deps graph.eps|||g = diff(y)|||pkg load symbolicsymbolsx = sym(""x"");y = 2*x^3 + 3*x^2 - 12*x + 17;g = differentiate(y,x)|||s = solve(g)|||pkg load symbolicsymbolsx = sym(""x"");y = 2*x^3 + 3*x^2 - 12*x + 17;g = differentiate(y,x)roots([6, 6, -12])|||subs(y, 1), subs(y, -2)|||pkg load symbolicsymbolsx = sym(""x"");y = 2*x^3 + 3*x^2 - 12*x + 17;g = differentiate(y,x)roots([6, 6, -12])subs(y, x, 1), subs(y, x, -2)|||dsolve('D2y - y = 0','y(0) = -1','Dy(0) = 2')"
Learn MATLAB,MATLAB - Integration,MATLAB - Integration|||Finding Indefinite Integral Using MATLAB@@@Finding Definite Integral Using MATLAB@@@Useful Video Courses|||Example 1@@@Example 2@@@Example 1@@@Example 2|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Integration deals with two essentially different types of problems.|||In the first type, derivative of a function is given and we want to find the function. Therefore, we basically reverse the process of differentiation. This reverse process is known as anti-differentiation, or finding the primitive function, or finding an indefinite integral.|||The second type of problems involve adding up a very large number of very small quantities and then taking a limit as the size of the quantities approaches zero, while the number of terms tend to infinity. This process leads to the definition of the definite integral.|||Definite integrals are used for finding area, volume, center of gravity, moment of inertia, work done by a force, and in numerous other applications.|||By definition, if the derivative of a function f(x) is f'(x), then we say that an indefinite integral of f'(x) with respect to x is f(x).  For example, since the derivative (with respect to x) of x2 is 2x, we can say that an indefinite integral of 2x is x2.|||In symbols −|||f'(x2) = 2x, therefore,|||∫ 2xdx = x2.|||Indefinite integral is not unique, because derivative of x2 + c, for any value of a constant c, will also be 2x.|||This is expressed in symbols as −|||∫ 2xdx = x2 + c.|||Where, c is called an 'arbitrary constant'.|||MATLAB provides an int command for calculating integral of an expression. To derive an expression for the indefinite integral of a function, we write −|||For example, from our previous example −|||MATLAB executes the above statement and returns the following result −|||In this example, let us find the integral of some commonly used expressions. Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||Create a script file and type the following code in it −|||Note that the pretty function returns an expression in a more readable format.|||When you run the file, it displays the following result −|||By definition, definite integral is basically the limit of a sum. We use definite integrals to find areas such as the area between a curve and the x-axis and the area between two curves. Definite integrals can also be used in other situations, where the quantity required can be expressed as the limit of a sum.|||The int function can be used for definite integration by passing the limits over which you want to calculate the integral.|||To calculate|||we write,|||For example, to calculate the value of  we write −|||MATLAB executes the above statement and returns the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||An alternative solution can be given using quad() function provided by Octave as follows −|||Octave executes the code and returns the following result −|||Let us calculate the area enclosed between the x-axis, and the curve y = x3−2x+5 and the ordinates x = 1 and x = 2.|||The required area is given by −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||An alternative solution can be given using quad() function provided by Octave as follows −|||Octave executes the code and returns the following result −|||Find the area under the curve:  f(x) = x2 cos(x) for −4 ≤ x ≤ 9.|||Create a script file and write the following code −|||When you run the file, MATLAB plots the graph −|||The output is given below −|||Following is Octave equivalent of the above calculation −","In the first type, derivative of a function is given and we want to find the function. Therefore, we basically reverse the process of differentiation. This reverse process is known as anti-differentiation, or finding the primitive function, or finding an indefinite integral.@@@The second type of problems involve adding up a very large number of very small quantities and then taking a limit as the size of the quantities approaches zero, while the number of terms tend to infinity. This process leads to the definition of the definite integral.",,,"syms x int(2*x)|||syms x nint(sym(x^n))f = 'sin(n*t)'int(sym(f))syms a tint(a*cos(pi*t))int(a^x)|||syms x nint(cos(x))int(exp(x))int(log(x))int(x^-1)int(x^5*cos(5*x))pretty(int(x^5*cos(5*x)))int(x^-5)int(sec(x)^2)pretty(int(1 - 10*x + 9 * x^2))int((3 + 5*x -6*x^2 - 7*x^3)/2*x^2)pretty(int((3 + 5*x -6*x^2 - 7*x^3)/2*x^2))|||int(x, 4, 9)|||pkg load symbolicsymbolsx = sym(""x"");f = x;c = [1, 0];integral = polyint(c);a = polyval(integral, 9) - polyval(integral, 4);display('Area: '), disp(double(a));|||pkg load symbolicsymbolsf = inline(""x"");[a, ierror, nfneval] = quad(f, 4, 9);display('Area: '), disp(double(a));|||f = x^3 - 2*x +5;a = int(f, 1, 2)display('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = x^3 - 2*x +5;c = [1, 0, -2, 5];integral = polyint(c);a = polyval(integral, 2) - polyval(integral, 1);display('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = inline(""x^3 - 2*x +5"");[a, ierror, nfneval] = quad(f, 1, 2);display('Area: '), disp(double(a));|||f = x^2*cos(x);ezplot(f, [-4,9])a = int(f, -4, 9)disp('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = inline(""x^2*cos(x)"");ezplot(f, [-4,9])print -deps graph.eps[a, ierror, nfneval] = quad(f, -4, 9);display('Area: '), disp(double(a));"
Learn MATLAB,MATLAB - Polynomials,MATLAB - Polynomials|||Evaluating Polynomials@@@Finding the Roots of Polynomials@@@Polynomial Curve Fitting@@@Useful Video Courses|||Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB represents polynomials as row vectors containing coefficients ordered by descending powers. For example, the equation P(x) = x4 + 7x3 - 5x + 9 could be represented as −|||p = [1 7 0  -5 9];|||The polyval function is used for evaluating a polynomial at a specified value. For example, to evaluate our previous polynomial p, at x = 4, type −|||MATLAB executes the above statements and returns the following result −|||MATLAB also provides the polyvalm function for evaluating a matrix polynomial. A matrix polynomial is a polynomial with matrices as variables.|||For example, let us create a square matrix X and evaluate the polynomial p, at X −|||MATLAB executes the above statements and returns the following result −|||The roots function calculates the roots of a polynomial. For example, to calculate the roots of our polynomial p, type −|||MATLAB executes the above statements and returns the following result −|||The function poly is an inverse of the roots function and returns to the polynomial coefficients. For example −|||MATLAB executes the above statements and returns the following result −|||The polyfit function finds the coefficients of a polynomial that fits a set of data in a least-squares sense. If x and y are two vectors containing the x and y data to be fitted to a n-degree polynomial, then we get the polynomial fitting the data by writing −|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following result −|||And plots the following graph −",,,,"p = [1 7 0  -5 9];polyval(p,4)|||p = [1 7 0  -5 9];X = [1 2 -3 4; 2 -5 6 3; 3 1 0 2; 5 -7 3 8];polyvalm(p, X)|||p = [1 7 0  -5 9];r = roots(p)|||p2 = poly(r)|||p = polyfit(x,y,n)|||x = [1 2 3 4 5 6]; y = [5.5 43.1 128 290.7 498.4 978.67];   %datap = polyfit(x,y,4)   %get the polynomial% Compute the values of the polyfit estimate over a finer range, % and plot the estimate over the real data values for comparison:x2 = 1:.1:6;          y2 = polyval(p,x2);plot(x,y,'o',x2,y2)grid on"
Learn MATLAB,MATLAB - Transforms,MATLAB - Transforms|||The Laplace Transform@@@The Inverse Laplace Transform@@@The Fourier Transforms@@@Inverse Fourier Transforms@@@Useful Video Courses|||Example@@@Example@@@Example|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"MATLAB provides command for working with transforms, such as the Laplace and Fourier transforms. Transforms are used in science and engineering as a tool for simplifying analysis and look at data from another angle.|||For example, the Fourier transform allows us to convert a signal represented as a function of time to a function of frequency. Laplace transform allows us to convert a differential equation to an algebraic equation.|||MATLAB provides the laplace, fourier and fft commands to work with Laplace, Fourier and Fast Fourier transforms.|||The Laplace transform of a function of time f(t) is given by the following integral −|||Laplace transform is also denoted as transform of f(t) to F(s). You can see this transform or integration process converts f(t), a function of the symbolic variable t, into another function F(s), with another variable s.|||Laplace transform turns differential equations into algebraic ones. To compute a Laplace transform of a function f(t), write −|||In this example, we will compute the Laplace transform of some commonly used functions.|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||MATLAB allows us to compute the inverse Laplace transform using the command ilaplace.|||For example,|||MATLAB will execute the above statement and display the result −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||Fourier transforms commonly transforms a mathematical function of time, f(t), into a new function, sometimes denoted by  or F, whose argument is frequency with units of cycles/s (hertz) or radians per second. The new function is then known as the Fourier transform and/or the frequency spectrum of the function f.|||Create a script file and type the following code in it −|||When you run the file, MATLAB plots the following graph −|||The following result is displayed −|||Plotting the Fourier transform as −|||Gives the following graph −|||MATLAB provides the ifourier command for computing the inverse Fourier transform of a function. For example,|||MATLAB will execute the above statement and display the result −",,,,"laplace(f(t))|||syms s t a b wlaplace(a)laplace(t^2)laplace(t^9)laplace(exp(-b*t))laplace(sin(w*t))laplace(cos(w*t))|||ilaplace(1/s^3)|||syms s t a b wilaplace(1/s^7)ilaplace(2/(w+s))ilaplace(s/(s^2+4))ilaplace(exp(-b*t))ilaplace(w/(s^2 + w^2))ilaplace(s/(s^2 + w^2))|||syms x f = exp(-2*x^2);     %our functionezplot(f,[-2,2])     % plot of our functionFT = fourier(f)      % Fourier transform|||ezplot(FT)|||f = ifourier(-2*exp(-abs(w)))"
Learn MATLAB,MATLAB - GNU Octave Tutorial,MATLAB - GNU Octave Tutorial|||MATLAB vs Octave@@@Useful Video Courses|||Compatible Examples@@@Non-compatible Examples|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"GNU Octave is a high-level programming language like MATLAB and it is mostly compatible with MATLAB. It is also used for numerical computations.|||Octave has the following common features with MATLAB −|||GNU Octave is also freely redistributable software. You may redistribute it and/or modify it under the terms of the GNU General Public License (GPL) as published by the Free Software Foundation.|||Most MATLAB programs run in Octave, but some of the Octave programs may not run in MATLAB because, Octave allows some syntax that MATLAB does not.|||For example, MATLAB supports single quotes only, but Octave supports both single and double quotes for defining strings. If you are looking for a tutorial on Octave, then  kindly go through this tutorial from beginning which covers both MATLAB as well as Octave.|||Almost all the examples covered in this tutorial are compatible with MATLAB as well as Octave. Let's try following example in MATLAB and Octave which produces same result without any syntax changes −|||This example creates a 3D surface map for the function g = xe-(x2 + y2). Create a script file and type the following code −|||When you run the file, MATLAB displays the following 3-D map −|||Though all the core functionality of MATLAB is available in Octave, there are some functionality for example, Differential & Integration Calculus, which does not match exactly in both the languages. This tutorial has tried to give both type of examples where they differed in their syntax.|||Consider following example where MATLAB and Octave make use of different functions to get the area of a curve: f(x) = x2 cos(x) for −4 ≤ x ≤ 9. Following is MATLAB version of the code −|||When you run the file, MATLAB plots the graph −|||The following result is displayed|||But to give area of the same curve in Octave, you will have to make use of symbolic package as follows −",matrices are fundamental data type@@@it has built-in support for complex numbers@@@it has built-in math functions and libraries@@@it supports user-defined functions,,,"[x,y] = meshgrid(-2:.2:2);g = x .* exp(-x.^2 - y.^2);surf(x, y, g)print -deps graph.eps|||f = x^2*cos(x);ezplot(f, [-4,9])a = int(f, -4, 9)disp('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = inline(""x^2*cos(x)"");ezplot(f, [-4,9])print -deps graph.eps[a, ierror, nfneval] = quad(f, -4, 9);display('Area: '), disp(double(a));"
Learn MATLAB,MATLAB - Simulink,MATLAB - Simulink|||Using Simulink@@@Building Models@@@Useful Video Courses|||Examples|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,"Simulink is a simulation and model-based design environment for dynamic and embedded systems, integrated with MATLAB. Simulink, also developed by MathWorks, is a data flow graphical programming language tool for modelling, simulating and analyzing multi-domain dynamic systems. It is basically a graphical block diagramming tool with customizable set of block libraries.|||It allows you to incorporate MATLAB algorithms into models as well as export the simulation results into MATLAB for further analysis.|||Simulink supports −|||There are several other add-on products provided by MathWorks and third-party hardware and software products that are available for use with Simulink.|||The following list gives brief description of some of them −|||Stateflow allows developing state machines and flow charts.|||Simulink Coder allows the generation of C source code for real-time implementation of systems automatically.|||xPC Target together with x86-based real-time systems provide an environment to simulate and test Simulink and Stateflow models in real-time on the physical system.|||Embedded Coder supports specific embedded targets.|||HDL Coder allows to automatically generate synthesizable VHDL and Verilog.|||SimEvents provides a library of graphical building blocks for modelling queuing systems.|||Simulink is capable of systematic verification and validation of models through modelling style checking, requirements traceability and model coverage analysis.|||Simulink Design Verifier allows you to identify design errors and to generate test case scenarios for model checking.|||To open Simulink, type in the MATLAB work space −|||Simulink opens with the Library Browser. The Library Browser is used for building simulation models.|||On the left side window pane, you will find several libraries categorized on the basis of various systems, clicking on each one will display the design blocks on the right window pane.|||To create a new model, click the New button on the Library Browser's toolbar. This opens a new untitled model window.|||A Simulink model is a block diagram.|||Model elements are added by selecting the appropriate elements from the Library Browser and dragging them into the Model window.|||Alternately, you can copy the model elements and paste them into the model window.|||Drag and drop items from the Simulink library to make your project.|||For the purpose of this example, two blocks will be used for the simulation - A Source (a signal) and a Sink (a scope). A signal generator (the source) generates an analog signal, which will then be graphically visualized by the scope(the sink).|||Begin by dragging the required blocks from the library to the project window. Then, connect the blocks together which can be done by dragging connectors from connection points on one block to those of another.|||Let us drag a 'Sine Wave' block into the model.|||Select 'Sinks' from the library and drag a 'Scope' block into the model.|||Drag a signal line from the output of the Sine Wave block to the input of the Scope block.||||||Run the simulation by pressing the 'Run' button, keeping all parameters default (you can change them from the Simulation menu)|||You should get the below graph from the scope.",system-level design@@@simulation@@@automatic code generation@@@testing and verification of embedded systems|||Stateflow allows developing state machines and flow charts.@@@Simulink Coder allows the generation of C source code for real-time implementation of systems automatically.@@@xPC Target together with x86-based real-time systems provide an environment to simulate and test Simulink and Stateflow models in real-time on the physical system.@@@Embedded Coder supports specific embedded targets.@@@HDL Coder allows to automatically generate synthesizable VHDL and Verilog.@@@SimEvents provides a library of graphical building blocks for modelling queuing systems.,,,
Learn MATLAB,MATLAB - Quick Guide,"MATLAB - Quick Guide@@@MATLAB - Overview@@@MATLAB - Environment Setup@@@MATLAB - Basic Syntax@@@MATLAB - Variables@@@MATLAB - Commands@@@MATLAB - M-Files@@@MATLAB - Data Types@@@MATLAB - Operators@@@MATLAB - Decision Making@@@MATLAB - Loop Types@@@MATLAB - Vectors@@@MATLAB - Matrix@@@MATLAB - Arrays@@@MATLAB - Colon Notation@@@MATLAB - Numbers@@@MATLAB - Strings@@@MATLAB - Functions@@@MATLAB - Data Import@@@MATLAB - Data Output@@@MATLAB - Plotting@@@MATLAB - Graphics@@@MATLAB - Algebra@@@MATLAB - Calculus@@@MATLAB - Differential@@@MATLAB - Integration@@@MATLAB - Polynomials@@@MATLAB - Transforms@@@MATLAB - GNU Octave Tutorial@@@MATLAB - Simulink|||MATLAB's Power of Computational Mathematics@@@Features of MATLAB@@@Uses of MATLAB@@@Local Environment Setup@@@Understanding the MATLAB Environment@@@Set up GNU Octave@@@Hands on Practice@@@Use of Semicolon (;) in MATLAB@@@Adding Comments@@@Commonly used Operators and Special Characters@@@Special Variables and Constants@@@Naming Variables@@@Saving Your Work@@@Multiple Assignments@@@I have forgotten the Variables!@@@Long Assignments@@@The format Command@@@Creating Vectors@@@Creating Matrices@@@Commands for Managing a Session@@@Commands for Working with the System@@@Input and Output Commands@@@Vector, Matrix and Array Commands@@@Plotting Commands@@@The M Files@@@Creating and Running Script File@@@Data Types Available in MATLAB@@@Data Type Conversion@@@Determination of Data Types@@@Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Bitwise Operations@@@Set Operations@@@Loop Control Statements@@@Row Vectors@@@Column Vectors@@@Referencing the Elements of a Vector@@@Vector Operations@@@Referencing the Elements of a Matrix@@@Deleting a Row or a Column in a Matrix@@@Matrix Operations@@@Special Arrays in MATLAB@@@A Magic Square@@@Multidimensional Arrays@@@Array Functions@@@Sorting Arrays@@@Cell Array@@@Accessing Data in Cell Arrays@@@Example@@@Conversion to Various Numeric Data Types@@@Smallest and Largest Integers@@@Smallest and Largest Floating Point Numbers@@@Example@@@Rectangular Character Array@@@Combining Strings into a Cell Array@@@String Functions in MATLAB@@@Example@@@Anonymous Functions@@@Primary and Sub-Functions@@@Nested Functions@@@Private Functions@@@Global Variables@@@Example 1@@@Example 2@@@Example 3@@@Low-Level File I/O@@@Import Text Data Files with Low-Level I/O@@@Example@@@Example@@@Writing to Diary Files@@@Exporting Data to Text Data Files with Low-Level I/O@@@Adding Title, Labels, Grid Lines and Scaling on the Graph@@@Drawing Multiple Functions on the Same Graph@@@Setting Colors on Graph@@@Setting Axis Scales@@@Generating Sub-Plots@@@Drawing Bar Charts@@@Drawing Contours@@@Three Dimensional Plots@@@Solving Basic Algebraic Equations in MATLAB@@@Solving Basic Algebraic Equations in Octave@@@Solving Quadratic Equations in MATLAB@@@Solving Quadratic Equations in Octave@@@Solving Higher Order Equations in MATLAB@@@Solving Higher Order Equations in Octave@@@Solving System of Equations in MATLAB@@@Solving System of Equations in Octave@@@Expanding and Collecting Equations in MATLAB@@@Expanding and Collecting Equations in Octave@@@Factorization and Simplification of Algebraic Expressions@@@Calculating Limits@@@Calculating Limits using Octave@@@Verification of Basic Properties of Limits@@@Verification of Basic Properties of Limits using Octave@@@Left and Right Sided Limits@@@Example@@@Verification of Elementary Rules of Differentiation@@@Derivatives of Exponential, Logarithmic and Trigonometric Functions@@@Computing Higher Order Derivatives@@@Finding the Maxima and Minima of a Curve@@@Solving Differential Equations@@@Finding Indefinite Integral Using MATLAB@@@Finding Definite Integral Using MATLAB@@@Evaluating Polynomials@@@Finding the Roots of Polynomials@@@Polynomial Curve Fitting@@@The Laplace Transform@@@The Inverse Laplace Transform@@@The Fourier Transforms@@@Inverse Fourier Transforms@@@MATLAB vs Octave@@@Using Simulink@@@Building Models@@@Useful Video Courses|||Example@@@Example@@@Example@@@Example@@@Example@@@Examples@@@Where,@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Examples@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Example@@@Rule 1@@@Rule 2@@@Rule 3@@@Rule 4@@@Rule 5@@@Rule 6@@@Example@@@Example@@@Example@@@Example@@@Example 1@@@Example 2@@@Example 1@@@Example 2@@@Example@@@Example@@@Example@@@Example@@@Compatible Examples@@@Non-compatible Examples@@@Examples|||Formatting Strings@@@Joining Strings@@@Finding and Replacing Strings@@@Comparing Strings@@@Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab","MATLAB (matrix laboratory) is a fourth-generation high-level programming language and interactive environment for numerical computation, visualization and programming.|||It allows matrix manipulations; plotting of functions and data; implementation of algorithms; creation of user interfaces; interfacing with programs written in other languages, including C, C++, Java, and FORTRAN; analyze data; develop algorithms; and create models and applications.|||It has numerous built-in commands and math functions that help you in mathematical calculations, generating plots, and performing numerical methods.|||MATLAB is used in every facet of computational mathematics. Following are some commonly used mathematical calculations where it is used most commonly −|||Following are the basic features of MATLAB −|||It is a high-level language for numerical computation, visualization and application development.|||It also provides an interactive environment for iterative exploration, design and problem solving.|||It provides vast library of mathematical functions for linear algebra, statistics, Fourier analysis, filtering, optimization, numerical integration and solving ordinary differential equations.|||It provides built-in graphics for visualizing data and tools for creating custom plots.|||MATLAB's programming interface gives development tools for improving code quality maintainability and maximizing performance.|||It provides tools for building applications with custom graphical interfaces.|||It provides functions for integrating MATLAB based algorithms with external applications and languages such as C, Java, .NET and Microsoft Excel.|||MATLAB is widely used as a computational tool in science and engineering encompassing the fields of physics, chemistry, math and all engineering streams. It is used in a range of applications including −|||Setting up MATLAB environment is a matter of few clicks. The installer can be downloaded from here.|||MathWorks provides the licensed product, a trial version and a student version as well. You need to log into the site and wait a little for their approval.|||After downloading the installer the software can be installed through few clicks.||||||MATLAB development IDE can be launched from the icon created on the desktop. The main working window in MATLAB is called the desktop. When MATLAB is started, the desktop appears in its default layout −|||The desktop has the following panels −|||Current Folder − This panel allows you to access the project folders and files.|||Command Window − This is the main area where commands can be entered at the command line. It is indicated by the command prompt (>>).|||Workspace − The workspace shows all the variables created and/or imported from files.|||Command History − This panel shows or return commands that are entered at the command line.|||If you are willing to use Octave on your machine ( Linux, BSD, OS X or Windows ), then kindly download latest version from Download GNU Octave. You can check the given installation instructions for your machine.|||MATLAB environment behaves like a super-complex calculator. You can enter commands at the >> command prompt.|||MATLAB is an interpreted environment. In other words, you give a command and MATLAB executes it right away.|||Type a valid expression, for example,|||And press ENTER|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Let us take up few more examples −|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Another example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Another example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||Another example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||MATLAB provides some special expressions for some mathematical symbols, like pi for π, Inf for ∞, i (and j) for √-1 etc. Nan stands for 'not a number'.|||Semicolon (;) indicates end of statement. However, if you want to suppress and hide the MATLAB output for an expression, add a semicolon after the expression.|||For example,|||When you click the Execute button, or type Ctrl+E, MATLAB executes it immediately and the result returned is −|||The percent symbol (%) is used for indicating a comment line. For example,|||You can also write a block of comments using the block comment operators % {  and % }.|||The MATLAB editor includes tools and context menu items to help you add, remove, or change the format of comments.|||MATLAB supports the following commonly used operators and special characters −|||MATLAB supports the following special variables and constants −|||Variable names consist of a letter followed by any number of letters, digits or underscore.|||MATLAB is case-sensitive.|||Variable names can be of any length, however, MATLAB uses only first N characters, where N is given by the function namelengthmax.|||The save command is used for saving all the variables in the workspace, as a file with .mat extension, in the current directory.|||For example,|||You can reload the file anytime later using the load command.|||In MATLAB environment, every variable is an array or matrix.|||You can assign variables in a simple way. For example,|||MATLAB will execute the above statement and return the following result −|||It creates a 1-by-1 matrix named x and stores the value 3 in its element. Let us check another example,|||MATLAB will execute the above statement and return the following result −|||Please note that −|||Once a variable is entered into the system, you can refer to it later.|||Variables must have values before they are used.|||When an expression returns a result that is not assigned to any variable, the system assigns it to a variable named ans, which can be used later.|||For example,|||MATLAB will execute the above statement and return the following result −|||You can use this variable ans −|||MATLAB will execute the above statement and return the following result −|||Let's look at another example −|||MATLAB will execute the above statement and return the following result −|||You can have multiple assignments on the same line. For example,|||MATLAB will execute the above statement and return the following result −|||The who command displays all the variable names you have used.|||MATLAB will execute the above statement and return the following result −|||The whos command displays little more about the variables −|||MATLAB will execute the above statement and return the following result −|||The clear command deletes all (or the specified) variable(s) from the memory.|||Long assignments can be extended to another line by using an ellipses (...). For example,|||MATLAB will execute the above statement and return the following result −|||By default, MATLAB displays numbers with four decimal place values. This is known as short format.|||However, if you want more precision, you need to use the format command.|||The format long command displays 16 digits after decimal.|||For example −|||MATLAB will execute the above statement and return the following result−|||Another example,|||MATLAB will execute the above statement and return the following result −|||The format bank command rounds numbers to two decimal places. For example,|||MATLAB will execute the above statement and return the following result −|||MATLAB displays large numbers using exponential notation.|||The format short e command allows displaying in exponential form with four decimal places plus the exponent.|||For example,|||MATLAB will execute the above statement and return the following result −|||The format long e command allows displaying in exponential form with four decimal places plus the exponent. For example,|||MATLAB will execute the above statement and return the following result −|||The format rat command gives the closest rational expression resulting from a calculation. For example,|||MATLAB will execute the above statement and return the following result −|||A vector is a one-dimensional array of numbers. MATLAB allows creating two types of vectors −|||Row vectors are created by enclosing the set of elements in square brackets, using space or comma to delimit the elements.|||For example,|||MATLAB will execute the above statement and return the following result −|||Another example,|||MATLAB will execute the above statement and return the following result −|||Column vectors are created by enclosing the set of elements in square brackets, using semicolon(;) to delimit the elements.|||MATLAB will execute the above statement and return the following result −|||A matrix is a two-dimensional array of numbers.|||In MATLAB, a matrix is created by entering each row as a sequence of space or comma separated elements, and end of a row is demarcated by a semicolon. For example, let us create a 3-by-3 matrix as −|||MATLAB will execute the above statement and return the following result −|||MATLAB is an interactive program for numerical computation and data visualization. You can enter a command by typing it at the MATLAB prompt '>>' on the Command Window.|||In this section, we will provide lists of commonly used general MATLAB commands.|||MATLAB provides various commands for managing a session. The following table provides all such commands −|||MATLAB provides various useful commands for working with the system, like saving the current work in the workspace as a file and loading the file later.|||It also provides various commands for other system-related activities like, displaying date, listing files in the directory, displaying current directory, etc.|||The following table displays some commonly used system-related commands −|||MATLAB provides the following input and output related commands −|||The fscanf and fprintf commands behave like C scanf and printf functions. They support the following format codes −|||The format function has the following forms used for numeric display −|||The following table shows various commands used for working with arrays, matrices and vectors −|||MATLAB provides numerous commands for plotting graphs. The following table shows some of the commonly used commands for plotting −|||So far, we have used MATLAB environment as a calculator. However, MATLAB is also a powerful programming language, as well as an interactive computational environment.|||In previous chapters, you have learned how to enter commands from the MATLAB command prompt. MATLAB also allows you to write series of commands into a file and execute the file as complete unit, like writing a function and calling it.|||MATLAB allows writing two kinds of program files −|||Scripts − script files are program files with .m extension. In these files, you write series of commands, which you want to execute together. Scripts do not accept inputs and do not return any outputs. They operate on data in the workspace.|||Functions − functions files are also program files with .m extension. Functions can accept inputs and return outputs. Internal variables are local to the function.|||You can use the MATLAB editor or any other text editor to create your .mfiles. In this section, we will discuss the script files. A script file contains multiple sequential lines of MATLAB commands and function calls. You can run a script by typing its name at the command line.|||To create scripts files, you need to use a text editor. You can open the MATLAB editor in two ways −|||If you are using the command prompt, type edit in the command prompt. This will open the editor. You can directly type edit and then the filename (with .m extension)|||The above command will create the file in default MATLAB directory. If you want to store all program files in a specific folder, then you will have to provide the entire path.|||Let us create a folder named progs. Type the following commands at the command prompt (>>) −|||If you are creating the file for first time, MATLAB prompts you to confirm it. Click Yes.|||Alternatively, if you are using the IDE, choose NEW -> Script. This also opens the editor and creates a file named Untitled. You can name and save the file after typing the code.|||Type the following code in the editor −|||After creating and saving the file, you can run it in two ways −|||Clicking the Run button on the editor window or|||Just typing the filename (without extension) in the command prompt: >> prog1|||The command window prompt displays the result −|||Create a script file, and type the following code −|||When the above code is compiled and executed, it produces the following result −|||MATLAB does not require any type declaration or dimension statements. Whenever MATLAB encounters a new variable name, it creates the variable and allocates appropriate memory space.|||If the variable already exists, then MATLAB replaces the original content with new content and allocates new storage space, where necessary.|||For example,|||The above statement creates a 1-by-1 matrix named 'Total' and stores the value 42 in it.|||MATLAB provides 15 fundamental data types. Every data type stores data that is in the form of a matrix or array. The size of this matrix or array is a minimum of 0-by-0 and this can grow up to a matrix or array of any size.|||The following table shows the most commonly used data types in MATLAB −|||int8|||8-bit signed integer|||uint8|||8-bit unsigned integer|||int16|||16-bit signed integer|||uint16|||16-bit unsigned integer|||int32|||32-bit signed integer|||uint32|||32-bit unsigned integer|||int64|||64-bit signed integer|||uint64|||64-bit unsigned integer|||single|||single precision numerical data|||double|||double precision numerical data|||logical|||logical values of 1 or 0, represent true and false respectively|||char|||character data (strings are stored as vector of characters)|||cell array|||array of indexed cells, each capable of storing an array of a different dimension and data type|||structure|||C-like structures, each structure having named fields capable of storing an array of a different dimension and data type|||function handle|||pointer to a function|||user classes|||objects constructed from a user-defined class|||java classes|||objects constructed from a Java class|||Create a script file with the following code −|||When the above code is compiled and executed, it produces the following result −|||MATLAB provides various functions for converting, a value from one data type to another. The following table shows the data type conversion functions −|||MATLAB provides various functions for identifying data type of a variable. |||Following table provides the functions for determining the data type of a variable −|||Create a script file with the following code −|||When you run the file, it produces the following result −|||An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. MATLAB is designed to operate primarily on whole matrices and arrays. Therefore, operators in MATLAB work both on scalar and non-scalar data. MATLAB allows the following types of elementary operations −|||MATLAB allows two different types of arithmetic operations −|||Matrix arithmetic operations are same as defined in linear algebra. Array operations are executed element by element, both on one-dimensional and multidimensional array.|||The matrix operators and array operators are differentiated by the period (.) symbol. However, as the addition and subtraction operation is same for matrices and arrays, the operator is same for both cases. The following table gives brief description of the operators −|||Show Examples|||+|||Addition or unary plus. A+B adds the values stored in variables A and B. A and B must have the same size, unless one is a scalar. A scalar can be added to a matrix of any size.|||-|||Subtraction or unary minus. A-B subtracts the value of B from A. A and B must have the same size, unless one is a scalar. A scalar can be subtracted from a matrix of any size.|||*|||Matrix multiplication. C = A*B is the linear algebraic product of the matrices A and B. More precisely,||||||For non-scalar A and B, the number of columns of A must be equal to the number of rows of B. A scalar can multiply a matrix of any size.|||.*|||Array multiplication. A.*B is the element-by-element product of the arrays A and B. A and B must have the same size, unless one of them is a scalar.|||/|||Slash or matrix right division. B/A is roughly the same as B*inv(A). More precisely, B/A = (A'\B')'.|||./|||Array right division. A./B is the matrix with elements A(i,j)/B(i,j). A and B must have the same size, unless one of them is a scalar.|||\|||Backslash or matrix left division. If A is a square matrix, A\B is roughly the same as inv(A)*B, except it is computed in a different way. If A is an n-by-n matrix and B is a column vector with n components, or a matrix with several such columns, then X = A\B is the solution to the equation AX = B. A warning message is displayed if A is badly scaled or nearly singular.|||.\|||Array left division. A.\B is the matrix with elements B(i,j)/A(i,j). A and B must have the same size, unless one of them is a scalar.|||^|||Matrix power. X^p is X to the power p, if p is a scalar. If p is an integer, the power is computed by repeated squaring. If the integer is negative, X is inverted first. For other values of p, the calculation involves eigenvalues and eigenvectors, such that if [V,D] = eig(X), then X^p = V*D.^p/V.|||.^|||Array power. A.^B is the matrix with elements A(i,j) to the B(i,j) power. A and B must have the same size, unless one of them is a scalar.|||'|||Matrix transpose. A' is the linear algebraic transpose of A. For complex matrices, this is the complex conjugate transpose.|||.'|||Array transpose. A.' is the array transpose of A. For complex matrices, this does not involve conjugation.|||Relational operators can also work on both scalar and non-scalar data. Relational operators for arrays perform element-by-element comparisons between two arrays and return a logical array of the same size, with elements set to logical 1 (true) where the relation is true and elements set to logical 0 (false) where it is not.|||The following table shows the relational operators available in MATLAB −|||Show Examples|||<|||Less than|||<=|||Less than or equal to|||>|||Greater than|||>=|||Greater than or equal to|||==|||Equal to|||~=|||Not equal to|||MATLAB offers two types of logical operators and functions −|||Element-wise − These operators operate on corresponding elements of logical arrays.|||Short-circuit − These operators operate on scalar and, logical expressions.|||Element-wise logical operators operate element-by-element on logical arrays. The symbols &, |, and ~ are the logical array operators AND, OR, and NOT.|||Short-circuit logical operators allow short-circuiting on logical operations. The symbols && and || are the logical short-circuit operators AND and OR.|||Show Examples|||Bitwise operators work on bits and perform bit-by-bit operation. The truth tables for &, |, and ^ are as follows −|||Assume if A = 60; and B = 13; Now in binary format they will be as follows −|||A = 0011 1100|||B = 0000 1101|||-----------------|||A&B = 0000 1100|||A|B = 0011 1101|||A^B = 0011 0001|||~A  = 1100 0011|||MATLAB provides various functions for bit-wise operations like 'bitwise and', 'bitwise or' and 'bitwise not' operations, shift operation, etc.|||The following table shows the commonly used bitwise operations −|||Show Examples|||MATLAB provides various functions for set operations, like union, intersection and testing for set membership, etc.|||The following table shows some commonly used set operations −|||Show Examples|||intersect(A,B)|||Set intersection of two arrays; returns the values common to both A and B. The values returned are in sorted order.|||intersect(A,B,'rows')|||Treats each row of A and each row of B as single entities and returns the rows common to both A and B. The rows of the returned matrix are in sorted order.|||ismember(A,B)|||Returns an array the same size as A, containing 1 (true) where the elements of A are found in B. Elsewhere, it returns 0 (false).|||ismember(A,B,'rows')|||Treats each row of A and each row of B as single entities and returns a vector containing 1 (true) where the rows of matrix A are also rows of B. Elsewhere, it returns 0 (false).|||issorted(A)|||Returns logical 1 (true) if the elements of A are in sorted order and logical 0 (false) otherwise. Input A can be a vector or an N-by-1 or 1-by-N cell array of strings. A is considered to be sorted if A and the output of sort(A) are equal.|||issorted(A, 'rows')|||Returns logical 1 (true) if the rows of two-dimensional matrix A is in sorted order, and logical 0 (false) otherwise. Matrix A is considered to be sorted if A and the output of sortrows(A) are equal.|||setdiff(A,B)|||Sets difference of two arrays; returns the values in A that are not in B. The values in the returned array are in sorted order.|||setdiff(A,B,'rows')|||Treats each row of A and each row of B as single entities and returns the rows from A that are not in B. The rows of the returned matrix are in sorted order.|||The 'rows' option does not support cell arrays.|||setxor|||Sets exclusive OR of two arrays|||union|||Sets union of two arrays|||unique|||Unique values in array|||Decision making structures require that the programmer should specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.|||Following is the general form of a typical decision making structure found in most of the programming languages −|||MATLAB provides following types of decision making statements. Click the following links to check their detail −|||An if ... end statement consists of a boolean expression followed by one or more statements.|||An if statement can be followed by an optional else statement, which executes when the boolean expression is false.|||An if statement can be followed by one (or more) optional elseif... and an else statement, which is very useful to test various conditions.|||You can use one if or elseif statement inside another if or elseif statement(s).|||A switch statement allows a variable to be tested for equality against a list of values.|||You can use one switch statement inside another switch statement(s).|||There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially. The first statement in a function is executed first, followed by the second, and so on.|||Programming languages provide various control structures that allow for more complicated execution paths.|||A loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages −|||MATLAB provides following types of loops to handle looping requirements. Click the following links to check their detail −|||Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.|||Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.|||You can use one or more loops inside any another loop.|||Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.|||MATLAB supports the following control statements. Click the following links to check their detail.|||Terminates the loop statement and transfers execution to the statement immediately following the loop.|||Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.|||A vector is a one-dimensional array of numbers. MATLAB allows creating two types of vectors −|||Row vectors are created by enclosing the set of elements in square brackets, using space or comma to delimit the elements.|||MATLAB will execute the above statement and return the following result −|||Column vectors are created by enclosing the set of elements in square brackets, using semicolon to delimit the elements.|||MATLAB will execute the above statement and return the following result −|||You can reference one or more of the elements of a vector in several ways. The ith component of a vector v is referred as v(i). For example −|||MATLAB will execute the above statement and return the following result −|||When you reference a vector with a colon, such as v(:), all the components of the vector are listed.|||MATLAB will execute the above statement and return the following result −|||MATLAB allows you to select a range of elements from a vector.|||For example, let us create a row vector rv of 9 elements, then we will reference the elements 3 to 7 by writing rv(3:7) and create a new vector named sub_rv.|||MATLAB will execute the above statement and return the following result −|||In this section, let us discuss the following vector operations −|||Addition and Subtraction of Vectors|||Scalar Multiplication of Vectors|||Transpose of a Vector|||Appending Vectors|||Magnitude of a Vector|||Vector Dot Product|||Vectors with Uniformly Spaced Elements|||A matrix is a two-dimensional array of numbers.|||In MATLAB, you create a matrix by entering elements in each row as comma or space delimited numbers and using semicolons to mark the end of each row.|||For example, let us create a 4-by-5 matrix a −|||MATLAB will execute the above statement and return the following result −|||To reference an element in the mth row and nth column, of a matrix mx, we write −|||For example, to refer to the element in the 2nd row and 5th column, of the matrix a, as created in the last section, we type −|||MATLAB will execute the above statement and return the following result −|||To reference all the elements in the mth column we type A(:,m).|||Let us create a column vector v, from the elements of the 4th row of the matrix a −|||MATLAB will execute the above statement and return the following result −|||You can also select the elements in the mth through nth columns, for this we write −|||Let us create a smaller matrix taking the elements from the second and third columns −|||MATLAB will execute the above statement and return the following result −|||In the same way, you can create a sub-matrix taking a sub-part of a matrix.|||MATLAB will execute the above statement and return the following result −|||In the same way, you can create a sub-matrix taking a sub-part of a matrix.|||For example, let us create a sub-matrix sa taking the inner subpart of a −|||To do this, write −|||MATLAB will execute the above statement and return the following result −|||You can delete an entire row or column of a matrix by assigning an empty set of square braces [] to that row or column. Basically, [] denotes an empty array.|||For example, let us delete the fourth row of a −|||MATLAB will execute the above statement and return the following result −|||Next, let us delete the fifth column of a −|||MATLAB will execute the above statement and return the following result −|||In this example, let us create a 3-by-3 matrix m, then we will copy the second and third rows of this matrix twice to create a 4-by-3 matrix.|||Create a script file with the following code −|||When you run the file, it displays the following result −|||In this section, let us discuss the following basic and commonly used matrix operations −|||Addition and Subtraction of Matrices|||Division of Matrices|||Scalar Operations of Matrices|||Transpose of a Matrix|||Concatenating Matrices |||Matrix Multiplication|||Determinant of a Matrix|||Inverse of a Matrix|||All variables of all data types in MATLAB are multidimensional arrays. A vector is a one-dimensional array and a matrix is a two-dimensional array.|||We have already discussed vectors and matrices. In this chapter, we will discuss multidimensional arrays. However, before that, let us discuss some special types of arrays.|||In this section, we will discuss some functions that create some special arrays. For all these functions, a single argument creates a square array, double arguments create rectangular array.|||The zeros() function creates an array of all zeros −|||For example −|||MATLAB will execute the above statement and return the following result −|||The ones() function creates an array of all ones −|||For example −|||MATLAB will execute the above statement and return the following result −|||The eye() function creates an identity matrix.|||For example −|||MATLAB will execute the above statement and return the following result −|||The rand() function creates an array of uniformly distributed random numbers on (0,1) −|||For example −|||MATLAB will execute the above statement and return the following result −|||A magic square is a square that produces the same sum, when its elements are added row-wise, column-wise or diagonally.|||The magic() function creates a magic square array. It takes a singular argument that gives the size of the square. The argument must be a scalar greater than or equal to 3.|||MATLAB will execute the above statement and return the following result −|||An array having more than two dimensions is called a multidimensional array in MATLAB. Multidimensional arrays in MATLAB are an extension of the normal two-dimensional matrix.|||Generally to generate a multidimensional array, we first create a two-dimensional array and extend it.|||For example, let's create a two-dimensional array a.|||MATLAB will execute the above statement and return the following result −|||The array a is a 3-by-3 array; we can add a third dimension to a, by providing the values like −|||MATLAB will execute the above statement and return the following result −|||We can also create multidimensional arrays using the ones(), zeros() or the rand() functions.|||For example,|||MATLAB will execute the above statement and return the following result −|||We can also use the cat() function to build multidimensional arrays. It concatenates a list of arrays along a specified dimension −|||Syntax for the cat() function is −|||Where,|||B is the new array created|||A1, A2, ... are the arrays to be concatenated|||dim is the dimension along which to concatenate the arrays|||Create a script file and type the following code into it −|||When you run the file, it displays −|||MATLAB provides the following functions to sort, rotate, permute, reshape, or shift array contents. |||The following examples illustrate some of the functions mentioned above.|||Length, Dimension and Number of elements −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Circular Shifting of the Array Elements −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Cell arrays are arrays of indexed cells where each cell can store an array of a different dimensions and data types.|||The cell function is used for creating a cell array. Syntax for the cell function is −|||C is the cell array;|||dim is a scalar integer or vector of integers that specifies the dimensions of cell array C;|||dim1, ... , dimN are scalar integers that specify the dimensions of C;|||obj is One of the following −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||There are two ways to refer to the elements of a cell array −|||When you enclose the indices in first bracket, it refers to the set of cells.|||Cell array indices in smooth parentheses refer to sets of cells.|||For example −|||MATLAB will execute the above statement and return the following result −|||You can also access the contents of cells by indexing with curly braces.|||For example −|||MATLAB will execute the above statement and return the following result −|||The colon(:) is one of the most useful operator in MATLAB. It is used to create vectors, subscript arrays, and specify for iterations.|||If you want to create a row vector, containing integers from 1 to 10, you write −|||MATLAB executes the statement and returns a row vector containing the integers from 1 to 10 −|||If you want to specify an increment value other than one, for example −|||MATLAB executes the statement and returns the following result −|||Let us take another example −|||MATLAB executes the statement and returns the following result −|||You can use the colon operator to create a vector of indices to select rows, columns or elements of arrays.|||The following table describes its use for this purpose (let us have a matrix A) −|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||MATLAB supports various numeric classes that include signed and unsigned integers and single-precision and double-precision floating-point numbers. By default, MATLAB stores all numeric values as double-precision floating point numbers.|||You can choose to store any number or array of numbers as integers or as single-precision numbers.|||All numeric types support basic array operations and mathematical operations.|||MATLAB provides the following functions to convert to various numeric data types −|||Create a script file and type the following code −|||When you run the file, it shows the following result −|||Let us extend the previous example a little more. Create a script file and type the following code −|||When you run the file, it shows the following result −|||The functions intmax() and intmin() return the maximum and minimum values that can be represented with all types of integer numbers.|||Both the functions take the integer data type as the argument, for example, intmax(int8) or intmin(int64) and return the maximum and minimum values that you can represent with the integer data type.|||The following example illustrates how to obtain the smallest and largest values of integers. Create a script file and write the following code in it −|||When you run the file, it shows the following result −|||The functions realmax() and realmin() return the maximum and minimum values that can be represented with floating point numbers.|||Both the functions when called with the argument 'single', return the maximum and minimum values that you can represent with the single-precision data type and when called with the argument 'double', return the maximum and minimum values that you can represent with the double-precision data type.|||The following example illustrates how to obtain the smallest and largest floating point numbers. Create a script file and write the following code in it −|||When you run the file, it displays the following result −|||Creating a character string is quite simple in MATLAB. In fact, we have used it many times. For example, you type the following in the command prompt −|||MATLAB will execute the above statement and return the following result −|||MATLAB considers all variables as arrays, and strings are considered as character arrays. Let us use the whos command to check the variable created above −|||MATLAB will execute the above statement and return the following result −|||Interestingly, you can use numeric conversion functions like uint8 or uint16 to convert the characters in the string to their numeric codes. The char function converts the integer vector back to characters −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||The strings we have discussed so far are one-dimensional character arrays; however, we need to store more than that. We need to store more dimensional textual data in our program. This is achieved by creating rectangular character arrays.|||Simplest way of creating a rectangular character array is by concatenating two or more one-dimensional character arrays, either vertically or horizontally as required.|||You can combine strings vertically in either of the following ways −|||Using the MATLAB concatenation operator [] and separating each row with a semicolon (;). Please note that in this method each row must contain the same number of characters. For strings with different lengths, you should pad with space characters as needed.|||Using the char function. If the strings are of different lengths, char pads the shorter strings with trailing blanks so that each row has the same number of characters.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||You can combine strings horizontally in either of the following ways −|||Using the MATLAB concatenation operator, [] and separating the input strings with a comma or a space. This method preserves any trailing spaces in the input arrays.|||Using the string concatenation function, strcat. This method removes trailing spaces in the inputs.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||From our previous discussion, it is clear that combining strings with different lengths could be a pain as all strings in the array has to be of the same length. We have used blank spaces at the end of strings to equalize their length.|||However, a more efficient way to combine the strings is to convert the resulting array into a cell array.|||MATLAB cell array can hold different sizes and types of data in an array. Cell arrays provide a more flexible way to store strings of varying length.|||The cellstr function converts a character array into a cell array of strings.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||MATLAB provides numerous string functions creating, combining, parsing, comparing and manipulating strings.|||Following table provides brief description of the string functions in MATLAB −|||The following examples illustrate some of the above-mentioned string functions −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||A function is a group of statements that together perform a task. In MATLAB, functions are defined in separate files. The name of the file and of the function should be the same.|||Functions operate on variables within their own workspace, which is also called the local workspace, separate from the workspace you access at the MATLAB command prompt which is called the base workspace.|||Functions can accept more than one input arguments and may return more than one output arguments.|||Syntax of a function statement is −|||The following function named mymax should be written in a file named mymax.m. It takes five numbers as argument and returns the maximum of the numbers.|||Create a function file, named mymax.m and type the following code in it −|||The first line of a function starts with the keyword function. It gives the name of the function and order of arguments. In our example, the mymax function has five input arguments and one output argument.|||The comment lines that come right after the function statement provide the help text. These lines are printed when you type −|||MATLAB will execute the above statement and return the following result −|||You can call the function as −|||MATLAB will execute the above statement and return the following result −|||An anonymous function is like an inline function in traditional programming languages, defined within a single MATLAB statement. It consists of a single MATLAB expression and any number of input and output arguments.|||You can define an anonymous function right at the MATLAB command line or within a function or script.|||This way you can create simple functions without having to create a file for them.|||The syntax for creating an anonymous function from an expression is|||In this example, we will write an anonymous function named power, which will take two numbers as input and return first number raised to the power of the second number.|||Create a script file and type the following code in it −|||When you run the file, it displays −|||Any function other than an anonymous function must be defined within a file. Each function file contains a required primary function that appears first and any number of optional sub-functions that comes after the primary function and used by it.|||Primary functions can be called from outside of the file that defines them, either from command line or from other functions, but sub-functions cannot be called from command line or other functions, outside the function file.|||Sub-functions are visible only to the primary function and other sub-functions within the function file that defines them.|||Let us write a function named quadratic that would calculate the roots of a quadratic equation. The function would take three inputs, the quadratic co-efficient, the linear co-efficient and the constant term. It would return the roots.|||The function file quadratic.m will contain the primary function quadratic and the sub-function disc, which calculates the discriminant.|||Create a function file quadratic.m and type the following code in it −|||You can call the above function from command prompt as −|||MATLAB will execute the above statement and return the following result −|||You can define functions within the body of another function. These are called nested functions. A nested function contains any or all of the components of any other function.|||Nested functions are defined within the scope of another function and they share access to the containing function's workspace.|||A nested function follows the following syntax −|||Let us rewrite the function quadratic, from previous example, however, this time the disc function will be a nested function.|||Create a function file quadratic2.m and type the following code in it −|||You can call the above function from command prompt as −|||MATLAB will execute the above statement and return the following result −|||A private function is a primary function that is visible only to a limited group of other functions. If you do not want to expose the implementation of a function(s), you can create them as private functions.|||Private functions reside in subfolders with the special name private.|||They are visible only to functions in the parent folder.|||Let us rewrite the quadratic function. This time, however, the disc function calculating the discriminant, will be a private function.|||Create a subfolder named private in working directory. Store the following function file disc.m in it −|||Create a function quadratic3.m in your working directory and type the following code in it −|||You can call the above function from command prompt as −|||MATLAB will execute the above statement and return the following result −|||Global variables can be shared by more than one function. For this, you need to declare the variable as global in all the functions.|||If you want to access that variable from the base workspace, then declare the variable at the command line.|||The global declaration must occur before the variable is actually used in a function. It is a good practice to use capital letters for the names of global variables to distinguish them from other variables.|||Let us create a function file named average.m and type the following code in it −|||Create a script file and type the following code in it −|||When you run the file, it will display the following result −|||Importing data in MATLAB means loading data from an external file. The importdata function allows loading various data files of different formats. It has the following five forms −|||A = importdata(filename)|||Loads data into array A from the file denoted by filename.|||A = importdata('-pastespecial')|||Loads data from the system clipboard rather than from a file.|||A = importdata(___, delimiterIn)|||Interprets delimiterIn as the column separator in ASCII file, filename, or the clipboard data. You can use delimiterIn with any of the input arguments in the above syntaxes.|||A = importdata(___, delimiterIn, headerlinesIn)|||Loads data from ASCII file, filename, or the clipboard, reading numeric data starting from line headerlinesIn+1.|||[A, delimiterOut, headerlinesOut] = importdata(___)|||Returns the detected delimiter character for the input ASCII file in delimiterOut and the detected number of header lines in headerlinesOut, using any of the input arguments in the previous syntaxes.|||Let us load and display an image file. Create a script file and type the following code in it −|||When you run the file, MATLAB displays the image file. However, you must store it in the current directory.|||In this example, we import a text file and specify Delimiter and Column Header. Let us create a space-delimited ASCII file with column headers, named weeklydata.txt.|||Our text file weeklydata.txt looks like this −|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||In this example, let us import data from clipboard.|||Copy the following lines to the clipboard −|||Mathematics is simple|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||The importdata function is a high-level function. The low-level file I/O functions in MATLAB allow the most control over reading or writing data to a file. However, these functions need more detailed information about your file to work efficiently.|||MATLAB provides the following functions for read and write operations at the byte or character level −|||MATLAB provides the following functions for low-level import of text data files −|||The fscanf function reads formatted data in a text or ASCII file.|||The fgetl and fgets functions read one line of a file at a time, where a newline character separates each line.|||The fread function reads a stream of data at the byte or bit level. |||We have a text data file 'myfile.txt' saved in our working directory. The file stores rainfall data for three months; June, July and August for the year 2012. |||The data in myfile.txt contains repeated sets of time, month and rainfall measurements at five places. The header data stores the number of months M; so we have M sets of measurements.|||The file looks like this −|||We will import data from this file and display this data. Take the following steps −|||Open the file with fopen function and get the file identifier. |||Describe the data in the file with format specifiers, such as '%s' for a string, '%d' for an integer, or '%f' for a floating-point number.|||To skip literal characters in the file, include them in the format description. To skip a data field, use an asterisk ('*') in the specifier.|||For example, to read the headers and return the single value for M, we write −|||By default, fscanf reads data according to our format description until it does not find any match for the data, or it reaches the end of the file. Here we will use for loop for reading 3 sets of data and each time, it will read 7 rows and 5 columns.|||We will create a structure named mydata in the workspace to store data read from the file. This structure has three fields - time, month, and raindata array.|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||Data export (or output) in MATLAB means to write into files. MATLAB allows you to use your data in another application that reads ASCII files. For this, MATLAB provides several data export options.|||You can create the following type of files −|||Rectangular, delimited ASCII data file from an array.|||Diary (or log) file of keystrokes and the resulting text output.|||Specialized ASCII file using low-level functions such as fprintf.|||MEX-file to access your C/C++ or Fortran routine that writes to a particular text file format.|||Apart from this, you can also export data to spreadsheets.|||There are two ways to export a numeric array as a delimited ASCII data file −|||Using the save function and specifying the -ascii qualifier|||Using the dlmwrite function|||Syntax for using the save function is −|||where, my_data.out is the delimited ASCII data file created, num_array is a numeric array and  −ascii is the specifier.|||Syntax for using the dlmwrite function is −|||where, my_data.out is the delimited ASCII data file created, num_array is a numeric array and  dlm_char is the delimiter character.|||The following example demonstrates the concept. Create a script file and type the following code −|||When you run the file, it displays the following result −|||Please note that the save -ascii command and the dlmwrite function does not work with cell arrays as input. To create a delimited ASCII file from the contents of a cell array, you can|||Either, convert the cell array to a matrix using the cell2mat function|||Or export the cell array using low-level file I/O functions.|||If you use the save function to write a character array to an ASCII file, it writes the ASCII equivalent of the characters to the file.|||For example, let us write the word 'hello' to a file −|||MATLAB executes the above statements and displays the following result. which is the characters of the string 'hello' in 8-digit ASCII format.|||Diary files are activity logs of your MATLAB session. The diary function creates an exact copy of your session in a disk file, excluding graphics.|||To turn on the diary function, type −||| Optionally, you can give the name of the log file, say −|||To turn off the diary function −|||You can open the diary file in a text editor.|||So far, we have exported numeric arrays. However, you may need to create other text files, including combinations of numeric and character data, nonrectangular output files, or files with non-ASCII encoding schemes. For these purposes, MATLAB provides the low-level fprintf function.|||As in low-level I/O file activities, before exporting, you need to open or create a file with the fopen function and get the file identifier. By default, fopen opens a file for read-only access. You should specify the permission to write or append, such as 'w' or 'a'.|||After processing the file, you need to close it with fclose(fid) function.|||The following example demonstrates the concept −|||Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||To plot the graph of a function, you need to take the following steps −|||Define x, by specifying the range of values for the variable x, for which the function is to be plotted|||Define the function, y = f(x)|||Call the plot command, as plot(x, y)|||Following example would demonstrate the concept. Let us plot the simple function y = x for the range of values for x from 0 to 100, with an increment of 5.|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following plot −|||Let us take one more example to plot the function y = x2. In this example, we will draw two graphs with the same function, but in second time, we will reduce the value of increment. Please note that as we decrease the increment, the graph becomes smoother.|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following plot −|||Change the code file a little, reduce the increment to 5 −|||MATLAB draws a smoother graph −|||MATLAB allows you to add title, labels along the x-axis and y-axis, grid lines and also to adjust the axes to spruce up the graph.|||The xlabel and ylabel commands generate labels along x-axis and y-axis.|||The title command allows you to put a title on the graph.|||The grid on command allows you to put the grid lines on the graph.|||The axis equal command allows generating the plot with the same scale factors and the spaces on both axes.|||The axis square command generates a square plot.|||Create a script file and type the following code −|||MATLAB generates the following graph −|||You can draw multiple graphs on the same plot. The following example demonstrates the concept −|||Create a script file and type the following code −|||MATLAB generates the following graph −|||MATLAB provides eight basic color options for drawing graphs. The following table shows the colors and their codes −|||Let us draw the graph of two polynomials|||f(x) = 3x4 + 2x3+ 7x2 + 2x + 9 and|||g(x) = 5x3 + 9x + 2|||Create a script file and type the following code −|||When you run the file, MATLAB generates the following graph −|||The axis command allows you to set the axis scales. You can provide minimum and maximum values for x and y axes using the axis command in the following way −|||The following example shows this −|||Create a script file and type the following code −|||When you run the file, MATLAB generates the following graph −|||When you create an array of plots in the same figure, each of these plots is called a subplot. The subplot command is used for creating subplots.|||Syntax for the command is −|||where, m and n are the number of rows and columns of the plot array and p specifies where to put a particular plot.|||Each plot created with the subplot command can have its own characteristics. Following example demonstrates the concept −|||Let us generate two plots −|||y = e−1.5xsin(10x)|||y = e−2xsin(10x)|||Create a script file and type the following code −|||When you run the file, MATLAB generates the following graph −|||This chapter will continue exploring the plotting and graphics capabilities of MATLAB. We will discuss −|||The bar command draws a two dimensional bar chart. Let us take up an example to demonstrate the idea.|||Let us have an imaginary classroom with 10 students. We know the percent of marks obtained by these students are 75, 58, 90, 87, 50, 85, 92, 75, 60 and 95. We will draw the bar chart for this data.|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following bar chart −|||A contour line of a function of two variables is a curve along which the function has a constant value. Contour lines are used for creating contour maps by joining points of equal elevation above a given level, such as mean sea level.|||MATLAB provides a contour function for drawing contour maps.|||Let us generate a contour map that shows the contour lines for a given function g = f(x, y). This function has two variables. So, we will have to generate two independent variables, i.e., two data sets x and y. This is done by calling the meshgrid command.|||The meshgrid command is used for generating a matrix of elements that give the range over x and y along with the specification of increment in each case.|||Let us plot our function g = f(x, y), where −5 ≤ x ≤ 5, −3 ≤ y ≤ 3. Let us take an increment of 0.1 for both the values. The variables are set as −|||Lastly, we need to assign the function. Let our function be: x2 + y2|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following contour map −|||Let us modify the code a little to spruce up the map|||When you run the file, MATLAB displays the following contour map −|||Three-dimensional plots basically display a surface defined by a function in two variables, g = f (x,y).|||As before, to define g, we first create a set of (x,y) points over the domain of the function using the meshgrid command. Next, we assign the function itself. Finally, we use the surf command to create a surface plot.|||The following example demonstrates the concept −|||Let us create a 3D surface map for the function g = xe-(x2 + y2)|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following 3-D map −|||You can also use the mesh command to generate a three-dimensional surface. However, the surf command displays both the connecting lines and the faces of the surface in color, whereas, the mesh command creates a wireframe surface with colored lines connecting the defining points.|||So far, we have seen that all the examples work in MATLAB as well as its  GNU, alternatively called Octave. But for solving basic algebraic equations, both MATLAB and Octave are little different, so we will try to cover  MATLAB and Octave in separate sections.|||We will also discuss factorizing and simplification of algebraic expressions.|||The solve function is used for solving algebraic equations. In its simplest form, the solve function takes the equation enclosed in quotes as an argument.|||For example, let us solve for x in the equation x-5 = 0|||MATLAB will execute the above statement and return the following result −|||You can also call the solve function as −|||MATLAB will execute the above statement and return the following result −|||You may even not include the right hand side of the equation −|||MATLAB will execute the above statement and return the following result −|||If the equation involves multiple symbols, then MATLAB by default assumes that you are solving for x, however, the solve function has another form −|||where, you can also mention the variable.|||For example, let us solve the equation v – u – 3t2 = 0, for v. In this case, we should write −|||MATLAB will execute the above statement and return the following result −|||The roots function is used for solving algebraic equations in Octave and you can write above examples as follows −|||For example, let us solve for x in the equation x-5 = 0|||Octave will execute the above statement and return the following result −|||You can also call the solve function as −|||Octave will execute the above statement and return the following result −|||The solve function can also solve higher order equations. It is often used to solve quadratic equations. The function returns the roots of the equation in an array.|||The following example solves the quadratic equation x2 -7x +12 = 0. Create a script file and type the following code −|||When you run the file, it displays the following result −|||The following example solves the quadratic equation x2 -7x +12 = 0 in Octave. Create a script file and type the following code −|||When you run the file, it displays the following result −|||The solve function can also solve higher order equations. For example, let us solve a cubic equation as (x-3)2(x-7) = 0|||MATLAB will execute the above statement and return the following result −|||In case of higher order equations, roots are long containing many terms. You can get the numerical value of such roots by converting them to double. The following example solves the fourth order equation x4 − 7x3 + 3x2 − 5x + 9 = 0.|||Create a script file and type the following code −|||When you run the file, it returns the following result −|||Please note that the last two roots are complex numbers.|||The following example solves the fourth order equation x4 − 7x3 + 3x2 − 5x + 9 = 0.|||Create a script file and type the following code −|||When you run the file, it returns the following result −|||The solve function can also be used to generate solutions of systems of equations involving more than one variables. Let us take up a simple example to demonstrate this use.|||Let us solve the equations −|||5x + 9y = 5|||3x – 6y = 4|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||In same way, you can solve larger linear systems. Consider the following set of equations −|||x + 3y -2z = 5|||3x + 5y + 6z = 7|||2x + 4y + 3z = 8|||We have a little different approach to solve a system of 'n' linear equations in 'n' unknowns. Let us take up a simple example to demonstrate this use.|||Let us solve the equations −|||5x + 9y = 5|||3x – 6y = 4|||Such a system of linear equations can be written as the single matrix equation Ax = b, where A is the coefficient matrix, b is the column vector containing the right-hand side of the linear equations and x is the column vector representing the solution as shown in the below program −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||In same way, you can solve larger linear systems as given below −|||x + 3y -2z = 5|||3x + 5y + 6z = 7|||2x + 4y + 3z = 8|||The expand and the collect function expands and collects an equation respectively. The following example demonstrates the concepts −|||When you work with many symbolic functions, you should declare that your variables are symbolic.|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||You need to have symbolic package, which provides expand and the collect function to expand and collect  an equation, respectively. The following example demonstrates the concepts −|||When you work with many symbolic functions, you should declare that your variables are symbolic but Octave has different approach to define symbolic variables. Notice the use of Sin and Cos, which are also defined in symbolic package.|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||The factor function factorizes an expression and the simplify function simplifies an expression. The following example demonstrates the concept −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||MATLAB provides various ways for solving problems of differential and integral calculus, solving differential equations of any degree and calculation of limits. Best of all, you can easily plot the graphs of complex functions and check maxima, minima and other stationery points on a graph by solving the original function, as well as its derivative.|||This chapter will deal with problems of calculus. In this chapter, we will discuss pre-calculus concepts i.e., calculating limits of functions and verifying the properties of limits.|||In the next chapter Differential, we will compute derivative of an expression and find the local maxima and minima on a graph. We will also discuss solving differential equations.|||Finally, in the Integration chapter, we will discuss integral calculus.|||MATLAB provides the limit function for calculating limits. In its most basic form, the limit function takes expression as an argument and finds the limit of the expression as the independent variable goes to zero.|||For example, let us calculate the limit of a function f(x) = (x3 + 5)/(x4 + 7), as x tends to zero.|||MATLAB will execute the above statement and return the following result −|||The limit function falls in the realm of symbolic computing; you need to use the syms function to tell MATLAB which symbolic variables you are using.  You can also compute limit of a function, as the variable tends to some number other than zero. To calculate lim x->a(f(x)), we use the limit command with arguments. The first being the expression and the second is the number, that x approaches, here it is a.|||For example, let us calculate limit of a function f(x) = (x-3)/(x-1), as x tends to 1.|||MATLAB will execute the above statement and return the following result −|||Let's take another example,|||MATLAB will execute the above statement and return the following result −|||Following is Octave version of the above example using symbolic package, try to execute and compare the result −|||Octave will execute the above statement and return the following result −|||Algebraic Limit Theorem provides some basic properties of limits. These are as follows −|||Let us consider two functions −|||Let us calculate the limits of the functions as x tends to 5, of both functions and verify the basic properties of limits using these two functions and MATLAB.|||Create a script file and type the following code into it −|||When you run the file, it displays −|||Following is Octave version of the above example using symbolic package, try to execute and compare the result −|||Octave will execute the above statement and return the following result −|||When a function has a discontinuity for some particular value of the variable, the limit does not exist at that point. In other words, limits of a function f(x) has discontinuity at x = a, when the value of limit, as x approaches x from left side, does not equal the value of the limit as x approaches from right side.|||This leads to the concept of left-handed and right-handed limits. A left-handed limit is defined as the limit as x -> a, from the left, i.e., x approaches a, for values of x < a. A right-handed limit is defined as the limit as x -> a, from the right, i.e., x approaches a, for values of x > a. When the left-handed limit and right-handed limit are not equal, the limit does not exist.|||Let us consider a function −|||f(x) = (x - 3)/|x - 3||||We will show that limx->3 f(x) does not exist. MATLAB helps us to establish this fact in two ways −|||The left-handed and right-handed limits are computed by passing the character strings 'left' and 'right' to the limit command as the last argument.|||Create a script file and type the following code into it −|||When you run the file, MATLAB draws the following plot|||After this following output is displayed −|||MATLAB provides the diff command for computing symbolic derivatives. In its simplest form, you pass the function you want to differentiate to diff command as an argument.|||For example, let us compute the derivative of the function f(t) = 3t2 + 2t-2|||Create a script file and type the following code into it −|||When the above code is compiled and executed, it produces the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||Let us briefly state various equations or rules for differentiation of functions and verify these rules. For this purpose, we will write f'(x) for a first order derivative and f""(x) for a second order derivative.|||Following are the rules for differentiation −|||For any functions f and g and any real numbers a and b are the derivative of the function −|||h(x) = af(x) + bg(x) with respect to x is given by −|||h'(x) = af'(x) + bg'(x)|||The sum and subtraction rules state that if f and g are two functions, f' and g' are their derivatives respectively, then,|||(f + g)' = f' + g'|||(f - g)' = f' - g'|||The product rule states that if f and g are two functions, f' and g' are their derivatives respectively, then,|||(f.g)' = f'.g + g'.f|||The quotient rule states that if f and g are two functions, f' and g' are their derivatives respectively, then,|||(f/g)' = (f'.g - g'.f)/g2|||The polynomial or elementary power rule states that, if y = f(x) = xn, then f' = n. x(n-1)|||A direct outcome of this rule is that the derivative of any constant is zero, i.e., if y = k, any constant, then|||f' = 0|||The chain rule states that, derivative of the function of a function h(x) = f(g(x)) with respect to x is,|||h'(x)= f'(g(x)).g'(x)|||Create a script file and type the following code into it −|||When you run the file, MATLAB displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||The following table provides the derivatives of commonly used exponential, logarithmic and trigonometric functions −|||Create a script file and type the following code into it −|||When you run the file, MATLAB displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||To compute higher derivatives of a function f, we use the syntax diff(f,n).|||Let us compute the second derivative of the function y = f(x) = x .e-3x|||MATLAB executes the code and returns the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||In this example, let us solve a problem. Given that a function y = f(x) = 3 sin(x) + 7 cos(5x). We will have to find out whether the equation f"" + f = -5cos(2x) holds true.|||Create a script file and type the following code into it −|||When you run the file, it displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||If we are searching for the local maxima and minima for a graph, we are basically looking for the highest or lowest points on the graph of the function at a particular locality, or for a particular range of values of the symbolic variable.|||For a function y = f(x) the points on the graph where the graph has zero slope are called stationary points. In other words stationary points are where f'(x) = 0.|||To find the stationary points of a function we differentiate, we need to set the derivative equal to zero and solve the equation.|||Let us find the stationary points of the function f(x) = 2x3 + 3x2 − 12x + 17|||Take the following steps −|||First let us enter the function and plot its graph.|||MATLAB executes the code and returns the following plot −|||Here is Octave equivalent code for the above example −|||Our aim is to find some local maxima and minima on the graph, so let us find the local maxima and minima for the interval [-2, 2] on the graph.|||MATLAB executes the code and returns the following plot −|||Here is Octave equivalent code for the above example −|||Next, let us compute the derivative.|||MATLAB executes the code and returns the following result −|||Here is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||Let us solve the derivative function, g, to get the values where it becomes zero.|||MATLAB executes the code and returns the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||This agrees with our plot. So let us evaluate the function f at the critical points x = 1, -2. We can substitute a value in a symbolic function by using the subs command.|||MATLAB executes the code and returns the following result −|||Following is Octave equivalent of the above calculation −||||||Therefore, The minimum and maximum values on the function f(x) = 2x3 + 3x2 − 12x + 17, in the interval [-2,2] are 10 and 37.|||MATLAB provides the dsolve command for solving differential equations symbolically.|||The most basic form of the dsolve command for finding the solution to a single equation is|||where eqn is a text string used to enter the equation.|||It returns a symbolic solution with a set of arbitrary constants that MATLAB labels C1, C2, and so on. |||You can also specify initial and boundary conditions for the problem, as comma-delimited list following the equation as −|||For the purpose of using dsolve command, derivatives are indicated with a D. For example, an equation like f'(t) = -2*f + cost(t) is entered as −|||'Df = -2*f + cos(t)'|||Higher derivatives are indicated by following D by the order of the derivative.|||For example the equation f""(x) + 2f'(x) = 5sin3x should be entered as −|||'D2y + 2Dy = 5*sin(3*x)'|||Let us take up a simple example of a first order differential equation: y' = 5y.|||MATLAB executes the code and returns the following result −|||Let us take up another example of a second order differential equation as: y"" - y = 0, y(0) = -1, y'(0) = 2.|||MATLAB executes the code and returns the following result −|||Integration deals with two essentially different types of problems.|||In the first type, derivative of a function is given and we want to find the function. Therefore, we basically reverse the process of differentiation. This reverse process is known as anti-differentiation, or finding the primitive function, or finding an indefinite integral.|||The second type of problems involve adding up a very large number of very small quantities and then taking a limit as the size of the quantities approaches zero, while the number of terms tend to infinity. This process leads to the definition of the definite integral.|||Definite integrals are used for finding area, volume, center of gravity, moment of inertia, work done by a force, and in numerous other applications.|||By definition, if the derivative of a function f(x) is f'(x), then we say that an indefinite integral of f'(x) with respect to x is f(x).  For example, since the derivative (with respect to x) of x2 is 2x, we can say that an indefinite integral of 2x is x2.|||In symbols −|||f'(x2) = 2x, therefore,|||∫ 2xdx = x2.|||Indefinite integral is not unique, because derivative of x2 + c, for any value of a constant c, will also be 2x.|||This is expressed in symbols as −|||∫ 2xdx = x2 + c.|||Where, c is called an 'arbitrary constant'.|||MATLAB provides an int command for calculating integral of an expression. To derive an expression for the indefinite integral of a function, we write −|||For example, from our previous example −|||MATLAB executes the above statement and returns the following result −|||In this example, let us find the integral of some commonly used expressions. Create a script file and type the following code in it −|||When you run the file, it displays the following result −|||Create a script file and type the following code in it −|||Note that the pretty function returns an expression in a more readable format.|||When you run the file, it displays the following result −|||By definition, definite integral is basically the limit of a sum. We use definite integrals to find areas such as the area between a curve and the x-axis and the area between two curves. Definite integrals can also be used in other situations, where the quantity required can be expressed as the limit of a sum.|||The int function can be used for definite integration by passing the limits over which you want to calculate the integral.|||To calculate|||we write,|||For example, to calculate the value of  we write −|||MATLAB executes the above statement and returns the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||An alternative solution can be given using quad() function provided by Octave as follows −|||Octave executes the code and returns the following result −|||Let us calculate the area enclosed between the x-axis, and the curve y = x3−2x+5 and the ordinates x = 1 and x = 2.|||The required area is given by −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||Following is Octave equivalent of the above calculation −|||Octave executes the code and returns the following result −|||An alternative solution can be given using quad() function provided by Octave as follows −|||Octave executes the code and returns the following result −|||Find the area under the curve:  f(x) = x2 cos(x) for −4 ≤ x ≤ 9.|||Create a script file and write the following code −|||When you run the file, MATLAB plots the graph −|||The output is given below −|||Following is Octave equivalent of the above calculation −|||MATLAB represents polynomials as row vectors containing coefficients ordered by descending powers. For example, the equation P(x) = x4 + 7x3 - 5x + 9 could be represented as −|||p = [1 7 0  -5 9];|||The polyval function is used for evaluating a polynomial at a specified value. For example, to evaluate our previous polynomial p, at x = 4, type −|||MATLAB executes the above statements and returns the following result −|||MATLAB also provides the polyvalm function for evaluating a matrix polynomial. A matrix polynomial is a polynomial with matrices as variables.|||For example, let us create a square matrix X and evaluate the polynomial p, at X −|||MATLAB executes the above statements and returns the following result −|||The roots function calculates the roots of a polynomial. For example, to calculate the roots of our polynomial p, type −|||MATLAB executes the above statements and returns the following result −|||The function poly is an inverse of the roots function and returns to the polynomial coefficients. For example −|||MATLAB executes the above statements and returns the following result −|||The polyfit function finds the coefficients of a polynomial that fits a set of data in a least-squares sense. If x and y are two vectors containing the x and y data to be fitted to a n-degree polynomial, then we get the polynomial fitting the data by writing −|||Create a script file and type the following code −|||When you run the file, MATLAB displays the following result −|||And plots the following graph −|||MATLAB provides command for working with transforms, such as the Laplace and Fourier transforms. Transforms are used in science and engineering as a tool for simplifying analysis and look at data from another angle.|||For example, the Fourier transform allows us to convert a signal represented as a function of time to a function of frequency. Laplace transform allows us to convert a differential equation to an algebraic equation.|||MATLAB provides the laplace, fourier and fft commands to work with Laplace, Fourier and Fast Fourier transforms.|||The Laplace transform of a function of time f(t) is given by the following integral −|||Laplace transform is also denoted as transform of f(t) to F(s). You can see this transform or integration process converts f(t), a function of the symbolic variable t, into another function F(s), with another variable s.|||Laplace transform turns differential equations into algebraic ones. To compute a Laplace transform of a function f(t), write −|||In this example, we will compute the Laplace transform of some commonly used functions.|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||MATLAB allows us to compute the inverse Laplace transform using the command ilaplace.|||For example,|||MATLAB will execute the above statement and display the result −|||Create a script file and type the following code −|||When you run the file, it displays the following result −|||Fourier transforms commonly transforms a mathematical function of time, f(t), into a new function, sometimes denoted by  or F, whose argument is frequency with units of cycles/s (hertz) or radians per second. The new function is then known as the Fourier transform and/or the frequency spectrum of the function f.|||Create a script file and type the following code in it −|||When you run the file, MATLAB plots the following graph −|||The following result is displayed −|||Plotting the Fourier transform as −|||Gives the following graph −|||MATLAB provides the ifourier command for computing the inverse Fourier transform of a function. For example,|||MATLAB will execute the above statement and display the result −|||GNU Octave is a high-level programming language like MATLAB and it is mostly compatible with MATLAB. It is also used for numerical computations.|||Octave has the following common features with MATLAB −|||GNU Octave is also freely redistributable software. You may redistribute it and/or modify it under the terms of the GNU General Public License (GPL) as published by the Free Software Foundation.|||Most MATLAB programs run in Octave, but some of the Octave programs may not run in MATLAB because, Octave allows some syntax that MATLAB does not.|||For example, MATLAB supports single quotes only, but Octave supports both single and double quotes for defining strings. If you are looking for a tutorial on Octave, then  kindly go through this tutorial from beginning which covers both MATLAB as well as Octave.|||Almost all the examples covered in this tutorial are compatible with MATLAB as well as Octave. Let's try following example in MATLAB and Octave which produces same result without any syntax changes −|||This example creates a 3D surface map for the function g = xe-(x2 + y2). Create a script file and type the following code −|||When you run the file, MATLAB displays the following 3-D map −|||Though all the core functionality of MATLAB is available in Octave, there are some functionality for example, Differential & Integration Calculus, which does not match exactly in both the languages. This tutorial has tried to give both type of examples where they differed in their syntax.|||Consider following example where MATLAB and Octave make use of different functions to get the area of a curve: f(x) = x2 cos(x) for −4 ≤ x ≤ 9. Following is MATLAB version of the code −|||When you run the file, MATLAB plots the graph −|||The following result is displayed|||But to give area of the same curve in Octave, you will have to make use of symbolic package as follows −|||Simulink is a simulation and model-based design environment for dynamic and embedded systems, integrated with MATLAB. Simulink, also developed by MathWorks, is a data flow graphical programming language tool for modelling, simulating and analyzing multi-domain dynamic systems. It is basically a graphical block diagramming tool with customizable set of block libraries.|||It allows you to incorporate MATLAB algorithms into models as well as export the simulation results into MATLAB for further analysis.|||Simulink supports −|||There are several other add-on products provided by MathWorks and third-party hardware and software products that are available for use with Simulink.|||The following list gives brief description of some of them −|||Stateflow allows developing state machines and flow charts.|||Simulink Coder allows the generation of C source code for real-time implementation of systems automatically.|||xPC Target together with x86-based real-time systems provide an environment to simulate and test Simulink and Stateflow models in real-time on the physical system.|||Embedded Coder supports specific embedded targets.|||HDL Coder allows to automatically generate synthesizable VHDL and Verilog.|||SimEvents provides a library of graphical building blocks for modelling queuing systems.|||Simulink is capable of systematic verification and validation of models through modelling style checking, requirements traceability and model coverage analysis.|||Simulink Design Verifier allows you to identify design errors and to generate test case scenarios for model checking.|||To open Simulink, type in the MATLAB work space −|||Simulink opens with the Library Browser. The Library Browser is used for building simulation models.|||On the left side window pane, you will find several libraries categorized on the basis of various systems, clicking on each one will display the design blocks on the right window pane.|||To create a new model, click the New button on the Library Browser's toolbar. This opens a new untitled model window.|||A Simulink model is a block diagram.|||Model elements are added by selecting the appropriate elements from the Library Browser and dragging them into the Model window.|||Alternately, you can copy the model elements and paste them into the model window.|||Drag and drop items from the Simulink library to make your project.|||For the purpose of this example, two blocks will be used for the simulation - A Source (a signal) and a Sink (a scope). A signal generator (the source) generates an analog signal, which will then be graphically visualized by the scope(the sink).|||Begin by dragging the required blocks from the library to the project window. Then, connect the blocks together which can be done by dragging connectors from connection points on one block to those of another.|||Let us drag a 'Sine Wave' block into the model.|||Select 'Sinks' from the library and drag a 'Scope' block into the model.|||Drag a signal line from the output of the Sine Wave block to the input of the Scope block.||||||Run the simulation by pressing the 'Run' button, keeping all parameters default (you can change them from the Simulation menu)|||You should get the below graph from the scope.","Dealing with Matrices and Arrays@@@2-D and 3-D Plotting and graphics@@@Linear Algebra@@@Algebraic Equations@@@Non-linear Functions@@@Statistics@@@Data Analysis@@@Calculus and Differential Equations@@@Numerical Calculations@@@Integration@@@Transforms@@@Curve Fitting@@@Various other special functions|||It is a high-level language for numerical computation, visualization and application development.@@@It also provides an interactive environment for iterative exploration, design and problem solving.@@@It provides vast library of mathematical functions for linear algebra, statistics, Fourier analysis, filtering, optimization, numerical integration and solving ordinary differential equations.@@@It provides built-in graphics for visualizing data and tools for creating custom plots.@@@MATLAB's programming interface gives development tools for improving code quality maintainability and maximizing performance.@@@It provides tools for building applications with custom graphical interfaces.@@@It provides functions for integrating MATLAB based algorithms with external applications and languages such as C, Java, .NET and Microsoft Excel.|||Signal Processing and Communications@@@Image and Video Processing@@@Control Systems@@@Test and Measurement@@@Computational Finance@@@Computational Biology|||Current Folder − This panel allows you to access the project folders and files.@@@Command Window − This is the main area where commands can be entered at the command line. It is indicated by the command prompt (>>).@@@Workspace − The workspace shows all the variables created and/or imported from files.@@@Command History − This panel shows or return commands that are entered at the command line.|||Once a variable is entered into the system, you can refer to it later.@@@Variables must have values before they are used.@@@When an expression returns a result that is not assigned to any variable, the system assigns it to a variable named ans, which can be used later.|||Variables currently in memory@@@Type of each variables@@@Memory allocated to each variable@@@Whether they are complex variables or not|||Row vectors@@@Column vectors|||Scripts − script files are program files with .m extension. In these files, you write series of commands, which you want to execute together. Scripts do not accept inputs and do not return any outputs. They operate on data in the workspace.@@@Functions − functions files are also program files with .m extension. Functions can accept inputs and return outputs. Internal variables are local to the function.|||Using the command prompt@@@Using the IDE|||Clicking the Run button on the editor window or@@@Just typing the filename (without extension) in the command prompt: >> prog1|||Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Bitwise Operations@@@Set Operations|||Matrix arithmetic operations@@@Array arithmetic operations|||Element-wise − These operators operate on corresponding elements of logical arrays.@@@Short-circuit − These operators operate on scalar and, logical expressions.|||Row vectors@@@Column vectors|||Addition and Subtraction of Vectors@@@Scalar Multiplication of Vectors@@@Transpose of a Vector@@@Appending Vectors@@@Magnitude of a Vector@@@Vector Dot Product@@@Vectors with Uniformly Spaced Elements|||Addition and Subtraction of Matrices@@@Division of Matrices@@@Scalar Operations of Matrices@@@Transpose of a Matrix@@@Concatenating Matrices @@@Matrix Multiplication@@@Determinant of a Matrix@@@Inverse of a Matrix|||B is the new array created@@@A1, A2, ... are the arrays to be concatenated@@@dim is the dimension along which to concatenate the arrays|||C is the cell array;@@@dim is a scalar integer or vector of integers that specifies the dimensions of cell array C;@@@dim1, ... , dimN are scalar integers that specify the dimensions of C;@@@obj is One of the following −

Java array or object
.NET array of type System.String or System.Object

@@@Java array or object@@@.NET array of type System.String or System.Object|||Java array or object@@@.NET array of type System.String or System.Object|||Enclosing the indices in first bracket (), to refer to sets of cells@@@Enclosing the indices in braces {}, to refer to the data within individual cells|||Using the MATLAB concatenation operator [] and separating each row with a semicolon (;). Please note that in this method each row must contain the same number of characters. For strings with different lengths, you should pad with space characters as needed.@@@Using the char function. If the strings are of different lengths, char pads the shorter strings with trailing blanks so that each row has the same number of characters.|||Using the MATLAB concatenation operator, [] and separating the input strings with a comma or a space. This method preserves any trailing spaces in the input arrays.@@@Using the string concatenation function, strcat. This method removes trailing spaces in the inputs.|||The fscanf function reads formatted data in a text or ASCII file.@@@The fgetl and fgets functions read one line of a file at a time, where a newline character separates each line.@@@The fread function reads a stream of data at the byte or bit level. |||Open the file with fopen function and get the file identifier. @@@Describe the data in the file with format specifiers, such as '%s' for a string, '%d' for an integer, or '%f' for a floating-point number.@@@To skip literal characters in the file, include them in the format description. To skip a data field, use an asterisk ('*') in the specifier.
For example, to read the headers and return the single value for M, we write −

M = fscanf(fid, '%*s %*s\n%*s %*s %*s %*s\nM=%d\n\n', 1);

@@@By default, fscanf reads data according to our format description until it does not find any match for the data, or it reaches the end of the file. Here we will use for loop for reading 3 sets of data and each time, it will read 7 rows and 5 columns.@@@We will create a structure named mydata in the workspace to store data read from the file. This structure has three fields - time, month, and raindata array.|||Rectangular, delimited ASCII data file from an array.@@@Diary (or log) file of keystrokes and the resulting text output.@@@Specialized ASCII file using low-level functions such as fprintf.@@@MEX-file to access your C/C++ or Fortran routine that writes to a particular text file format.|||Using the save function and specifying the -ascii qualifier@@@Using the dlmwrite function|||Either, convert the cell array to a matrix using the cell2mat function@@@Or export the cell array using low-level file I/O functions.|||Define x, by specifying the range of values for the variable x, for which the function is to be plotted@@@Define the function, y = f(x)@@@Call the plot command, as plot(x, y)|||The xlabel and ylabel commands generate labels along x-axis and y-axis.@@@The title command allows you to put a title on the graph.@@@The grid on command allows you to put the grid lines on the graph.@@@The axis equal command allows generating the plot with the same scale factors and the spaces on both axes.@@@The axis square command generates a square plot.|||f(x) = 3x4 + 2x3+ 7x2 + 2x + 9 and@@@g(x) = 5x3 + 9x + 2|||Drawing bar charts@@@Drawing contours@@@Three dimensional plots|||f(x) = (3x + 5)/(x - 3)@@@g(x) = x2 + 1.|||By plotting the graph of the function and showing the discontinuity.@@@By computing the limits and showing that both are different.|||In the first type, derivative of a function is given and we want to find the function. Therefore, we basically reverse the process of differentiation. This reverse process is known as anti-differentiation, or finding the primitive function, or finding an indefinite integral.@@@The second type of problems involve adding up a very large number of very small quantities and then taking a limit as the size of the quantities approaches zero, while the number of terms tend to infinity. This process leads to the definition of the definite integral.|||matrices are fundamental data type@@@it has built-in support for complex numbers@@@it has built-in math functions and libraries@@@it supports user-defined functions|||system-level design@@@simulation@@@automatic code generation@@@testing and verification of embedded systems|||Stateflow allows developing state machines and flow charts.@@@Simulink Coder allows the generation of C source code for real-time implementation of systems automatically.@@@xPC Target together with x86-based real-time systems provide an environment to simulate and test Simulink and Stateflow models in real-time on the physical system.@@@Embedded Coder supports specific embedded targets.@@@HDL Coder allows to automatically generate synthesizable VHDL and Verilog.@@@SimEvents provides a library of graphical building blocks for modelling queuing systems.",,"Operator@@@Purpose|||+@@@Plus; addition operator.|||-@@@Minus; subtraction operator.|||*@@@Scalar and matrix multiplication operator.|||.*@@@Array multiplication operator.|||^@@@Scalar and matrix exponentiation operator.|||.^@@@Array exponentiation operator.|||\@@@Left-division operator.|||/@@@Right-division operator.|||.\@@@Array left-division operator.|||./@@@Array right-division operator.|||:@@@Colon; generates regularly spaced elements and represents an entire row or column.|||( )@@@Parentheses; encloses function arguments and array indices; overrides precedence.|||[ ]@@@Brackets; enclosures array elements.|||.@@@Decimal point.|||…@@@Ellipsis; line-continuation operator|||,@@@Comma; separates statements and elements in a row|||;@@@Semicolon; separates columns and suppresses display.|||%@@@Percent sign; designates a comment and specifies formatting.|||_@@@Quote sign and transpose operator.|||._@@@Nonconjugated transpose operator.|||=@@@Assignment operator.&&&Name@@@Meaning|||ans@@@Most recent answer.|||eps@@@Accuracy of floating-point precision.|||i,j@@@The imaginary unit √-1.|||Inf@@@Infinity.|||NaN@@@Undefined numerical result (not a number).|||pi@@@The number π&&&Command@@@Purpose|||clc@@@Clears command window.|||clear@@@Removes variables from memory.|||exist@@@Checks for existence of file or variable.|||global@@@Declares variables to be global.|||help@@@Searches for a help topic.|||lookfor@@@Searches help entries for a keyword.|||quit@@@Stops MATLAB.|||who@@@Lists current variables.|||whos@@@Lists current variables (long display).&&&Command@@@Purpose|||cd@@@Changes current directory.|||date@@@Displays current date.|||delete@@@Deletes a file.|||diary@@@Switches on/off diary file recording.|||dir@@@Lists all files in current directory.|||load@@@Loads workspace variables from a file.|||path@@@Displays search path.|||pwd@@@Displays current directory.|||save@@@Saves workspace variables in a file.|||type@@@Displays contents of a file.|||what@@@Lists all MATLAB files in the current directory.|||wklread@@@Reads .wk1 spreadsheet file.&&&Command@@@Purpose|||disp@@@Displays contents of an array or string.|||fscanf@@@Read formatted data from a file.|||format@@@Controls screen-display format.|||fprintf@@@Performs formatted writes to screen or file.|||input@@@Displays prompts and waits for input.|||;@@@Suppresses screen printing.&&&Format Code@@@Purpose|||%s@@@Format as a string.|||%d@@@Format as an integer.|||%f@@@Format as a floating point value.|||%e@@@Format as a floating point value in scientific notation.|||%g@@@Format in the most compact form: %f or %e.|||\n@@@Insert a new line in the output string.|||\t@@@Insert a tab in the output string.&&&Format Function@@@Display up to|||format short@@@Four decimal digits (default).|||format long@@@16 decimal digits.|||format short e@@@Five digits plus exponent.|||format long e@@@16 digits plus exponents.|||format bank@@@Two decimal digits.|||format +@@@Positive, negative, or zero.|||format rat@@@Rational approximation.|||format compact@@@Suppresses some line feeds.|||format loose@@@Resets to less compact display mode.&&&Command@@@Purpose|||cat@@@Concatenates arrays.|||find@@@Finds indices of nonzero elements.|||length@@@Computes number of elements.|||linspace@@@Creates regularly spaced vector.|||logspace@@@Creates logarithmically spaced vector.|||max@@@Returns largest element.|||min@@@Returns smallest element.|||prod@@@Product of each column.|||reshape@@@Changes size.|||size@@@Computes array size.|||sort@@@Sorts each column.|||sum@@@Sums each column.|||eye @@@Creates an identity matrix.|||ones@@@Creates an array of ones.|||zeros@@@Creates an array of zeros.|||cross@@@Computes matrix cross products.|||dot@@@Computes matrix dot products.|||det@@@Computes determinant of an array.|||inv@@@Computes inverse of a matrix.|||pinv@@@Computes pseudoinverse of a matrix.|||rank@@@Computes rank of a matrix.|||rref@@@Computes reduced row echelon form.|||cell@@@Creates cell array.|||celldisp@@@Displays cell array.|||cellplot@@@Displays graphical representation of cell array.|||num2cell@@@Converts numeric array to cell array.|||deal@@@Matches input and output lists.|||iscell@@@Identifies cell array.&&&Command@@@Purpose|||axis@@@Sets axis limits.|||fplot@@@Intelligent plotting of functions.|||grid@@@Displays gridlines.|||plot@@@Generates xy plot.|||print@@@Prints plot or saves plot to a file.|||title@@@Puts text at top of plot.|||xlabel@@@Adds text label to x-axis.|||ylabel@@@Adds text label to y-axis.|||axes@@@Creates axes objects.|||close@@@Closes the current plot.|||close all@@@Closes all plots.|||figure@@@Opens a new figure window.|||gtext@@@Enables label placement by mouse.|||hold@@@Freezes current plot.|||legend@@@Legend placement by mouse.|||refresh@@@Redraws current figure window.|||set@@@Specifies properties of objects such as axes.|||subplot@@@Creates plots in subwindows.|||text @@@Places string in figure.|||bar@@@Creates bar chart.|||loglog@@@Creates log-log plot.|||polar@@@Creates polar plot.|||semilogx@@@Creates semilog plot. (logarithmic abscissa).|||semilogy@@@Creates semilog plot. (logarithmic ordinate).|||stairs@@@Creates stairs plot.|||stem@@@Creates stem plot.&&&Sr.No.@@@Data Type & Description|||1@@@int8
8-bit signed integer|||2@@@uint8
8-bit unsigned integer|||3@@@int16
16-bit signed integer|||4@@@uint16
16-bit unsigned integer|||5@@@int32
32-bit signed integer|||6@@@uint32
32-bit unsigned integer|||7@@@int64
64-bit signed integer|||8@@@uint64
64-bit unsigned integer|||9@@@single
single precision numerical data|||10@@@double
double precision numerical data|||11@@@logical
logical values of 1 or 0, represent true and false respectively|||12@@@char
character data (strings are stored as vector of characters)|||13@@@cell array
array of indexed cells, each capable of storing an array of a different dimension and data type|||14@@@structure
C-like structures, each structure having named fields capable of storing an array of a different dimension and data type|||15@@@function handle
pointer to a function|||16@@@user classes
objects constructed from a user-defined class|||17@@@java classes
objects constructed from a Java class&&&Function@@@Purpose|||char@@@Convert to character array (string)|||int2str@@@Convert integer data to string|||mat2str@@@Convert matrix to string|||num2str@@@Convert number to string|||str2double@@@Convert string to double-precision value|||str2num@@@Convert string to number|||native2unicode@@@Convert numeric bytes to Unicode characters|||unicode2native@@@Convert Unicode characters to numeric bytes|||base2dec@@@Convert base N number string to decimal number|||bin2dec@@@Convert binary number string to decimal number|||dec2base@@@Convert decimal to base N number in string|||dec2bin@@@Convert decimal to binary number in string|||dec2hex@@@Convert decimal to hexadecimal number in string|||hex2dec@@@Convert hexadecimal number string to decimal number|||hex2num@@@Convert hexadecimal number string to double-precision number|||num2hex@@@Convert singles and doubles to IEEE hexadecimal strings|||cell2mat@@@Convert cell array to numeric array|||cell2struct@@@Convert cell array to structure array|||cellstr@@@Create cell array of strings from character array|||mat2cell@@@Convert array to cell array with potentially different sized cells|||num2cell@@@Convert array to cell array with consistently sized cells|||struct2cell@@@Convert structure to cell array&&&Function@@@Purpose|||is@@@Detect state|||isa@@@Determine if input is object of specified class|||iscell@@@Determine whether input is cell array|||iscellstr@@@Determine whether input is cell array of strings|||ischar@@@Determine whether item is character array|||isfield@@@Determine whether input is structure array field|||isfloat@@@Determine if input is floating-point array|||ishghandle@@@True for Handle Graphics object handles|||isinteger@@@Determine if input is integer array|||isjava@@@Determine if input is Java object|||islogical@@@Determine if input is logical array|||isnumeric@@@Determine if input is numeric array|||isobject@@@Determine if input is MATLAB object|||isreal@@@Check if input is real array|||isscalar@@@Determine whether input is scalar|||isstr@@@Determine whether input is character array|||isstruct@@@Determine whether input is structure array|||isvector@@@Determine whether input is vector|||class@@@Determine class of object|||validateattributes@@@Check validity of array|||whos@@@List variables in workspace, with sizes and types&&&Sr.No.@@@Operator & Description|||1@@@+
Addition or unary plus. A+B adds the values stored in variables A and B. A and B must have the same size, unless one is a scalar. A scalar can be added to a matrix of any size.|||2@@@-
Subtraction or unary minus. A-B subtracts the value of B from A. A and B must have the same size, unless one is a scalar. A scalar can be subtracted from a matrix of any size.|||3@@@*
Matrix multiplication. C = A*B is the linear algebraic product of the matrices A and B. More precisely,

For non-scalar A and B, the number of columns of A must be equal to the number of rows of B. A scalar can multiply a matrix of any size.|||4@@@.*
Array multiplication. A.*B is the element-by-element product of the arrays A and B. A and B must have the same size, unless one of them is a scalar.|||5@@@/
Slash or matrix right division. B/A is roughly the same as B*inv(A). More precisely, B/A = (A'\B')'.|||6@@@./
Array right division. A./B is the matrix with elements A(i,j)/B(i,j). A and B must have the same size, unless one of them is a scalar.|||7@@@\
Backslash or matrix left division. If A is a square matrix, A\B is roughly the same as inv(A)*B, except it is computed in a different way. If A is an n-by-n matrix and B is a column vector with n components, or a matrix with several such columns, then X = A\B is the solution to the equation AX = B. A warning message is displayed if A is badly scaled or nearly singular.|||8@@@.\
Array left division. A.\B is the matrix with elements B(i,j)/A(i,j). A and B must have the same size, unless one of them is a scalar.|||9@@@^
Matrix power. X^p is X to the power p, if p is a scalar. If p is an integer, the power is computed by repeated squaring. If the integer is negative, X is inverted first. For other values of p, the calculation involves eigenvalues and eigenvectors, such that if [V,D] = eig(X), then X^p = V*D.^p/V.|||10@@@.^
Array power. A.^B is the matrix with elements A(i,j) to the B(i,j) power. A and B must have the same size, unless one of them is a scalar.|||11@@@'
Matrix transpose. A' is the linear algebraic transpose of A. For complex matrices, this is the complex conjugate transpose.|||12@@@.'
Array transpose. A.' is the array transpose of A. For complex matrices, this does not involve conjugation.&&&Sr.No.@@@Operator & Description|||1@@@<
Less than|||2@@@<=
Less than or equal to|||3@@@>
Greater than|||4@@@>=
Greater than or equal to|||5@@@==
Equal to|||6@@@~=
Not equal to&&&p@@@q@@@p & q@@@p | q@@@p ^ q|||0@@@0@@@0@@@0@@@0|||0@@@1@@@0@@@1@@@1|||1@@@1@@@1@@@1@@@0|||1@@@0@@@0@@@1@@@1&&&Function@@@Purpose |||bitand(a, b)@@@Bit-wise AND of integers a and b|||bitcmp(a)@@@Bit-wise complement of a|||bitget(a,pos)@@@Get bit at specified position pos, in the integer array a|||bitor(a, b)@@@Bit-wise OR of integers a and b|||bitset(a, pos)@@@Set bit at specific location pos of a|||bitshift(a, k)@@@Returns a shifted to the left by k bits, equivalent to multiplying by 2k. Negative values of k correspond to shifting bits right or dividing by 2|k| and rounding to the nearest integer towards negative infinite. Any overflow bits are truncated.|||bitxor(a, b)@@@Bit-wise XOR of integers a and b|||swapbytes@@@Swap byte ordering&&&Sr.No.@@@Function & Description|||1@@@intersect(A,B)
Set intersection of two arrays; returns the values common to both A and B. The values returned are in sorted order.|||2@@@intersect(A,B,'rows')
Treats each row of A and each row of B as single entities and returns the rows common to both A and B. The rows of the returned matrix are in sorted order.|||3@@@ismember(A,B)
Returns an array the same size as A, containing 1 (true) where the elements of A are found in B. Elsewhere, it returns 0 (false).|||4@@@ismember(A,B,'rows')
Treats each row of A and each row of B as single entities and returns a vector containing 1 (true) where the rows of matrix A are also rows of B. Elsewhere, it returns 0 (false).|||5@@@issorted(A)
Returns logical 1 (true) if the elements of A are in sorted order and logical 0 (false) otherwise. Input A can be a vector or an N-by-1 or 1-by-N cell array of strings. A is considered to be sorted if A and the output of sort(A) are equal.|||6@@@issorted(A, 'rows')
Returns logical 1 (true) if the rows of two-dimensional matrix A is in sorted order, and logical 0 (false) otherwise. Matrix A is considered to be sorted if A and the output of sortrows(A) are equal.|||7@@@setdiff(A,B)
Sets difference of two arrays; returns the values in A that are not in B. The values in the returned array are in sorted order.|||8@@@setdiff(A,B,'rows')
Treats each row of A and each row of B as single entities and returns the rows from A that are not in B. The rows of the returned matrix are in sorted order.
The 'rows' option does not support cell arrays.
|||9@@@setxor
Sets exclusive OR of two arrays|||10@@@union
Sets union of two arrays|||11@@@unique
Unique values in array&&&Sr.No.@@@Statement & Description|||1@@@if ... end statement
An if ... end statement consists of a boolean expression followed by one or more statements.|||2@@@if...else...end statement
An if statement can be followed by an optional else statement, which executes when the boolean expression is false.|||3@@@If... elseif...elseif...else...end statements
An if statement can be followed by one (or more) optional elseif... and an else statement, which is very useful to test various conditions.|||4@@@nested if statements
You can use one if or elseif statement inside another if or elseif statement(s).|||5@@@switch statement
A switch statement allows a variable to be tested for equality against a list of values.|||6@@@nested switch statements
You can use one switch statement inside another switch statement(s).&&&Sr.No.@@@Loop Type & Description|||1@@@while loop
Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.|||2@@@for loop
Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.|||3@@@nested loops
You can use one or more loops inside any another loop.&&&Sr.No.@@@Control Statement & Description|||1@@@break statement
Terminates the loop statement and transfers execution to the statement immediately following the loop.|||2@@@continue statement
Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.&&&Function@@@Purpose|||length@@@Length of vector or largest array dimension|||ndims@@@Number of array dimensions|||numel@@@Number of array elements|||size@@@Array dimensions|||iscolumn@@@Determines whether input is column vector|||isempty@@@Determines whether array is empty|||ismatrix@@@Determines whether input is matrix|||isrow@@@Determines whether input is row vector|||isscalar@@@Determines whether input is scalar|||isvector@@@Determines whether input is vector|||blkdiag@@@Constructs block diagonal matrix from input arguments|||circshift@@@Shifts array circularly|||ctranspose@@@Complex conjugate transpose|||diag@@@Diagonal matrices and diagonals of matrix|||flipdim@@@Flips array along specified dimension|||fliplr@@@Flips matrix from left to right|||flipud@@@Flips matrix up to down|||ipermute@@@Inverses permute dimensions of N-D array|||permute@@@Rearranges dimensions of N-D array|||repmat@@@Replicates and tile array|||reshape@@@Reshapes array|||rot90@@@Rotates matrix 90 degrees|||shiftdim@@@Shifts dimensions|||issorted@@@Determines whether set elements are in sorted order|||sort@@@Sorts array elements in ascending or descending order|||sortrows@@@Sorts rows in ascending order|||squeeze@@@Removes singleton dimensions|||transpose@@@Transpose|||vectorize@@@Vectorizes expression&&&Format@@@Purpose|||A(:,j)@@@is the jth column of A.|||A(i,:)@@@is the ith row of A.|||A(:,:)@@@is the equivalent two-dimensional array. For matrices this is the same as A.|||A(j:k)@@@is A(j), A(j+1),...,A(k).|||A(:,j:k)@@@is A(:,j), A(:,j+1),...,A(:,k).|||A(:,:,k)@@@is the kth page of three-dimensional array A.|||A(i,j,k,:)@@@is a vector in four-dimensional array A. The vector includes A(i,j,k,1), A(i,j,k,2), A(i,j,k,3), and so on.|||A(:)@@@is all the elements of A, regarded as a single column. On the left side of an assignment statement, A(:) fills A, preserving its shape from before. In this case, the right side must contain the same number of elements as A.&&&Function @@@Purpose |||double@@@Converts to double precision number|||single@@@Converts to single precision number|||int8@@@Converts to 8-bit signed integer|||int16@@@Converts to 16-bit signed integer|||int32@@@Converts to 32-bit signed integer|||int64@@@Converts to 64-bit signed integer|||uint8@@@Converts to 8-bit unsigned integer|||uint16@@@Converts to 16-bit unsigned integer|||uint32@@@Converts to 32-bit unsigned integer|||uint64@@@Converts to 64-bit unsigned integer&&&Function@@@Purpose@@@Functions for storing text in character arrays, combine character arrays, etc.@@@Functions for identifying parts of strings, find and replace substrings@@@Functions for string comparison@@@Functions for changing string to upper- or lowercase, creating or removing white space||||||blanks@@@Create string of blank characters|||cellstr@@@Create cell array of strings from character array|||char@@@Convert to character array (string)|||iscellstr@@@Determine whether input is cell array of strings|||ischar@@@Determine whether item is character array|||sprintf@@@Format data into string|||strcat@@@Concatenate strings horizontally|||strjoin@@@Join strings in cell array into single string||||||ischar@@@Determine whether item is character array|||isletter@@@Array elements that are alphabetic letters|||isspace@@@Array elements that are space characters|||isstrprop@@@Determine whether string is of specified category|||sscanf@@@Read formatted data from string|||strfind@@@Find one string within another|||strrep@@@Find and replace substring|||strsplit@@@Split string at specified delimiter|||strtok@@@Selected parts of string|||validatestring@@@Check validity of text string|||symvar@@@Determine symbolic variables in expression|||regexp@@@Match regular expression (case sensitive)|||regexpi@@@Match regular expression (case insensitive)|||regexprep@@@Replace string using regular expression|||regexptranslate@@@Translate string into regular expression||||||strcmp@@@Compare strings (case sensitive)|||strcmpi@@@Compare strings (case insensitive)|||strncmp@@@Compare first n characters of strings (case sensitive)|||strncmpi@@@Compare first n characters of strings (case insensitive)||||||deblank@@@Strip trailing blanks from end of string|||strtrim@@@Remove leading and trailing white space from string|||lower@@@Convert string to lowercase|||upper@@@Convert string to uppercase|||strjust@@@Justify character array&&&Sr.No.@@@Function & Description|||1@@@
A = importdata(filename)
Loads data into array A from the file denoted by filename.
|||2@@@
A = importdata('-pastespecial')
Loads data from the system clipboard rather than from a file.
|||3@@@
A = importdata(___, delimiterIn)
Interprets delimiterIn as the column separator in ASCII file, filename, or the clipboard data. You can use delimiterIn with any of the input arguments in the above syntaxes.
|||4@@@
A = importdata(___, delimiterIn, headerlinesIn)
Loads data from ASCII file, filename, or the clipboard, reading numeric data starting from line headerlinesIn+1.
|||5@@@
[A, delimiterOut, headerlinesOut] = importdata(___)
Returns the detected delimiter character for the input ASCII file in delimiterOut and the detected number of header lines in headerlinesOut, using any of the input arguments in the previous syntaxes.
&&&Function@@@Description |||fclose@@@Close one or all open files|||feof@@@Test for end-of-file|||ferror@@@Information about file I/O errors|||fgetl@@@Read line from file, removing newline characters|||fgets@@@Read line from file, keeping newline characters|||fopen@@@Open file, or obtain information about open files|||fprintf@@@Write data to text file|||fread@@@Read data from binary file|||frewind@@@Move file position indicator to beginning of open file|||fscanf@@@Read data from text file|||fseek@@@Move to specified position in file|||ftell@@@Position in open file|||fwrite@@@Write data to binary file&&&Code@@@Color|||w@@@White|||k@@@Black|||b@@@Blue|||r@@@Red|||c@@@Cyan|||g@@@Green|||m@@@Magenta|||y@@@Yellow&&&Function@@@Derivative|||ca.x@@@ca.x.ln c.a (ln is natural logarithm)|||ex@@@ex|||ln x@@@1/x|||lncx@@@1/x.ln c|||xx@@@xx.(1 + ln x)|||sin(x)@@@cos(x)|||cos(x)@@@-sin(x)|||tan(x)@@@sec2(x), or  1/cos2(x),  or  1 + tan2(x)|||cot(x)@@@-csc2(x), or  -1/sin2(x), or  -(1 + cot2(x))|||sec(x)@@@sec(x).tan(x)|||csc(x)@@@-csc(x).cot(x)","5 + 5|||3 ^ 2	       % 3 raised to the power of 2|||sin(pi /2)	  % sine of angle 90o|||7/0		      % Divide by zero|||732 * 20.3	|||x = 3;y = x + 5|||x = 9	     % assign the value 9 to x|||x = 3	       % defining x and initializing it with a value|||x = sqrt(16) 	% defining x and initializing it with an expression|||sqrt(78)|||sqrt(78);9876/ans|||x = 7 * 8;y = x * 7.89|||a = 2; b = 7; c = a * b|||initial_velocity = 0;acceleration = 9.8;time = 20;final_velocity = initial_velocity + acceleration * time|||format longx = 7 + 10/3 + 5 ^ 1.2|||format shortx = 7 + 10/3 + 5 ^ 1.2|||format bankdaily_wage = 177.45;weekly_wage = daily_wage * 6|||format short e4.678 * 4.9|||format long ex = pi|||format rat4.678 * 4.9|||r = [7 8 9 10 11]|||r = [7 8 9 10 11];t = [2, 3, 4, 5, 6];res = r + t|||c = [7;  8;  9;  10; 11]|||m = [1 2 3; 4 5 6; 7 8 9]|||edit Oredit <filename>|||mkdir progs    % create directory progs under default directorychdir progs    % changing the current directory to progsedit  prog1.m  % creating an m file named prog1.m|||NoOfStudents = 6000;TeachingStaff = 150;NonTeachingStaff = 20;Total = NoOfStudents + TeachingStaff ...   + NonTeachingStaff;disp(Total);|||a = 5; b = 7;c = a + bd = c + sin(b)e = 5 * df = exp(-d)|||str = 'Hello World!'n = 2345d = double(n)un = uint32(789.50)rn = 5678.92347c = int32(rn)|||x = 3isinteger(x)isfloat(x)isvector(x)isscalar(x)isnumeric(x) x = 23.54isinteger(x)isfloat(x)isvector(x)isscalar(x)isnumeric(x) x = [1 2 3]isinteger(x)isfloat(x)isvector(x)isscalar(x) x = 'Hello'isinteger(x)isfloat(x)isvector(x)isscalar(x)isnumeric(x)|||r = [7 8 9 10 11]|||c = [7;  8;  9;  10; 11]|||v = [ 1; 2; 3; 4; 5; 6];	% creating a column vector of 6 elementsv(3)|||v = [ 1; 2; 3; 4; 5; 6];	% creating a column vector of 6 elementsv(:)|||rv = [1 2 3 4 5 6 7 8 9];sub_rv = rv(3:7)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8]|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(2,5)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];v = a(:,4)|||a(:,m:n)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(:, 2:3)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(:, 2:3)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];sa = a(2:3,2:4)|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a( 4 , : ) = []|||a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];a(: , 5)=[]|||a = [ 1 2 3 ; 4 5 6; 7 8 9];new_mat = a([2,3,2,3],:)|||zeros(5)|||ones(4,3)|||eye(4)|||rand(3, 5)|||magic(4)|||a = [7 9 5; 6 1 9; 4 3 2]|||a(:, :, 2)= [ 1 2 3; 4 5 6; 7 8 9]|||b = rand(4,3,2)|||B = cat(dim, A1, A2...)|||a = [9 8 7; 6 5 4; 3 2 1];b = [1 2 3; 4 5 6; 7 8 9];c = cat(3, a, b, [ 2 3 1; 4 7 8; 3 9 0])|||x = [7.1, 3.4, 7.2, 28/4, 3.6, 17, 9.4, 8.9];length(x)      % length of x vectory = rand(3, 4, 5, 2);ndims(y)       % no of dimensions in array ys = ['Zara', 'Nuha', 'Shamim', 'Riz', 'Shadab'];numel(s)       % no of elements in s|||a = [1 2 3; 4 5 6; 7 8 9]  % the original array ab = circshift(a,1)         %  circular shift first dimension values down by 1.c = circshift(a,[1 -1])    % circular shift first dimension values % down by 1                            % and second dimension values to the left % by 1.|||v = [ 23 45 12 9 5 0 19 17]  % horizontal vectorsort(v)                      % sorting vm = [2 6 4; 5 3 9; 2 0 1]    % two dimensional arraysort(m, 1)                   % sorting m along the rowsort(m, 2)                   % sorting m along the column|||C = cell(dim)C = cell(dim1,...,dimN)D = cell(obj)|||c = cell(2, 5);c = {'Red', 'Blue', 'Green', 'Yellow', 'White'; 1 2 3 4 5}|||c = {'Red', 'Blue', 'Green', 'Yellow', 'White'; 1 2 3 4 5};c(1:2,1:2)|||c = {'Red', 'Blue', 'Green', 'Yellow', 'White'; 1 2 3 4 5};c{1, 2:4}|||1:10|||100: -5: 50|||0:pi/8:pi|||A = [1 2 3 4; 4 5 6 7; 7 8 9 10]A(:,2)      % second column of AA(:,2:3)    % second and third column of AA(2:3,2:3)  % second and third rows and second and third columns|||x = single([5.32 3.47 6.28]) .* 7.5x = double([5.32 3.47 6.28]) .* 7.5x = int8([5.32 3.47 6.28]) .* 7.5x = int16([5.32 3.47 6.28]) .* 7.5x = int32([5.32 3.47 6.28]) .* 7.5x = int64([5.32 3.47 6.28]) .* 7.5|||x = int32([5.32 3.47 6.28]) .* 7.5x = int64([5.32 3.47 6.28]) .* 7.5x = num2cell(x)|||% displaying the smallest and largest signed integer datastr = 'The range for int8 is:\n\t%d to %d ';sprintf(str, intmin('int8'), intmax('int8'))str = 'The range for int16 is:\n\t%d to %d ';sprintf(str, intmin('int16'), intmax('int16'))str = 'The range for int32 is:\n\t%d to %d ';sprintf(str, intmin('int32'), intmax('int32'))str = 'The range for int64 is:\n\t%d to %d ';sprintf(str, intmin('int64'), intmax('int64')) % displaying the smallest and largest unsigned integer datastr = 'The range for uint8 is:\n\t%d to %d ';sprintf(str, intmin('uint8'), intmax('uint8'))str = 'The range for uint16 is:\n\t%d to %d ';sprintf(str, intmin('uint16'), intmax('uint16'))str = 'The range for uint32 is:\n\t%d to %d ';sprintf(str, intmin('uint32'), intmax('uint32'))str = 'The range for uint64 is:\n\t%d to %d ';sprintf(str, intmin('uint64'), intmax('uint64'))|||% displaying the smallest and largest single-precision % floating point numberstr = 'The range for single is:\n\t%g to %g and\n\t %g to  %g';sprintf(str, -realmax('single'), -realmin('single'), ...   realmin('single'), realmax('single'))% displaying the smallest and largest double-precision % floating point numberstr = 'The range for double is:\n\t%g to %g and\n\t %g to  %g';sprintf(str, -realmax('double'), -realmin('double'), ...   realmin('double'), realmax('double'))|||my_string = 'Tutorials Point'|||whos|||my_string = 'Tutorial''s Point';str_ascii = uint8(my_string)        % 8-bit ascii valuesstr_back_to_char= char(str_ascii)  str_16bit = uint16(my_string)       % 16-bit ascii valuesstr_back_to_char = char(str_16bit)  |||doc_profile = ['Zara Ali                             '; ...               'Sr. Surgeon                          '; ...               'R N Tagore Cardiology Research Center']doc_profile = char('Zara Ali', 'Sr. Surgeon', ...                  'RN Tagore Cardiology Research Center')|||name =     'Zara Ali                             ';position = 'Sr. Surgeon                          '; worksAt =  'R N Tagore Cardiology Research Center';profile = [name ', ' position ', ' worksAt]profile = strcat(name, ', ', position, ', ', worksAt)|||name =     'Zara Ali                             ';position = 'Sr. Surgeon                          '; worksAt =  'R N Tagore Cardiology Research Center';profile = char(name, position, worksAt);profile = cellstr(profile);disp(profile)|||A = pi*1000*ones(1,5);sprintf(' %f \n %.2f \n %+.2f \n %12.2f \n %012.2f \n', A)|||%cell array of stringsstr_array = {'red','blue','green', 'yellow', 'orange'};% Join strings in cell array into single stringstr1 = strjoin(str_array, ""-"")str2 = strjoin(str_array, "","")|||students = {'Zara Ali', 'Neha Bhatnagar', ...            'Monica Malik', 'Madhu Gautam', ...            'Madhu Sharma', 'Bhawna Sharma',...            'Nuha Ali', 'Reva Dutta', ...            'Sunaina Ali', 'Sofia Kabir'}; % The strrep function searches and replaces sub-string.new_student = strrep(students(8), 'Reva', 'Poulomi')% Display first namesfirst_names = strtok(students)|||str1 = 'This is test'str2 = 'This is text'if (strcmp(str1, str2))   sprintf('%s and %s are equal', str1, str2)else   sprintf('%s and %s are not equal', str1, str2)end|||function max = mymax(n1, n2, n3, n4, n5)%This function calculates the maximum of the% five numbers given as inputmax =  n1;if(n2 > max)   max = n2;endif(n3 > max)   max = n3;endif(n4 > max)   max = n4;endif(n5 > max)   max = n5;end|||power = @(x, n) x.^n;result1 = power(7, 3)result2 = power(49, 0.5)result3 = power(10, -10)result4 = power (4.5, 1.5)|||function [x1,x2] = quadratic(a,b,c)%this function returns the roots of % a quadratic equation.% It takes 3 input arguments% which are the co-efficients of x2, x and the %constant term% It returns the rootsd = disc(a,b,c); x1 = (-b + d) / (2*a);x2 = (-b - d) / (2*a);end   % end of quadraticfunction dis = disc(a,b,c) %function calculates the discriminantdis = sqrt(b^2 - 4*a*c);end   % end of sub-function|||quadratic(2,4,-4)|||function [x1,x2] = quadratic2(a,b,c)function disc  % nested functiond = sqrt(b^2 - 4*a*c);end   % end of function discdisc;x1 = (-b + d) / (2*a);x2 = (-b - d) / (2*a);end   % end of function quadratic2|||quadratic2(2,4,-4)|||function dis = disc(a,b,c) %function calculates the discriminantdis = sqrt(b^2 - 4*a*c);end      % end of sub-function|||function [x1,x2] = quadratic3(a,b,c)%this function returns the roots of % a quadratic equation.% It takes 3 input arguments% which are the co-efficient of x2, x and the %constant term% It returns the rootsd = disc(a,b,c); x1 = (-b + d) / (2*a);x2 = (-b - d) / (2*a);end      % end of quadratic3|||quadratic3(2,4,-4)|||function avg = average(nums)global TOTALavg = sum(nums)/TOTAL;end|||global TOTAL;TOTAL = 10;n = [34, 45, 25, 45, 33, 19, 40, 34, 38, 42];av = average(n)|||filename = 'smile.jpg';A = importdata(filename);image(A);|||filename = 'weeklydata.txt';delimiterIn = ' ';headerlinesIn = 1;A = importdata(filename,delimiterIn,headerlinesIn);% View datafor k = [1:7]   disp(A.colheaders{1, k})   disp(A.data(:, k))   disp(' ')end|||M = fscanf(fid, '%*s %*s\n%*s %*s %*s %*s\nM=%d\n\n', 1);|||filename = '/data/myfile.txt';rows = 7;cols = 5; % open the filefid = fopen(filename); % read the file headers, find M (number of months)M = fscanf(fid, '%*s %*s\n%*s %*s %*s %*s\nM=%d\n\n', 1); % read each set of measurementsfor n = 1:M   mydata(n).time = fscanf(fid, '%s', 1);   mydata(n).month = fscanf(fid, '%s', 1);    % fscanf fills the array in column order,   % so transpose the results   mydata(n).raindata  = ...      fscanf(fid, '%f', [rows, cols]);endfor n = 1:M   disp(mydata(n).time), disp(mydata(n).month)   disp(mydata(n).raindata)end % close the filefclose(fid);|||num_array = [ 1 2 3 4 ; 4 5 6 7; 7 8 9 0];save array_data1.out num_array -ascii;type array_data1.outdlmwrite('array_data2.out', num_array, ' ');type array_data2.out|||h = 'hello';save textdata.out h -asciitype textdata.out|||diary|||% create a matrix y, with two rowsx = 0:10:100;y = [x; log(x)]; % open a file for writingfid = fopen('logtable.txt', 'w'); % Table Headerfprintf(fid, 'Log     Function\n\n'); % print values in column order% two values appear on each row of the filefprintf(fid, '%f    %f\n', y);fclose(fid);% display the file createdtype logtable.txt|||x = [0:5:100];y = x;plot(x, y)|||x = [1 2 3 4 5 6 7 8 9 10];x = [-100:20:100];y = x.^2;plot(x, y)|||x = [-100:5:100];y = x.^2;plot(x, y)|||x = [0:0.01:10];y = sin(x);plot(x, y), xlabel('x'), ylabel('Sin(x)'), title('Sin(x) Graph'),grid on, axis equal|||x = [0 : 0.01: 10];y = sin(x);g = cos(x);plot(x, y, x, g, '.-'), legend('Sin(x)', 'Cos(x)')|||x = [-10 : 0.01: 10];y = 3*x.^4 + 2 * x.^3 + 7 * x.^2 + 2 * x + 9;g = 5 * x.^3 + 9 * x + 2;plot(x, y, 'r', x, g, 'g')|||x = [0 : 0.01: 10];y = exp(-x).* sin(2*x + 3);plot(x, y), axis([0 10 -1 1])|||x = [0:0.01:5];y = exp(-1.5*x).*sin(10*x);subplot(1,2,1)plot(x,y), xlabel('x'),ylabel('exp(–1.5x)*sin(10x)'),axis([0 5 -1 1])y = exp(-2*x).*sin(10*x);subplot(1,2,2)plot(x,y),xlabel('x'),ylabel('exp(–2x)*sin(10x)'),axis([0 5 -1 1])|||x = [1:10];y = [75, 58, 90, 87, 50, 85, 92, 75, 60, 95];bar(x,y), xlabel('Student'),ylabel('Score'),title('First Sem:')print -deps graph.eps|||[x,y] = meshgrid(–5:0.1:5, –3:0.1:3);|||[x,y] = meshgrid(-5:0.1:5,-3:0.1:3);   %independent variablesg = x.^2 + y.^2;                       % our functioncontour(x,y,g)                         % call the contour functionprint -deps graph.eps|||[x,y] = meshgrid(-5:0.1:5,-3:0.1:3);   %independent variablesg = x.^2 + y.^2;                       % our function[C, h] = contour(x,y,g);               % call the contour functionset(h,'ShowText','on','TextStep',get(h,'LevelStep')*2)print -deps graph.eps|||[x,y] = meshgrid(-2:.2:2);g = x .* exp(-x.^2 - y.^2);surf(x, y, g)print -deps graph.eps|||y = solve('x-5 = 0')|||solve('x-5')|||solve(equation, variable)|||solve('v-u-3*t^2=0', 'v')|||roots([1, -5])|||y = roots([1, -5])|||eq = 'x^2 -7*x + 12 = 0';s = solve(eq);disp('The first root is: '), disp(s(1));disp('The second root is: '), disp(s(2));|||s = roots([1, -7, 12]);disp('The first root is: '), disp(s(1));disp('The second root is: '), disp(s(2));|||solve('(x-3)^2*(x-7)=0')|||eq = 'x^4 - 7*x^3 + 3*x^2 - 5*x + 9 = 0';s = solve(eq);disp('The first root is: '), disp(s(1));disp('The second root is: '), disp(s(2));disp('The third root is: '), disp(s(3));disp('The fourth root is: '), disp(s(4));% converting the roots to double typedisp('Numeric value of first root'), disp(double(s(1)));disp('Numeric value of second root'), disp(double(s(2)));disp('Numeric value of third root'), disp(double(s(3)));disp('Numeric value of fourth root'), disp(double(s(4)));|||v = [1, -7,  3, -5, 9];s = roots(v);% converting the roots to double typedisp('Numeric value of first root'), disp(double(s(1)));disp('Numeric value of second root'), disp(double(s(2)));disp('Numeric value of third root'), disp(double(s(3)));disp('Numeric value of fourth root'), disp(double(s(4)));|||s = solve('5*x + 9*y = 5','3*x - 6*y = 4');s.xs.y|||A = [5, 9; 3, -6];b = [5;4];A \ b|||syms x   %symbolic variable xsyms y   %symbolic variable x% expanding equationsexpand((x-5)*(x+9))expand((x+2)*(x-3)*(x-5)*(x+7))expand(sin(2*x))expand(cos(x+y)) % collecting equationscollect(x^3 *(x-7))collect(x^4*(x-3)*(x-5))|||% first of all load the package, make sure its installed.pkg load symbolic% make symbols module availablesymbols% define symbolic variablesx = sym ('x');y = sym ('y');z = sym ('z');% expanding equationsexpand((x-5)*(x+9))expand((x+2)*(x-3)*(x-5)*(x+7))expand(Sin(2*x))expand(Cos(x+y)) % collecting equationscollect(x^3 *(x-7), z)collect(x^4*(x-3)*(x-5), z)|||syms xsyms yfactor(x^3 - y^3)factor([x^2-y^2,x^3+y^3])simplify((x^4-16)/(x^2-4))|||syms xlimit((x^3 + 5)/(x^4 + 7))|||limit((x - 3)/(x-1),1)|||limit(x^2 + 5, 3)|||pkg load symbolicsymbolsx = sym(""x"");subs((x^3+5)/(x^4+7),x,0)|||syms xf = (3*x + 5)/(x-3);g = x^2 + 1;l1 = limit(f, 4)l2 = limit (g, 4)lAdd = limit(f + g, 4)lSub = limit(f - g, 4)lMult = limit(f*g, 4)lDiv = limit (f/g, 4)|||pkg load symbolicsymbolsx = sym(""x"");f = (3*x + 5)/(x-3);g = x^2 + 1;l1 = subs(f, x, 4)l2 = subs (g, x, 4)lAdd = subs (f+g, x, 4)lSub = subs (f-g, x, 4)lMult = subs (f*g, x, 4)lDiv = subs (f/g, x, 4)|||f = (x - 3)/abs(x-3);ezplot(f,[-1,5])l = limit(f,x,3,'left')r = limit(f,x,3,'right')|||syms tf = 3*t^2 + 2*t^(-2);diff(f)|||pkg load symbolicsymbolst = sym(""t"");f = 3*t^2 + 2*t^(-2);differentiate(f,t)|||syms xsyms tf = (x + 2)*(x^2 + 3)der1 = diff(f)f = (t^2 + 3)*(sqrt(t) + t^3)der2 = diff(f)f = (x^2 - 2*x + 1)*(3*x^3 - 5*x^2 + 2)der3 = diff(f)f = (2*x^2 + 3*x)/(x^3 + 1)der4 = diff(f)f = (x^2 + 1)^17der5 = diff(f)f = (t^3 + 3* t^2 + 5*t -9)^(-6)der6 = diff(f)|||pkg load symbolicsymbolsx = sym(""x"");t = sym(""t"");f = (x + 2)*(x^2 + 3) der1 = differentiate(f,x) f = (t^2 + 3)*(t^(1/2) + t^3) der2 = differentiate(f,t) f = (x^2 - 2*x + 1)*(3*x^3 - 5*x^2 + 2) der3 = differentiate(f,x) f = (2*x^2 + 3*x)/(x^3 + 1) der4 = differentiate(f,x) f = (x^2 + 1)^17 der5 = differentiate(f,x) f = (t^3 + 3* t^2 + 5*t -9)^(-6) der6 = differentiate(f,t)|||syms xy = exp(x)diff(y)y = x^9diff(y)y = sin(x)diff(y)y = tan(x)diff(y)y = cos(x)diff(y)y = log(x)diff(y)y = log10(x)diff(y)y = sin(x)^2diff(y)y = cos(3*x^2 + 2*x + 1)diff(y)y = exp(x)/sin(x)diff(y)|||pkg load symbolicsymbolsx = sym(""x"");y = Exp(x)differentiate(y,x)y = x^9differentiate(y,x)y = Sin(x)differentiate(y,x)y = Tan(x)differentiate(y,x)y = Cos(x)differentiate(y,x)y = Log(x)differentiate(y,x)% symbolic packages does not have this support%y = Log10(x)%differentiate(y,x)y = Sin(x)^2differentiate(y,x)y = Cos(3*x^2 + 2*x + 1)differentiate(y,x)y = Exp(x)/Sin(x)differentiate(y,x)|||f = x*exp(-3*x);diff(f, 2)|||pkg load symbolicsymbolsx = sym(""x"");f = x*Exp(-3*x);differentiate(f, x, 2)|||syms xy = 3*sin(x)+7*cos(5*x);  % defining the functionlhs = diff(y,2)+y;        %evaluting the lhs of the equationrhs = -5*cos(2*x);        %rhs of the equationif(isequal(lhs,rhs))   disp('Yes, the equation holds true');else   disp('No, the equation does not hold true');enddisp('Value of LHS is: '), disp(lhs);|||pkg load symbolicsymbolsx = sym(""x"");y = 3*Sin(x)+7*Cos(5*x);           % defining the functionlhs = differentiate(y, x, 2) + y;  %evaluting the lhs of the equationrhs = -5*Cos(2*x);                 %rhs of the equationif(lhs == rhs)   disp('Yes, the equation holds true');else   disp('No, the equation does not hold true');enddisp('Value of LHS is: '), disp(lhs);|||syms xy = 2*x^3 + 3*x^2 - 12*x + 17;   % defining the functionezplot(y)|||pkg load symbolicsymbolsx = sym('x');y = inline(""2*x^3 + 3*x^2 - 12*x + 17"");ezplot(y)print -deps graph.eps|||syms xy = 2*x^3 + 3*x^2 - 12*x + 17;   % defining the functionezplot(y, [-2, 2])|||pkg load symbolicsymbolsx = sym('x');y = inline(""2*x^3 + 3*x^2 - 12*x + 17"");ezplot(y, [-2, 2])print -deps graph.eps|||g = diff(y)|||pkg load symbolicsymbolsx = sym(""x"");y = 2*x^3 + 3*x^2 - 12*x + 17;g = differentiate(y,x)|||s = solve(g)|||pkg load symbolicsymbolsx = sym(""x"");y = 2*x^3 + 3*x^2 - 12*x + 17;g = differentiate(y,x)roots([6, 6, -12])|||subs(y, 1), subs(y, -2)|||pkg load symbolicsymbolsx = sym(""x"");y = 2*x^3 + 3*x^2 - 12*x + 17;g = differentiate(y,x)roots([6, 6, -12])subs(y, x, 1), subs(y, x, -2)|||dsolve('D2y - y = 0','y(0) = -1','Dy(0) = 2')|||syms x int(2*x)|||syms x nint(sym(x^n))f = 'sin(n*t)'int(sym(f))syms a tint(a*cos(pi*t))int(a^x)|||syms x nint(cos(x))int(exp(x))int(log(x))int(x^-1)int(x^5*cos(5*x))pretty(int(x^5*cos(5*x)))int(x^-5)int(sec(x)^2)pretty(int(1 - 10*x + 9 * x^2))int((3 + 5*x -6*x^2 - 7*x^3)/2*x^2)pretty(int((3 + 5*x -6*x^2 - 7*x^3)/2*x^2))|||int(x, 4, 9)|||pkg load symbolicsymbolsx = sym(""x"");f = x;c = [1, 0];integral = polyint(c);a = polyval(integral, 9) - polyval(integral, 4);display('Area: '), disp(double(a));|||pkg load symbolicsymbolsf = inline(""x"");[a, ierror, nfneval] = quad(f, 4, 9);display('Area: '), disp(double(a));|||f = x^3 - 2*x +5;a = int(f, 1, 2)display('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = x^3 - 2*x +5;c = [1, 0, -2, 5];integral = polyint(c);a = polyval(integral, 2) - polyval(integral, 1);display('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = inline(""x^3 - 2*x +5"");[a, ierror, nfneval] = quad(f, 1, 2);display('Area: '), disp(double(a));|||f = x^2*cos(x);ezplot(f, [-4,9])a = int(f, -4, 9)disp('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = inline(""x^2*cos(x)"");ezplot(f, [-4,9])print -deps graph.eps[a, ierror, nfneval] = quad(f, -4, 9);display('Area: '), disp(double(a));|||p = [1 7 0  -5 9];polyval(p,4)|||p = [1 7 0  -5 9];X = [1 2 -3 4; 2 -5 6 3; 3 1 0 2; 5 -7 3 8];polyvalm(p, X)|||p = [1 7 0  -5 9];r = roots(p)|||p2 = poly(r)|||p = polyfit(x,y,n)|||x = [1 2 3 4 5 6]; y = [5.5 43.1 128 290.7 498.4 978.67];   %datap = polyfit(x,y,4)   %get the polynomial% Compute the values of the polyfit estimate over a finer range, % and plot the estimate over the real data values for comparison:x2 = 1:.1:6;          y2 = polyval(p,x2);plot(x,y,'o',x2,y2)grid on|||laplace(f(t))|||syms s t a b wlaplace(a)laplace(t^2)laplace(t^9)laplace(exp(-b*t))laplace(sin(w*t))laplace(cos(w*t))|||ilaplace(1/s^3)|||syms s t a b wilaplace(1/s^7)ilaplace(2/(w+s))ilaplace(s/(s^2+4))ilaplace(exp(-b*t))ilaplace(w/(s^2 + w^2))ilaplace(s/(s^2 + w^2))|||syms x f = exp(-2*x^2);     %our functionezplot(f,[-2,2])     % plot of our functionFT = fourier(f)      % Fourier transform|||ezplot(FT)|||f = ifourier(-2*exp(-abs(w)))|||[x,y] = meshgrid(-2:.2:2);g = x .* exp(-x.^2 - y.^2);surf(x, y, g)print -deps graph.eps|||f = x^2*cos(x);ezplot(f, [-4,9])a = int(f, -4, 9)disp('Area: '), disp(double(a));|||pkg load symbolicsymbolsx = sym(""x"");f = inline(""x^2*cos(x)"");ezplot(f, [-4,9])print -deps graph.eps[a, ierror, nfneval] = quad(f, -4, 9);display('Area: '), disp(double(a));"
Learn MATLAB,MATLAB - Useful Resources,MATLAB - Useful Resources|||Useful Video Courses@@@Useful eBooks|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab@@@MATLAB Tutorial@@@MATLAB for Machine Learning@@@Fundamental Concepts of MATLAB Programming,The following resources contain additional information on MATLAB. Please use them to get more in-depth knowledge on this topic.,,,,
Learn MATLAB,Discuss MATLAB,Discuss MATLAB|||Useful Video Courses|||Data Preprocessing for Machine Learning using MATLAB@@@Complete MATLAB Tutorial: Go from Beginner to Expert@@@Image Processing Toolbox in MATLAB@@@Matlab - The Complete Course@@@Digital Image Processing using MATLAB@@@Backpropagation Learning Method in Matlab,MATLAB is a programming language developed by MathWorks. It started out as a matrix programming language where linear algebra programming was simple. It can be run both under interactive sessions and as a batch job. This tutorial gives you aggressively a gentle introduction of MATLAB programming language. It is designed to give students fluency in MATLAB programming language. Problem-based MATLAB examples have been given in simple and easy way to make your learning fast and effective.,,,,
