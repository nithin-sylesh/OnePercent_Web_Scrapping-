Course,Chapters,ALL Headings,Paragraphs,Unordered List Items,Ordered List Items,Tables,Code Examples
Learn R Programming,R Tutorial,R Tutorial@@@Audience@@@Prerequisites|||Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"R is a programming language and software environment for statistical analysis, graphics representation and reporting. R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is currently developed by the R Development Core Team. R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems like Linux, Windows and Mac. This programming language was named R, based on the first letter of first name of the two R authors (Robert Gentleman and Ross Ihaka), and partly a play on the name of the Bell Labs Language S.|||This tutorial is designed for software programmers, statisticians and data miners who are looking forward for developing statistical software using R programming. If you are trying to understand the R programming language as a beginner, this tutorial will give you enough understanding on almost all the concepts of the language from where you can take yourself to higher levels of expertise.|||Before proceeding with this tutorial, you should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the programming languages will help you in understanding the R programming concepts and move fast on the learning track.",,,,
Learn R Programming,R - Overview,R - Overview|||Evolution of R@@@Features of R@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"R is a programming language and software environment for statistical analysis, graphics representation and reporting. R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is currently developed by the R Development Core Team.|||The core of R is an interpreted computer language which allows branching and looping as well as modular programming using functions. R allows integration with the procedures written in the C, C++, .Net, Python or FORTRAN languages for efficiency.|||R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems like Linux, Windows and Mac.|||R is free software distributed under a GNU-style copy left, and an official part of the GNU project called GNU S.|||R was initially written by Ross Ihaka and Robert Gentleman at the Department of Statistics of the University of Auckland in Auckland, New Zealand. R made its first appearance in 1993.|||A large group of individuals has contributed to R by sending code and bug reports.|||Since mid-1997 there has been a core group (the ""R Core Team"") who can modify the R source code archive.|||As stated earlier, R is a programming language and software environment for statistical analysis, graphics representation and reporting. The following are the important features of R −|||R is a well-developed, simple and effective programming language which includes conditionals, loops, user defined recursive functions and input and output facilities.|||R has an effective data handling and storage facility,|||R provides a suite of operators for calculations on arrays, lists, vectors and matrices.|||R provides a large, coherent and integrated collection of tools for data analysis.|||R provides graphical facilities for data analysis and display either directly at the computer or printing at the papers.|||As a conclusion, R is world’s most widely used statistics programming language. It's the # 1 choice of data scientists and supported by a vibrant and talented community of contributors. R is taught in universities and deployed in mission critical business applications. This tutorial will teach you R programming along with suitable examples in simple and easy steps.","A large group of individuals has contributed to R by sending code and bug reports.@@@Since mid-1997 there has been a core group (the ""R Core Team"") who can modify the R source code archive.|||R is a well-developed, simple and effective programming language which includes conditionals, loops, user defined recursive functions and input and output facilities.@@@R has an effective data handling and storage facility,@@@R provides a suite of operators for calculations on arrays, lists, vectors and matrices.@@@R provides a large, coherent and integrated collection of tools for data analysis.@@@R provides graphical facilities for data analysis and display either directly at the computer or printing at the papers.",,,
Learn R Programming,R - Environment Setup,R - Environment Setup|||Local Environment Setup@@@Useful Video Courses|||Windows Installation@@@Linux Installation|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"If you are still willing to set up your environment for R, you can follow the steps given below.|||You can download the Windows installer version of R from R-3.2.2 for Windows (32/64 bit) and save it in a local directory.|||As it is a Windows installer (.exe) with a name ""R-version-win.exe"". You can just double click and run the installer accepting the default settings. If your Windows is 32-bit version, it installs the 32-bit version. But if your windows is 64-bit, then it installs both the 32-bit and 64-bit versions.|||After installation you can locate the icon to run the Program in a directory structure ""R\R3.2.2\bin\i386\Rgui.exe"" under the Windows Program Files. Clicking this icon brings up the R-GUI which is the R console to do R Programming.|||R is available as a binary for many versions of Linux at the location R Binaries.|||The instruction to install Linux varies from flavor to flavor. These steps are mentioned under each type of Linux version in the mentioned link. However, if you are in a hurry, then you can use yum command to install R as follows −|||Above command will install core functionality of R programming along with standard packages, still you need additional package, then you can launch R prompt as follows −|||Now you can use install command at R prompt to install the required package. For example, the following command will install plotrix package which is required for 3D charts.",,,,"> install.packages(""plotrix"")"
Learn R Programming,R - Basic Syntax,R - Basic Syntax|||R Command Prompt@@@R Script File@@@Comments@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"As a convention, we will start learning R programming by writing a ""Hello, World!"" program. Depending on the needs, you can program either at R command prompt or you can use an R script file to write your program. Let's check both one by one.|||Once you have R environment setup, then it’s easy to start your R command prompt by just typing the following command at your command prompt −|||This will launch R interpreter and you will get a prompt > where you can start typing your program as follows −|||Here first statement defines a string variable myString, where we assign a string ""Hello, World!"" and then next statement print() is being used to print the value stored in variable myString.|||Usually, you will do your programming by writing your programs in script files and then you execute those scripts at your command prompt with the help of R interpreter called Rscript. So let's start with writing following code in a text file called test.R as under −|||Save the above code in a file test.R and execute it at Linux command prompt as given below. Even if you are using Windows or other system, syntax will remain same.|||When we run the above program, it produces the following result.|||Comments are like helping text in your R program and they are ignored by the interpreter while executing your actual program. Single comment is written using # in the beginning of the statement as follows −|||R does not support multi-line comments but you can perform a trick which is something as follows −|||Though above comments will be executed by R interpreter, they will not interfere with your actual program. You should put such comments inside, either single or double quote.",,,,"> myString <- ""Hello, World!""> print ( myString)[1] ""Hello, World!""|||# My first program in R ProgrammingmyString <- ""Hello, World!""print ( myString)|||if(FALSE) {   ""This is a demo for multi-line comments and it should be put inside either a       single OR double quote""}myString <- ""Hello, World!""print ( myString)"
Learn R Programming,R - Data Types,R - Data Types|||Vectors@@@Lists@@@Matrices@@@Arrays@@@Factors@@@Data Frames@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Generally, while doing programming in any programming language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that, when you create a variable you reserve some space in memory.|||You may like to store information of various data types like character, wide character, integer, floating point, double floating point, Boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.|||In contrast to other programming languages like C and java in R, the variables are not declared as some data type. The variables are assigned with R-Objects and the data type of the R-object becomes the data type of the variable. There are many types of R-objects. The frequently used ones are −|||The simplest of these objects is the vector object and there are six data types of these atomic vectors, also termed as six classes of vectors. The other R-Objects are built upon the atomic vectors.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||In R programming, the very basic data types are the R-objects called vectors which hold elements of different classes as shown above. Please note in R the number of classes is not confined to only the above six types. For example, we can use many atomic vectors and create an array whose class will become array.|||When you want to create vector with more than one element, you should use c() function which means to combine the elements into a vector.|||When we execute the above code, it produces the following result −|||A list is an R-object which can contain many different types of elements inside it like vectors, functions and even another list inside it.|||When we execute the above code, it produces the following result −|||A matrix is a two-dimensional rectangular data set. It can be created using a vector input to the matrix function.|||When we execute the above code, it produces the following result −|||While matrices are confined to two dimensions, arrays can be of any number of dimensions. The array function takes a dim attribute which creates the required number of dimension. In the below example we create an array with two elements which are 3x3 matrices each.|||When we execute the above code, it produces the following result −|||Factors are the r-objects which are created using a vector. It stores the vector along with the distinct values of the elements in the vector as labels. The labels are always character irrespective of whether it is numeric or character or Boolean etc. in the input vector. They are useful in statistical modeling.|||Factors are created using the factor() function. The nlevels functions gives the count of levels.|||When we execute the above code, it produces the following result −|||Data frames are tabular data objects. Unlike a matrix in data frame each column can contain different modes of data. The first column can be numeric while the second column can be character and third column can be logical. It is a list of vectors of equal length.|||Data Frames are created using the data.frame() function.|||When we execute the above code, it produces the following result −",Vectors@@@Lists@@@Matrices@@@Arrays@@@Factors@@@Data Frames,,"Data Type@@@Example@@@Verify|||Logical@@@TRUE, FALSE@@@

 Live Demo


v <- TRUE 
print(class(v))

it produces the following result −

[1] ""logical"" 

|||Numeric@@@12.3, 5, 999@@@

 Live Demo


v <- 23.5
print(class(v))

it produces the following result −

[1] ""numeric""

|||Integer@@@2L, 34L, 0L@@@

 Live Demo


v <- 2L
print(class(v))

it produces the following result −

[1] ""integer""

|||Complex@@@3 + 2i@@@

 Live Demo


v <- 2+5i
print(class(v))

it produces the following result −

[1] ""complex""

|||Character@@@'a' , '""good"", ""TRUE"", '23.4'@@@

 Live Demo


v <- ""TRUE""
print(class(v))

it produces the following result −

[1] ""character""

|||Raw@@@""Hello"" is stored as 48 65 6c 6c 6f@@@

 Live Demo


v <- charToRaw(""Hello"")
print(class(v))

it produces the following result −

[1] ""raw"" 

","v <- TRUE print(class(v))|||v <- 23.5print(class(v))|||v <- 2Lprint(class(v))|||v <- 2+5iprint(class(v))|||v <- ""TRUE""print(class(v))|||v <- charToRaw(""Hello"")print(class(v))|||# Create a vector.apple <- c('red','green',""yellow"")print(apple)# Get the class of the vector.print(class(apple))|||# Create a list.list1 <- list(c(2,5,3),21.3,sin)# Print the list.print(list1)|||# Create a matrix.M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)print(M)|||# Create an array.a <- array(c('green','yellow'),dim = c(3,3,2))print(a)|||# Create a vector.apple_colors <- c('green','green','yellow','red','red','red','green')# Create a factor object.factor_apple <- factor(apple_colors)# Print the factor.print(factor_apple)print(nlevels(factor_apple))|||# Create the data frame.BMI <- 	data.frame(   gender = c(""Male"", ""Male"",""Female""),    height = c(152, 171.5, 165),    weight = c(81,93, 78),   Age = c(42,38,26))print(BMI)"
Learn R Programming,R - Variables,R - Variables|||Variable Assignment@@@Data Type of a Variable@@@Finding Variables@@@Deleting Variables@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"A variable provides us with named storage that our programs can manipulate. A variable in R can store an atomic vector, group of atomic vectors or a combination of many Robjects. A valid variable name consists of letters, numbers and the dot or underline characters. The variable name starts with a letter or the dot not followed by a number.|||.var_name,|||var.name|||The variables can be assigned values using leftward, rightward and equal to operator. The values of the variables can be printed using print() or cat() function. The cat() function combines multiple items into a continuous print output.|||When we execute the above code, it produces the following result −|||Note − The vector c(TRUE,1) has a mix of logical and numeric class. So logical class is coerced to numeric class making TRUE as 1.|||In R, a variable itself is not declared of any data type, rather it gets the data type of the R - object assigned to it. So R is called a dynamically typed language, which means that we can change a variable’s data type of the same variable again and again when using it in a program.|||When we execute the above code, it produces the following result −|||To know all the variables currently available in the workspace we use the ls() function. Also the ls() function can use patterns to match the variable names.|||When we execute the above code, it produces the following result −|||Note − It is a sample output depending on what variables are declared in your environment.|||The ls() function can use patterns to match the variable names.|||When we execute the above code, it produces the following result −|||The variables starting with dot(.) are hidden, they can be listed using ""all.names = TRUE"" argument to ls() function.|||When we execute the above code, it produces the following result −|||Variables can be deleted by using the rm() function. Below we delete the variable var.3. On printing the value of the variable error is thrown.|||When we execute the above code, it produces the following result −|||All the variables can be deleted by using the rm() and ls() function together.|||When we execute the above code, it produces the following result −",,,"Variable Name@@@Validity@@@Reason|||var_name2.@@@valid@@@Has letters, numbers, dot and underscore|||var_name%@@@Invalid@@@Has the character '%'. Only dot(.) and underscore allowed.|||2var_name@@@invalid@@@Starts with a number|||.var_name,
var.name@@@valid@@@Can start with a dot(.) but the dot(.)should not be followed by a number.|||.2var_name@@@invalid@@@The starting dot is followed by a number making it invalid.|||_var_name@@@invalid@@@Starts with _ which is not valid","# Assignment using equal operator.var.1 = c(0,1,2,3)           # Assignment using leftward operator.var.2 <- c(""learn"",""R"")   # Assignment using rightward operator.   c(TRUE,1) -> var.3           print(var.1)cat (""var.1 is "", var.1 ,""\n"")cat (""var.2 is "", var.2 ,""\n"")cat (""var.3 is "", var.3 ,""\n"")|||var_x <- ""Hello""cat(""The class of var_x is "",class(var_x),""\n"")var_x <- 34.5cat(""  Now the class of var_x is "",class(var_x),""\n"")var_x <- 27Lcat(""   Next the class of var_x becomes "",class(var_x),""\n"")|||print(ls())|||# List the variables starting with the pattern ""var"".print(ls(pattern = ""var""))   |||print(ls(all.name = TRUE))|||rm(var.3)print(var.3)|||rm(list = ls())print(ls())"
Learn R Programming,R - Operators,R - Operators|||Types of Operators@@@Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Assignment Operators@@@Miscellaneous Operators@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. R language is rich in built-in operators and provides following types of operators.|||We have the following types of operators in R programming −|||Following table shows the arithmetic operators supported by R language. The operators act on each element of the vector.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||When we execute the above code, it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||Following table shows the relational operators supported by R language. Each element of the first vector is compared with the corresponding element of the second vector. The result of comparison is a Boolean value.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||Following table shows the logical operators supported by R language. It is applicable only to vectors of type logical, numeric or complex. All numbers greater than 1 are considered as logical value TRUE.|||Each element of the first vector is compared with the corresponding element of the second vector. The result of comparison is a Boolean value.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||The logical operator && and || considers only the first element of the vectors and give a vector of single element as output.|||it produces the following result −|||it produces the following result −|||These operators are used to assign values to vectors.|||<−|||or|||=|||or|||<<−|||it produces the following result −|||->|||or|||->>|||it produces the following result −|||These operators are used to for specific purpose and not general mathematical or logical computation.|||it produces the following result −|||it produces the following result −|||it produces the following result −",Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Assignment Operators@@@Miscellaneous Operators,,"Operator@@@Description@@@Example|||+@@@Adds two vectors@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v+t)

it produces the following result −

[1] 10.0  8.5  10.0

|||−@@@Subtracts second vector from the first@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v-t)

it produces the following result −

[1] -6.0  2.5  2.0

|||*@@@Multiplies both vectors@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v*t)

it produces the following result −

[1] 16.0 16.5 24.0

|||/@@@Divide the first vector with the second@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v/t)

When we execute the above code, it produces the following result −

[1] 0.250000 1.833333 1.500000

|||%%@@@Give the remainder of the first vector with the second@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v%%t)

it produces the following result −

[1] 2.0 2.5 2.0

|||%/%@@@The result of division of first vector with second (quotient)@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v%/%t)

it produces the following result −

[1] 0 1 1

|||^@@@The first vector raised to the exponent of second vector@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v^t)

it produces the following result −

[1]  256.000  166.375 1296.000

&&&Operator@@@Description@@@Example|||>@@@Checks if each element of the first vector is greater than the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v>t)

it produces the following result −

[1] FALSE  TRUE FALSE FALSE

|||<@@@Checks if each element of the first vector is less than the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v < t)

it produces the following result −

[1]  TRUE FALSE  TRUE FALSE

|||==@@@Checks if each element of the first vector is equal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v == t)

it produces the following result −

[1] FALSE FALSE FALSE  TRUE

|||<=@@@Checks if each element of the first vector is less than or equal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v<=t)

it produces the following result −

[1]  TRUE FALSE  TRUE  TRUE

|||>=@@@Checks if each element of the first vector is greater than or equal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v>=t)

it produces the following result −

[1] FALSE  TRUE FALSE  TRUE

|||!=@@@Checks if each element of the first vector is unequal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v!=t)

it produces the following result −

[1]  TRUE  TRUE  TRUE FALSE

&&&Operator@@@Description@@@Example|||&@@@It is called Element-wise Logical AND operator. It combines each element of the first vector with the corresponding element of the second vector and gives a output TRUE if both the elements are TRUE.@@@

 Live Demo


v <- c(3,1,TRUE,2+3i)
t <- c(4,1,FALSE,2+3i)
print(v&t)

it produces the following result −

[1]  TRUE  TRUE FALSE  TRUE

||||@@@It is called Element-wise Logical OR operator. It combines each element of the first vector with the corresponding element of the second vector and gives a output TRUE if one the elements is TRUE.@@@

 Live Demo


v <- c(3,0,TRUE,2+2i)
t <- c(4,0,FALSE,2+3i)
print(v|t)

it produces the following result −

[1]  TRUE FALSE  TRUE  TRUE

|||!@@@It is called Logical NOT operator. Takes each element of the vector and gives the opposite logical value.@@@

 Live Demo


v <- c(3,0,TRUE,2+2i)
print(!v)

it produces the following result −

[1] FALSE  TRUE FALSE FALSE

&&&Operator@@@Description@@@Example|||&&@@@Called Logical AND operator. Takes first element of both the vectors and gives the TRUE only if both are TRUE.@@@

 Live Demo


v <- c(3,0,TRUE,2+2i)
t <- c(1,3,TRUE,2+3i)
print(v&&t)

it produces the following result −

[1] TRUE

|||||@@@Called Logical OR operator. Takes first element of both the vectors and gives the TRUE if one of them is TRUE.@@@

 Live Demo


v <- c(0,0,TRUE,2+2i)
t <- c(0,3,TRUE,2+3i)
print(v||t)

it produces the following result −

[1] FALSE

&&&Operator@@@Description@@@Example|||
<−
or
=
or
<<−
@@@Called Left Assignment@@@

 Live Demo


v1 <- c(3,1,TRUE,2+3i)
v2 <<- c(3,1,TRUE,2+3i)
v3 = c(3,1,TRUE,2+3i)
print(v1)
print(v2)
print(v3)

it produces the following result −

[1] 3+0i 1+0i 1+0i 2+3i
[1] 3+0i 1+0i 1+0i 2+3i
[1] 3+0i 1+0i 1+0i 2+3i

|||
->
or
->>@@@Called Right Assignment @@@

 Live Demo


c(3,1,TRUE,2+3i) -> v1
c(3,1,TRUE,2+3i) ->> v2 
print(v1)
print(v2)

it produces the following result −

[1] 3+0i 1+0i 1+0i 2+3i
[1] 3+0i 1+0i 1+0i 2+3i

&&&Operator@@@Description@@@Example|||:@@@Colon operator. It creates the series of numbers in sequence for a vector.@@@

 Live Demo


v <- 2:8
print(v) 

it produces the following result −

[1] 2 3 4 5 6 7 8

|||%in%@@@This operator is used to identify if an element belongs to a vector.@@@

 Live Demo


v1 <- 8
v2 <- 12
t <- 1:10
print(v1 %in% t) 
print(v2 %in% t) 

it produces the following result −

[1] TRUE
[1] FALSE

|||%*%@@@This operator is used to multiply a matrix with its transpose.@@@

 Live Demo


M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
print(t)

it produces the following result −

      [,1] [,2]
[1,]   65   82
[2,]   82  117

","v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v+t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v-t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v*t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v/t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v%%t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v%/%t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v^t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v>t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v < t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v == t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v<=t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v>=t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v!=t)|||v <- c(3,1,TRUE,2+3i)t <- c(4,1,FALSE,2+3i)print(v&t)|||v <- c(3,0,TRUE,2+2i)t <- c(4,0,FALSE,2+3i)print(v|t)|||v <- c(3,0,TRUE,2+2i)print(!v)|||v <- c(3,0,TRUE,2+2i)t <- c(1,3,TRUE,2+3i)print(v&&t)|||v <- c(0,0,TRUE,2+2i)t <- c(0,3,TRUE,2+3i)print(v||t)|||v1 <- c(3,1,TRUE,2+3i)v2 <<- c(3,1,TRUE,2+3i)v3 = c(3,1,TRUE,2+3i)print(v1)print(v2)print(v3)|||c(3,1,TRUE,2+3i) -> v1c(3,1,TRUE,2+3i) ->> v2 print(v1)print(v2)|||v <- 2:8print(v) |||v1 <- 8v2 <- 12t <- 1:10print(v1 %in% t) print(v2 %in% t) |||M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)t = M %*% t(M)print(t)"
Learn R Programming,R - Decision making,R - Decision making|||Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Decision making structures require the programmer to specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.|||Following is the general form of a typical decision making structure found in most of the programming languages −|||R provides the following types of decision making statements. Click the following links to check their detail.|||An if statement consists of a Boolean expression followed by one or more statements.|||An if statement can be followed by an optional else statement, which executes when the Boolean expression is false.|||A switch statement allows a variable to be tested for equality against a list of values.",,,"Sr.No.@@@Statement & Description|||1@@@
if statement
An if statement consists of a Boolean expression followed by one or more statements.
|||2@@@
if...else statement
An if statement can be followed by an optional else statement, which executes when the Boolean expression is false.
|||3@@@
switch statement
A switch statement allows a variable to be tested for equality against a list of values.
",
Learn R Programming,R - Loops,R - Loops|||Loop Control Statements@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially. The first statement in a function is executed first, followed by the second, and so on.|||Programming languages provide various control structures that allow for more complicated execution paths.|||A loop statement allows us to execute a statement or group of statements multiple times and the following is the general form of a loop statement in most of the programming languages −|||R programming language provides the following kinds of loop to handle looping requirements. Click the following links to check their detail.|||Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.|||Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.|||Like a while statement, except that it tests the condition at the end of the loop body.|||Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.|||R supports the following control statements. Click the following links to check their detail.|||Terminates the loop statement and transfers execution to the statement immediately following the loop.|||The next statement simulates the behavior of R switch.",,,"Sr.No.@@@Loop Type & Description|||1@@@
repeat loop
Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.
|||2@@@
while loop
Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.
|||3@@@
for loop
Like a while statement, except that it tests the condition at the end of the loop body.
&&&Sr.No.@@@Control Statement & Description|||1@@@
break statement
Terminates the loop statement and transfers execution to the statement immediately following the loop.
|||2@@@
Next statement
The next statement simulates the behavior of R switch.
",
Learn R Programming,R - Functions,R - Functions|||Function Definition@@@Function Components @@@Built-in Function@@@User-defined Function@@@Calling a Function@@@Lazy Evaluation of Function@@@Useful Video Courses|||Calling a Function without an Argument@@@Calling a Function with Argument Values (by position and by name)@@@Calling a Function with Default Argument|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"A function is a set of statements organized together to perform a specific task. R has a large number of in-built functions and the user can create their own functions.|||In R, a function is an object so the R interpreter is able to pass control to the function, along with arguments that may be necessary for the function to accomplish the actions.|||The function in turn performs its task and returns control to the interpreter as well as any result which may be stored in other objects.|||An R function is created by using the keyword function. The basic syntax of an R function definition is as follows −|||The different parts of a function are −|||Function Name − This is the actual name of the function. It is stored in R environment as an object with this name.|||Arguments − An argument is a placeholder. When a function is invoked, you pass a value to the argument. Arguments are optional; that is, a function may contain no arguments. Also arguments can have default values.|||Function Body − The function body contains a collection of statements that defines what the function does.|||Return Value − The return value of a function is the last expression in the function body to be evaluated.|||R has many in-built functions which can be directly called in the program without defining them first. We can also create and use our own functions referred as user defined functions.|||Simple examples of in-built functions are seq(), mean(), max(), sum(x) and paste(...) etc. They are directly called by user written programs. You can refer most widely used R functions.|||When we execute the above code, it produces the following result −|||We can create user-defined functions in R. They are specific to what a user wants and once created they can be used like the built-in functions. Below is an example of how a function is created and used.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||The arguments to a function call can be supplied in the same sequence as defined in the function or they can be supplied in a different sequence but assigned to the names of the arguments.|||When we execute the above code, it produces the following result −|||We can define the value of the arguments in the function definition and call the function without supplying any argument to get the default result. But we can also call such functions by supplying new values of the argument and get non default result.|||When we execute the above code, it produces the following result −|||Arguments to functions are evaluated lazily, which means so they are evaluated only when needed by the function body.|||When we execute the above code, it produces the following result −","Function Name − This is the actual name of the function. It is stored in R environment as an object with this name.@@@Arguments − An argument is a placeholder. When a function is invoked, you pass a value to the argument. Arguments are optional; that is, a function may contain no arguments. Also arguments can have default values.@@@Function Body − The function body contains a collection of statements that defines what the function does.@@@Return Value − The return value of a function is the last expression in the function body to be evaluated.",,,"# Create a sequence of numbers from 32 to 44.print(seq(32,44))# Find mean of numbers from 25 to 82.print(mean(25:82))# Find sum of numbers frm 41 to 68.print(sum(41:68))|||# Create a function to print squares of numbers in sequence.new.function <- function(a) {   for(i in 1:a) {      b <- i^2      print(b)   }}	|||# Create a function to print squares of numbers in sequence.new.function <- function(a) {   for(i in 1:a) {      b <- i^2      print(b)   }}# Call the function new.function supplying 6 as an argument.new.function(6)|||# Create a function without an argument.new.function <- function() {   for(i in 1:5) {      print(i^2)   }}	# Call the function without supplying an argument.new.function()|||# Create a function with arguments.new.function <- function(a,b,c) {   result <- a * b + c   print(result)}# Call the function by position of arguments.new.function(5,3,11)# Call the function by names of the arguments.new.function(a = 11, b = 5, c = 3)|||# Create a function with arguments.new.function <- function(a = 3, b = 6) {   result <- a * b   print(result)}# Call the function without giving any argument.new.function()# Call the function with giving new values of the argument.new.function(9,5)|||# Create a function with arguments.new.function <- function(a, b) {   print(a^2)   print(a)   print(b)}# Evaluate the function without supplying one of the arguments.new.function(6)"
Learn R Programming,R - Strings,R - Strings|||Rules Applied in String Construction@@@String Manipulation@@@Useful Video Courses|||Examples of Valid Strings@@@Examples of Invalid Strings@@@Concatenating Strings - paste() function@@@Syntax@@@Example@@@Formatting numbers & strings - format() function@@@Syntax@@@Example@@@Counting number of characters in a string - nchar() function@@@Syntax@@@Example@@@Changing the case - toupper() & tolower() functions@@@Syntax@@@Example@@@Extracting parts of a string - substring() function@@@Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Any value written within a pair of single quote or double quotes in R is treated as a string. Internally R stores every string within double quotes, even when you create them with single quote.|||The quotes at the beginning and end of a string should be both double quotes or both single quote. They can not be mixed.|||Double quotes can be inserted into a string starting and ending with single quote.|||Single quote can be inserted into a string starting and ending with double quotes.|||Double quotes can not be inserted into a string starting and ending with double quotes.|||Single quote can not be inserted into a string starting and ending with single quote.|||Following examples clarify the rules about creating a string in R.|||When the above code is run we get the following output −|||When we run the script it fails giving below results.|||Many strings in R are combined using the paste() function. It can take any number of arguments to be combined together.|||The basic syntax for paste function is −|||Following is the description of the parameters used −|||... represents any number of arguments to be combined.|||sep represents any separator between the arguments. It is optional.|||collapse is used to eliminate the space in between two strings. But not the space within two words of one string.|||When we execute the above code, it produces the following result −|||Numbers and strings can be formatted to a specific style using format() function.|||The basic syntax for format function is −|||Following is the description of the parameters used −|||x is the vector input.|||digits is the total number of digits displayed.|||nsmall is the minimum number of digits to the right of the decimal point.|||scientific is set to TRUE to display scientific notation.|||width indicates the minimum width to be displayed by padding blanks in the beginning.|||justify is the display of the string to left, right or center.|||When we execute the above code, it produces the following result −|||This function counts the number of characters including spaces in a string.|||The basic syntax for nchar() function is −|||Following is the description of the parameters used −|||x is the vector input.|||When we execute the above code, it produces the following result −|||These functions change the case of characters of a string.|||The basic syntax for toupper() & tolower() function is  −|||Following is the description of the parameters used −|||x is the vector input.|||When we execute the above code, it produces the following result −|||This function extracts parts of a String.|||The basic syntax for substring() function is −|||Following is the description of the parameters used −|||x is the character vector input.|||first is the position of the first character to be extracted.|||last is the position of the last character to be extracted.|||When we execute the above code, it produces the following result −","The quotes at the beginning and end of a string should be both double quotes or both single quote. They can not be mixed.@@@Double quotes can be inserted into a string starting and ending with single quote.@@@Single quote can be inserted into a string starting and ending with double quotes.@@@Double quotes can not be inserted into a string starting and ending with double quotes.@@@Single quote can not be inserted into a string starting and ending with single quote.|||... represents any number of arguments to be combined.@@@sep represents any separator between the arguments. It is optional.@@@collapse is used to eliminate the space in between two strings. But not the space within two words of one string.|||x is the vector input.@@@digits is the total number of digits displayed.@@@nsmall is the minimum number of digits to the right of the decimal point.@@@scientific is set to TRUE to display scientific notation.@@@width indicates the minimum width to be displayed by padding blanks in the beginning.@@@justify is the display of the string to left, right or center.|||x is the vector input.|||x is the vector input.|||x is the character vector input.@@@first is the position of the first character to be extracted.@@@last is the position of the last character to be extracted.",,,"a <- 'Start and end with single quote'print(a)b <- ""Start and end with double quotes""print(b)c <- ""single quote ' in between double quotes""print(c)d <- 'Double quotes "" in between single quote'print(d)|||e <- 'Mixed quotes"" print(e)f <- 'Single quote ' inside single quote'print(f)g <- ""Double quotes "" inside double quotes""print(g)|||a <- ""Hello""b <- 'How'c <- ""are you? ""print(paste(a,b,c))print(paste(a,b,c, sep = ""-""))print(paste(a,b,c, sep = """", collapse = """"))|||# Total number of digits displayed. Last digit rounded off.result <- format(23.123456789, digits = 9)print(result)# Display numbers in scientific notation.result <- format(c(6, 13.14521), scientific = TRUE)print(result)# The minimum number of digits to the right of the decimal point.result <- format(23.47, nsmall = 5)print(result)# Format treats everything as a string.result <- format(6)print(result)# Numbers are padded with blank in the beginning for width.result <- format(13.7, width = 6)print(result)# Left justify strings.result <- format(""Hello"", width = 8, justify = ""l"")print(result)# Justfy string with center.result <- format(""Hello"", width = 8, justify = ""c"")print(result)|||result <- nchar(""Count the number of characters"")print(result)|||# Changing to Upper case.result <- toupper(""Changing To Upper"")print(result)# Changing to lower case.result <- tolower(""Changing To Lower"")print(result)|||# Extract characters from 5th to 7th position.result <- substring(""Extract"", 5, 7)print(result)"
Learn R Programming,R - Vectors,R - Vectors|||Vector Creation@@@Accessing Vector Elements@@@Vector Manipulation@@@Useful Video Courses|||Single Element Vector@@@Multiple Elements Vector@@@Vector arithmetic@@@Vector Element Recycling@@@Vector Element Sorting|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Vectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw.|||Even when you write just one value in R, it becomes a vector of length 1 and belongs to one of the above vector types.|||When we execute the above code, it produces the following result −|||Using colon operator with numeric data|||When we execute the above code, it produces the following result −|||Using sequence (Seq.) operator|||When we execute the above code, it produces the following result −|||Using the c() function|||The non-character values are coerced to character type if one of the elements is a character.|||When we execute the above code, it produces the following result −|||Elements of a Vector are accessed using indexing. The [ ] brackets are used for indexing. Indexing starts with position 1. Giving a negative value in the index drops that element from result.TRUE, FALSE or 0 and 1 can also be used for indexing.|||When we execute the above code, it produces the following result −|||Two vectors of same length can be added, subtracted, multiplied or divided giving the result as a vector output.|||When we execute the above code, it produces the following result −|||If we apply arithmetic operations to two vectors of unequal length, then the elements of the shorter vector are recycled to complete the operations.|||When we execute the above code, it produces the following result −|||Elements in a vector can be sorted using the sort() function.|||When we execute the above code, it produces the following result −",,,,"# Atomic vector of type character.print(""abc"");# Atomic vector of type double.print(12.5)# Atomic vector of type integer.print(63L)# Atomic vector of type logical.print(TRUE)# Atomic vector of type complex.print(2+3i)# Atomic vector of type raw.print(charToRaw('hello'))|||# Creating a sequence from 5 to 13.v <- 5:13print(v)# Creating a sequence from 6.6 to 12.6.v <- 6.6:12.6print(v)# If the final element specified does not belong to the sequence then it is discarded.v <- 3.8:11.4print(v)|||# Create vector with elements from 5 to 9 incrementing by 0.4.print(seq(5, 9, by = 0.4))|||# The logical and numeric values are converted to characters.s <- c('apple','red',5,TRUE)print(s)|||# Accessing vector elements using position.t <- c(""Sun"",""Mon"",""Tue"",""Wed"",""Thurs"",""Fri"",""Sat"")u <- t[c(2,3,6)]print(u)# Accessing vector elements using logical indexing.v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]print(v)# Accessing vector elements using negative indexing.x <- t[c(-2,-5)]print(x)# Accessing vector elements using 0/1 indexing.y <- t[c(0,0,0,0,0,0,1)]print(y)|||# Create two vectors.v1 <- c(3,8,4,5,0,11)v2 <- c(4,11,0,8,1,2)# Vector addition.add.result <- v1+v2print(add.result)# Vector subtraction.sub.result <- v1-v2print(sub.result)# Vector multiplication.multi.result <- v1*v2print(multi.result)# Vector division.divi.result <- v1/v2print(divi.result)|||v1 <- c(3,8,4,5,0,11)v2 <- c(4,11)# V2 becomes c(4,11,4,11,4,11)add.result <- v1+v2print(add.result)sub.result <- v1-v2print(sub.result)|||v <- c(3,8,4,5,0,11, -9, 304)# Sort the elements of the vector.sort.result <- sort(v)print(sort.result)# Sort the elements in the reverse order.revsort.result <- sort(v, decreasing = TRUE)print(revsort.result)# Sorting character vectors.v <- c(""Red"",""Blue"",""yellow"",""violet"")sort.result <- sort(v)print(sort.result)# Sorting character vectors in reverse order.revsort.result <- sort(v, decreasing = TRUE)print(revsort.result)"
Learn R Programming,R - Lists,R - Lists|||Creating a List@@@Naming List Elements@@@Accessing List Elements@@@Manipulating List Elements@@@Merging Lists@@@Converting List to Vector@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it. A list can also contain a matrix or a function as its elements. List is created using list() function.|||Following is an example to create a list containing strings, numbers, vectors and a logical values.|||When we execute the above code, it produces the following result −|||The list elements can be given names and they can be accessed using these names.|||When we execute the above code, it produces the following result −|||Elements of the list can be accessed by the index of the element in the list. In case of named lists it can also be accessed using the names.|||We continue to use the list in the above example −|||When we execute the above code, it produces the following result −|||We can add, delete and update list elements as shown below. We can add and delete elements only at the end of a list. But we can update any element.|||When we execute the above code, it produces the following result −|||You can merge many lists into one list by placing all the lists inside one list() function.|||When we execute the above code, it produces the following result −|||A list can be converted to a vector so that the elements of the vector can be used for further manipulation. All the arithmetic operations on vectors can be applied after the list is converted into vectors. To do this conversion, we use the unlist() function. It takes the list as input and produces a vector.|||When we execute the above code, it produces the following result −",,,,"# Create a list containing strings, numbers, vectors and a logical# values.list_data <- list(""Red"", ""Green"", c(21,32,11), TRUE, 51.23, 119.1)print(list_data)|||# Create a list containing a vector, a matrix and a list.list_data <- list(c(""Jan"",""Feb"",""Mar""), matrix(c(3,9,5,1,-2,8), nrow = 2),   list(""green"",12.3))# Give names to the elements in the list.names(list_data) <- c(""1st Quarter"", ""A_Matrix"", ""A Inner list"")# Show the list.print(list_data)|||# Create a list containing a vector, a matrix and a list.list_data <- list(c(""Jan"",""Feb"",""Mar""), matrix(c(3,9,5,1,-2,8), nrow = 2),   list(""green"",12.3))# Give names to the elements in the list.names(list_data) <- c(""1st Quarter"", ""A_Matrix"", ""A Inner list"")# Access the first element of the list.print(list_data[1])# Access the thrid element. As it is also a list, all its elements will be printed.print(list_data[3])# Access the list element using the name of the element.print(list_data$A_Matrix)|||# Create a list containing a vector, a matrix and a list.list_data <- list(c(""Jan"",""Feb"",""Mar""), matrix(c(3,9,5,1,-2,8), nrow = 2),   list(""green"",12.3))# Give names to the elements in the list.names(list_data) <- c(""1st Quarter"", ""A_Matrix"", ""A Inner list"")# Add element at the end of the list.list_data[4] <- ""New element""print(list_data[4])# Remove the last element.list_data[4] <- NULL# Print the 4th Element.print(list_data[4])# Update the 3rd Element.list_data[3] <- ""updated element""print(list_data[3])|||# Create two lists.list1 <- list(1,2,3)list2 <- list(""Sun"",""Mon"",""Tue"")# Merge the two lists.merged.list <- c(list1,list2)# Print the merged list.print(merged.list)|||# Create lists.list1 <- list(1:5)print(list1)list2 <-list(10:14)print(list2)# Convert the lists to vectors.v1 <- unlist(list1)v2 <- unlist(list2)print(v1)print(v2)# Now add the vectorsresult <- v1+v2print(result)"
Learn R Programming, R - Matrices, R - Matrices|||Accessing Elements of a Matrix@@@Matrix Computations@@@Useful Video Courses|||Syntax@@@Example@@@Matrix Addition & Subtraction@@@Matrix Multiplication & Division|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Matrices are the R objects in which the elements are arranged in a two-dimensional rectangular layout. They contain elements of the same atomic types. Though we can create a matrix containing only characters or only logical values, they are not of much use. We use matrices containing numeric elements to be used in mathematical calculations.|||A Matrix is created using the matrix() function.|||The basic syntax for creating a matrix in R is −|||Following is the description of the parameters used −|||data is the input vector which becomes the data elements of the matrix.|||nrow is the number of rows to be created.|||ncol is the number of columns to be created.|||byrow is a logical clue. If TRUE then the input vector elements are arranged by row.|||dimname is the names assigned to the rows and columns.|||Create a matrix taking a vector of numbers as input.|||When we execute the above code, it produces the following result −|||Elements of a matrix can be accessed by using the column and row index of the element. We consider the matrix P above to find the specific elements below.|||When we execute the above code, it produces the following result −|||Various mathematical operations are performed on the matrices using the R operators. The result of the operation is also a matrix.|||The dimensions (number of rows and columns) should be same for the matrices involved in the operation.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −",data is the input vector which becomes the data elements of the matrix.@@@nrow is the number of rows to be created.@@@ncol is the number of columns to be created.@@@byrow is a logical clue. If TRUE then the input vector elements are arranged by row.@@@dimname is the names assigned to the rows and columns.,,,"# Elements are arranged sequentially by row.M <- matrix(c(3:14), nrow = 4, byrow = TRUE)print(M)# Elements are arranged sequentially by column.N <- matrix(c(3:14), nrow = 4, byrow = FALSE)print(N)# Define the column and row names.rownames = c(""row1"", ""row2"", ""row3"", ""row4"")colnames = c(""col1"", ""col2"", ""col3"")P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))print(P)|||# Define the column and row names.rownames = c(""row1"", ""row2"", ""row3"", ""row4"")colnames = c(""col1"", ""col2"", ""col3"")# Create the matrix.P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))# Access the element at 3rd column and 1st row.print(P[1,3])# Access the element at 2nd column and 4th row.print(P[4,2])# Access only the  2nd row.print(P[2,])# Access only the 3rd column.print(P[,3])|||# Create two 2x3 matrices.matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)print(matrix1)matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)print(matrix2)# Add the matrices.result <- matrix1 + matrix2cat(""Result of addition"",""\n"")print(result)# Subtract the matricesresult <- matrix1 - matrix2cat(""Result of subtraction"",""\n"")print(result)|||# Create two 2x3 matrices.matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)print(matrix1)matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)print(matrix2)# Multiply the matrices.result <- matrix1 * matrix2cat(""Result of multiplication"",""\n"")print(result)# Divide the matricesresult <- matrix1 / matrix2cat(""Result of division"",""\n"")print(result)"
Learn R Programming,R - Arrays,R - Arrays|||Example@@@Naming Columns and Rows@@@Accessing Array Elements@@@Manipulating Array Elements@@@Calculations Across Array Elements@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Arrays are the R data objects which can store data in more than two dimensions. For example − If we create an array of dimension (2, 3, 4) then it creates 4 rectangular matrices each with 2 rows and 3 columns. Arrays can store only data type.|||An array is created using the array() function. It takes vectors as input and uses the values in the dim parameter to create an array.|||The following example creates an array of two 3x3 matrices each with 3 rows and 3 columns.|||When we execute the above code, it produces the following result −|||We can give names to the rows, columns and matrices in the array by using the dimnames parameter.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||As array is made up matrices in multiple dimensions, the operations on elements of array are carried out by accessing elements of the matrices.|||When we execute the above code, it produces the following result −|||We can do calculations across the elements in an array using the apply() function.|||Following is the description of the parameters used −|||x is an array.|||margin is the name of the data set used.|||fun is the function to be applied across the elements of the array.|||We use the apply() function below to calculate the sum of the elements in the rows of an array across all the matrices.|||When we execute the above code, it produces the following result −",x is an array.@@@margin is the name of the data set used.@@@fun is the function to be applied across the elements of the array.,,,"# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)# Take these vectors as input to the array.result <- array(c(vector1,vector2),dim = c(3,3,2))print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)column.names <- c(""COL1"",""COL2"",""COL3"")row.names <- c(""ROW1"",""ROW2"",""ROW3"")matrix.names <- c(""Matrix1"",""Matrix2"")# Take these vectors as input to the array.result <- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names,column.names,   matrix.names))print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)column.names <- c(""COL1"",""COL2"",""COL3"")row.names <- c(""ROW1"",""ROW2"",""ROW3"")matrix.names <- c(""Matrix1"",""Matrix2"")# Take these vectors as input to the array.result <- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names,   column.names, matrix.names))# Print the third row of the second matrix of the array.print(result[3,,2])# Print the element in the 1st row and 3rd column of the 1st matrix.print(result[1,3,1])# Print the 2nd Matrix.print(result[,,2])|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)# Take these vectors as input to the array.array1 <- array(c(vector1,vector2),dim = c(3,3,2))# Create two vectors of different lengths.vector3 <- c(9,1,0)vector4 <- c(6,0,11,3,14,1,2,6,9)array2 <- array(c(vector1,vector2),dim = c(3,3,2))# create matrices from these arrays.matrix1 <- array1[,,2]matrix2 <- array2[,,2]# Add the matrices.result <- matrix1+matrix2print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)# Take these vectors as input to the array.new.array <- array(c(vector1,vector2),dim = c(3,3,2))print(new.array)# Use apply to calculate the sum of the rows across all the matrices.result <- apply(new.array, c(1), sum)print(result)"
Learn R Programming,R - Factors,R - Factors|||Example@@@Factors in Data Frame@@@Changing the Order of Levels@@@Generating Factor Levels@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Factors are the data objects which are used to categorize the data and store it as levels. They can store both strings and integers. They are useful in the columns which have a limited number of unique values. Like ""Male, ""Female"" and True, False etc. They are useful in data analysis for statistical modeling.|||Factors are created using the factor () function by taking a vector as input.|||When we execute the above code, it produces the following result −|||On creating any data frame with a column of text data, R treats the text column as categorical data and creates factors on it.|||When we execute the above code, it produces the following result −|||The order of the levels in a factor can be changed by applying the factor function again with new order of the levels.|||When we execute the above code, it produces the following result −|||We can generate factor levels by using the gl() function. It takes two integers as input which indicates how many levels and how many times each level.|||Following is the description of the parameters used −|||n is a integer giving the number of levels.|||k is a integer giving the number of replications.|||labels is a vector of labels for the resulting factor levels.|||When we execute the above code, it produces the following result −",n is a integer giving the number of levels.@@@k is a integer giving the number of replications.@@@labels is a vector of labels for the resulting factor levels.,,,"# Create a vector as input.data <- c(""East"",""West"",""East"",""North"",""North"",""East"",""West"",""West"",""West"",""East"",""North"")print(data)print(is.factor(data))# Apply the factor function.factor_data <- factor(data)print(factor_data)print(is.factor(factor_data))|||# Create the vectors for data frame.height <- c(132,151,162,139,166,147,122)weight <- c(48,49,66,53,67,52,40)gender <- c(""male"",""male"",""female"",""female"",""male"",""female"",""male"")# Create the data frame.input_data <- data.frame(height,weight,gender)print(input_data)# Test if the gender column is a factor.print(is.factor(input_data$gender))# Print the gender column so see the levels.print(input_data$gender)|||data <- c(""East"",""West"",""East"",""North"",""North"",""East"",""West"",   ""West"",""West"",""East"",""North"")# Create the factorsfactor_data <- factor(data)print(factor_data)# Apply the factor function with required order of the level.new_order_data <- factor(factor_data,levels = c(""East"",""West"",""North""))print(new_order_data)|||v <- gl(3, 4, labels = c(""Tampa"", ""Seattle"",""Boston""))print(v)"
Learn R Programming,R - Data Frames,R - Data Frames|||Create Data Frame @@@Get the Structure of the Data Frame@@@Summary of Data in Data Frame@@@Extract Data from Data Frame@@@Expand Data Frame@@@Useful Video Courses|||Add Column@@@Add Row|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"A data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column.|||Following are the characteristics of a data frame.|||When we execute the above code, it produces the following result −|||The structure of the data frame can be seen by using str() function.|||When we execute the above code, it produces the following result −|||The statistical summary and nature of the data can be obtained by applying summary() function.|||When we execute the above code, it produces the following result −|||Extract specific column from a data frame using column name.|||When we execute the above code, it produces the following result −|||Extract the first two rows and then all columns|||When we execute the above code, it produces the following result −|||Extract 3rd and 5th row with 2nd and 4th column|||When we execute the above code, it produces the following result −|||A data frame can be expanded by adding columns and rows.|||Just add the column vector using a new column name.|||When we execute the above code, it produces the following result −|||To add more rows permanently to an existing data frame, we need to bring in the new rows in the same structure as the existing data frame and use the rbind() function.|||In the example below we create a data frame with new rows and merge it with the existing data frame to create the final data frame.|||When we execute the above code, it produces the following result −","The column names should be non-empty.@@@The row names should be unique.@@@The data stored in a data frame can be of numeric, factor or character type.@@@Each column should contain same number of data items.",,,"# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Print the data frame.			print(emp.data) |||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Get the structure of the data frame.str(emp.data)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Print the summary.print(summary(emp.data))  |||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),   emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),      start_date = as.Date(c(""2012-01-01"",""2013-09-23"",""2014-11-15"",""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Extract Specific columns.result <- data.frame(emp.data$emp_name,emp.data$salary)print(result)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),   emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),      start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Extract first two rows.result <- emp.data[1:2,]print(result)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),    	start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Extract 3rd and 5th row with 2nd and 4th column.result <- emp.data[c(3,5),c(2,4)]print(result)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Add the ""dept"" coulmn.emp.data$dept <- c(""IT"",""Operations"",""IT"",""HR"",""Finance"")v <- emp.dataprint(v)|||# Create the first data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   dept = c(""IT"",""Operations"",""IT"",""HR"",""Finance""),   stringsAsFactors = FALSE)# Create the second data frameemp.newdata <- 	data.frame(   emp_id = c (6:8),    emp_name = c(""Rasmi"",""Pranab"",""Tusar""),   salary = c(578.0,722.5,632.8),    start_date = as.Date(c(""2013-05-21"",""2013-07-30"",""2014-06-17"")),   dept = c(""IT"",""Operations"",""Fianance""),   stringsAsFactors = FALSE)# Bind the two data frames.emp.finaldata <- rbind(emp.data,emp.newdata)print(emp.finaldata)"
Learn R Programming,R - Packages,R - Packages|||Check Available R Packages@@@Get the list of all the packages installed@@@Install a New Package@@@Install directly from CRAN@@@Install package manually@@@Load Package to Library@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"R packages are a collection of R functions, complied code and sample data. They are stored under a directory called ""library"" in the R environment. By default, R installs a set of packages during installation. More packages are added later, when they are needed for some specific purpose. When we start the R console, only the default packages are available by default. Other packages which are already installed have to be loaded explicitly to be used by the R program that is going to use them.|||All the packages available in R language are listed at R Packages.|||Below is a list of commands to be used to check, verify and use the R packages.|||Get library locations containing R packages|||When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.|||When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.|||Get all packages currently loaded in the R environment|||When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.|||There are two ways to add new R packages. One is installing directly from the CRAN directory and another is downloading the package to your local system and installing it manually.|||The following command gets the packages directly from CRAN webpage and installs the package in the R environment. You may be prompted to choose a nearest mirror. Choose the one appropriate to your location.|||Go to the link R Packages to download the package needed. Save the package as a .zip file in a suitable location in the local system.|||Now you can run the following command to install this package in the R environment.|||Before a package can be used in the code, it must be loaded to the current R environment. You also need to load a package that is already installed previously but not available in the current environment.|||A package is loaded using the following command −",,,,".libPaths()|||library()|||search()|||install.packages(file_name_with_path, repos = NULL, type = ""source"")# Install the package named ""XML""install.packages(""E:/XML_3.98-1.3.zip"", repos = NULL, type = ""source"")"
Learn R Programming,R - Data Reshaping,R - Data Reshaping|||Joining Columns and Rows in a Data Frame@@@Merging Data Frames@@@Melting and Casting@@@Melt the Data@@@Cast the Molten Data@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Data Reshaping in R is about changing the way data is organized into rows and columns. Most of the time data processing in R is done by taking the input data as a data frame. It is easy to extract data from the rows and columns of a data frame but there are situations when we need the data frame in a format that is different from format in which we received it. R has many functions to split, merge and change the rows to columns and vice-versa in a data frame.|||We can join multiple vectors to create a data frame using the cbind()function. Also we can merge two data frames using rbind() function.|||When we execute the above code, it produces the following result −|||We can merge two data frames by using the merge() function. The data frames must have same column names on which the merging happens.|||In the example below, we consider the data sets about Diabetes in Pima Indian Women available in the library names ""MASS"". we merge the two data sets based on the values of blood pressure(""bp"") and body mass index(""bmi""). On choosing these two columns for merging, the records where values of these two variables match in both data sets are combined together to form a single data frame.|||When we execute the above code, it produces the following result −|||One of the most interesting aspects of R programming is about changing the shape of the data in multiple steps to get a desired shape. The functions used to do this are called melt() and cast().|||We consider the dataset called ships present in the library called ""MASS"".|||When we execute the above code, it produces the following result −|||Now we melt the data to organize it, converting all columns other than type and year into multiple rows.|||When we execute the above code, it produces the following result −|||We can cast the molten data into a new form where the aggregate of each type of ship for each year is created. It is done using the cast() function.|||When we execute the above code, it produces the following result −",,,,"# Create vector objects.city <- c(""Tampa"",""Seattle"",""Hartford"",""Denver"")state <- c(""FL"",""WA"",""CT"",""CO"")zipcode <- c(33602,98104,06161,80294)# Combine above three vectors into one data frame.addresses <- cbind(city,state,zipcode)# Print a header.cat(""# # # # The First data frame\n"") # Print the data frame.print(addresses)# Create another data frame with similar columnsnew.address <- data.frame(   city = c(""Lowry"",""Charlotte""),   state = c(""CO"",""FL""),   zipcode = c(""80230"",""33949""),   stringsAsFactors = FALSE)# Print a header.cat(""# # # The Second data frame\n"") # Print the data frame.print(new.address)# Combine rows form both the data frames.all.addresses <- rbind(addresses,new.address)# Print a header.cat(""# # # The combined data frame\n"") # Print the result.print(all.addresses)|||library(MASS)merged.Pima <- merge(x = Pima.te, y = Pima.tr,   by.x = c(""bp"", ""bmi""),   by.y = c(""bp"", ""bmi""))print(merged.Pima)nrow(merged.Pima)|||library(MASS)print(ships)|||molten.ships <- melt(ships, id = c(""type"",""year""))print(molten.ships)|||recasted.ship <- cast(molten.ships, type+year~variable,sum)print(recasted.ship)"
Learn R Programming,R - CSV Files,R - CSV Files|||Getting and Setting the Working Directory@@@Input as CSV File@@@Reading a CSV File@@@Analyzing the CSV File@@@Writing into a CSV File@@@Useful Video Courses|||Get the maximum salary@@@Get the details of the person with max salary@@@Get all the people working in IT department@@@Get the persons in IT department whose salary is greater than 600@@@Get the people who joined on or after 2014|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"In R, we can read data from files stored outside the R environment. We can also write data into files which will be stored and accessed by the operating system. R can read and write into various file formats like csv, excel, xml etc.|||In this chapter we will learn to read data from a csv file and then write data into a csv file. The file should be present in current working directory so that R can read it. Of course we can also set our own directory and read files from there.|||You can check which directory the R workspace is pointing to using the getwd() function. You can also set a new working directory using setwd()function.|||When we execute the above code, it produces the following result −|||This result depends on your OS and your current directory where you are working.|||The csv file is a text file in which the values in the columns are separated by a comma. Let's consider the following data present in the file named input.csv.|||You can create this file using windows notepad by copying and pasting this data. Save the file as input.csv using the save As All files(*.*) option in notepad.|||Following is a simple example of read.csv() function to read a CSV file available in your current working directory −|||When we execute the above code, it produces the following result −|||By default the read.csv() function gives the output as a data frame. This can be easily checked as follows. Also we can check the number of columns and rows.|||When we execute the above code, it produces the following result −|||Once we read data in a data frame, we can apply all the functions applicable to data frames as explained in subsequent section.|||When we execute the above code, it produces the following result −|||We can fetch rows meeting specific filter criteria similar to a SQL where clause.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||R can create csv file form existing data frame. The write.csv() function is used to create the csv file. This file gets created in the working directory.|||When we execute the above code, it produces the following result −|||Here the column X comes from the data set newper. This can be dropped using additional parameters while writing the file.|||When we execute the above code, it produces the following result −",,,,"# Get and print current working directory.print(getwd())# Set current working directory.setwd(""/web/com"")# Get and print current working directory.print(getwd())|||id,name,salary,start_date,dept1,Rick,623.3,2012-01-01,IT2,Dan,515.2,2013-09-23,Operations3,Michelle,611,2014-11-15,IT4,Ryan,729,2014-05-11,HR5,Gary,843.25,2015-03-27,Finance6,Nina,578,2013-05-21,IT7,Simon,632.8,2013-07-30,Operations8,Guru,722.5,2014-06-17,Finance|||data <- read.csv(""input.csv"")print(data)|||data <- read.csv(""input.csv"")print(is.data.frame(data))print(ncol(data))print(nrow(data))|||# Create a data frame.data <- read.csv(""input.csv"")# Get the max salary from data frame.sal <- max(data$salary)print(sal)|||# Create a data frame.data <- read.csv(""input.csv"")# Get the max salary from data frame.sal <- max(data$salary)# Get the person detail having max salary.retval <- subset(data, salary == max(salary))print(retval)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset( data, dept == ""IT"")print(retval)|||# Create a data frame.data <- read.csv(""input.csv"")info <- subset(data, salary > 600 & dept == ""IT"")print(info)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset(data, as.Date(start_date) > as.Date(""2014-01-01""))print(retval)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset(data, as.Date(start_date) > as.Date(""2014-01-01""))# Write filtered data into a new file.write.csv(retval,""output.csv"")newdata <- read.csv(""output.csv"")print(newdata)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset(data, as.Date(start_date) > as.Date(""2014-01-01""))# Write filtered data into a new file.write.csv(retval,""output.csv"", row.names = FALSE)newdata <- read.csv(""output.csv"")print(newdata)"
Learn R Programming,R - Excel File,"R - Excel File|||Install xlsx Package@@@Verify and Load the ""xlsx"" Package@@@Input as xlsx File@@@Reading the Excel File@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training","Microsoft Excel is the most widely used spreadsheet program which stores data in the .xls or .xlsx format. R can read directly from these files using some excel specific packages. Few such packages are - XLConnect, xlsx, gdata etc. We will be using xlsx package. R can also write into excel file using this package.|||You can use the following command in the R console to install the ""xlsx"" package. It may ask to install some additional packages on which this package is dependent. Follow the same command with required package name to install the additional packages.|||Use the following command to verify and load the ""xlsx"" package.|||When the script is run we get the following output.|||Open Microsoft excel. Copy and paste the following data in the work sheet named as sheet1.|||Also copy and paste the following data to another worksheet and rename this worksheet to ""city"".|||Save the Excel file as ""input.xlsx"". You should save it in the current working directory of the R workspace.|||The input.xlsx is read by using the read.xlsx() function as shown below. The result is stored as a data frame in the R environment.|||When we execute the above code, it produces the following result −",,,,"# Verify the package is installed.any(grepl(""xlsx"",installed.packages()))# Load the library into R workspace.library(""xlsx"")|||# Read the first worksheet in the file input.xlsx.data <- read.xlsx(""input.xlsx"", sheetIndex = 1)print(data)"
Learn R Programming,R - Binary Files,R - Binary Files|||Writing the Binary File@@@Reading the Binary File@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"A binary file is a file that contains information stored only in form of bits and bytes.(0’s and 1’s). They are not human readable as the bytes in it translate to characters and symbols which contain many other non-printable characters. Attempting to read a binary file using any text editor will show characters like Ø and ð.|||The binary file has to be read by specific programs to be useable. For example, the binary file of a Microsoft Word program can be read to a human readable form only by the Word program. Which indicates that, besides the human readable text, there is a lot more information like formatting of characters and page numbers etc., which are also stored along with alphanumeric characters. And finally a binary file is a continuous sequence of bytes. The line break we see in a text file is a character joining first line to the next.|||Sometimes, the data generated by other programs are required to be processed by R as a binary file. Also R is required to create binary files which can be shared with other programs.|||R has two functions WriteBin() and readBin() to create and read binary files.|||Following is the description of the parameters used −|||con is the connection object to read or write the binary file.|||object is the binary file which to be written.|||what is the mode like character, integer etc. representing the bytes to be read.|||n is the number of bytes to read from the binary file.|||We consider the R inbuilt data ""mtcars"". First we create a csv file from it and convert it to a binary file and store it as a OS file. Next we read this binary file created into R.|||We read the data frame ""mtcars"" as a csv file and then write it as a binary file to the OS.|||The binary file created above stores all the data as continuous bytes. So we will read it by choosing appropriate values of column names as well as the column values.|||When we execute the above code, it produces the following result and chart −|||As we can see, we got the original data back by reading the binary file in R.","con is the connection object to read or write the binary file.@@@object is the binary file which to be written.@@@what is the mode like character, integer etc. representing the bytes to be read.@@@n is the number of bytes to read from the binary file.",,,"# Read the ""mtcars"" data frame as a csv file and store only the columns    ""cyl"", ""am"" and ""gear"".write.table(mtcars, file = ""mtcars.csv"",row.names = FALSE, na = """",    col.names = TRUE, sep = "","")# Store 5 records from the csv file as a new data frame.new.mtcars <- read.table(""mtcars.csv"",sep = "","",header = TRUE,nrows = 5)# Create a connection object to write the binary file using mode ""wb"".write.filename = file(""/web/com/binmtcars.dat"", ""wb"")# Write the column names of the data frame to the connection object.writeBin(colnames(new.mtcars), write.filename)# Write the records in each of the column to the file.writeBin(c(new.mtcars$cyl,new.mtcars$am,new.mtcars$gear), write.filename)# Close the file for writing so that it can be read by other program.close(write.filename)|||# Create a connection object to read the file in binary mode using ""rb"".read.filename <- file(""/web/com/binmtcars.dat"", ""rb"")# First read the column names. n = 3 as we have 3 columns.column.names <- readBin(read.filename, character(),  n = 3)# Next read the column values. n = 18 as we have 3 column names and 15 values.read.filename <- file(""/web/com/binmtcars.dat"", ""rb"")bindata <- readBin(read.filename, integer(),  n = 18)# Print the data.print(bindata)# Read the values from 4th byte to 8th byte which represents ""cyl"".cyldata = bindata[4:8]print(cyldata)# Read the values form 9th byte to 13th byte which represents ""am"".amdata = bindata[9:13]print(amdata)# Read the values form 9th byte to 13th byte which represents ""gear"".geardata = bindata[14:18]print(geardata)# Combine all the read values to a dat frame.finaldata = cbind(cyldata, amdata, geardata)colnames(finaldata) = column.namesprint(finaldata)"
Learn R Programming,R - XML Files,R - XML Files|||Input Data@@@Reading XML File@@@Details of the First Node@@@XML to Data Frame@@@Useful Video Courses|||Get Number of Nodes Present in XML File@@@Get Different Elements of a Node|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"XML is a file format which shares both the file format and the data on the World Wide Web, intranets, and elsewhere using standard ASCII text. It stands for Extensible Markup Language (XML). Similar to HTML it contains markup tags. But unlike HTML where the markup tag describes structure of the page, in xml the markup tags describe the meaning of the data contained into he file.|||You can read a xml file in R using the ""XML"" package. This package can be installed using following command.|||Create a XMl file by copying the below data into a text editor like notepad. Save the file with a .xml extension and choosing the file type as all files(*.*).|||The xml file is read by R using the function xmlParse(). It is stored as a list in R.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||Let's look at the first record of the parsed file. It will give us an idea of the various elements present in the top level node.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||To handle the data effectively in large files we read the data in the xml file as a data frame. Then process the data frame for data analysis.|||When we execute the above code, it produces the following result −|||As the data is now available as a dataframe we can use data frame related function to read and manipulate the file.",,,,"<RECORDS>   <EMPLOYEE>      <ID>1</ID>      <NAME>Rick</NAME>      <SALARY>623.3</SALARY>      <STARTDATE>1/1/2012</STARTDATE>      <DEPT>IT</DEPT>   </EMPLOYEE>	   <EMPLOYEE>      <ID>2</ID>      <NAME>Dan</NAME>      <SALARY>515.2</SALARY>      <STARTDATE>9/23/2013</STARTDATE>      <DEPT>Operations</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>3</ID>      <NAME>Michelle</NAME>      <SALARY>611</SALARY>      <STARTDATE>11/15/2014</STARTDATE>      <DEPT>IT</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>4</ID>      <NAME>Ryan</NAME>      <SALARY>729</SALARY>      <STARTDATE>5/11/2014</STARTDATE>      <DEPT>HR</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>5</ID>      <NAME>Gary</NAME>      <SALARY>843.25</SALARY>      <STARTDATE>3/27/2015</STARTDATE>      <DEPT>Finance</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>6</ID>      <NAME>Nina</NAME>      <SALARY>578</SALARY>      <STARTDATE>5/21/2013</STARTDATE>      <DEPT>IT</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>7</ID>      <NAME>Simon</NAME>      <SALARY>632.8</SALARY>      <STARTDATE>7/30/2013</STARTDATE>      <DEPT>Operations</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>8</ID>      <NAME>Guru</NAME>      <SALARY>722.5</SALARY>      <STARTDATE>6/17/2014</STARTDATE>      <DEPT>Finance</DEPT>   </EMPLOYEE>	</RECORDS>|||# Load the package required to read XML files.library(""XML"")# Also load the other required package.library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Print the result.print(result)|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Exract the root node form the xml file.rootnode <- xmlRoot(result)# Find number of nodes in the root.rootsize <- xmlSize(rootnode)# Print the result.print(rootsize)|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Exract the root node form the xml file.rootnode <- xmlRoot(result)# Print the result.print(rootnode[1])|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Exract the root node form the xml file.rootnode <- xmlRoot(result)# Get the first element of the first node.print(rootnode[[1]][[1]])# Get the fifth element of the first node.print(rootnode[[1]][[5]])# Get the second element of the third node.print(rootnode[[3]][[2]])|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Convert the input xml file to a data frame.xmldataframe <- xmlToDataFrame(""input.xml"")print(xmldataframe)"
Learn R Programming,R - JSON Files,R - JSON Files|||Install rjson Package@@@Input Data@@@Read the JSON File@@@Convert JSON to a Data Frame@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"JSON file stores data as text in human-readable format. Json stands for JavaScript Object Notation. R can read JSON files using the rjson package.|||In the R console, you can issue the following command to install the rjson package.|||Create a JSON file by copying the below data into a text editor like notepad. Save the file with a .json extension and choosing the file type as all files(*.*).|||The JSON file is read by R using the function from JSON(). It is stored as a list in R.|||When we execute the above code, it produces the following result −|||We can convert the extracted data above to a R data frame for further analysis using the as.data.frame() function.|||When we execute the above code, it produces the following result −",,,,"{    ""ID"":[""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"" ],   ""Name"":[""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary"",""Nina"",""Simon"",""Guru"" ],   ""Salary"":[""623.3"",""515.2"",""611"",""729"",""843.25"",""578"",""632.8"",""722.5"" ],      ""StartDate"":[ ""1/1/2012"",""9/23/2013"",""11/15/2014"",""5/11/2014"",""3/27/2015"",""5/21/2013"",      ""7/30/2013"",""6/17/2014""],   ""Dept"":[ ""IT"",""Operations"",""IT"",""HR"",""Finance"",""IT"",""Operations"",""Finance""]}|||# Load the package required to read JSON files.library(""rjson"")# Give the input file name to the function.result <- fromJSON(file = ""input.json"")# Print the result.print(result)|||# Load the package required to read JSON files.library(""rjson"")# Give the input file name to the function.result <- fromJSON(file = ""input.json"")# Convert JSON file to a data frame.json_data_frame <- as.data.frame(result)print(json_data_frame)"
Learn R Programming,R - Web Data,R - Web Data|||Install R Packages@@@Input Data@@@Example@@@Verify the File Download@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Many websites provide data for consumption by its users. For example the World Health Organization(WHO) provides reports on health and medical information in the form of CSV, txt and XML files. Using R programs, we can programmatically extract specific data from such websites. Some packages in R which are used to scrap data form the web are − ""RCurl"",XML"", and ""stringr"". They are used to connect to the URL’s, identify required links for the files and download them to the local environment.|||The following packages are required for processing the URL’s and links to the files. If they are not available in your R Environment, you can install them using following commands.|||We will visit the URL weather data and download the CSV files using R for the year 2015.|||We will use the function getHTMLLinks() to gather the URLs of the files. Then we will use the function download.file() to save the files to the local system. As we will be applying the same code again and again for multiple files, we will create a function to be called multiple times. The filenames are passed as parameters in form of a R list object to this function.|||After running the above code, you can locate the following files in the current R working directory.",,,,"# Read the URL.url <- ""http://www.geos.ed.ac.uk/~weather/jcmb_ws/""# Gather the html links present in the webpage.links <- getHTMLLinks(url)# Identify only the links which point to the JCMB 2015 files. filenames <- links[str_detect(links, ""JCMB_2015"")]# Store the file names as a list.filenames_list <- as.list(filenames)# Create a function to download the files by passing the URL and filename list.downloadcsv <- function (mainurl,filename) {   filedetails <- str_c(mainurl,filename)   download.file(filedetails,filename)}# Now apply the l_ply function and save the files into the current R working directory.l_ply(filenames,downloadcsv,mainurl = ""http://www.geos.ed.ac.uk/~weather/jcmb_ws/"")"
Learn R Programming,R - Databases,R - Databases|||RMySQL Package@@@Connecting R to MySql@@@Querying the Tables@@@Query with Filter Clause@@@Updating Rows in the Tables@@@Inserting Data into the Tables@@@Creating Tables in MySql@@@Dropping Tables in MySql@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"The data is Relational database systems are stored in a normalized format. So, to carry out statistical computing we will need very advanced and complex Sql queries. But R can connect easily to many relational databases like MySql, Oracle, Sql server etc. and fetch records from them as a data frame. Once the data is available in the R environment, it becomes a normal R data set and can be manipulated or analyzed using all the powerful packages and functions.|||In this tutorial we will be using MySql as our reference database for connecting to R.|||R has a built-in package named ""RMySQL"" which provides native connectivity between with MySql database. You can install this package in the R environment using the following command.|||Once the package is installed we create a connection object in R to connect to the database. It takes the username, password, database name and host name as input.|||When we execute the above code, it produces the following result −|||We can query the database tables in MySql using the function dbSendQuery(). The query gets executed in MySql and the result set is returned using the R fetch() function. Finally it is stored as a data frame in R.|||When we execute the above code, it produces the following result −|||We can pass any valid select query to get the result.|||When we execute the above code, it produces the following result −|||We can update the rows in a Mysql table by passing the update query to the dbSendQuery() function.|||After executing the above code we can see the table updated in the MySql Environment.|||After executing the above code we can see the row inserted into the table in the MySql Environment.|||We can create tables in the MySql using the function dbWriteTable(). It overwrites the table if it already exists and takes a data frame as input.|||After executing the above code we can see the table created in the MySql Environment.|||We can drop the tables in MySql database passing the drop table statement into the dbSendQuery() in the same way we used it for querying data from tables.|||After executing the above code we can see the table is dropped in the MySql Environment.",,,,"install.packages(""RMySQL"")|||# Create a connection Object to MySQL database.# We will connect to the sampel database named ""sakila"" that comes with MySql installation.mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',   host = 'localhost')# List the tables available in this database. dbListTables(mysqlconnection)|||# Query the ""actor"" tables to get all the rows.result = dbSendQuery(mysqlconnection, ""select * from actor"")# Store the result in a R data frame object. n = 5 is used to fetch first 5 rows.data.frame = fetch(result, n = 5)print(data.fame)|||result = dbSendQuery(mysqlconnection, ""select * from actor where last_name = 'TORN'"")# Fetch all the records(with n = -1) and store it as a data frame.data.frame = fetch(result, n = -1)print(data)|||dbSendQuery(mysqlconnection, ""update mtcars set disp = 168.5 where hp = 110"")|||dbSendQuery(mysqlconnection,   ""insert into mtcars(row_names, mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)   values('New Mazda RX4 Wag', 21, 6, 168.5, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4)"")|||# Create the connection object to the database where we want to create the table.mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',    host = 'localhost')# Use the R data frame ""mtcars"" to create the table in MySql.# All the rows of mtcars are taken inot MySql.dbWriteTable(mysqlconnection, ""mtcars"", mtcars[, ], overwrite = TRUE)|||dbSendQuery(mysqlconnection, 'drop table if exists mtcars')"
Learn R Programming,R - Pie Charts,R - Pie Charts|||Pie Chart Title and Colors@@@Slice Percentages and Chart Legend@@@3D Pie Chart@@@Useful Video Courses|||Syntax@@@Example@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"R Programming language has numerous libraries to create charts and graphs. A pie-chart is a representation of values as slices of a circle with different colors. The slices are labeled and the numbers corresponding to each slice is also represented in the chart.|||In R the pie chart is created using the pie() function which takes positive numbers as a vector input. The additional parameters are used to control labels, color, title etc.|||The basic syntax for creating a pie-chart using the R is −|||Following is the description of the parameters used −|||x is a vector containing the numeric values used in the pie chart.|||labels is used to give description to the slices.|||radius indicates the radius of the circle of the pie chart.(value between −1 and +1).|||main indicates the title of the chart.|||col indicates the color palette.|||clockwise is a logical value indicating if the slices are drawn clockwise or anti clockwise.|||A very simple pie-chart is created using just the input vector and labels. The below script will create and save the pie chart in the current R working directory.|||When we execute the above code, it produces the following result −|||We can expand the features of the chart by adding more parameters to the function. We will use parameter main to add a title to the chart and another parameter is col which will make use of rainbow colour pallet while drawing the chart. The length of the pallet should be same as the number of values we have for the chart. Hence we use length(x).|||The below script will create and save the pie chart in the current R working directory.|||When we execute the above code, it produces the following result −|||We can add slice percentage and a chart legend by creating additional chart variables.|||When we execute the above code, it produces the following result −|||A pie chart with 3 dimensions can be drawn using additional packages. The package plotrix has a function called pie3D() that is used for this.|||When we execute the above code, it produces the following result −",x is a vector containing the numeric values used in the pie chart.@@@labels is used to give description to the slices.@@@radius indicates the radius of the circle of the pie chart.(value between −1 and +1).@@@main indicates the title of the chart.@@@col indicates the color palette.@@@clockwise is a logical value indicating if the slices are drawn clockwise or anti clockwise.,,,"# Create data for the graph.x <- c(21, 62, 10, 53)labels <- c(""London"", ""New York"", ""Singapore"", ""Mumbai"")# Give the chart file a name.png(file = ""city.png"")# Plot the chart.pie(x,labels)# Save the file.dev.off()|||# Create data for the graph.x <- c(21, 62, 10, 53)labels <- c(""London"", ""New York"", ""Singapore"", ""Mumbai"")# Give the chart file a name.png(file = ""city_title_colours.jpg"")# Plot the chart with title and rainbow color pallet.pie(x, labels, main = ""City pie chart"", col = rainbow(length(x)))# Save the file.dev.off()|||# Create data for the graph.x <-  c(21, 62, 10,53)labels <-  c(""London"",""New York"",""Singapore"",""Mumbai"")piepercent<- round(100*x/sum(x), 1)# Give the chart file a name.png(file = ""city_percentage_legends.jpg"")# Plot the chart.pie(x, labels = piepercent, main = ""City pie chart"",col = rainbow(length(x)))legend(""topright"", c(""London"",""New York"",""Singapore"",""Mumbai""), cex = 0.8,   fill = rainbow(length(x)))# Save the file.dev.off()|||# Get the library.library(plotrix)# Create data for the graph.x <-  c(21, 62, 10,53)lbl <-  c(""London"",""New York"",""Singapore"",""Mumbai"")# Give the chart file a name.png(file = ""3d_pie_chart.jpg"")# Plot the chart.pie3D(x,labels = lbl,explode = 0.1, main = ""Pie Chart of Countries "")# Save the file.dev.off()"
Learn R Programming,R - Bar Charts,"R - Bar Charts|||Bar Chart Labels, Title and Colors@@@Group Bar Chart and Stacked Bar Chart@@@Useful Video Courses|||Syntax@@@Example@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training","A bar chart represents data in rectangular bars with length of the bar proportional to the value of the variable. R uses the function barplot() to create bar charts.
 R can draw both vertical and Horizontal bars in the bar chart.
In bar chart each of the bars can be given different colors.|||The basic syntax to create a bar-chart in R is −|||Following is the description of the parameters used −|||A simple bar chart is created using just the input vector and the name of each bar.||| The below script will create and save the bar chart in the current R working directory.|||When we execute above code, it produces following result −|||The features of the bar chart can be expanded by adding more parameters. The main parameter is used to add  title. The col parameter is used to add colors to the bars. The args.name is a vector having same number of values as the input vector to describe the meaning of each bar.|||The below script will create and save the bar chart in the current R working directory.|||When we execute above code, it produces following result −|||We can create bar chart with groups of bars and stacks in each bar by using a matrix as input values.||| More than two variables are represented as a matrix which is used to create the group bar chart and stacked bar chart.",H is a vector or matrix containing numeric values used in bar chart.@@@xlab is the label for x axis.@@@ylab is the label for y axis.@@@main is the title of the bar chart.@@@names.arg is a vector of names appearing under each bar.@@@col is used to give colors to the bars in the graph.,,,"# Create the data for the chartH <- c(7,12,28,3,41)# Give the chart file a namepng(file = ""barchart.png"")# Plot the bar chart barplot(H)# Save the filedev.off()|||# Create the data for the chartH <- c(7,12,28,3,41)M <- c(""Mar"",""Apr"",""May"",""Jun"",""Jul"")# Give the chart file a namepng(file = ""barchart_months_revenue.png"")# Plot the bar chart barplot(H,names.arg=M,xlab=""Month"",ylab=""Revenue"",col=""blue"",main=""Revenue chart"",border=""red"")# Save the filedev.off()|||# Create the input vectors.colors = c(""green"",""orange"",""brown"")months <- c(""Mar"",""Apr"",""May"",""Jun"",""Jul"")regions <- c(""East"",""West"",""North"")# Create the matrix of the values.Values <- matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow = 3, ncol = 5, byrow = TRUE)# Give the chart file a namepng(file = ""barchart_stacked.png"")# Create the bar chartbarplot(Values, main = ""total revenue"", names.arg = months, xlab = ""month"", ylab = ""revenue"", col = colors)# Add the legend to the chartlegend(""topleft"", regions, cex = 1.3, fill = colors)# Save the filedev.off()"
Learn R Programming,R - Boxplots,R - Boxplots|||Creating the Boxplot@@@Boxplot with Notch@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Boxplots are a measure of how well distributed is the data in a data set. It divides the data set into three quartiles. This graph represents the minimum, maximum, median, first quartile and third quartile in the data set. It is also useful in comparing the distribution of data across data sets by drawing boxplots for each of them.|||Boxplots are created in R by using the boxplot() function.|||The basic syntax to create a boxplot in R is  −|||Following is the description of the parameters used −|||x is a vector or a formula.|||data is the data frame.|||notch is a logical value. Set as TRUE to draw a notch.|||varwidth is a logical value. Set as true to draw width of the box proportionate to the sample size.|||names are the group labels which will be printed under each boxplot.|||main is used to give a title to the graph.|||We use the data set ""mtcars"" available in the R environment to create a basic boxplot. Let's look at the columns ""mpg"" and ""cyl"" in mtcars.|||When we execute above code, it produces following result −|||The below script will create a boxplot graph for the relation between mpg (miles per gallon) and cyl (number of cylinders).|||When we execute the above code, it produces the following result −|||We can draw boxplot with notch to find out how the medians of different data groups match with each other.|||The below script will create a boxplot graph with notch for each of the data group.|||When we execute the above code, it produces the following result −",x is a vector or a formula.@@@data is the data frame.@@@notch is a logical value. Set as TRUE to draw a notch.@@@varwidth is a logical value. Set as true to draw width of the box proportionate to the sample size.@@@names are the group labels which will be printed under each boxplot.@@@main is used to give a title to the graph.,,,"input <- mtcars[,c('mpg','cyl')]print(head(input))|||# Give the chart file a name.png(file = ""boxplot.png"")# Plot the chart.boxplot(mpg ~ cyl, data = mtcars, xlab = ""Number of Cylinders"",   ylab = ""Miles Per Gallon"", main = ""Mileage Data"")# Save the file.dev.off()|||# Give the chart file a name.png(file = ""boxplot_with_notch.png"")# Plot the chart.boxplot(mpg ~ cyl, data = mtcars,    xlab = ""Number of Cylinders"",   ylab = ""Miles Per Gallon"",    main = ""Mileage Data"",   notch = TRUE,    varwidth = TRUE,    col = c(""green"",""yellow"",""purple""),   names = c(""High"",""Medium"",""Low""))# Save the file.dev.off()"
Learn R Programming,R - Histograms,R - Histograms|||Range of X and Y values@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"A histogram represents the frequencies of values of a variable bucketed into ranges. Histogram is similar to bar chat but the difference is it groups the values into continuous ranges. Each bar in histogram represents the height of the number of values present in that range.|||R creates histogram using hist() function. This function takes a vector as an input and uses some more parameters to plot histograms.|||The basic syntax for creating a histogram using R is −|||Following is the description of the parameters used −|||v is a vector containing numeric values used in histogram.|||main indicates title of the chart.|||col is used to set color of the bars.|||border is used to set border color of each bar.|||xlab is used to give description of x-axis.|||xlim is used to specify the range of values on the x-axis.|||ylim is used to specify the range of values on the y-axis.|||breaks is used to mention the width of each bar.|||A simple histogram is created using input vector, label, col and border parameters.|||The script given below will create and save the histogram in the current R working directory.|||When we execute the above code, it produces the following result −|||To specify the range of values allowed in X axis and Y axis, we can use the xlim and ylim parameters.|||The width of each of the bar can be decided by using breaks.|||When we execute the above code, it produces the following result −",v is a vector containing numeric values used in histogram.@@@main indicates title of the chart.@@@col is used to set color of the bars.@@@border is used to set border color of each bar.@@@xlab is used to give description of x-axis.@@@xlim is used to specify the range of values on the x-axis.@@@ylim is used to specify the range of values on the y-axis.@@@breaks is used to mention the width of each bar.,,,"# Create data for the graph.v <-  c(9,13,21,8,36,22,12,41,31,33,19)# Give the chart file a name.png(file = ""histogram.png"")# Create the histogram.hist(v,xlab = ""Weight"",col = ""yellow"",border = ""blue"")# Save the file.dev.off()|||# Create data for the graph.v <- c(9,13,21,8,36,22,12,41,31,33,19)# Give the chart file a name.png(file = ""histogram_lim_breaks.png"")# Create the histogram.hist(v,xlab = ""Weight"",col = ""green"",border = ""red"", xlim = c(0,40), ylim = c(0,5),   breaks = 5)# Save the file.dev.off()"
Learn R Programming,R - Line Graphs,"R - Line Graphs|||Line Chart Title, Color and Labels@@@Multiple Lines in a Line Chart@@@Useful Video Courses|||Syntax@@@Example@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training","A line chart is a graph that connects a series of points by drawing line segments between them. These points are ordered in one of their coordinate (usually the x-coordinate) value. Line charts are usually used in identifying the trends in data.|||The plot() function in R is used to create the line graph.|||The basic syntax to create a line chart in R is −|||Following is the description of the parameters used −|||v is a vector containing the numeric values.|||type takes the value ""p"" to draw only the points, ""l"" to draw only the lines and ""o"" to draw both points and lines.|||xlab is the label for x axis.|||ylab is the label for y axis.|||main is the Title of the chart.|||col is used to give colors to both the points and lines.|||A simple line chart is created using the input vector and the type parameter as ""O"". The below script will create and save a line chart in the current R working directory.|||When we execute the above code, it produces the following result −|||The features of the line chart can be expanded by using additional parameters. We add color to the points and lines, give a title to the chart and add labels to the axes.|||When we execute the above code, it produces the following result −|||More than one line can be drawn on the same chart by using the lines()function.|||After the first line is plotted, the lines() function can use an additional vector as input to draw the second line in the chart,|||When we execute the above code, it produces the following result −","v is a vector containing the numeric values.@@@type takes the value ""p"" to draw only the points, ""l"" to draw only the lines and ""o"" to draw both points and lines.@@@xlab is the label for x axis.@@@ylab is the label for y axis.@@@main is the Title of the chart.@@@col is used to give colors to both the points and lines.",,,"# Create the data for the chart.v <- c(7,12,28,3,41)# Give the chart file a name.png(file = ""line_chart.jpg"")# Plot the bar chart. plot(v,type = ""o"")# Save the file.dev.off()|||# Create the data for the chart.v <- c(7,12,28,3,41)# Give the chart file a name.png(file = ""line_chart_label_colored.jpg"")# Plot the bar chart.plot(v,type = ""o"", col = ""red"", xlab = ""Month"", ylab = ""Rain fall"",   main = ""Rain fall chart"")# Save the file.dev.off()|||# Create the data for the chart.v <- c(7,12,28,3,41)t <- c(14,7,6,19,3)# Give the chart file a name.png(file = ""line_chart_2_lines.jpg"")# Plot the bar chart.plot(v,type = ""o"",col = ""red"", xlab = ""Month"", ylab = ""Rain fall"",    main = ""Rain fall chart"")lines(t, type = ""o"", col = ""blue"")# Save the file.dev.off()"
Learn R Programming,R - Scatterplots,R - Scatterplots|||Creating the Scatterplot@@@Scatterplot Matrices@@@Useful Video Courses|||Syntax@@@Example@@@Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Scatterplots show many points plotted in the Cartesian plane. Each point represents the values of two variables. One variable is chosen in the horizontal axis and another in the vertical axis.|||The simple scatterplot is created using the plot() function.|||The basic syntax for creating scatterplot in R is −|||Following is the description of the parameters used −|||x is the data set whose values are the horizontal coordinates.|||y is the data set whose values are the vertical coordinates.|||main is the tile of the graph.|||xlab is the label in the horizontal axis.|||ylab is the label in the vertical axis.|||xlim is the limits of the values of x used for plotting.|||ylim is the limits of the values of y used for plotting.|||axes indicates whether both axes should be drawn on the plot.|||We use the data set ""mtcars"" available in the R environment to create a basic scatterplot. Let's use the columns ""wt"" and ""mpg"" in mtcars.|||When we execute the above code, it produces the following result −|||The below script will create a scatterplot graph for the relation between wt(weight) and mpg(miles per gallon).|||When we execute the above code, it produces the following result −|||When we have more than two variables and we want to find the correlation between one variable versus the remaining ones we use scatterplot matrix. We use pairs() function to create matrices of scatterplots.|||The basic syntax for creating scatterplot matrices in R is −|||Following is the description of the parameters used −|||formula represents the series of variables used in pairs.|||data represents the data set from which the variables will be taken.|||Each variable is paired up with each of the remaining variable. A scatterplot is plotted for each pair.|||When the above code is executed we get the following output.",x is the data set whose values are the horizontal coordinates.@@@y is the data set whose values are the vertical coordinates.@@@main is the tile of the graph.@@@xlab is the label in the horizontal axis.@@@ylab is the label in the vertical axis.@@@xlim is the limits of the values of x used for plotting.@@@ylim is the limits of the values of y used for plotting.@@@axes indicates whether both axes should be drawn on the plot.|||formula represents the series of variables used in pairs.@@@data represents the data set from which the variables will be taken.,,,"input <- mtcars[,c('wt','mpg')]print(head(input))|||# Get the input values.input <- mtcars[,c('wt','mpg')]# Give the chart file a name.png(file = ""scatterplot.png"")# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.plot(x = input$wt,y = input$mpg,   xlab = ""Weight"",   ylab = ""Milage"",   xlim = c(2.5,5),   ylim = c(15,30),		    main = ""Weight vs Milage"")	 # Save the file.dev.off()|||# Give the chart file a name.png(file = ""scatterplot_matrices.png"")# Plot the matrices between 4 variables giving 12 plots.# One variable with 3 others and total 4 variables.pairs(~wt+mpg+disp+cyl,data = mtcars,   main = ""Scatterplot Matrix"")# Save the file.dev.off()"
Learn R Programming,"R - Mean, Median and Mode","R - Mean, Median and Mode|||Mean@@@Applying Trim Option@@@Applying NA Option@@@Median@@@Mode@@@Useful Video Courses|||Syntax@@@Example@@@Syntax@@@Example@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training","Statistical analysis in R is performed by using many in-built functions. Most of these functions are part of the R base package. These functions take R vector as an input along with the arguments and give the result.|||The functions we are discussing in this chapter are mean, median and mode.|||It is calculated by taking the sum of the values and dividing with the number of values in a data series.|||The function mean() is used to calculate this in R.|||The basic syntax for calculating mean in R is −|||Following is the description of the parameters used −|||x is the input vector.|||trim is used to drop some observations from both end of the sorted vector.|||na.rm is used to remove the missing values from the input vector.|||When we execute the above code, it produces the following result −|||When trim parameter is supplied, the values in the vector get sorted and then the required numbers of observations are dropped from calculating the mean.|||When trim = 0.3, 3 values from each end will be dropped from the calculations to find mean.|||In this case the sorted vector is (−21, −5, 2, 3, 4.2, 7, 8, 12, 18, 54) and the values removed from the vector for calculating mean are (−21,−5,2) from left and (12,18,54) from right.|||When we execute the above code, it produces the following result −|||If there are missing values, then the mean function returns NA.|||To drop the missing values from the calculation use na.rm = TRUE. which means remove the NA values.|||When we execute the above code, it produces the following result −|||The middle most value in a data series is called the median. The median() function is used in R to calculate this value.|||The basic syntax for calculating median in R is −|||Following is the description of the parameters used −|||x is the input vector.|||na.rm is used to remove the missing values from the input vector.|||When we execute the above code, it produces the following result −|||The mode is the value that has highest number of occurrences in a set of data. Unike mean and median, mode can have both numeric and character data.|||R does not have a standard in-built function to calculate mode. So we create a user function to calculate mode of a data set in R. This function takes the vector as input and gives the mode value as output.|||When we execute the above code, it produces the following result −",x is the input vector.@@@trim is used to drop some observations from both end of the sorted vector.@@@na.rm is used to remove the missing values from the input vector.|||x is the input vector.@@@na.rm is used to remove the missing values from the input vector.,,,"# Create a vector. x <- c(12,7,3,4.2,18,2,54,-21,8,-5)# Find Mean.result.mean <- mean(x)print(result.mean)|||# Create a vector.x <- c(12,7,3,4.2,18,2,54,-21,8,-5)# Find Mean.result.mean <-  mean(x,trim = 0.3)print(result.mean)|||# Create a vector. x <- c(12,7,3,4.2,18,2,54,-21,8,-5,NA)# Find mean.result.mean <-  mean(x)print(result.mean)# Find mean dropping NA values.result.mean <-  mean(x,na.rm = TRUE)print(result.mean)|||# Create the vector.x <- c(12,7,3,4.2,18,2,54,-21,8,-5)# Find the median.median.result <- median(x)print(median.result)|||# Create the function.getmode <- function(v) {   uniqv <- unique(v)   uniqv[which.max(tabulate(match(v, uniqv)))]}# Create the vector with numbers.v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)# Calculate the mode using the user function.result <- getmode(v)print(result)# Create the vector with characters.charv <- c(""o"",""it"",""the"",""it"",""it"")# Calculate the mode using the user function.result <- getmode(charv)print(result)"
Learn R Programming,R - Linear Regression,R - Linear Regression|||Steps to Establish a Regression@@@lm() Function@@@predict() Function@@@Useful Video Courses|||Input Data@@@Syntax@@@Create Relationship Model & get the Coefficients@@@Get the Summary of the Relationship@@@Syntax@@@Predict the weight of new persons@@@Visualize the Regression Graphically|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Regression analysis is a very widely used statistical tool to establish a relationship model between two variables. One of these variable is called predictor variable whose value is gathered through experiments. The other variable is called response variable whose value is derived from the predictor variable.|||In Linear Regression these two variables are related through an equation, where exponent (power) of both these variables is 1. Mathematically a linear relationship represents a straight line when plotted as a graph. A non-linear relationship where the exponent of any variable is not equal to 1 creates a curve.|||The general mathematical equation for a linear regression is −|||Following is the description of the parameters used −|||y is the response variable.|||x is the predictor variable.|||a and b are constants which are called the coefficients.|||A simple example of regression is predicting weight of a person when his height is known. To do this we need to have the relationship between height and weight of a person.|||The steps to create the relationship is −|||Carry out the experiment of gathering a sample of observed values of height and corresponding weight.|||Create a relationship model using the lm() functions in R.|||Find the coefficients from the model created and create the mathematical equation using these|||Get a summary of the relationship model to know the average error in prediction. Also called residuals.|||To predict the weight of new persons, use the predict() function in R.|||Below is the sample data representing the observations −|||This function creates the relationship model between the predictor and the response variable.|||The basic syntax for lm() function in linear regression is −|||Following is the description of the parameters used −|||formula is a symbol presenting the relation between x and y.|||data is the vector on which the formula will be applied.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||The basic syntax for predict() in linear regression is −|||Following is the description of the parameters used −|||object is the formula which is already created using the lm() function.|||newdata is the vector containing the new value for predictor variable.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −","y is the response variable.@@@x is the predictor variable.@@@a and b are constants which are called the coefficients.|||Carry out the experiment of gathering a sample of observed values of height and corresponding weight.@@@Create a relationship model using the lm() functions in R.@@@Find the coefficients from the model created and create the mathematical equation using these@@@Get a summary of the relationship model to know the average error in prediction. Also called residuals.@@@To predict the weight of new persons, use the predict() function in R.|||formula is a symbol presenting the relation between x and y.@@@data is the vector on which the formula will be applied.|||object is the formula which is already created using the lm() function.@@@newdata is the vector containing the new value for predictor variable.",,,"x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)# Apply the lm() function.relation <- lm(y~x)print(relation)|||x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)# Apply the lm() function.relation <- lm(y~x)print(summary(relation))|||# The predictor vector.x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)# The resposne vector.y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)# Apply the lm() function.relation <- lm(y~x)# Find weight of a person with height 170.a <- data.frame(x = 170)result <-  predict(relation,a)print(result)|||# Create the predictor and response variable.x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)relation <- lm(y~x)# Give the chart file a name.png(file = ""linearregression.png"")# Plot the chart.plot(y,x,col = ""blue"",main = ""Height & Weight Regression"",abline(lm(x~y)),cex = 1.3,pch = 16,xlab = ""Weight in Kg"",ylab = ""Height in cm"")# Save the file.dev.off()"
Learn R Programming,R - Multiple Regression,R - Multiple Regression|||lm() Function@@@Example@@@Useful Video Courses|||Syntax@@@Input Data@@@Create Relationship Model & get the Coefficients@@@Create Equation for Regression Model@@@Apply Equation for predicting New Values|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Multiple regression is an extension of linear regression into relationship between more than two variables. In simple linear relation we have one predictor and one response variable, but in multiple regression we have more than one predictor variable and one response variable.|||The general mathematical equation for multiple regression is −|||Following is the description of the parameters used −|||y is the response variable.|||a, b1, b2...bn are the coefficients.|||x1, x2, ...xn are the predictor variables.|||We create the regression model using the lm() function in R. The model determines the value of the coefficients using the input data. Next we can predict the value of the response variable for a given set of predictor variables using these coefficients.|||This function creates the relationship model between the predictor and the response variable.|||The basic syntax for lm() function in multiple regression is −|||Following is the description of the parameters used −|||formula is a symbol presenting the relation between the response variable and predictor variables.|||data is the vector on which the formula will be applied.|||Consider the data set ""mtcars"" available in the R environment. It gives a comparison between different car models in terms of mileage per gallon (mpg), cylinder displacement(""disp""), horse power(""hp""), weight of the car(""wt"") and some more parameters.|||The goal of the model is to establish the relationship between ""mpg"" as a response variable with ""disp"",""hp"" and ""wt"" as predictor variables. We create a subset of these variables from the mtcars data set for this purpose.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||Based on the above intercept and coefficient values, we create the mathematical equation.|||We can use the regression equation created above to predict the mileage when a new set of values for displacement, horse power and weight is provided.|||For a car with disp = 221, hp = 102 and wt = 2.91 the predicted mileage is −","y is the response variable.@@@a, b1, b2...bn are the coefficients.@@@x1, x2, ...xn are the predictor variables.|||formula is a symbol presenting the relation between the response variable and predictor variables.@@@data is the vector on which the formula will be applied.",,,"input <- mtcars[,c(""mpg"",""disp"",""hp"",""wt"")]print(head(input))|||input <- mtcars[,c(""mpg"",""disp"",""hp"",""wt"")]# Create the relationship model.model <- lm(mpg~disp+hp+wt, data = input)# Show the model.print(model)# Get the Intercept and coefficients as vector elements.cat(""# # # # The Coefficient Values # # # "",""\n"")a <- coef(model)[1]print(a)Xdisp <- coef(model)[2]Xhp <- coef(model)[3]Xwt <- coef(model)[4]print(Xdisp)print(Xhp)print(Xwt)"
Learn R Programming,R - Logistic Regression,R - Logistic Regression|||Create Regression Model@@@Useful Video Courses|||Syntax@@@Example@@@Conclusion|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"The Logistic Regression is a regression model in which the response variable (dependent variable) has categorical values such as True/False or 0/1. It actually measures the probability of a binary response as the value of response variable based on the mathematical equation relating it with the predictor variables.|||The general mathematical equation for logistic regression is −|||Following is the description of the parameters used −|||y is the response variable.|||x is the predictor variable.|||a and b are the coefficients which are numeric constants.|||The function used to create the regression model is the glm() function.|||The basic syntax for glm() function in logistic regression is −|||Following is the description of the parameters used −|||formula is the symbol presenting the relationship between the variables.|||data is the data set giving the values of these variables.|||family is R object to specify the details of the model. It's value is binomial for logistic regression.|||The in-built data set ""mtcars"" describes different models of a car with their various engine specifications. In ""mtcars"" data set, the transmission mode (automatic or manual) is described by the column am which is a binary value (0 or 1). We can create a logistic regression model between the columns ""am"" and 3 other columns - hp, wt and cyl.|||When we execute the above code, it produces the following result −|||We use the glm() function to create the regression model and get its summary for analysis.|||When we execute the above code, it produces the following result −|||In the summary as the p-value in the last column is more than 0.05 for the variables ""cyl"" and ""hp"", we consider them to be insignificant in contributing to the value of the variable ""am"". Only weight (wt) impacts the ""am"" value in this regression model.",y is the response variable.@@@x is the predictor variable.@@@a and b are the coefficients which are numeric constants.|||formula is the symbol presenting the relationship between the variables.@@@data is the data set giving the values of these variables.@@@family is R object to specify the details of the model. It's value is binomial for logistic regression.,,,"# Select some columns form mtcars.input <- mtcars[,c(""am"",""cyl"",""hp"",""wt"")]print(head(input))|||input <- mtcars[,c(""am"",""cyl"",""hp"",""wt"")]am.data = glm(formula = am ~ cyl + hp + wt, data = input, family = binomial)print(summary(am.data))"
Learn R Programming,R - Normal Distribution,R - Normal Distribution|||dnorm()@@@pnorm()@@@qnorm()@@@rnorm()@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"In a random collection of data from independent sources, it is generally observed that the distribution of data is normal. Which means, on plotting a graph with the value of the variable in the horizontal axis and the count of the values in the vertical axis we get a bell shape curve. The center of the curve represents the mean of the data set. In the graph, fifty percent of values lie to the left of the mean and the other fifty percent lie to the right of the graph. This is referred as normal distribution in statistics.|||R has four in built functions to generate normal distribution. They are described below.|||Following is the description of the parameters used in above functions −|||x is a vector of numbers.|||p is a vector of probabilities.|||n is number of observations(sample size).|||mean is the mean value of the sample data. It's default value is zero.|||sd is the standard deviation. It's default value is 1.|||This function gives height of the probability distribution at each point for a given mean and standard deviation.|||When we execute the above code, it produces the following result −|||This function gives the probability of a normally distributed random number to be less that the value of a given number. It is also called ""Cumulative Distribution Function"".|||When we execute the above code, it produces the following result −|||This function takes the probability value and gives a number whose cumulative value matches the probability value.|||When we execute the above code, it produces the following result −|||This function is used to generate random numbers whose distribution is normal. It takes the sample size as input and generates that many random numbers. We draw a histogram to show the distribution of the generated numbers.|||When we execute the above code, it produces the following result −",x is a vector of numbers.@@@p is a vector of probabilities.@@@n is number of observations(sample size).@@@mean is the mean value of the sample data. It's default value is zero.@@@sd is the standard deviation. It's default value is 1.,,,"# Create a sequence of numbers between -10 and 10 incrementing by 0.1.x <- seq(-10, 10, by = .1)# Choose the mean as 2.5 and standard deviation as 0.5.y <- dnorm(x, mean = 2.5, sd = 0.5)# Give the chart file a name.png(file = ""dnorm.png"")plot(x,y)# Save the file.dev.off()|||# Create a sequence of numbers between -10 and 10 incrementing by 0.2.x <- seq(-10,10,by = .2) # Choose the mean as 2.5 and standard deviation as 2. y <- pnorm(x, mean = 2.5, sd = 2)# Give the chart file a name.png(file = ""pnorm.png"")# Plot the graph.plot(x,y)# Save the file.dev.off()|||# Create a sequence of probability values incrementing by 0.02.x <- seq(0, 1, by = 0.02)# Choose the mean as 2 and standard deviation as 3.y <- qnorm(x, mean = 2, sd = 1)# Give the chart file a name.png(file = ""qnorm.png"")# Plot the graph.plot(x,y)# Save the file.dev.off()|||# Create a sample of 50 numbers which are normally distributed.y <- rnorm(50)# Give the chart file a name.png(file = ""rnorm.png"")# Plot the histogram for this sample.hist(y, main = ""Normal DIstribution"")# Save the file.dev.off()"
Learn R Programming,R - Binomial Distribution,R - Binomial Distribution|||dbinom()@@@pbinom()@@@qbinom()@@@rbinom()@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"The binomial distribution model deals with finding the probability of success of an event which has only two possible outcomes in a series of experiments. For example, tossing of a coin always gives a head or a tail. The probability of finding exactly 3 heads in tossing a coin repeatedly for 10 times is estimated during the binomial distribution.|||R has four in-built functions to generate binomial distribution. They are described below.|||Following is the description of the parameters used −|||x is a vector of numbers.|||p is a vector of probabilities.|||n is number of observations.|||size is the number of trials.|||prob is the probability of success of each trial.|||This function gives the probability density distribution at each point.|||When we execute the above code, it produces the following result −|||This function gives the cumulative probability of an event. It is a single value representing the probability.|||When we execute the above code, it produces the following result −|||This function takes the probability value and gives a number whose cumulative value matches the probability value.|||When we execute the above code, it produces the following result −|||This function generates required number of random values of given probability from a given sample.|||When we execute the above code, it produces the following result −",x is a vector of numbers.@@@p is a vector of probabilities.@@@n is number of observations.@@@size is the number of trials.@@@prob is the probability of success of each trial.,,,"# Create a sample of 50 numbers which are incremented by 1.x <- seq(0,50,by = 1)# Create the binomial distribution.y <- dbinom(x,50,0.5)# Give the chart file a name.png(file = ""dbinom.png"")# Plot the graph for this sample.plot(x,y)# Save the file.dev.off()|||# Probability of getting 26 or less heads from a 51 tosses of a coin.x <- pbinom(26,51,0.5)print(x)|||# How many heads will have a probability of 0.25 will come out when a coin# is tossed 51 times.x <- qbinom(0.25,51,1/2)print(x)|||# Find 8 random values from a sample of 150 with probability of 0.4.x <- rbinom(8,150,.4)print(x)"
Learn R Programming,R - Poisson Regression,R - Poisson Regression|||Create Regression Model@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Poisson Regression involves regression models in which the response variable is in the form of counts and not fractional numbers. For example, the count of number of births or number of wins in a football match series. Also the values of the response variables follow a Poisson distribution.|||The general mathematical equation for Poisson regression is −|||Following is the description of the parameters used −|||y is the response variable.|||a and b are the numeric coefficients.|||x is the predictor variable.|||The function used to create the Poisson regression model is the glm() function.|||The basic syntax for glm() function in Poisson regression is −|||Following is the description of the parameters used in above functions −|||formula is the symbol presenting the relationship between the variables.|||data is the data set giving the values of these variables.|||family is R object to specify the details of the model. It's value is 'Poisson' for Logistic Regression.|||We have the in-built data set ""warpbreaks"" which describes the effect of wool type (A or B) and tension (low, medium or high) on the number of warp breaks per loom. Let's consider ""breaks"" as the response variable which is a count of number of breaks. The wool ""type"" and ""tension"" are taken as predictor variables.|||Input Data|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||In the summary we look for the p-value in the last column to be less than 0.05 to consider an impact of the predictor variable on the response variable. As seen the wooltype B having tension type M and H have impact on the count of breaks.",y is the response variable.@@@a and b are the numeric coefficients.@@@x is the predictor variable.|||formula is the symbol presenting the relationship between the variables.@@@data is the data set giving the values of these variables.@@@family is R object to specify the details of the model. It's value is 'Poisson' for Logistic Regression.,,,"input <- warpbreaksprint(head(input))|||output <-glm(formula = breaks ~ wool+tension, data = warpbreaks,   family = poisson)print(summary(output))"
Learn R Programming,R - Analysis of Covariance,R - Analysis of Covariance|||Example@@@Input Data@@@ANCOVA Analysis@@@Comparing Two Models@@@Useful Video Courses|||Model with interaction between categorical variable and predictor variable@@@Model without interaction between categorical variable and predictor variable|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"We use Regression analysis to create models which describe the effect of variation in predictor variables on the response variable. Sometimes, if we have a categorical variable with values like Yes/No or Male/Female etc. The simple regression analysis gives multiple results for each value of the categorical variable. In such scenario, we can study the effect of the categorical variable by using it along with the predictor variable and comparing the regression lines for each level of the categorical variable. Such an analysis is termed as Analysis of Covariance also called as ANCOVA.|||Consider the R built in data set mtcars. In it we observer that the field ""am"" represents the type of transmission (auto or manual). It is a categorical variable with values 0 and 1. The miles per gallon value(mpg) of a car can also depend on it besides the value of horse power(""hp"").|||We study the effect of the value of ""am"" on the regression between ""mpg"" and ""hp"". It is done by using the aov() function followed by the anova() function to compare the multiple regressions.|||Create a data frame containing the fields ""mpg"", ""hp"" and ""am"" from the data set mtcars. Here we take ""mpg"" as the response variable, ""hp"" as the predictor variable and ""am"" as the categorical variable.|||When we execute the above code, it produces the following result −|||We create a regression model taking ""hp"" as the predictor variable and ""mpg"" as the response variable taking into account the interaction between ""am"" and ""hp"".|||When we execute the above code, it produces the following result −|||This result shows that both horse power and transmission type has significant effect on miles per gallon as the p value in both cases is less than 0.05. But the interaction between these two variables is not significant as the p-value is more than 0.05.|||When we execute the above code, it produces the following result −|||This result shows that both horse power and transmission type has significant effect on miles per gallon as the p value in both cases is less than 0.05.|||Now we can compare the two models to conclude if the interaction of the variables is truly in-significant. For this we use the anova() function.|||When we execute the above code, it produces the following result −|||As the p-value is greater than 0.05 we conclude that the interaction between horse power and transmission type is not significant. So the mileage per gallon will depend in a similar manner on the horse power of the car in both auto and manual transmission mode.",,,,"input <- mtcars[,c(""am"",""mpg"",""hp"")]print(head(input))|||# Get the dataset.input <- mtcars# Create the regression model.result <- aov(mpg~hp*am,data = input)print(summary(result))|||# Get the dataset.input <- mtcars# Create the regression model.result <- aov(mpg~hp+am,data = input)print(summary(result))|||# Get the dataset.input <- mtcars# Create the regression models.result1 <- aov(mpg~hp*am,data = input)result2 <- aov(mpg~hp+am,data = input)# Compare the two models.print(anova(result1,result2))"
Learn R Programming,R - Time Series Analysis,R - Time Series Analysis|||Different Time Intervals@@@Multiple Time Series@@@Useful Video Courses|||Syntax@@@Example|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Time series is a series of data points in which each data point is associated with a timestamp. A simple example is the price of a stock in the stock market at different points of time on a given day. Another example is the amount of rainfall in a region at different months of the year. R language uses many functions to create, manipulate and plot the time series data. The data for the time series is stored in an R object called time-series object. It is also a R data object like a vector or data frame.|||The time series object is created by using the ts() function.|||The basic syntax for ts() function in time series analysis is −|||Following is the description of the parameters used −|||data is a vector or matrix containing the values used in the time series.|||start specifies the start time for the first observation in time series.|||end specifies the end time for the last observation in time series.|||frequency specifies the number of observations per unit time.|||Except the parameter ""data"" all other parameters are optional.|||Consider the annual rainfall details at a place starting from January 2012. We create an R time series object for a period of 12 months and plot it.|||When we execute the above code, it produces the following result and chart −|||The Time series chart −|||The value of the frequency parameter in the ts() function decides the time intervals at which the data points are measured. A value of 12 indicates that the time series is for 12 months. Other values and its meaning is as below −|||frequency = 12 pegs the data points for every month of a year.|||frequency = 4 pegs the data points for every quarter of a year.|||frequency = 6 pegs the data points for every 10 minutes of an hour.|||frequency = 24*6 pegs the data points for every 10 minutes of a day.|||We can plot multiple time series in one chart by combining both the series into a matrix.|||When we execute the above code, it produces the following result and chart −|||The Multiple Time series chart −",data is a vector or matrix containing the values used in the time series.@@@start specifies the start time for the first observation in time series.@@@end specifies the end time for the last observation in time series.@@@frequency specifies the number of observations per unit time.|||frequency = 12 pegs the data points for every month of a year.@@@frequency = 4 pegs the data points for every quarter of a year.@@@frequency = 6 pegs the data points for every 10 minutes of an hour.@@@frequency = 24*6 pegs the data points for every 10 minutes of a day.,,,"# Get the data points in form of a R vector.rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)# Convert it to a time series object.rainfall.timeseries <- ts(rainfall,start = c(2012,1),frequency = 12)# Print the timeseries data.print(rainfall.timeseries)# Give the chart file a name.png(file = ""rainfall.png"")# Plot a graph of the time series.plot(rainfall.timeseries)# Save the file.dev.off()|||# Get the data points in form of a R vector.rainfall1 <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)rainfall2 <-            c(655,1306.9,1323.4,1172.2,562.2,824,822.4,1265.5,799.6,1105.6,1106.7,1337.8)# Convert them to a matrix.combined.rainfall <-  matrix(c(rainfall1,rainfall2),nrow = 12)# Convert it to a time series object.rainfall.timeseries <- ts(combined.rainfall,start = c(2012,1),frequency = 12)# Print the timeseries data.print(rainfall.timeseries)# Give the chart file a name.png(file = ""rainfall_combined.png"")# Plot a graph of the time series.plot(rainfall.timeseries, main = ""Multiple Time Series"")# Save the file.dev.off()"
Learn R Programming,R - Nonlinear Least Square,R - Nonlinear Least Square|||Syntax@@@Example@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"When modeling real world data for regression analysis, we observe that it is rarely the case that the equation of the model is a linear equation giving a linear graph. Most of the time, the equation of the model of real world data involves mathematical functions of higher degree like an exponent of 3 or a sin function. In such a scenario, the plot of the model gives a curve rather than a line. The goal of both linear and non-linear regression is to adjust the values of the model's parameters to find the line or curve that comes closest to your data. On finding these values we will be able to estimate the response variable with good accuracy.|||In Least Square regression, we establish a regression model in which the sum of the squares of the vertical distances of different points from the regression curve is minimized. We generally start with a defined model and assume some values for the coefficients. We then apply the nls() function of R to get the more accurate values along with the confidence intervals.|||The basic syntax for creating a nonlinear least square test in R is −|||Following is the description of the parameters used −|||formula is a nonlinear model formula including variables and parameters.|||data is a data frame used to evaluate the variables in the formula.|||start is a named list or named numeric vector of starting estimates.|||We will consider a nonlinear model with assumption of initial values of its coefficients. Next we will see what is the confidence intervals of these assumed values so that we can judge how well these values fir into the model.|||So let's consider the below equation for this purpose −|||Let's assume the initial coefficients to be 1 and 3 and fit these values into nls() function.|||When we execute the above code, it produces the following result −|||We can conclude that the value of b1 is more close to 1 while the value of b2 is more close to 2 and not 3.",formula is a nonlinear model formula including variables and parameters.@@@data is a data frame used to evaluate the variables in the formula.@@@start is a named list or named numeric vector of starting estimates.,,,"xvalues <- c(1.6,2.1,2,2.23,3.71,3.25,3.4,3.86,1.19,2.21)yvalues <- c(5.19,7.43,6.94,8.11,18.75,14.88,16.06,19.12,3.21,7.58)# Give the chart file a name.png(file = ""nls.png"")# Plot these values.plot(xvalues,yvalues)# Take the assumed values and fit into the model.model <- nls(yvalues ~ b1*xvalues^2+b2,start = list(b1 = 1,b2 = 3))# Plot the chart with new data by fitting it to a prediction from 100 data points.new.data <- data.frame(xvalues = seq(min(xvalues),max(xvalues),len = 100))lines(new.data$xvalues,predict(model,newdata = new.data))# Save the file.dev.off()# Get the sum of the squared residuals.print(sum(resid(model)^2))# Get the confidence intervals on the chosen values of the coefficients.print(confint(model))"
Learn R Programming,R - Decision Tree,R - Decision Tree|||Install R Package@@@Useful Video Courses|||Syntax@@@Input Data@@@Example@@@Conclusion|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Decision tree is a graph to represent choices and their results in form of a tree. The nodes in the graph represent an event or choice and the edges of the graph represent the decision rules or conditions. It is mostly used in Machine Learning and Data Mining applications using R.|||Examples of use of decision tress is − predicting an email as spam or not spam, predicting of a tumor is cancerous or predicting a loan as a good or bad credit risk based on the factors in each of these. Generally, a model is created with observed data also called training data. Then a set of validation data is used to verify and improve the model. R has packages which are used to create and visualize decision trees. For new set of predictor variable, we use this model to arrive at a decision on the category (yes/No, spam/not spam) of the data.|||The R package ""party"" is used to create decision trees.|||Use the below command in R console to install the package. You also have to install the dependent packages if any.|||The package ""party"" has the function ctree() which is used to create and analyze decison tree.|||The basic syntax for creating a decision tree in R is −|||Following is the description of the parameters used −|||formula is a formula describing the predictor and response variables.|||data is the name of the data set used.|||We will use the R in-built data set named readingSkills to create a decision tree. It describes the score of someone's readingSkills if we know the variables ""age"",""shoesize"",""score"" and whether the person is a native speaker or not.|||Here is the sample data.|||When we execute the above code, it produces the following result and chart −|||We will use the ctree() function to create the decision tree and see its graph.|||When we execute the above code, it produces the following result −|||From the decision tree shown above we can conclude that anyone whose readingSkills score is less than 38.3 and age is more than 6 is not a native Speaker.",formula is a formula describing the predictor and response variables.@@@data is the name of the data set used.,,,"# Load the party package. It will automatically load other# dependent packages.library(party)# Print some records from data set readingSkills.print(head(readingSkills))|||# Load the party package. It will automatically load other# dependent packages.library(party)# Create the input data frame.input.dat <- readingSkills[c(1:105),]# Give the chart file a name.png(file = ""decision_tree.png"")# Create the tree.  output.tree <- ctree(  nativeSpeaker ~ age + shoeSize + score,   data = input.dat)# Plot the tree.plot(output.tree)# Save the file.dev.off()"
Learn R Programming,R - Random Forest,R - Random Forest|||Install R Package@@@Useful Video Courses|||Syntax@@@Input Data@@@Example@@@Conclusion|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"In the random forest approach, a large number of decision trees are created. Every observation is fed into every decision tree. The most common outcome for each observation is used as the final output. A new observation is fed into all the trees and taking a majority vote for each classification model.|||An error estimate is made for the cases which were not used while building the tree. That is called an OOB (Out-of-bag) error estimate which is mentioned as a percentage.|||The R package ""randomForest"" is used to create random forests.|||Use the below command in R console to install the package. You also have to install the dependent packages if any.|||The package ""randomForest"" has the function randomForest() which is used to create and analyze random forests.|||The basic syntax for creating a random forest in R is −|||Following is the description of the parameters used −|||formula is a formula describing the predictor and response variables.|||data is the name of the data set used.|||We will use the R in-built data set named readingSkills to create a decision tree. It describes the score of someone's readingSkills if we know the variables ""age"",""shoesize"",""score"" and whether the person is a native speaker.|||Here is the sample data.|||When we execute the above code, it produces the following result and chart −|||We will use the randomForest() function to create the decision tree and see it's graph.|||When we execute the above code, it produces the following result −|||From the random forest shown above we can conclude that the shoesize and score are the important factors deciding if someone is a native speaker or not. Also the model has only 1% error which means we can predict with 99% accuracy.",formula is a formula describing the predictor and response variables.@@@data is the name of the data set used.,,,"# Load the party package. It will automatically load other# required packages.library(party)# Print some records from data set readingSkills.print(head(readingSkills))|||# Load the party package. It will automatically load other# required packages.library(party)library(randomForest)# Create the forest.output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score,            data = readingSkills)# View the forest results.print(output.forest) # Importance of each predictor.print(importance(fit,type = 2)) "
Learn R Programming,R - Survival Analysis,R - Survival Analysis|||Install Package@@@Useful Video Courses|||Syntax@@@Example@@@Applying Surv() and survfit() Function|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Survival analysis deals with predicting the time when a specific event is going to occur. It is also known as failure time analysis or analysis of time to death. For example predicting the number of days a person with cancer will survive or predicting the time when a mechanical system is going to fail.|||The R package named survival is used to carry out survival analysis. This package contains the function Surv() which takes the input data as a R formula and creates a survival object among the chosen variables for analysis. Then we use the function survfit() to create a plot for the analysis.|||The basic syntax for creating survival analysis in R is −|||Following is the description of the parameters used −|||time is the follow up time until the event occurs.|||event indicates the status of occurrence of the expected event.|||formula is the relationship between the predictor variables.|||We will consider the data set named ""pbc"" present in the survival packages installed above. It describes the survival data points about people affected with primary biliary cirrhosis (PBC) of the liver. Among the many columns present in the data set we are primarily concerned with the fields ""time"" and ""status"". Time represents the number of days between registration of the patient and earlier of the event between the patient receiving a liver transplant or death of the patient.|||When we execute the above code, it produces the following result and chart −|||From the above data we are considering time and status for our analysis.|||Now we proceed to apply the Surv() function to the above data set and create a plot that will show the trend.|||When we execute the above code, it produces the following result and chart −|||The trend in the above graph helps us predicting the probability of survival at the end of a certain number of days.",time is the follow up time until the event occurs.@@@event indicates the status of occurrence of the expected event.@@@formula is the relationship between the predictor variables.,,,"# Load the library.library(""survival"")# Print first few rows.print(head(pbc))|||# Load the library.library(""survival"")# Create the survival object. survfit(Surv(pbc$time,pbc$status == 2)~1)# Give the chart file a name.png(file = ""survival.png"")# Plot the graph. plot(survfit(Surv(pbc$time,pbc$status == 2)~1))# Save the file.dev.off()"
Learn R Programming,R - Chi Square Test,R - Chi Square Test|||Syntax@@@Example@@@Conclusion@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Chi-Square test is a statistical method to determine if two categorical variables have a significant correlation between them. Both those variables should be from same population and they should be categorical like − Yes/No, Male/Female, Red/Green etc.|||For example, we can build a data set with observations on people's ice-cream buying pattern and try to correlate the gender of a person with the flavor of the ice-cream they prefer. If a correlation is found we can plan for appropriate stock of flavors by knowing the number of gender of people visiting.|||The function used for performing chi-Square test is chisq.test().|||The basic syntax for creating a chi-square test in R is −|||Following is the description of the parameters used −|||data is the data in form of a table containing the count value of the variables in the observation.|||We will take the Cars93 data in the ""MASS"" library which represents the sales of different models of car in the year 1993.|||When we execute the above code, it produces the following result −|||The above result shows the dataset has many Factor variables which can be considered as categorical variables. For our model we will consider the variables ""AirBags"" and ""Type"". Here we aim to find out any significant correlation between the types of car sold and the type of Air bags it has. If correlation is observed we can estimate which types of cars can sell better with what types of air bags.|||When we execute the above code, it produces the following result −|||The result shows the p-value of less than 0.05 which indicates a string correlation.",data is the data in form of a table containing the count value of the variables in the observation.,,,"library(""MASS"")print(str(Cars93))|||# Load the library.library(""MASS"")# Create a data frame from the main data set.car.data <- data.frame(Cars93$AirBags, Cars93$Type)# Create a table with the needed variables.car.data = table(Cars93$AirBags, Cars93$Type) print(car.data)# Perform the Chi-Square test.print(chisq.test(car.data))"
Learn R Programming,R - Interview Questions,R - Interview Questions|||What is Next?@@@Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"Dear readers, these R Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of R programming. As per my experience good interviewers hardly plan to ask any particular question during your interview, normally questions start with some basic concept of the subject and later they continue based on further discussion and what you answer −|||R is a programming language meant for statistical analysis and creating graphs for this purpose.Instead of data types, it has data objects which are used for calculations. It is used in the fields of data mining, Regression analysis, Probability estimation etc., using many packages available in it.|||There are 6 data objects in R. They are vectors, lists, arrays, matrices, data frames and tables.|||A valid variable name consists of letters, numbers and the dot or underline characters. The variable name starts with a letter or the dot not followed by a number.
|||A matrix is always two dimensional as it has only rows and columns. But an array can be of any number of dimensions and each dimension is a matrix. For example a 3x3x2 array represents 2 matrices each of dimension 3x3.|||The Factor data objects in R are used to store and process categorical data in R.|||A csv file can be loaded using the read.csv function. R creates a data frame on reading the csv files using this function.|||The command getwd() gives the current working directory in the R environment.|||This is the package which is loaded by default when R environment is set. It provides the basic functionalities like input/output, arithmetic calculations etc. in the R environment.|||Logistic regression deals with measuring the probability of a binary response variable. In R the function glm() is used to create the logistic regression.|||The expression M[4,2] gives the element at 4th row and 2nd column.|||When two vectors of different length are involved in a operation then the elements of the shorter vector are reused to complete the operation. This is called element recycling. Example - v1 <- c(4,1,0,6) and V2 <- c(2,4) then v1*v2 gives (8,4,0,24). The elements 2 and 4 are repeated.|||We can call a function in R in 3 ways. First method is to call by using position of the arguments. Second method id to call by using the name of the arguments and the third method is to call by default arguments.|||The lazy evaluation of a function means, the argument is evaluated only if it is used inside the body of the function. If there is no reference to the argument in the body of the function then it is simply ignored.|||To install a package in R we use the below command.|||The package named ""XML"" is used to read and process the XML files.|||We can update any of the element but we can delete only the element at the end of the list.|||The general expression to create a matrix in R is - matrix(data, nrow, ncol, byrow, dimnames)|||The boxplot() function is used to create boxplots in R. It takes a formula and a data frame as inputs to create the boxplots.||| Frequency  6 indicates the time interval for the time series data is every 10 minutes of an hour.|||In R the data objects can be converted from one form to another. For example we can create a data frame by merging many lists. This involves a series of R commands to bring the data into the new format. This is called data reshaping.|||It generates 4 random numbers between 0 and 1.|||Use the command|||It splits the strings in vector x into substrings at the position of letter e.|||Error in v * x[1] : non-numeric argument to binary operator|||[1]  5 12 21 32s|||It converts a list to a vector.|||NA|||Using the function as.data.frame()|||It is used to apply the same function to each of the elements in an Array. For example finding the mean of the rows in every row.|||Every matrix can be called an array but not the reverse. Matrix is always two dimensional but array can be of any dimension.||| ?NA|||sd(x, na.rm=TRUE)|||setwd(""Path"")|||""%%"" gives remainder of the division of first vector with second while ""%/%"" gives the quotient of the division of first vector with second.|||Find the column has the maximum value for each row.|||hist()|||rm(x)|||data(package = ""MASS"")|||It is used to install a r package from local directory by browsing and selecting the file.|||Where formula represents the series of variables used in pairs and data represents the data set from which the variables will be taken.|||The subset() functions is used to select variables and observations. The sample() function is used to choose a random sample of size n from a dataset.|||is.matrix(m)  should retrun TRUE.|||[1] NA|||The function t() is used for transposing a matrix. Example - t(m) , where m is a matrix.|||The ""next"" statement in R programming language is useful when we want to skip the current iteration of a loop without terminating it.|||Further, you can go through your past assignments you have done with the subject and make sure you are able to speak confidently on them. If you are fresher then interviewer does not expect you will answer very complex questions, rather you have to make your basics concepts very strong.|||Second it really doesn't matter much if you could not answer few questions but it matters that whatever you answered, you must have answered with confidence. So just feel confident during your interview. We at tutorialspoint wish you best luck to have a good interviewer and all the very best for your future endeavor. Cheers :-)",,,,"install.packages(""package Name"")|||installed.packages()|||x <- ""The quick brown fox jumps over the lazy dog""split.string <- strsplit(x, "" "")extract.words <- split.string[[1]]result <- unique(tolower(extract.words))print(result)|||x <- pbinom(26,51,0.5)print(x)|||function(x) { x[is.na(x)] <- sum(x, na.rm = TRUE); x }|||data(package = .packages(all.available = TRUE))|||15 %in% x|||pairs(formula, data)"
Learn R Programming,R - Quick Guide,"R - Quick Guide@@@R - Overview@@@R - Environment Setup@@@R - Basic Syntax@@@R - Data Types@@@R - Variables@@@R - Operators@@@R - Decision making@@@R - Loops@@@R - Functions@@@R - Strings@@@R - Vectors@@@R - Lists@@@ R - Matrices@@@R - Arrays@@@R - Factors@@@R - Data Frames@@@R - Packages@@@R - Data Reshaping@@@R - CSV Files@@@R - Excel File@@@R - Binary Files@@@R - XML Files@@@R - JSON Files@@@R - Web Data@@@R - Databases@@@R - Pie Charts@@@R - Bar Charts@@@R - Boxplots@@@R - Histograms@@@R - Line Graphs@@@R - Scatterplots@@@R - Mean, Median and Mode@@@R - Linear Regression@@@R - Multiple Regression@@@R - Logistic Regression@@@R - Normal Distribution@@@R - Binomial Distribution@@@R - Poisson Regression@@@R - Analysis of Covariance@@@R - Time Series Analysis@@@R - Nonlinear Least Square@@@R - Decision Tree@@@R - Random Forest@@@R - Survival Analysis@@@R - Chi Square Test|||Evolution of R@@@Features of R@@@Local Environment Setup@@@R Command Prompt@@@R Script File@@@Comments@@@Vectors@@@Lists@@@Matrices@@@Arrays@@@Factors@@@Data Frames@@@Variable Assignment@@@Data Type of a Variable@@@Finding Variables@@@Deleting Variables@@@Types of Operators@@@Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Assignment Operators@@@Miscellaneous Operators@@@Loop Control Statements@@@Function Definition@@@Function Components @@@Built-in Function@@@User-defined Function@@@Calling a Function@@@Lazy Evaluation of Function@@@Rules Applied in String Construction@@@String Manipulation@@@Vector Creation@@@Accessing Vector Elements@@@Vector Manipulation@@@Creating a List@@@Naming List Elements@@@Accessing List Elements@@@Manipulating List Elements@@@Merging Lists@@@Converting List to Vector@@@Accessing Elements of a Matrix@@@Matrix Computations@@@Example@@@Naming Columns and Rows@@@Accessing Array Elements@@@Manipulating Array Elements@@@Calculations Across Array Elements@@@Example@@@Factors in Data Frame@@@Changing the Order of Levels@@@Generating Factor Levels@@@Create Data Frame @@@Get the Structure of the Data Frame@@@Summary of Data in Data Frame@@@Extract Data from Data Frame@@@Expand Data Frame@@@Check Available R Packages@@@Get the list of all the packages installed@@@Install a New Package@@@Install directly from CRAN@@@Install package manually@@@Load Package to Library@@@Joining Columns and Rows in a Data Frame@@@Merging Data Frames@@@Melting and Casting@@@Melt the Data@@@Cast the Molten Data@@@Getting and Setting the Working Directory@@@Input as CSV File@@@Reading a CSV File@@@Analyzing the CSV File@@@Writing into a CSV File@@@Install xlsx Package@@@Verify and Load the ""xlsx"" Package@@@Input as xlsx File@@@Reading the Excel File@@@Writing the Binary File@@@Reading the Binary File@@@Input Data@@@Reading XML File@@@Details of the First Node@@@XML to Data Frame@@@Install rjson Package@@@Input Data@@@Read the JSON File@@@Convert JSON to a Data Frame@@@Install R Packages@@@Input Data@@@Example@@@Verify the File Download@@@RMySQL Package@@@Connecting R to MySql@@@Querying the Tables@@@Query with Filter Clause@@@Updating Rows in the Tables@@@Inserting Data into the Tables@@@Creating Tables in MySql@@@Dropping Tables in MySql@@@Pie Chart Title and Colors@@@Slice Percentages and Chart Legend@@@3D Pie Chart@@@Bar Chart Labels, Title and Colors@@@Group Bar Chart and Stacked Bar Chart@@@Creating the Boxplot@@@Boxplot with Notch@@@Range of X and Y values@@@Line Chart Title, Color and Labels@@@Multiple Lines in a Line Chart@@@Creating the Scatterplot@@@Scatterplot Matrices@@@Mean@@@Applying Trim Option@@@Applying NA Option@@@Median@@@Mode@@@Steps to Establish a Regression@@@lm() Function@@@predict() Function@@@lm() Function@@@Example@@@Create Regression Model@@@dnorm()@@@pnorm()@@@qnorm()@@@rnorm()@@@dbinom()@@@pbinom()@@@qbinom()@@@rbinom()@@@Create Regression Model@@@Example@@@Input Data@@@ANCOVA Analysis@@@Comparing Two Models@@@Different Time Intervals@@@Multiple Time Series@@@Syntax@@@Example@@@Install R Package@@@Install R Package@@@Install Package@@@Syntax@@@Example@@@Conclusion@@@Useful Video Courses|||Windows Installation@@@Linux Installation@@@Calling a Function without an Argument@@@Calling a Function with Argument Values (by position and by name)@@@Calling a Function with Default Argument@@@Examples of Valid Strings@@@Examples of Invalid Strings@@@Concatenating Strings - paste() function@@@Syntax@@@Example@@@Formatting numbers & strings - format() function@@@Syntax@@@Example@@@Counting number of characters in a string - nchar() function@@@Syntax@@@Example@@@Changing the case - toupper() & tolower() functions@@@Syntax@@@Example@@@Extracting parts of a string - substring() function@@@Syntax@@@Example@@@Single Element Vector@@@Multiple Elements Vector@@@Vector arithmetic@@@Vector Element Recycling@@@Vector Element Sorting@@@Syntax@@@Example@@@Matrix Addition & Subtraction@@@Matrix Multiplication & Division@@@Syntax@@@Example@@@Syntax@@@Example@@@Add Column@@@Add Row@@@Get the maximum salary@@@Get the details of the person with max salary@@@Get all the people working in IT department@@@Get the persons in IT department whose salary is greater than 600@@@Get the people who joined on or after 2014@@@Syntax@@@Example@@@Get Number of Nodes Present in XML File@@@Get Different Elements of a Node@@@Syntax@@@Example@@@Example@@@Syntax@@@Example@@@Example@@@Syntax@@@Example@@@Syntax@@@Example@@@Syntax@@@Example@@@Example@@@Syntax@@@Example@@@Syntax@@@Example@@@Syntax@@@Example@@@Syntax@@@Example@@@Example@@@Input Data@@@Syntax@@@Create Relationship Model & get the Coefficients@@@Get the Summary of the Relationship@@@Syntax@@@Predict the weight of new persons@@@Visualize the Regression Graphically@@@Syntax@@@Input Data@@@Create Relationship Model & get the Coefficients@@@Create Equation for Regression Model@@@Apply Equation for predicting New Values@@@Syntax@@@Example@@@Conclusion@@@Syntax@@@Example@@@Model with interaction between categorical variable and predictor variable@@@Model without interaction between categorical variable and predictor variable@@@Syntax@@@Example@@@Syntax@@@Input Data@@@Example@@@Conclusion@@@Syntax@@@Input Data@@@Example@@@Conclusion@@@Syntax@@@Example@@@Applying Surv() and survfit() Function|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training","R is a programming language and software environment for statistical analysis, graphics representation and reporting. R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is currently developed by the R Development Core Team.|||The core of R is an interpreted computer language which allows branching and looping as well as modular programming using functions. R allows integration with the procedures written in the C, C++, .Net, Python or FORTRAN languages for efficiency.|||R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems like Linux, Windows and Mac.|||R is free software distributed under a GNU-style copy left, and an official part of the GNU project called GNU S.|||R was initially written by Ross Ihaka and Robert Gentleman at the Department of Statistics of the University of Auckland in Auckland, New Zealand. R made its first appearance in 1993.|||A large group of individuals has contributed to R by sending code and bug reports.|||Since mid-1997 there has been a core group (the ""R Core Team"") who can modify the R source code archive.|||As stated earlier, R is a programming language and software environment for statistical analysis, graphics representation and reporting. The following are the important features of R −|||R is a well-developed, simple and effective programming language which includes conditionals, loops, user defined recursive functions and input and output facilities.|||R has an effective data handling and storage facility,|||R provides a suite of operators for calculations on arrays, lists, vectors and matrices.|||R provides a large, coherent and integrated collection of tools for data analysis.|||R provides graphical facilities for data analysis and display either directly at the computer or printing at the papers.|||As a conclusion, R is world’s most widely used statistics programming language. It's the # 1 choice of data scientists and supported by a vibrant and talented community of contributors. R is taught in universities and deployed in mission critical business applications. This tutorial will teach you R programming along with suitable examples in simple and easy steps.|||If you are still willing to set up your environment for R, you can follow the steps given below.|||You can download the Windows installer version of R from R-3.2.2 for Windows (32/64 bit) and save it in a local directory.|||As it is a Windows installer (.exe) with a name ""R-version-win.exe"". You can just double click and run the installer accepting the default settings. If your Windows is 32-bit version, it installs the 32-bit version. But if your windows is 64-bit, then it installs both the 32-bit and 64-bit versions.|||After installation you can locate the icon to run the Program in a directory structure ""R\R3.2.2\bin\i386\Rgui.exe"" under the Windows Program Files. Clicking this icon brings up the R-GUI which is the R console to do R Programming.|||R is available as a binary for many versions of Linux at the location R Binaries.|||The instruction to install Linux varies from flavor to flavor. These steps are mentioned under each type of Linux version in the mentioned link. However, if you are in a hurry, then you can use yum command to install R as follows −|||Above command will install core functionality of R programming along with standard packages, still you need additional package, then you can launch R prompt as follows −|||Now you can use install command at R prompt to install the required package. For example, the following command will install plotrix package which is required for 3D charts.|||As a convention, we will start learning R programming by writing a ""Hello, World!"" program. Depending on the needs, you can program either at R command prompt or you can use an R script file to write your program. Let's check both one by one.|||Once you have R environment setup, then it’s easy to start your R command prompt by just typing the following command at your command prompt −|||This will launch R interpreter and you will get a prompt > where you can start typing your program as follows −|||Here first statement defines a string variable myString, where we assign a string ""Hello, World!"" and then next statement print() is being used to print the value stored in variable myString.|||Usually, you will do your programming by writing your programs in script files and then you execute those scripts at your command prompt with the help of R interpreter called Rscript. So let's start with writing following code in a text file called test.R as under −|||Save the above code in a file test.R and execute it at Linux command prompt as given below. Even if you are using Windows or other system, syntax will remain same.|||When we run the above program, it produces the following result.|||Comments are like helping text in your R program and they are ignored by the interpreter while executing your actual program. Single comment is written using # in the beginning of the statement as follows −|||R does not support multi-line comments but you can perform a trick which is something as follows −|||Though above comments will be executed by R interpreter, they will not interfere with your actual program. You should put such comments inside, either single or double quote.|||Generally, while doing programming in any programming language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that, when you create a variable you reserve some space in memory.|||You may like to store information of various data types like character, wide character, integer, floating point, double floating point, Boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.|||In contrast to other programming languages like C and java in R, the variables are not declared as some data type. The variables are assigned with R-Objects and the data type of the R-object becomes the data type of the variable. There are many types of R-objects. The frequently used ones are −|||The simplest of these objects is the vector object and there are six data types of these atomic vectors, also termed as six classes of vectors. The other R-Objects are built upon the atomic vectors.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||In R programming, the very basic data types are the R-objects called vectors which hold elements of different classes as shown above. Please note in R the number of classes is not confined to only the above six types. For example, we can use many atomic vectors and create an array whose class will become array.|||When you want to create vector with more than one element, you should use c() function which means to combine the elements into a vector.|||When we execute the above code, it produces the following result −|||A list is an R-object which can contain many different types of elements inside it like vectors, functions and even another list inside it.|||When we execute the above code, it produces the following result −|||A matrix is a two-dimensional rectangular data set. It can be created using a vector input to the matrix function.|||When we execute the above code, it produces the following result −|||While matrices are confined to two dimensions, arrays can be of any number of dimensions. The array function takes a dim attribute which creates the required number of dimension. In the below example we create an array with two elements which are 3x3 matrices each.|||When we execute the above code, it produces the following result −|||Factors are the r-objects which are created using a vector. It stores the vector along with the distinct values of the elements in the vector as labels. The labels are always character irrespective of whether it is numeric or character or Boolean etc. in the input vector. They are useful in statistical modeling.|||Factors are created using the factor() function. The nlevels functions gives the count of levels.|||When we execute the above code, it produces the following result −|||Data frames are tabular data objects. Unlike a matrix in data frame each column can contain different modes of data. The first column can be numeric while the second column can be character and third column can be logical. It is a list of vectors of equal length.|||Data Frames are created using the data.frame() function.|||When we execute the above code, it produces the following result −|||A variable provides us with named storage that our programs can manipulate. A variable in R can store an atomic vector, group of atomic vectors or a combination of many Robjects. A valid variable name consists of letters, numbers and the dot or underline characters. The variable name starts with a letter or the dot not followed by a number.|||.var_name,|||var.name|||The variables can be assigned values using leftward, rightward and equal to operator. The values of the variables can be printed using print() or cat() function. The cat() function combines multiple items into a continuous print output.|||When we execute the above code, it produces the following result −|||Note − The vector c(TRUE,1) has a mix of logical and numeric class. So logical class is coerced to numeric class making TRUE as 1.|||In R, a variable itself is not declared of any data type, rather it gets the data type of the R - object assigned to it. So R is called a dynamically typed language, which means that we can change a variable’s data type of the same variable again and again when using it in a program.|||When we execute the above code, it produces the following result −|||To know all the variables currently available in the workspace we use the ls() function. Also the ls() function can use patterns to match the variable names.|||When we execute the above code, it produces the following result −|||Note − It is a sample output depending on what variables are declared in your environment.|||The ls() function can use patterns to match the variable names.|||When we execute the above code, it produces the following result −|||The variables starting with dot(.) are hidden, they can be listed using ""all.names = TRUE"" argument to ls() function.|||When we execute the above code, it produces the following result −|||Variables can be deleted by using the rm() function. Below we delete the variable var.3. On printing the value of the variable error is thrown.|||When we execute the above code, it produces the following result −|||All the variables can be deleted by using the rm() and ls() function together.|||When we execute the above code, it produces the following result −|||An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. R language is rich in built-in operators and provides following types of operators.|||We have the following types of operators in R programming −|||Following table shows the arithmetic operators supported by R language. The operators act on each element of the vector.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||When we execute the above code, it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||Following table shows the relational operators supported by R language. Each element of the first vector is compared with the corresponding element of the second vector. The result of comparison is a Boolean value.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||it produces the following result −|||Following table shows the logical operators supported by R language. It is applicable only to vectors of type logical, numeric or complex. All numbers greater than 1 are considered as logical value TRUE.|||Each element of the first vector is compared with the corresponding element of the second vector. The result of comparison is a Boolean value.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||The logical operator && and || considers only the first element of the vectors and give a vector of single element as output.|||it produces the following result −|||it produces the following result −|||These operators are used to assign values to vectors.|||<−|||or|||=|||or|||<<−|||it produces the following result −|||->|||or|||->>|||it produces the following result −|||These operators are used to for specific purpose and not general mathematical or logical computation.|||it produces the following result −|||it produces the following result −|||it produces the following result −|||Decision making structures require the programmer to specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.|||Following is the general form of a typical decision making structure found in most of the programming languages −|||R provides the following types of decision making statements. Click the following links to check their detail.|||An if statement consists of a Boolean expression followed by one or more statements.|||An if statement can be followed by an optional else statement, which executes when the Boolean expression is false.|||A switch statement allows a variable to be tested for equality against a list of values.|||There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially. The first statement in a function is executed first, followed by the second, and so on.|||Programming languages provide various control structures that allow for more complicated execution paths.|||A loop statement allows us to execute a statement or group of statements multiple times and the following is the general form of a loop statement in most of the programming languages −|||R programming language provides the following kinds of loop to handle looping requirements. Click the following links to check their detail.|||Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.|||Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.|||Like a while statement, except that it tests the condition at the end of the loop body.|||Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.|||R supports the following control statements. Click the following links to check their detail.|||Terminates the loop statement and transfers execution to the statement immediately following the loop.|||The next statement simulates the behavior of R switch.|||A function is a set of statements organized together to perform a specific task. R has a large number of in-built functions and the user can create their own functions.|||In R, a function is an object so the R interpreter is able to pass control to the function, along with arguments that may be necessary for the function to accomplish the actions.|||The function in turn performs its task and returns control to the interpreter as well as any result which may be stored in other objects.|||An R function is created by using the keyword function. The basic syntax of an R function definition is as follows −|||The different parts of a function are −|||Function Name − This is the actual name of the function. It is stored in R environment as an object with this name.|||Arguments − An argument is a placeholder. When a function is invoked, you pass a value to the argument. Arguments are optional; that is, a function may contain no arguments. Also arguments can have default values.|||Function Body − The function body contains a collection of statements that defines what the function does.|||Return Value − The return value of a function is the last expression in the function body to be evaluated.|||R has many in-built functions which can be directly called in the program without defining them first. We can also create and use our own functions referred as user defined functions.|||Simple examples of in-built functions are seq(), mean(), max(), sum(x) and paste(...) etc. They are directly called by user written programs. You can refer most widely used R functions.|||When we execute the above code, it produces the following result −|||We can create user-defined functions in R. They are specific to what a user wants and once created they can be used like the built-in functions. Below is an example of how a function is created and used.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||The arguments to a function call can be supplied in the same sequence as defined in the function or they can be supplied in a different sequence but assigned to the names of the arguments.|||When we execute the above code, it produces the following result −|||We can define the value of the arguments in the function definition and call the function without supplying any argument to get the default result. But we can also call such functions by supplying new values of the argument and get non default result.|||When we execute the above code, it produces the following result −|||Arguments to functions are evaluated lazily, which means so they are evaluated only when needed by the function body.|||When we execute the above code, it produces the following result −|||Any value written within a pair of single quote or double quotes in R is treated as a string. Internally R stores every string within double quotes, even when you create them with single quote.|||The quotes at the beginning and end of a string should be both double quotes or both single quote. They can not be mixed.|||Double quotes can be inserted into a string starting and ending with single quote.|||Single quote can be inserted into a string starting and ending with double quotes.|||Double quotes can not be inserted into a string starting and ending with double quotes.|||Single quote can not be inserted into a string starting and ending with single quote.|||Following examples clarify the rules about creating a string in R.|||When the above code is run we get the following output −|||When we run the script it fails giving below results.|||Many strings in R are combined using the paste() function. It can take any number of arguments to be combined together.|||The basic syntax for paste function is −|||Following is the description of the parameters used −|||... represents any number of arguments to be combined.|||sep represents any separator between the arguments. It is optional.|||collapse is used to eliminate the space in between two strings. But not the space within two words of one string.|||When we execute the above code, it produces the following result −|||Numbers and strings can be formatted to a specific style using format() function.|||The basic syntax for format function is −|||Following is the description of the parameters used −|||x is the vector input.|||digits is the total number of digits displayed.|||nsmall is the minimum number of digits to the right of the decimal point.|||scientific is set to TRUE to display scientific notation.|||width indicates the minimum width to be displayed by padding blanks in the beginning.|||justify is the display of the string to left, right or center.|||When we execute the above code, it produces the following result −|||This function counts the number of characters including spaces in a string.|||The basic syntax for nchar() function is −|||Following is the description of the parameters used −|||x is the vector input.|||When we execute the above code, it produces the following result −|||These functions change the case of characters of a string.|||The basic syntax for toupper() & tolower() function is  −|||Following is the description of the parameters used −|||x is the vector input.|||When we execute the above code, it produces the following result −|||This function extracts parts of a String.|||The basic syntax for substring() function is −|||Following is the description of the parameters used −|||x is the character vector input.|||first is the position of the first character to be extracted.|||last is the position of the last character to be extracted.|||When we execute the above code, it produces the following result −|||Vectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw.|||Even when you write just one value in R, it becomes a vector of length 1 and belongs to one of the above vector types.|||When we execute the above code, it produces the following result −|||Using colon operator with numeric data|||When we execute the above code, it produces the following result −|||Using sequence (Seq.) operator|||When we execute the above code, it produces the following result −|||Using the c() function|||The non-character values are coerced to character type if one of the elements is a character.|||When we execute the above code, it produces the following result −|||Elements of a Vector are accessed using indexing. The [ ] brackets are used for indexing. Indexing starts with position 1. Giving a negative value in the index drops that element from result.TRUE, FALSE or 0 and 1 can also be used for indexing.|||When we execute the above code, it produces the following result −|||Two vectors of same length can be added, subtracted, multiplied or divided giving the result as a vector output.|||When we execute the above code, it produces the following result −|||If we apply arithmetic operations to two vectors of unequal length, then the elements of the shorter vector are recycled to complete the operations.|||When we execute the above code, it produces the following result −|||Elements in a vector can be sorted using the sort() function.|||When we execute the above code, it produces the following result −|||Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it. A list can also contain a matrix or a function as its elements. List is created using list() function.|||Following is an example to create a list containing strings, numbers, vectors and a logical values.|||When we execute the above code, it produces the following result −|||The list elements can be given names and they can be accessed using these names.|||When we execute the above code, it produces the following result −|||Elements of the list can be accessed by the index of the element in the list. In case of named lists it can also be accessed using the names.|||We continue to use the list in the above example −|||When we execute the above code, it produces the following result −|||We can add, delete and update list elements as shown below. We can add and delete elements only at the end of a list. But we can update any element.|||When we execute the above code, it produces the following result −|||You can merge many lists into one list by placing all the lists inside one list() function.|||When we execute the above code, it produces the following result −|||A list can be converted to a vector so that the elements of the vector can be used for further manipulation. All the arithmetic operations on vectors can be applied after the list is converted into vectors. To do this conversion, we use the unlist() function. It takes the list as input and produces a vector.|||When we execute the above code, it produces the following result −|||Matrices are the R objects in which the elements are arranged in a two-dimensional rectangular layout. They contain elements of the same atomic types. Though we can create a matrix containing only characters or only logical values, they are not of much use. We use matrices containing numeric elements to be used in mathematical calculations.|||A Matrix is created using the matrix() function.|||The basic syntax for creating a matrix in R is −|||Following is the description of the parameters used −|||data is the input vector which becomes the data elements of the matrix.|||nrow is the number of rows to be created.|||ncol is the number of columns to be created.|||byrow is a logical clue. If TRUE then the input vector elements are arranged by row.|||dimname is the names assigned to the rows and columns.|||Create a matrix taking a vector of numbers as input.|||When we execute the above code, it produces the following result −|||Elements of a matrix can be accessed by using the column and row index of the element. We consider the matrix P above to find the specific elements below.|||When we execute the above code, it produces the following result −|||Various mathematical operations are performed on the matrices using the R operators. The result of the operation is also a matrix.|||The dimensions (number of rows and columns) should be same for the matrices involved in the operation.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||Arrays are the R data objects which can store data in more than two dimensions. For example − If we create an array of dimension (2, 3, 4) then it creates 4 rectangular matrices each with 2 rows and 3 columns. Arrays can store only data type.|||An array is created using the array() function. It takes vectors as input and uses the values in the dim parameter to create an array.|||The following example creates an array of two 3x3 matrices each with 3 rows and 3 columns.|||When we execute the above code, it produces the following result −|||We can give names to the rows, columns and matrices in the array by using the dimnames parameter.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||As array is made up matrices in multiple dimensions, the operations on elements of array are carried out by accessing elements of the matrices.|||When we execute the above code, it produces the following result −|||We can do calculations across the elements in an array using the apply() function.|||Following is the description of the parameters used −|||x is an array.|||margin is the name of the data set used.|||fun is the function to be applied across the elements of the array.|||We use the apply() function below to calculate the sum of the elements in the rows of an array across all the matrices.|||When we execute the above code, it produces the following result −|||Factors are the data objects which are used to categorize the data and store it as levels. They can store both strings and integers. They are useful in the columns which have a limited number of unique values. Like ""Male, ""Female"" and True, False etc. They are useful in data analysis for statistical modeling.|||Factors are created using the factor () function by taking a vector as input.|||When we execute the above code, it produces the following result −|||On creating any data frame with a column of text data, R treats the text column as categorical data and creates factors on it.|||When we execute the above code, it produces the following result −|||The order of the levels in a factor can be changed by applying the factor function again with new order of the levels.|||When we execute the above code, it produces the following result −|||We can generate factor levels by using the gl() function. It takes two integers as input which indicates how many levels and how many times each level.|||Following is the description of the parameters used −|||n is a integer giving the number of levels.|||k is a integer giving the number of replications.|||labels is a vector of labels for the resulting factor levels.|||When we execute the above code, it produces the following result −|||A data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column.|||Following are the characteristics of a data frame.|||When we execute the above code, it produces the following result −|||The structure of the data frame can be seen by using str() function.|||When we execute the above code, it produces the following result −|||The statistical summary and nature of the data can be obtained by applying summary() function.|||When we execute the above code, it produces the following result −|||Extract specific column from a data frame using column name.|||When we execute the above code, it produces the following result −|||Extract the first two rows and then all columns|||When we execute the above code, it produces the following result −|||Extract 3rd and 5th row with 2nd and 4th column|||When we execute the above code, it produces the following result −|||A data frame can be expanded by adding columns and rows.|||Just add the column vector using a new column name.|||When we execute the above code, it produces the following result −|||To add more rows permanently to an existing data frame, we need to bring in the new rows in the same structure as the existing data frame and use the rbind() function.|||In the example below we create a data frame with new rows and merge it with the existing data frame to create the final data frame.|||When we execute the above code, it produces the following result −|||R packages are a collection of R functions, complied code and sample data. They are stored under a directory called ""library"" in the R environment. By default, R installs a set of packages during installation. More packages are added later, when they are needed for some specific purpose. When we start the R console, only the default packages are available by default. Other packages which are already installed have to be loaded explicitly to be used by the R program that is going to use them.|||All the packages available in R language are listed at R Packages.|||Below is a list of commands to be used to check, verify and use the R packages.|||Get library locations containing R packages|||When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.|||When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.|||Get all packages currently loaded in the R environment|||When we execute the above code, it produces the following result. It may vary depending on the local settings of your pc.|||There are two ways to add new R packages. One is installing directly from the CRAN directory and another is downloading the package to your local system and installing it manually.|||The following command gets the packages directly from CRAN webpage and installs the package in the R environment. You may be prompted to choose a nearest mirror. Choose the one appropriate to your location.|||Go to the link R Packages to download the package needed. Save the package as a .zip file in a suitable location in the local system.|||Now you can run the following command to install this package in the R environment.|||Before a package can be used in the code, it must be loaded to the current R environment. You also need to load a package that is already installed previously but not available in the current environment.|||A package is loaded using the following command −|||Data Reshaping in R is about changing the way data is organized into rows and columns. Most of the time data processing in R is done by taking the input data as a data frame. It is easy to extract data from the rows and columns of a data frame but there are situations when we need the data frame in a format that is different from format in which we received it. R has many functions to split, merge and change the rows to columns and vice-versa in a data frame.|||We can join multiple vectors to create a data frame using the cbind()function. Also we can merge two data frames using rbind() function.|||When we execute the above code, it produces the following result −|||We can merge two data frames by using the merge() function. The data frames must have same column names on which the merging happens.|||In the example below, we consider the data sets about Diabetes in Pima Indian Women available in the library names ""MASS"". we merge the two data sets based on the values of blood pressure(""bp"") and body mass index(""bmi""). On choosing these two columns for merging, the records where values of these two variables match in both data sets are combined together to form a single data frame.|||When we execute the above code, it produces the following result −|||One of the most interesting aspects of R programming is about changing the shape of the data in multiple steps to get a desired shape. The functions used to do this are called melt() and cast().|||We consider the dataset called ships present in the library called ""MASS"".|||When we execute the above code, it produces the following result −|||Now we melt the data to organize it, converting all columns other than type and year into multiple rows.|||When we execute the above code, it produces the following result −|||We can cast the molten data into a new form where the aggregate of each type of ship for each year is created. It is done using the cast() function.|||When we execute the above code, it produces the following result −|||In R, we can read data from files stored outside the R environment. We can also write data into files which will be stored and accessed by the operating system. R can read and write into various file formats like csv, excel, xml etc.|||In this chapter we will learn to read data from a csv file and then write data into a csv file. The file should be present in current working directory so that R can read it. Of course we can also set our own directory and read files from there.|||You can check which directory the R workspace is pointing to using the getwd() function. You can also set a new working directory using setwd()function.|||When we execute the above code, it produces the following result −|||This result depends on your OS and your current directory where you are working.|||The csv file is a text file in which the values in the columns are separated by a comma. Let's consider the following data present in the file named input.csv.|||You can create this file using windows notepad by copying and pasting this data. Save the file as input.csv using the save As All files(*.*) option in notepad.|||Following is a simple example of read.csv() function to read a CSV file available in your current working directory −|||When we execute the above code, it produces the following result −|||By default the read.csv() function gives the output as a data frame. This can be easily checked as follows. Also we can check the number of columns and rows.|||When we execute the above code, it produces the following result −|||Once we read data in a data frame, we can apply all the functions applicable to data frames as explained in subsequent section.|||When we execute the above code, it produces the following result −|||We can fetch rows meeting specific filter criteria similar to a SQL where clause.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||R can create csv file form existing data frame. The write.csv() function is used to create the csv file. This file gets created in the working directory.|||When we execute the above code, it produces the following result −|||Here the column X comes from the data set newper. This can be dropped using additional parameters while writing the file.|||When we execute the above code, it produces the following result −|||Microsoft Excel is the most widely used spreadsheet program which stores data in the .xls or .xlsx format. R can read directly from these files using some excel specific packages. Few such packages are - XLConnect, xlsx, gdata etc. We will be using xlsx package. R can also write into excel file using this package.|||You can use the following command in the R console to install the ""xlsx"" package. It may ask to install some additional packages on which this package is dependent. Follow the same command with required package name to install the additional packages.|||Use the following command to verify and load the ""xlsx"" package.|||When the script is run we get the following output.|||Open Microsoft excel. Copy and paste the following data in the work sheet named as sheet1.|||Also copy and paste the following data to another worksheet and rename this worksheet to ""city"".|||Save the Excel file as ""input.xlsx"". You should save it in the current working directory of the R workspace.|||The input.xlsx is read by using the read.xlsx() function as shown below. The result is stored as a data frame in the R environment.|||When we execute the above code, it produces the following result −|||A binary file is a file that contains information stored only in form of bits and bytes.(0’s and 1’s). They are not human readable as the bytes in it translate to characters and symbols which contain many other non-printable characters. Attempting to read a binary file using any text editor will show characters like Ø and ð.|||The binary file has to be read by specific programs to be useable. For example, the binary file of a Microsoft Word program can be read to a human readable form only by the Word program. Which indicates that, besides the human readable text, there is a lot more information like formatting of characters and page numbers etc., which are also stored along with alphanumeric characters. And finally a binary file is a continuous sequence of bytes. The line break we see in a text file is a character joining first line to the next.|||Sometimes, the data generated by other programs are required to be processed by R as a binary file. Also R is required to create binary files which can be shared with other programs.|||R has two functions WriteBin() and readBin() to create and read binary files.|||Following is the description of the parameters used −|||con is the connection object to read or write the binary file.|||object is the binary file which to be written.|||what is the mode like character, integer etc. representing the bytes to be read.|||n is the number of bytes to read from the binary file.|||We consider the R inbuilt data ""mtcars"". First we create a csv file from it and convert it to a binary file and store it as a OS file. Next we read this binary file created into R.|||We read the data frame ""mtcars"" as a csv file and then write it as a binary file to the OS.|||The binary file created above stores all the data as continuous bytes. So we will read it by choosing appropriate values of column names as well as the column values.|||When we execute the above code, it produces the following result and chart −|||As we can see, we got the original data back by reading the binary file in R.|||XML is a file format which shares both the file format and the data on the World Wide Web, intranets, and elsewhere using standard ASCII text. It stands for Extensible Markup Language (XML). Similar to HTML it contains markup tags. But unlike HTML where the markup tag describes structure of the page, in xml the markup tags describe the meaning of the data contained into he file.|||You can read a xml file in R using the ""XML"" package. This package can be installed using following command.|||Create a XMl file by copying the below data into a text editor like notepad. Save the file with a .xml extension and choosing the file type as all files(*.*).|||The xml file is read by R using the function xmlParse(). It is stored as a list in R.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||Let's look at the first record of the parsed file. It will give us an idea of the various elements present in the top level node.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||To handle the data effectively in large files we read the data in the xml file as a data frame. Then process the data frame for data analysis.|||When we execute the above code, it produces the following result −|||As the data is now available as a dataframe we can use data frame related function to read and manipulate the file.|||JSON file stores data as text in human-readable format. Json stands for JavaScript Object Notation. R can read JSON files using the rjson package.|||In the R console, you can issue the following command to install the rjson package.|||Create a JSON file by copying the below data into a text editor like notepad. Save the file with a .json extension and choosing the file type as all files(*.*).|||The JSON file is read by R using the function from JSON(). It is stored as a list in R.|||When we execute the above code, it produces the following result −|||We can convert the extracted data above to a R data frame for further analysis using the as.data.frame() function.|||When we execute the above code, it produces the following result −|||Many websites provide data for consumption by its users. For example the World Health Organization(WHO) provides reports on health and medical information in the form of CSV, txt and XML files. Using R programs, we can programmatically extract specific data from such websites. Some packages in R which are used to scrap data form the web are − ""RCurl"",XML"", and ""stringr"". They are used to connect to the URL’s, identify required links for the files and download them to the local environment.|||The following packages are required for processing the URL’s and links to the files. If they are not available in your R Environment, you can install them using following commands.|||We will visit the URL weather data and download the CSV files using R for the year 2015.|||We will use the function getHTMLLinks() to gather the URLs of the files. Then we will use the function download.file() to save the files to the local system. As we will be applying the same code again and again for multiple files, we will create a function to be called multiple times. The filenames are passed as parameters in form of a R list object to this function.|||After running the above code, you can locate the following files in the current R working directory.|||The data is Relational database systems are stored in a normalized format. So, to carry out statistical computing we will need very advanced and complex Sql queries. But R can connect easily to many relational databases like MySql, Oracle, Sql server etc. and fetch records from them as a data frame. Once the data is available in the R environment, it becomes a normal R data set and can be manipulated or analyzed using all the powerful packages and functions.|||In this tutorial we will be using MySql as our reference database for connecting to R.|||R has a built-in package named ""RMySQL"" which provides native connectivity between with MySql database. You can install this package in the R environment using the following command.|||Once the package is installed we create a connection object in R to connect to the database. It takes the username, password, database name and host name as input.|||When we execute the above code, it produces the following result −|||We can query the database tables in MySql using the function dbSendQuery(). The query gets executed in MySql and the result set is returned using the R fetch() function. Finally it is stored as a data frame in R.|||When we execute the above code, it produces the following result −|||We can pass any valid select query to get the result.|||When we execute the above code, it produces the following result −|||We can update the rows in a Mysql table by passing the update query to the dbSendQuery() function.|||After executing the above code we can see the table updated in the MySql Environment.|||After executing the above code we can see the row inserted into the table in the MySql Environment.|||We can create tables in the MySql using the function dbWriteTable(). It overwrites the table if it already exists and takes a data frame as input.|||After executing the above code we can see the table created in the MySql Environment.|||We can drop the tables in MySql database passing the drop table statement into the dbSendQuery() in the same way we used it for querying data from tables.|||After executing the above code we can see the table is dropped in the MySql Environment.|||R Programming language has numerous libraries to create charts and graphs. A pie-chart is a representation of values as slices of a circle with different colors. The slices are labeled and the numbers corresponding to each slice is also represented in the chart.|||In R the pie chart is created using the pie() function which takes positive numbers as a vector input. The additional parameters are used to control labels, color, title etc.|||The basic syntax for creating a pie-chart using the R is −|||Following is the description of the parameters used −|||x is a vector containing the numeric values used in the pie chart.|||labels is used to give description to the slices.|||radius indicates the radius of the circle of the pie chart.(value between −1 and +1).|||main indicates the title of the chart.|||col indicates the color palette.|||clockwise is a logical value indicating if the slices are drawn clockwise or anti clockwise.|||A very simple pie-chart is created using just the input vector and labels. The below script will create and save the pie chart in the current R working directory.|||When we execute the above code, it produces the following result −|||We can expand the features of the chart by adding more parameters to the function. We will use parameter main to add a title to the chart and another parameter is col which will make use of rainbow colour pallet while drawing the chart. The length of the pallet should be same as the number of values we have for the chart. Hence we use length(x).|||The below script will create and save the pie chart in the current R working directory.|||When we execute the above code, it produces the following result −|||We can add slice percentage and a chart legend by creating additional chart variables.|||When we execute the above code, it produces the following result −|||A pie chart with 3 dimensions can be drawn using additional packages. The package plotrix has a function called pie3D() that is used for this.|||When we execute the above code, it produces the following result −|||A bar chart represents data in rectangular bars with length of the bar proportional to the value of the variable. R uses the function barplot() to create bar charts.
 R can draw both vertical and Horizontal bars in the bar chart.
In bar chart each of the bars can be given different colors.|||The basic syntax to create a bar-chart in R is −|||Following is the description of the parameters used −|||A simple bar chart is created using just the input vector and the name of each bar.||| The below script will create and save the bar chart in the current R working directory.|||When we execute above code, it produces following result −|||The features of the bar chart can be expanded by adding more parameters. The main parameter is used to add  title. The col parameter is used to add colors to the bars. The args.name is a vector having same number of values as the input vector to describe the meaning of each bar.|||The below script will create and save the bar chart in the current R working directory.|||When we execute above code, it produces following result −|||We can create bar chart with groups of bars and stacks in each bar by using a matrix as input values.||| More than two variables are represented as a matrix which is used to create the group bar chart and stacked bar chart.|||Boxplots are a measure of how well distributed is the data in a data set. It divides the data set into three quartiles. This graph represents the minimum, maximum, median, first quartile and third quartile in the data set. It is also useful in comparing the distribution of data across data sets by drawing boxplots for each of them.|||Boxplots are created in R by using the boxplot() function.|||The basic syntax to create a boxplot in R is  −|||Following is the description of the parameters used −|||x is a vector or a formula.|||data is the data frame.|||notch is a logical value. Set as TRUE to draw a notch.|||varwidth is a logical value. Set as true to draw width of the box proportionate to the sample size.|||names are the group labels which will be printed under each boxplot.|||main is used to give a title to the graph.|||We use the data set ""mtcars"" available in the R environment to create a basic boxplot. Let's look at the columns ""mpg"" and ""cyl"" in mtcars.|||When we execute above code, it produces following result −|||The below script will create a boxplot graph for the relation between mpg (miles per gallon) and cyl (number of cylinders).|||When we execute the above code, it produces the following result −|||We can draw boxplot with notch to find out how the medians of different data groups match with each other.|||The below script will create a boxplot graph with notch for each of the data group.|||When we execute the above code, it produces the following result −|||A histogram represents the frequencies of values of a variable bucketed into ranges. Histogram is similar to bar chat but the difference is it groups the values into continuous ranges. Each bar in histogram represents the height of the number of values present in that range.|||R creates histogram using hist() function. This function takes a vector as an input and uses some more parameters to plot histograms.|||The basic syntax for creating a histogram using R is −|||Following is the description of the parameters used −|||v is a vector containing numeric values used in histogram.|||main indicates title of the chart.|||col is used to set color of the bars.|||border is used to set border color of each bar.|||xlab is used to give description of x-axis.|||xlim is used to specify the range of values on the x-axis.|||ylim is used to specify the range of values on the y-axis.|||breaks is used to mention the width of each bar.|||A simple histogram is created using input vector, label, col and border parameters.|||The script given below will create and save the histogram in the current R working directory.|||When we execute the above code, it produces the following result −|||To specify the range of values allowed in X axis and Y axis, we can use the xlim and ylim parameters.|||The width of each of the bar can be decided by using breaks.|||When we execute the above code, it produces the following result −|||A line chart is a graph that connects a series of points by drawing line segments between them. These points are ordered in one of their coordinate (usually the x-coordinate) value. Line charts are usually used in identifying the trends in data.|||The plot() function in R is used to create the line graph.|||The basic syntax to create a line chart in R is −|||Following is the description of the parameters used −|||v is a vector containing the numeric values.|||type takes the value ""p"" to draw only the points, ""l"" to draw only the lines and ""o"" to draw both points and lines.|||xlab is the label for x axis.|||ylab is the label for y axis.|||main is the Title of the chart.|||col is used to give colors to both the points and lines.|||A simple line chart is created using the input vector and the type parameter as ""O"". The below script will create and save a line chart in the current R working directory.|||When we execute the above code, it produces the following result −|||The features of the line chart can be expanded by using additional parameters. We add color to the points and lines, give a title to the chart and add labels to the axes.|||When we execute the above code, it produces the following result −|||More than one line can be drawn on the same chart by using the lines()function.|||After the first line is plotted, the lines() function can use an additional vector as input to draw the second line in the chart,|||When we execute the above code, it produces the following result −|||Scatterplots show many points plotted in the Cartesian plane. Each point represents the values of two variables. One variable is chosen in the horizontal axis and another in the vertical axis.|||The simple scatterplot is created using the plot() function.|||The basic syntax for creating scatterplot in R is −|||Following is the description of the parameters used −|||x is the data set whose values are the horizontal coordinates.|||y is the data set whose values are the vertical coordinates.|||main is the tile of the graph.|||xlab is the label in the horizontal axis.|||ylab is the label in the vertical axis.|||xlim is the limits of the values of x used for plotting.|||ylim is the limits of the values of y used for plotting.|||axes indicates whether both axes should be drawn on the plot.|||We use the data set ""mtcars"" available in the R environment to create a basic scatterplot. Let's use the columns ""wt"" and ""mpg"" in mtcars.|||When we execute the above code, it produces the following result −|||The below script will create a scatterplot graph for the relation between wt(weight) and mpg(miles per gallon).|||When we execute the above code, it produces the following result −|||When we have more than two variables and we want to find the correlation between one variable versus the remaining ones we use scatterplot matrix. We use pairs() function to create matrices of scatterplots.|||The basic syntax for creating scatterplot matrices in R is −|||Following is the description of the parameters used −|||formula represents the series of variables used in pairs.|||data represents the data set from which the variables will be taken.|||Each variable is paired up with each of the remaining variable. A scatterplot is plotted for each pair.|||When the above code is executed we get the following output.|||Statistical analysis in R is performed by using many in-built functions. Most of these functions are part of the R base package. These functions take R vector as an input along with the arguments and give the result.|||The functions we are discussing in this chapter are mean, median and mode.|||It is calculated by taking the sum of the values and dividing with the number of values in a data series.|||The function mean() is used to calculate this in R.|||The basic syntax for calculating mean in R is −|||Following is the description of the parameters used −|||x is the input vector.|||trim is used to drop some observations from both end of the sorted vector.|||na.rm is used to remove the missing values from the input vector.|||When we execute the above code, it produces the following result −|||When trim parameter is supplied, the values in the vector get sorted and then the required numbers of observations are dropped from calculating the mean.|||When trim = 0.3, 3 values from each end will be dropped from the calculations to find mean.|||In this case the sorted vector is (−21, −5, 2, 3, 4.2, 7, 8, 12, 18, 54) and the values removed from the vector for calculating mean are (−21,−5,2) from left and (12,18,54) from right.|||When we execute the above code, it produces the following result −|||If there are missing values, then the mean function returns NA.|||To drop the missing values from the calculation use na.rm = TRUE. which means remove the NA values.|||When we execute the above code, it produces the following result −|||The middle most value in a data series is called the median. The median() function is used in R to calculate this value.|||The basic syntax for calculating median in R is −|||Following is the description of the parameters used −|||x is the input vector.|||na.rm is used to remove the missing values from the input vector.|||When we execute the above code, it produces the following result −|||The mode is the value that has highest number of occurrences in a set of data. Unike mean and median, mode can have both numeric and character data.|||R does not have a standard in-built function to calculate mode. So we create a user function to calculate mode of a data set in R. This function takes the vector as input and gives the mode value as output.|||When we execute the above code, it produces the following result −|||Regression analysis is a very widely used statistical tool to establish a relationship model between two variables. One of these variable is called predictor variable whose value is gathered through experiments. The other variable is called response variable whose value is derived from the predictor variable.|||In Linear Regression these two variables are related through an equation, where exponent (power) of both these variables is 1. Mathematically a linear relationship represents a straight line when plotted as a graph. A non-linear relationship where the exponent of any variable is not equal to 1 creates a curve.|||The general mathematical equation for a linear regression is −|||Following is the description of the parameters used −|||y is the response variable.|||x is the predictor variable.|||a and b are constants which are called the coefficients.|||A simple example of regression is predicting weight of a person when his height is known. To do this we need to have the relationship between height and weight of a person.|||The steps to create the relationship is −|||Carry out the experiment of gathering a sample of observed values of height and corresponding weight.|||Create a relationship model using the lm() functions in R.|||Find the coefficients from the model created and create the mathematical equation using these|||Get a summary of the relationship model to know the average error in prediction. Also called residuals.|||To predict the weight of new persons, use the predict() function in R.|||Below is the sample data representing the observations −|||This function creates the relationship model between the predictor and the response variable.|||The basic syntax for lm() function in linear regression is −|||Following is the description of the parameters used −|||formula is a symbol presenting the relation between x and y.|||data is the vector on which the formula will be applied.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||The basic syntax for predict() in linear regression is −|||Following is the description of the parameters used −|||object is the formula which is already created using the lm() function.|||newdata is the vector containing the new value for predictor variable.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||Multiple regression is an extension of linear regression into relationship between more than two variables. In simple linear relation we have one predictor and one response variable, but in multiple regression we have more than one predictor variable and one response variable.|||The general mathematical equation for multiple regression is −|||Following is the description of the parameters used −|||y is the response variable.|||a, b1, b2...bn are the coefficients.|||x1, x2, ...xn are the predictor variables.|||We create the regression model using the lm() function in R. The model determines the value of the coefficients using the input data. Next we can predict the value of the response variable for a given set of predictor variables using these coefficients.|||This function creates the relationship model between the predictor and the response variable.|||The basic syntax for lm() function in multiple regression is −|||Following is the description of the parameters used −|||formula is a symbol presenting the relation between the response variable and predictor variables.|||data is the vector on which the formula will be applied.|||Consider the data set ""mtcars"" available in the R environment. It gives a comparison between different car models in terms of mileage per gallon (mpg), cylinder displacement(""disp""), horse power(""hp""), weight of the car(""wt"") and some more parameters.|||The goal of the model is to establish the relationship between ""mpg"" as a response variable with ""disp"",""hp"" and ""wt"" as predictor variables. We create a subset of these variables from the mtcars data set for this purpose.|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||Based on the above intercept and coefficient values, we create the mathematical equation.|||We can use the regression equation created above to predict the mileage when a new set of values for displacement, horse power and weight is provided.|||For a car with disp = 221, hp = 102 and wt = 2.91 the predicted mileage is −|||The Logistic Regression is a regression model in which the response variable (dependent variable) has categorical values such as True/False or 0/1. It actually measures the probability of a binary response as the value of response variable based on the mathematical equation relating it with the predictor variables.|||The general mathematical equation for logistic regression is −|||Following is the description of the parameters used −|||y is the response variable.|||x is the predictor variable.|||a and b are the coefficients which are numeric constants.|||The function used to create the regression model is the glm() function.|||The basic syntax for glm() function in logistic regression is −|||Following is the description of the parameters used −|||formula is the symbol presenting the relationship between the variables.|||data is the data set giving the values of these variables.|||family is R object to specify the details of the model. It's value is binomial for logistic regression.|||The in-built data set ""mtcars"" describes different models of a car with their various engine specifications. In ""mtcars"" data set, the transmission mode (automatic or manual) is described by the column am which is a binary value (0 or 1). We can create a logistic regression model between the columns ""am"" and 3 other columns - hp, wt and cyl.|||When we execute the above code, it produces the following result −|||We use the glm() function to create the regression model and get its summary for analysis.|||When we execute the above code, it produces the following result −|||In the summary as the p-value in the last column is more than 0.05 for the variables ""cyl"" and ""hp"", we consider them to be insignificant in contributing to the value of the variable ""am"". Only weight (wt) impacts the ""am"" value in this regression model.|||In a random collection of data from independent sources, it is generally observed that the distribution of data is normal. Which means, on plotting a graph with the value of the variable in the horizontal axis and the count of the values in the vertical axis we get a bell shape curve. The center of the curve represents the mean of the data set. In the graph, fifty percent of values lie to the left of the mean and the other fifty percent lie to the right of the graph. This is referred as normal distribution in statistics.|||R has four in built functions to generate normal distribution. They are described below.|||Following is the description of the parameters used in above functions −|||x is a vector of numbers.|||p is a vector of probabilities.|||n is number of observations(sample size).|||mean is the mean value of the sample data. It's default value is zero.|||sd is the standard deviation. It's default value is 1.|||This function gives height of the probability distribution at each point for a given mean and standard deviation.|||When we execute the above code, it produces the following result −|||This function gives the probability of a normally distributed random number to be less that the value of a given number. It is also called ""Cumulative Distribution Function"".|||When we execute the above code, it produces the following result −|||This function takes the probability value and gives a number whose cumulative value matches the probability value.|||When we execute the above code, it produces the following result −|||This function is used to generate random numbers whose distribution is normal. It takes the sample size as input and generates that many random numbers. We draw a histogram to show the distribution of the generated numbers.|||When we execute the above code, it produces the following result −|||The binomial distribution model deals with finding the probability of success of an event which has only two possible outcomes in a series of experiments. For example, tossing of a coin always gives a head or a tail. The probability of finding exactly 3 heads in tossing a coin repeatedly for 10 times is estimated during the binomial distribution.|||R has four in-built functions to generate binomial distribution. They are described below.|||Following is the description of the parameters used −|||x is a vector of numbers.|||p is a vector of probabilities.|||n is number of observations.|||size is the number of trials.|||prob is the probability of success of each trial.|||This function gives the probability density distribution at each point.|||When we execute the above code, it produces the following result −|||This function gives the cumulative probability of an event. It is a single value representing the probability.|||When we execute the above code, it produces the following result −|||This function takes the probability value and gives a number whose cumulative value matches the probability value.|||When we execute the above code, it produces the following result −|||This function generates required number of random values of given probability from a given sample.|||When we execute the above code, it produces the following result −|||Poisson Regression involves regression models in which the response variable is in the form of counts and not fractional numbers. For example, the count of number of births or number of wins in a football match series. Also the values of the response variables follow a Poisson distribution.|||The general mathematical equation for Poisson regression is −|||Following is the description of the parameters used −|||y is the response variable.|||a and b are the numeric coefficients.|||x is the predictor variable.|||The function used to create the Poisson regression model is the glm() function.|||The basic syntax for glm() function in Poisson regression is −|||Following is the description of the parameters used in above functions −|||formula is the symbol presenting the relationship between the variables.|||data is the data set giving the values of these variables.|||family is R object to specify the details of the model. It's value is 'Poisson' for Logistic Regression.|||We have the in-built data set ""warpbreaks"" which describes the effect of wool type (A or B) and tension (low, medium or high) on the number of warp breaks per loom. Let's consider ""breaks"" as the response variable which is a count of number of breaks. The wool ""type"" and ""tension"" are taken as predictor variables.|||Input Data|||When we execute the above code, it produces the following result −|||When we execute the above code, it produces the following result −|||In the summary we look for the p-value in the last column to be less than 0.05 to consider an impact of the predictor variable on the response variable. As seen the wooltype B having tension type M and H have impact on the count of breaks.|||We use Regression analysis to create models which describe the effect of variation in predictor variables on the response variable. Sometimes, if we have a categorical variable with values like Yes/No or Male/Female etc. The simple regression analysis gives multiple results for each value of the categorical variable. In such scenario, we can study the effect of the categorical variable by using it along with the predictor variable and comparing the regression lines for each level of the categorical variable. Such an analysis is termed as Analysis of Covariance also called as ANCOVA.|||Consider the R built in data set mtcars. In it we observer that the field ""am"" represents the type of transmission (auto or manual). It is a categorical variable with values 0 and 1. The miles per gallon value(mpg) of a car can also depend on it besides the value of horse power(""hp"").|||We study the effect of the value of ""am"" on the regression between ""mpg"" and ""hp"". It is done by using the aov() function followed by the anova() function to compare the multiple regressions.|||Create a data frame containing the fields ""mpg"", ""hp"" and ""am"" from the data set mtcars. Here we take ""mpg"" as the response variable, ""hp"" as the predictor variable and ""am"" as the categorical variable.|||When we execute the above code, it produces the following result −|||We create a regression model taking ""hp"" as the predictor variable and ""mpg"" as the response variable taking into account the interaction between ""am"" and ""hp"".|||When we execute the above code, it produces the following result −|||This result shows that both horse power and transmission type has significant effect on miles per gallon as the p value in both cases is less than 0.05. But the interaction between these two variables is not significant as the p-value is more than 0.05.|||When we execute the above code, it produces the following result −|||This result shows that both horse power and transmission type has significant effect on miles per gallon as the p value in both cases is less than 0.05.|||Now we can compare the two models to conclude if the interaction of the variables is truly in-significant. For this we use the anova() function.|||When we execute the above code, it produces the following result −|||As the p-value is greater than 0.05 we conclude that the interaction between horse power and transmission type is not significant. So the mileage per gallon will depend in a similar manner on the horse power of the car in both auto and manual transmission mode.|||Time series is a series of data points in which each data point is associated with a timestamp. A simple example is the price of a stock in the stock market at different points of time on a given day. Another example is the amount of rainfall in a region at different months of the year. R language uses many functions to create, manipulate and plot the time series data. The data for the time series is stored in an R object called time-series object. It is also a R data object like a vector or data frame.|||The time series object is created by using the ts() function.|||The basic syntax for ts() function in time series analysis is −|||Following is the description of the parameters used −|||data is a vector or matrix containing the values used in the time series.|||start specifies the start time for the first observation in time series.|||end specifies the end time for the last observation in time series.|||frequency specifies the number of observations per unit time.|||Except the parameter ""data"" all other parameters are optional.|||Consider the annual rainfall details at a place starting from January 2012. We create an R time series object for a period of 12 months and plot it.|||When we execute the above code, it produces the following result and chart −|||The Time series chart −|||The value of the frequency parameter in the ts() function decides the time intervals at which the data points are measured. A value of 12 indicates that the time series is for 12 months. Other values and its meaning is as below −|||frequency = 12 pegs the data points for every month of a year.|||frequency = 4 pegs the data points for every quarter of a year.|||frequency = 6 pegs the data points for every 10 minutes of an hour.|||frequency = 24*6 pegs the data points for every 10 minutes of a day.|||We can plot multiple time series in one chart by combining both the series into a matrix.|||When we execute the above code, it produces the following result and chart −|||The Multiple Time series chart −|||When modeling real world data for regression analysis, we observe that it is rarely the case that the equation of the model is a linear equation giving a linear graph. Most of the time, the equation of the model of real world data involves mathematical functions of higher degree like an exponent of 3 or a sin function. In such a scenario, the plot of the model gives a curve rather than a line. The goal of both linear and non-linear regression is to adjust the values of the model's parameters to find the line or curve that comes closest to your data. On finding these values we will be able to estimate the response variable with good accuracy.|||In Least Square regression, we establish a regression model in which the sum of the squares of the vertical distances of different points from the regression curve is minimized. We generally start with a defined model and assume some values for the coefficients. We then apply the nls() function of R to get the more accurate values along with the confidence intervals.|||The basic syntax for creating a nonlinear least square test in R is −|||Following is the description of the parameters used −|||formula is a nonlinear model formula including variables and parameters.|||data is a data frame used to evaluate the variables in the formula.|||start is a named list or named numeric vector of starting estimates.|||We will consider a nonlinear model with assumption of initial values of its coefficients. Next we will see what is the confidence intervals of these assumed values so that we can judge how well these values fir into the model.|||So let's consider the below equation for this purpose −|||Let's assume the initial coefficients to be 1 and 3 and fit these values into nls() function.|||When we execute the above code, it produces the following result −|||We can conclude that the value of b1 is more close to 1 while the value of b2 is more close to 2 and not 3.|||Decision tree is a graph to represent choices and their results in form of a tree. The nodes in the graph represent an event or choice and the edges of the graph represent the decision rules or conditions. It is mostly used in Machine Learning and Data Mining applications using R.|||Examples of use of decision tress is − predicting an email as spam or not spam, predicting of a tumor is cancerous or predicting a loan as a good or bad credit risk based on the factors in each of these. Generally, a model is created with observed data also called training data. Then a set of validation data is used to verify and improve the model. R has packages which are used to create and visualize decision trees. For new set of predictor variable, we use this model to arrive at a decision on the category (yes/No, spam/not spam) of the data.|||The R package ""party"" is used to create decision trees.|||Use the below command in R console to install the package. You also have to install the dependent packages if any.|||The package ""party"" has the function ctree() which is used to create and analyze decison tree.|||The basic syntax for creating a decision tree in R is −|||Following is the description of the parameters used −|||formula is a formula describing the predictor and response variables.|||data is the name of the data set used.|||We will use the R in-built data set named readingSkills to create a decision tree. It describes the score of someone's readingSkills if we know the variables ""age"",""shoesize"",""score"" and whether the person is a native speaker or not.|||Here is the sample data.|||When we execute the above code, it produces the following result and chart −|||We will use the ctree() function to create the decision tree and see its graph.|||When we execute the above code, it produces the following result −|||From the decision tree shown above we can conclude that anyone whose readingSkills score is less than 38.3 and age is more than 6 is not a native Speaker.|||In the random forest approach, a large number of decision trees are created. Every observation is fed into every decision tree. The most common outcome for each observation is used as the final output. A new observation is fed into all the trees and taking a majority vote for each classification model.|||An error estimate is made for the cases which were not used while building the tree. That is called an OOB (Out-of-bag) error estimate which is mentioned as a percentage.|||The R package ""randomForest"" is used to create random forests.|||Use the below command in R console to install the package. You also have to install the dependent packages if any.|||The package ""randomForest"" has the function randomForest() which is used to create and analyze random forests.|||The basic syntax for creating a random forest in R is −|||Following is the description of the parameters used −|||formula is a formula describing the predictor and response variables.|||data is the name of the data set used.|||We will use the R in-built data set named readingSkills to create a decision tree. It describes the score of someone's readingSkills if we know the variables ""age"",""shoesize"",""score"" and whether the person is a native speaker.|||Here is the sample data.|||When we execute the above code, it produces the following result and chart −|||We will use the randomForest() function to create the decision tree and see it's graph.|||When we execute the above code, it produces the following result −|||From the random forest shown above we can conclude that the shoesize and score are the important factors deciding if someone is a native speaker or not. Also the model has only 1% error which means we can predict with 99% accuracy.|||Survival analysis deals with predicting the time when a specific event is going to occur. It is also known as failure time analysis or analysis of time to death. For example predicting the number of days a person with cancer will survive or predicting the time when a mechanical system is going to fail.|||The R package named survival is used to carry out survival analysis. This package contains the function Surv() which takes the input data as a R formula and creates a survival object among the chosen variables for analysis. Then we use the function survfit() to create a plot for the analysis.|||The basic syntax for creating survival analysis in R is −|||Following is the description of the parameters used −|||time is the follow up time until the event occurs.|||event indicates the status of occurrence of the expected event.|||formula is the relationship between the predictor variables.|||We will consider the data set named ""pbc"" present in the survival packages installed above. It describes the survival data points about people affected with primary biliary cirrhosis (PBC) of the liver. Among the many columns present in the data set we are primarily concerned with the fields ""time"" and ""status"". Time represents the number of days between registration of the patient and earlier of the event between the patient receiving a liver transplant or death of the patient.|||When we execute the above code, it produces the following result and chart −|||From the above data we are considering time and status for our analysis.|||Now we proceed to apply the Surv() function to the above data set and create a plot that will show the trend.|||When we execute the above code, it produces the following result and chart −|||The trend in the above graph helps us predicting the probability of survival at the end of a certain number of days.|||Chi-Square test is a statistical method to determine if two categorical variables have a significant correlation between them. Both those variables should be from same population and they should be categorical like − Yes/No, Male/Female, Red/Green etc.|||For example, we can build a data set with observations on people's ice-cream buying pattern and try to correlate the gender of a person with the flavor of the ice-cream they prefer. If a correlation is found we can plan for appropriate stock of flavors by knowing the number of gender of people visiting.|||The function used for performing chi-Square test is chisq.test().|||The basic syntax for creating a chi-square test in R is −|||Following is the description of the parameters used −|||data is the data in form of a table containing the count value of the variables in the observation.|||We will take the Cars93 data in the ""MASS"" library which represents the sales of different models of car in the year 1993.|||When we execute the above code, it produces the following result −|||The above result shows the dataset has many Factor variables which can be considered as categorical variables. For our model we will consider the variables ""AirBags"" and ""Type"". Here we aim to find out any significant correlation between the types of car sold and the type of Air bags it has. If correlation is observed we can estimate which types of cars can sell better with what types of air bags.|||When we execute the above code, it produces the following result −|||The result shows the p-value of less than 0.05 which indicates a string correlation.","A large group of individuals has contributed to R by sending code and bug reports.@@@Since mid-1997 there has been a core group (the ""R Core Team"") who can modify the R source code archive.|||R is a well-developed, simple and effective programming language which includes conditionals, loops, user defined recursive functions and input and output facilities.@@@R has an effective data handling and storage facility,@@@R provides a suite of operators for calculations on arrays, lists, vectors and matrices.@@@R provides a large, coherent and integrated collection of tools for data analysis.@@@R provides graphical facilities for data analysis and display either directly at the computer or printing at the papers.|||Vectors@@@Lists@@@Matrices@@@Arrays@@@Factors@@@Data Frames|||Arithmetic Operators@@@Relational Operators@@@Logical Operators@@@Assignment Operators@@@Miscellaneous Operators|||Function Name − This is the actual name of the function. It is stored in R environment as an object with this name.@@@Arguments − An argument is a placeholder. When a function is invoked, you pass a value to the argument. Arguments are optional; that is, a function may contain no arguments. Also arguments can have default values.@@@Function Body − The function body contains a collection of statements that defines what the function does.@@@Return Value − The return value of a function is the last expression in the function body to be evaluated.|||The quotes at the beginning and end of a string should be both double quotes or both single quote. They can not be mixed.@@@Double quotes can be inserted into a string starting and ending with single quote.@@@Single quote can be inserted into a string starting and ending with double quotes.@@@Double quotes can not be inserted into a string starting and ending with double quotes.@@@Single quote can not be inserted into a string starting and ending with single quote.|||... represents any number of arguments to be combined.@@@sep represents any separator between the arguments. It is optional.@@@collapse is used to eliminate the space in between two strings. But not the space within two words of one string.|||x is the vector input.@@@digits is the total number of digits displayed.@@@nsmall is the minimum number of digits to the right of the decimal point.@@@scientific is set to TRUE to display scientific notation.@@@width indicates the minimum width to be displayed by padding blanks in the beginning.@@@justify is the display of the string to left, right or center.|||x is the vector input.|||x is the vector input.|||x is the character vector input.@@@first is the position of the first character to be extracted.@@@last is the position of the last character to be extracted.|||data is the input vector which becomes the data elements of the matrix.@@@nrow is the number of rows to be created.@@@ncol is the number of columns to be created.@@@byrow is a logical clue. If TRUE then the input vector elements are arranged by row.@@@dimname is the names assigned to the rows and columns.|||x is an array.@@@margin is the name of the data set used.@@@fun is the function to be applied across the elements of the array.|||n is a integer giving the number of levels.@@@k is a integer giving the number of replications.@@@labels is a vector of labels for the resulting factor levels.|||The column names should be non-empty.@@@The row names should be unique.@@@The data stored in a data frame can be of numeric, factor or character type.@@@Each column should contain same number of data items.|||con is the connection object to read or write the binary file.@@@object is the binary file which to be written.@@@what is the mode like character, integer etc. representing the bytes to be read.@@@n is the number of bytes to read from the binary file.|||x is a vector containing the numeric values used in the pie chart.@@@labels is used to give description to the slices.@@@radius indicates the radius of the circle of the pie chart.(value between −1 and +1).@@@main indicates the title of the chart.@@@col indicates the color palette.@@@clockwise is a logical value indicating if the slices are drawn clockwise or anti clockwise.|||H is a vector or matrix containing numeric values used in bar chart.@@@xlab is the label for x axis.@@@ylab is the label for y axis.@@@main is the title of the bar chart.@@@names.arg is a vector of names appearing under each bar.@@@col is used to give colors to the bars in the graph.|||x is a vector or a formula.@@@data is the data frame.@@@notch is a logical value. Set as TRUE to draw a notch.@@@varwidth is a logical value. Set as true to draw width of the box proportionate to the sample size.@@@names are the group labels which will be printed under each boxplot.@@@main is used to give a title to the graph.|||v is a vector containing numeric values used in histogram.@@@main indicates title of the chart.@@@col is used to set color of the bars.@@@border is used to set border color of each bar.@@@xlab is used to give description of x-axis.@@@xlim is used to specify the range of values on the x-axis.@@@ylim is used to specify the range of values on the y-axis.@@@breaks is used to mention the width of each bar.|||v is a vector containing the numeric values.@@@type takes the value ""p"" to draw only the points, ""l"" to draw only the lines and ""o"" to draw both points and lines.@@@xlab is the label for x axis.@@@ylab is the label for y axis.@@@main is the Title of the chart.@@@col is used to give colors to both the points and lines.|||x is the data set whose values are the horizontal coordinates.@@@y is the data set whose values are the vertical coordinates.@@@main is the tile of the graph.@@@xlab is the label in the horizontal axis.@@@ylab is the label in the vertical axis.@@@xlim is the limits of the values of x used for plotting.@@@ylim is the limits of the values of y used for plotting.@@@axes indicates whether both axes should be drawn on the plot.|||formula represents the series of variables used in pairs.@@@data represents the data set from which the variables will be taken.|||x is the input vector.@@@trim is used to drop some observations from both end of the sorted vector.@@@na.rm is used to remove the missing values from the input vector.|||x is the input vector.@@@na.rm is used to remove the missing values from the input vector.|||y is the response variable.@@@x is the predictor variable.@@@a and b are constants which are called the coefficients.|||Carry out the experiment of gathering a sample of observed values of height and corresponding weight.@@@Create a relationship model using the lm() functions in R.@@@Find the coefficients from the model created and create the mathematical equation using these@@@Get a summary of the relationship model to know the average error in prediction. Also called residuals.@@@To predict the weight of new persons, use the predict() function in R.|||formula is a symbol presenting the relation between x and y.@@@data is the vector on which the formula will be applied.|||object is the formula which is already created using the lm() function.@@@newdata is the vector containing the new value for predictor variable.|||y is the response variable.@@@a, b1, b2...bn are the coefficients.@@@x1, x2, ...xn are the predictor variables.|||formula is a symbol presenting the relation between the response variable and predictor variables.@@@data is the vector on which the formula will be applied.|||y is the response variable.@@@x is the predictor variable.@@@a and b are the coefficients which are numeric constants.|||formula is the symbol presenting the relationship between the variables.@@@data is the data set giving the values of these variables.@@@family is R object to specify the details of the model. It's value is binomial for logistic regression.|||x is a vector of numbers.@@@p is a vector of probabilities.@@@n is number of observations(sample size).@@@mean is the mean value of the sample data. It's default value is zero.@@@sd is the standard deviation. It's default value is 1.|||x is a vector of numbers.@@@p is a vector of probabilities.@@@n is number of observations.@@@size is the number of trials.@@@prob is the probability of success of each trial.|||y is the response variable.@@@a and b are the numeric coefficients.@@@x is the predictor variable.|||formula is the symbol presenting the relationship between the variables.@@@data is the data set giving the values of these variables.@@@family is R object to specify the details of the model. It's value is 'Poisson' for Logistic Regression.|||data is a vector or matrix containing the values used in the time series.@@@start specifies the start time for the first observation in time series.@@@end specifies the end time for the last observation in time series.@@@frequency specifies the number of observations per unit time.|||frequency = 12 pegs the data points for every month of a year.@@@frequency = 4 pegs the data points for every quarter of a year.@@@frequency = 6 pegs the data points for every 10 minutes of an hour.@@@frequency = 24*6 pegs the data points for every 10 minutes of a day.|||formula is a nonlinear model formula including variables and parameters.@@@data is a data frame used to evaluate the variables in the formula.@@@start is a named list or named numeric vector of starting estimates.|||formula is a formula describing the predictor and response variables.@@@data is the name of the data set used.|||formula is a formula describing the predictor and response variables.@@@data is the name of the data set used.|||time is the follow up time until the event occurs.@@@event indicates the status of occurrence of the expected event.@@@formula is the relationship between the predictor variables.|||data is the data in form of a table containing the count value of the variables in the observation.",,"Data Type@@@Example@@@Verify|||Logical@@@TRUE, FALSE@@@

 Live Demo


v <- TRUE 
print(class(v))

it produces the following result −

[1] ""logical"" 

|||Numeric@@@12.3, 5, 999@@@

 Live Demo


v <- 23.5
print(class(v))

it produces the following result −

[1] ""numeric""

|||Integer@@@2L, 34L, 0L@@@

 Live Demo


v <- 2L
print(class(v))

it produces the following result −

[1] ""integer""

|||Complex@@@3 + 2i@@@

 Live Demo


v <- 2+5i
print(class(v))

it produces the following result −

[1] ""complex""

|||Character@@@'a' , '""good"", ""TRUE"", '23.4'@@@

 Live Demo


v <- ""TRUE""
print(class(v))

it produces the following result −

[1] ""character""

|||Raw@@@""Hello"" is stored as 48 65 6c 6c 6f@@@

 Live Demo


v <- charToRaw(""Hello"")
print(class(v))

it produces the following result −

[1] ""raw"" 

&&&Variable Name@@@Validity@@@Reason|||var_name2.@@@valid@@@Has letters, numbers, dot and underscore|||var_name%@@@Invalid@@@Has the character '%'. Only dot(.) and underscore allowed.|||2var_name@@@invalid@@@Starts with a number|||.var_name,
var.name@@@valid@@@Can start with a dot(.) but the dot(.)should not be followed by a number.|||.2var_name@@@invalid@@@The starting dot is followed by a number making it invalid.|||_var_name@@@invalid@@@Starts with _ which is not valid&&&Operator@@@Description@@@Example|||+@@@Adds two vectors@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v+t)

it produces the following result −

[1] 10.0  8.5  10.0

|||−@@@Subtracts second vector from the first@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v-t)

it produces the following result −

[1] -6.0  2.5  2.0

|||*@@@Multiplies both vectors@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v*t)

it produces the following result −

[1] 16.0 16.5 24.0

|||/@@@Divide the first vector with the second@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v/t)

When we execute the above code, it produces the following result −

[1] 0.250000 1.833333 1.500000

|||%%@@@Give the remainder of the first vector with the second@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v%%t)

it produces the following result −

[1] 2.0 2.5 2.0

|||%/%@@@The result of division of first vector with second (quotient)@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v%/%t)

it produces the following result −

[1] 0 1 1

|||^@@@The first vector raised to the exponent of second vector@@@

 Live Demo


v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v^t)

it produces the following result −

[1]  256.000  166.375 1296.000

&&&Operator@@@Description@@@Example|||>@@@Checks if each element of the first vector is greater than the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v>t)

it produces the following result −

[1] FALSE  TRUE FALSE FALSE

|||<@@@Checks if each element of the first vector is less than the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v < t)

it produces the following result −

[1]  TRUE FALSE  TRUE FALSE

|||==@@@Checks if each element of the first vector is equal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v == t)

it produces the following result −

[1] FALSE FALSE FALSE  TRUE

|||<=@@@Checks if each element of the first vector is less than or equal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v<=t)

it produces the following result −

[1]  TRUE FALSE  TRUE  TRUE

|||>=@@@Checks if each element of the first vector is greater than or equal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v>=t)

it produces the following result −

[1] FALSE  TRUE FALSE  TRUE

|||!=@@@Checks if each element of the first vector is unequal to the corresponding element of the second vector.@@@

 Live Demo


v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v!=t)

it produces the following result −

[1]  TRUE  TRUE  TRUE FALSE

&&&Operator@@@Description@@@Example|||&@@@It is called Element-wise Logical AND operator. It combines each element of the first vector with the corresponding element of the second vector and gives a output TRUE if both the elements are TRUE.@@@

 Live Demo


v <- c(3,1,TRUE,2+3i)
t <- c(4,1,FALSE,2+3i)
print(v&t)

it produces the following result −

[1]  TRUE  TRUE FALSE  TRUE

||||@@@It is called Element-wise Logical OR operator. It combines each element of the first vector with the corresponding element of the second vector and gives a output TRUE if one the elements is TRUE.@@@

 Live Demo


v <- c(3,0,TRUE,2+2i)
t <- c(4,0,FALSE,2+3i)
print(v|t)

it produces the following result −

[1]  TRUE FALSE  TRUE  TRUE

|||!@@@It is called Logical NOT operator. Takes each element of the vector and gives the opposite logical value.@@@

 Live Demo


v <- c(3,0,TRUE,2+2i)
print(!v)

it produces the following result −

[1] FALSE  TRUE FALSE FALSE

&&&Operator@@@Description@@@Example|||&&@@@Called Logical AND operator. Takes first element of both the vectors and gives the TRUE only if both are TRUE.@@@

 Live Demo


v <- c(3,0,TRUE,2+2i)
t <- c(1,3,TRUE,2+3i)
print(v&&t)

it produces the following result −

[1] TRUE

|||||@@@Called Logical OR operator. Takes first element of both the vectors and gives the TRUE if one of them is TRUE.@@@

 Live Demo


v <- c(0,0,TRUE,2+2i)
t <- c(0,3,TRUE,2+3i)
print(v||t)

it produces the following result −

[1] FALSE

&&&Operator@@@Description@@@Example|||
<−
or
=
or
<<−
@@@Called Left Assignment@@@

 Live Demo


v1 <- c(3,1,TRUE,2+3i)
v2 <<- c(3,1,TRUE,2+3i)
v3 = c(3,1,TRUE,2+3i)
print(v1)
print(v2)
print(v3)

it produces the following result −

[1] 3+0i 1+0i 1+0i 2+3i
[1] 3+0i 1+0i 1+0i 2+3i
[1] 3+0i 1+0i 1+0i 2+3i

|||
->
or
->>@@@Called Right Assignment @@@

 Live Demo


c(3,1,TRUE,2+3i) -> v1
c(3,1,TRUE,2+3i) ->> v2 
print(v1)
print(v2)

it produces the following result −

[1] 3+0i 1+0i 1+0i 2+3i
[1] 3+0i 1+0i 1+0i 2+3i

&&&Operator@@@Description@@@Example|||:@@@Colon operator. It creates the series of numbers in sequence for a vector.@@@

 Live Demo


v <- 2:8
print(v) 

it produces the following result −

[1] 2 3 4 5 6 7 8

|||%in%@@@This operator is used to identify if an element belongs to a vector.@@@

 Live Demo


v1 <- 8
v2 <- 12
t <- 1:10
print(v1 %in% t) 
print(v2 %in% t) 

it produces the following result −

[1] TRUE
[1] FALSE

|||%*%@@@This operator is used to multiply a matrix with its transpose.@@@

 Live Demo


M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
print(t)

it produces the following result −

      [,1] [,2]
[1,]   65   82
[2,]   82  117

&&&Sr.No.@@@Statement & Description|||1@@@
if statement
An if statement consists of a Boolean expression followed by one or more statements.
|||2@@@
if...else statement
An if statement can be followed by an optional else statement, which executes when the Boolean expression is false.
|||3@@@
switch statement
A switch statement allows a variable to be tested for equality against a list of values.
&&&Sr.No.@@@Loop Type & Description|||1@@@
repeat loop
Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.
|||2@@@
while loop
Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.
|||3@@@
for loop
Like a while statement, except that it tests the condition at the end of the loop body.
&&&Sr.No.@@@Control Statement & Description|||1@@@
break statement
Terminates the loop statement and transfers execution to the statement immediately following the loop.
|||2@@@
Next statement
The next statement simulates the behavior of R switch.
","> install.packages(""plotrix"")|||> myString <- ""Hello, World!""> print ( myString)[1] ""Hello, World!""|||# My first program in R ProgrammingmyString <- ""Hello, World!""print ( myString)|||if(FALSE) {   ""This is a demo for multi-line comments and it should be put inside either a       single OR double quote""}myString <- ""Hello, World!""print ( myString)|||v <- TRUE print(class(v))|||v <- 23.5print(class(v))|||v <- 2Lprint(class(v))|||v <- 2+5iprint(class(v))|||v <- ""TRUE""print(class(v))|||v <- charToRaw(""Hello"")print(class(v))|||# Create a vector.apple <- c('red','green',""yellow"")print(apple)# Get the class of the vector.print(class(apple))|||# Create a list.list1 <- list(c(2,5,3),21.3,sin)# Print the list.print(list1)|||# Create a matrix.M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)print(M)|||# Create an array.a <- array(c('green','yellow'),dim = c(3,3,2))print(a)|||# Create a vector.apple_colors <- c('green','green','yellow','red','red','red','green')# Create a factor object.factor_apple <- factor(apple_colors)# Print the factor.print(factor_apple)print(nlevels(factor_apple))|||# Create the data frame.BMI <- 	data.frame(   gender = c(""Male"", ""Male"",""Female""),    height = c(152, 171.5, 165),    weight = c(81,93, 78),   Age = c(42,38,26))print(BMI)|||# Assignment using equal operator.var.1 = c(0,1,2,3)           # Assignment using leftward operator.var.2 <- c(""learn"",""R"")   # Assignment using rightward operator.   c(TRUE,1) -> var.3           print(var.1)cat (""var.1 is "", var.1 ,""\n"")cat (""var.2 is "", var.2 ,""\n"")cat (""var.3 is "", var.3 ,""\n"")|||var_x <- ""Hello""cat(""The class of var_x is "",class(var_x),""\n"")var_x <- 34.5cat(""  Now the class of var_x is "",class(var_x),""\n"")var_x <- 27Lcat(""   Next the class of var_x becomes "",class(var_x),""\n"")|||print(ls())|||# List the variables starting with the pattern ""var"".print(ls(pattern = ""var""))   |||print(ls(all.name = TRUE))|||rm(var.3)print(var.3)|||rm(list = ls())print(ls())|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v+t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v-t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v*t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v/t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v%%t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v%/%t)|||v <- c( 2,5.5,6)t <- c(8, 3, 4)print(v^t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v>t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v < t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v == t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v<=t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v>=t)|||v <- c(2,5.5,6,9)t <- c(8,2.5,14,9)print(v!=t)|||v <- c(3,1,TRUE,2+3i)t <- c(4,1,FALSE,2+3i)print(v&t)|||v <- c(3,0,TRUE,2+2i)t <- c(4,0,FALSE,2+3i)print(v|t)|||v <- c(3,0,TRUE,2+2i)print(!v)|||v <- c(3,0,TRUE,2+2i)t <- c(1,3,TRUE,2+3i)print(v&&t)|||v <- c(0,0,TRUE,2+2i)t <- c(0,3,TRUE,2+3i)print(v||t)|||v1 <- c(3,1,TRUE,2+3i)v2 <<- c(3,1,TRUE,2+3i)v3 = c(3,1,TRUE,2+3i)print(v1)print(v2)print(v3)|||c(3,1,TRUE,2+3i) -> v1c(3,1,TRUE,2+3i) ->> v2 print(v1)print(v2)|||v <- 2:8print(v) |||v1 <- 8v2 <- 12t <- 1:10print(v1 %in% t) print(v2 %in% t) |||M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)t = M %*% t(M)print(t)|||# Create a sequence of numbers from 32 to 44.print(seq(32,44))# Find mean of numbers from 25 to 82.print(mean(25:82))# Find sum of numbers frm 41 to 68.print(sum(41:68))|||# Create a function to print squares of numbers in sequence.new.function <- function(a) {   for(i in 1:a) {      b <- i^2      print(b)   }}	|||# Create a function to print squares of numbers in sequence.new.function <- function(a) {   for(i in 1:a) {      b <- i^2      print(b)   }}# Call the function new.function supplying 6 as an argument.new.function(6)|||# Create a function without an argument.new.function <- function() {   for(i in 1:5) {      print(i^2)   }}	# Call the function without supplying an argument.new.function()|||# Create a function with arguments.new.function <- function(a,b,c) {   result <- a * b + c   print(result)}# Call the function by position of arguments.new.function(5,3,11)# Call the function by names of the arguments.new.function(a = 11, b = 5, c = 3)|||# Create a function with arguments.new.function <- function(a = 3, b = 6) {   result <- a * b   print(result)}# Call the function without giving any argument.new.function()# Call the function with giving new values of the argument.new.function(9,5)|||# Create a function with arguments.new.function <- function(a, b) {   print(a^2)   print(a)   print(b)}# Evaluate the function without supplying one of the arguments.new.function(6)|||a <- 'Start and end with single quote'print(a)b <- ""Start and end with double quotes""print(b)c <- ""single quote ' in between double quotes""print(c)d <- 'Double quotes "" in between single quote'print(d)|||e <- 'Mixed quotes"" print(e)f <- 'Single quote ' inside single quote'print(f)g <- ""Double quotes "" inside double quotes""print(g)|||a <- ""Hello""b <- 'How'c <- ""are you? ""print(paste(a,b,c))print(paste(a,b,c, sep = ""-""))print(paste(a,b,c, sep = """", collapse = """"))|||# Total number of digits displayed. Last digit rounded off.result <- format(23.123456789, digits = 9)print(result)# Display numbers in scientific notation.result <- format(c(6, 13.14521), scientific = TRUE)print(result)# The minimum number of digits to the right of the decimal point.result <- format(23.47, nsmall = 5)print(result)# Format treats everything as a string.result <- format(6)print(result)# Numbers are padded with blank in the beginning for width.result <- format(13.7, width = 6)print(result)# Left justify strings.result <- format(""Hello"", width = 8, justify = ""l"")print(result)# Justfy string with center.result <- format(""Hello"", width = 8, justify = ""c"")print(result)|||result <- nchar(""Count the number of characters"")print(result)|||# Changing to Upper case.result <- toupper(""Changing To Upper"")print(result)# Changing to lower case.result <- tolower(""Changing To Lower"")print(result)|||# Extract characters from 5th to 7th position.result <- substring(""Extract"", 5, 7)print(result)|||# Atomic vector of type character.print(""abc"");# Atomic vector of type double.print(12.5)# Atomic vector of type integer.print(63L)# Atomic vector of type logical.print(TRUE)# Atomic vector of type complex.print(2+3i)# Atomic vector of type raw.print(charToRaw('hello'))|||# Creating a sequence from 5 to 13.v <- 5:13print(v)# Creating a sequence from 6.6 to 12.6.v <- 6.6:12.6print(v)# If the final element specified does not belong to the sequence then it is discarded.v <- 3.8:11.4print(v)|||# Create vector with elements from 5 to 9 incrementing by 0.4.print(seq(5, 9, by = 0.4))|||# The logical and numeric values are converted to characters.s <- c('apple','red',5,TRUE)print(s)|||# Accessing vector elements using position.t <- c(""Sun"",""Mon"",""Tue"",""Wed"",""Thurs"",""Fri"",""Sat"")u <- t[c(2,3,6)]print(u)# Accessing vector elements using logical indexing.v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]print(v)# Accessing vector elements using negative indexing.x <- t[c(-2,-5)]print(x)# Accessing vector elements using 0/1 indexing.y <- t[c(0,0,0,0,0,0,1)]print(y)|||# Create two vectors.v1 <- c(3,8,4,5,0,11)v2 <- c(4,11,0,8,1,2)# Vector addition.add.result <- v1+v2print(add.result)# Vector subtraction.sub.result <- v1-v2print(sub.result)# Vector multiplication.multi.result <- v1*v2print(multi.result)# Vector division.divi.result <- v1/v2print(divi.result)|||v1 <- c(3,8,4,5,0,11)v2 <- c(4,11)# V2 becomes c(4,11,4,11,4,11)add.result <- v1+v2print(add.result)sub.result <- v1-v2print(sub.result)|||v <- c(3,8,4,5,0,11, -9, 304)# Sort the elements of the vector.sort.result <- sort(v)print(sort.result)# Sort the elements in the reverse order.revsort.result <- sort(v, decreasing = TRUE)print(revsort.result)# Sorting character vectors.v <- c(""Red"",""Blue"",""yellow"",""violet"")sort.result <- sort(v)print(sort.result)# Sorting character vectors in reverse order.revsort.result <- sort(v, decreasing = TRUE)print(revsort.result)|||# Create a list containing strings, numbers, vectors and a logical# values.list_data <- list(""Red"", ""Green"", c(21,32,11), TRUE, 51.23, 119.1)print(list_data)|||# Create a list containing a vector, a matrix and a list.list_data <- list(c(""Jan"",""Feb"",""Mar""), matrix(c(3,9,5,1,-2,8), nrow = 2),   list(""green"",12.3))# Give names to the elements in the list.names(list_data) <- c(""1st Quarter"", ""A_Matrix"", ""A Inner list"")# Show the list.print(list_data)|||# Create a list containing a vector, a matrix and a list.list_data <- list(c(""Jan"",""Feb"",""Mar""), matrix(c(3,9,5,1,-2,8), nrow = 2),   list(""green"",12.3))# Give names to the elements in the list.names(list_data) <- c(""1st Quarter"", ""A_Matrix"", ""A Inner list"")# Access the first element of the list.print(list_data[1])# Access the thrid element. As it is also a list, all its elements will be printed.print(list_data[3])# Access the list element using the name of the element.print(list_data$A_Matrix)|||# Create a list containing a vector, a matrix and a list.list_data <- list(c(""Jan"",""Feb"",""Mar""), matrix(c(3,9,5,1,-2,8), nrow = 2),   list(""green"",12.3))# Give names to the elements in the list.names(list_data) <- c(""1st Quarter"", ""A_Matrix"", ""A Inner list"")# Add element at the end of the list.list_data[4] <- ""New element""print(list_data[4])# Remove the last element.list_data[4] <- NULL# Print the 4th Element.print(list_data[4])# Update the 3rd Element.list_data[3] <- ""updated element""print(list_data[3])|||# Create two lists.list1 <- list(1,2,3)list2 <- list(""Sun"",""Mon"",""Tue"")# Merge the two lists.merged.list <- c(list1,list2)# Print the merged list.print(merged.list)|||# Create lists.list1 <- list(1:5)print(list1)list2 <-list(10:14)print(list2)# Convert the lists to vectors.v1 <- unlist(list1)v2 <- unlist(list2)print(v1)print(v2)# Now add the vectorsresult <- v1+v2print(result)|||# Elements are arranged sequentially by row.M <- matrix(c(3:14), nrow = 4, byrow = TRUE)print(M)# Elements are arranged sequentially by column.N <- matrix(c(3:14), nrow = 4, byrow = FALSE)print(N)# Define the column and row names.rownames = c(""row1"", ""row2"", ""row3"", ""row4"")colnames = c(""col1"", ""col2"", ""col3"")P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))print(P)|||# Define the column and row names.rownames = c(""row1"", ""row2"", ""row3"", ""row4"")colnames = c(""col1"", ""col2"", ""col3"")# Create the matrix.P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))# Access the element at 3rd column and 1st row.print(P[1,3])# Access the element at 2nd column and 4th row.print(P[4,2])# Access only the  2nd row.print(P[2,])# Access only the 3rd column.print(P[,3])|||# Create two 2x3 matrices.matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)print(matrix1)matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)print(matrix2)# Add the matrices.result <- matrix1 + matrix2cat(""Result of addition"",""\n"")print(result)# Subtract the matricesresult <- matrix1 - matrix2cat(""Result of subtraction"",""\n"")print(result)|||# Create two 2x3 matrices.matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)print(matrix1)matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)print(matrix2)# Multiply the matrices.result <- matrix1 * matrix2cat(""Result of multiplication"",""\n"")print(result)# Divide the matricesresult <- matrix1 / matrix2cat(""Result of division"",""\n"")print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)# Take these vectors as input to the array.result <- array(c(vector1,vector2),dim = c(3,3,2))print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)column.names <- c(""COL1"",""COL2"",""COL3"")row.names <- c(""ROW1"",""ROW2"",""ROW3"")matrix.names <- c(""Matrix1"",""Matrix2"")# Take these vectors as input to the array.result <- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names,column.names,   matrix.names))print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)column.names <- c(""COL1"",""COL2"",""COL3"")row.names <- c(""ROW1"",""ROW2"",""ROW3"")matrix.names <- c(""Matrix1"",""Matrix2"")# Take these vectors as input to the array.result <- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names,   column.names, matrix.names))# Print the third row of the second matrix of the array.print(result[3,,2])# Print the element in the 1st row and 3rd column of the 1st matrix.print(result[1,3,1])# Print the 2nd Matrix.print(result[,,2])|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)# Take these vectors as input to the array.array1 <- array(c(vector1,vector2),dim = c(3,3,2))# Create two vectors of different lengths.vector3 <- c(9,1,0)vector4 <- c(6,0,11,3,14,1,2,6,9)array2 <- array(c(vector1,vector2),dim = c(3,3,2))# create matrices from these arrays.matrix1 <- array1[,,2]matrix2 <- array2[,,2]# Add the matrices.result <- matrix1+matrix2print(result)|||# Create two vectors of different lengths.vector1 <- c(5,9,3)vector2 <- c(10,11,12,13,14,15)# Take these vectors as input to the array.new.array <- array(c(vector1,vector2),dim = c(3,3,2))print(new.array)# Use apply to calculate the sum of the rows across all the matrices.result <- apply(new.array, c(1), sum)print(result)|||# Create a vector as input.data <- c(""East"",""West"",""East"",""North"",""North"",""East"",""West"",""West"",""West"",""East"",""North"")print(data)print(is.factor(data))# Apply the factor function.factor_data <- factor(data)print(factor_data)print(is.factor(factor_data))|||# Create the vectors for data frame.height <- c(132,151,162,139,166,147,122)weight <- c(48,49,66,53,67,52,40)gender <- c(""male"",""male"",""female"",""female"",""male"",""female"",""male"")# Create the data frame.input_data <- data.frame(height,weight,gender)print(input_data)# Test if the gender column is a factor.print(is.factor(input_data$gender))# Print the gender column so see the levels.print(input_data$gender)|||data <- c(""East"",""West"",""East"",""North"",""North"",""East"",""West"",   ""West"",""West"",""East"",""North"")# Create the factorsfactor_data <- factor(data)print(factor_data)# Apply the factor function with required order of the level.new_order_data <- factor(factor_data,levels = c(""East"",""West"",""North""))print(new_order_data)|||v <- gl(3, 4, labels = c(""Tampa"", ""Seattle"",""Boston""))print(v)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Print the data frame.			print(emp.data) |||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Get the structure of the data frame.str(emp.data)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Print the summary.print(summary(emp.data))  |||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),   emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),      start_date = as.Date(c(""2012-01-01"",""2013-09-23"",""2014-11-15"",""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Extract Specific columns.result <- data.frame(emp.data$emp_name,emp.data$salary)print(result)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),   emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),      start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Extract first two rows.result <- emp.data[1:2,]print(result)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),    	start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Extract 3rd and 5th row with 2nd and 4th column.result <- emp.data[c(3,5),c(2,4)]print(result)|||# Create the data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   stringsAsFactors = FALSE)# Add the ""dept"" coulmn.emp.data$dept <- c(""IT"",""Operations"",""IT"",""HR"",""Finance"")v <- emp.dataprint(v)|||# Create the first data frame.emp.data <- data.frame(   emp_id = c (1:5),    emp_name = c(""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary""),   salary = c(623.3,515.2,611.0,729.0,843.25),       start_date = as.Date(c(""2012-01-01"", ""2013-09-23"", ""2014-11-15"", ""2014-05-11"",      ""2015-03-27"")),   dept = c(""IT"",""Operations"",""IT"",""HR"",""Finance""),   stringsAsFactors = FALSE)# Create the second data frameemp.newdata <- 	data.frame(   emp_id = c (6:8),    emp_name = c(""Rasmi"",""Pranab"",""Tusar""),   salary = c(578.0,722.5,632.8),    start_date = as.Date(c(""2013-05-21"",""2013-07-30"",""2014-06-17"")),   dept = c(""IT"",""Operations"",""Fianance""),   stringsAsFactors = FALSE)# Bind the two data frames.emp.finaldata <- rbind(emp.data,emp.newdata)print(emp.finaldata)|||.libPaths()|||library()|||search()|||install.packages(file_name_with_path, repos = NULL, type = ""source"")# Install the package named ""XML""install.packages(""E:/XML_3.98-1.3.zip"", repos = NULL, type = ""source"")|||# Create vector objects.city <- c(""Tampa"",""Seattle"",""Hartford"",""Denver"")state <- c(""FL"",""WA"",""CT"",""CO"")zipcode <- c(33602,98104,06161,80294)# Combine above three vectors into one data frame.addresses <- cbind(city,state,zipcode)# Print a header.cat(""# # # # The First data frame\n"") # Print the data frame.print(addresses)# Create another data frame with similar columnsnew.address <- data.frame(   city = c(""Lowry"",""Charlotte""),   state = c(""CO"",""FL""),   zipcode = c(""80230"",""33949""),   stringsAsFactors = FALSE)# Print a header.cat(""# # # The Second data frame\n"") # Print the data frame.print(new.address)# Combine rows form both the data frames.all.addresses <- rbind(addresses,new.address)# Print a header.cat(""# # # The combined data frame\n"") # Print the result.print(all.addresses)|||library(MASS)merged.Pima <- merge(x = Pima.te, y = Pima.tr,   by.x = c(""bp"", ""bmi""),   by.y = c(""bp"", ""bmi""))print(merged.Pima)nrow(merged.Pima)|||library(MASS)print(ships)|||molten.ships <- melt(ships, id = c(""type"",""year""))print(molten.ships)|||recasted.ship <- cast(molten.ships, type+year~variable,sum)print(recasted.ship)|||# Get and print current working directory.print(getwd())# Set current working directory.setwd(""/web/com"")# Get and print current working directory.print(getwd())|||id,name,salary,start_date,dept1,Rick,623.3,2012-01-01,IT2,Dan,515.2,2013-09-23,Operations3,Michelle,611,2014-11-15,IT4,Ryan,729,2014-05-11,HR5,Gary,843.25,2015-03-27,Finance6,Nina,578,2013-05-21,IT7,Simon,632.8,2013-07-30,Operations8,Guru,722.5,2014-06-17,Finance|||data <- read.csv(""input.csv"")print(data)|||data <- read.csv(""input.csv"")print(is.data.frame(data))print(ncol(data))print(nrow(data))|||# Create a data frame.data <- read.csv(""input.csv"")# Get the max salary from data frame.sal <- max(data$salary)print(sal)|||# Create a data frame.data <- read.csv(""input.csv"")# Get the max salary from data frame.sal <- max(data$salary)# Get the person detail having max salary.retval <- subset(data, salary == max(salary))print(retval)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset( data, dept == ""IT"")print(retval)|||# Create a data frame.data <- read.csv(""input.csv"")info <- subset(data, salary > 600 & dept == ""IT"")print(info)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset(data, as.Date(start_date) > as.Date(""2014-01-01""))print(retval)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset(data, as.Date(start_date) > as.Date(""2014-01-01""))# Write filtered data into a new file.write.csv(retval,""output.csv"")newdata <- read.csv(""output.csv"")print(newdata)|||# Create a data frame.data <- read.csv(""input.csv"")retval <- subset(data, as.Date(start_date) > as.Date(""2014-01-01""))# Write filtered data into a new file.write.csv(retval,""output.csv"", row.names = FALSE)newdata <- read.csv(""output.csv"")print(newdata)|||# Verify the package is installed.any(grepl(""xlsx"",installed.packages()))# Load the library into R workspace.library(""xlsx"")|||# Read the first worksheet in the file input.xlsx.data <- read.xlsx(""input.xlsx"", sheetIndex = 1)print(data)|||# Read the ""mtcars"" data frame as a csv file and store only the columns    ""cyl"", ""am"" and ""gear"".write.table(mtcars, file = ""mtcars.csv"",row.names = FALSE, na = """",    col.names = TRUE, sep = "","")# Store 5 records from the csv file as a new data frame.new.mtcars <- read.table(""mtcars.csv"",sep = "","",header = TRUE,nrows = 5)# Create a connection object to write the binary file using mode ""wb"".write.filename = file(""/web/com/binmtcars.dat"", ""wb"")# Write the column names of the data frame to the connection object.writeBin(colnames(new.mtcars), write.filename)# Write the records in each of the column to the file.writeBin(c(new.mtcars$cyl,new.mtcars$am,new.mtcars$gear), write.filename)# Close the file for writing so that it can be read by other program.close(write.filename)|||# Create a connection object to read the file in binary mode using ""rb"".read.filename <- file(""/web/com/binmtcars.dat"", ""rb"")# First read the column names. n = 3 as we have 3 columns.column.names <- readBin(read.filename, character(),  n = 3)# Next read the column values. n = 18 as we have 3 column names and 15 values.read.filename <- file(""/web/com/binmtcars.dat"", ""rb"")bindata <- readBin(read.filename, integer(),  n = 18)# Print the data.print(bindata)# Read the values from 4th byte to 8th byte which represents ""cyl"".cyldata = bindata[4:8]print(cyldata)# Read the values form 9th byte to 13th byte which represents ""am"".amdata = bindata[9:13]print(amdata)# Read the values form 9th byte to 13th byte which represents ""gear"".geardata = bindata[14:18]print(geardata)# Combine all the read values to a dat frame.finaldata = cbind(cyldata, amdata, geardata)colnames(finaldata) = column.namesprint(finaldata)|||<RECORDS>   <EMPLOYEE>      <ID>1</ID>      <NAME>Rick</NAME>      <SALARY>623.3</SALARY>      <STARTDATE>1/1/2012</STARTDATE>      <DEPT>IT</DEPT>   </EMPLOYEE>	   <EMPLOYEE>      <ID>2</ID>      <NAME>Dan</NAME>      <SALARY>515.2</SALARY>      <STARTDATE>9/23/2013</STARTDATE>      <DEPT>Operations</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>3</ID>      <NAME>Michelle</NAME>      <SALARY>611</SALARY>      <STARTDATE>11/15/2014</STARTDATE>      <DEPT>IT</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>4</ID>      <NAME>Ryan</NAME>      <SALARY>729</SALARY>      <STARTDATE>5/11/2014</STARTDATE>      <DEPT>HR</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>5</ID>      <NAME>Gary</NAME>      <SALARY>843.25</SALARY>      <STARTDATE>3/27/2015</STARTDATE>      <DEPT>Finance</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>6</ID>      <NAME>Nina</NAME>      <SALARY>578</SALARY>      <STARTDATE>5/21/2013</STARTDATE>      <DEPT>IT</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>7</ID>      <NAME>Simon</NAME>      <SALARY>632.8</SALARY>      <STARTDATE>7/30/2013</STARTDATE>      <DEPT>Operations</DEPT>   </EMPLOYEE>      <EMPLOYEE>      <ID>8</ID>      <NAME>Guru</NAME>      <SALARY>722.5</SALARY>      <STARTDATE>6/17/2014</STARTDATE>      <DEPT>Finance</DEPT>   </EMPLOYEE>	</RECORDS>|||# Load the package required to read XML files.library(""XML"")# Also load the other required package.library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Print the result.print(result)|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Exract the root node form the xml file.rootnode <- xmlRoot(result)# Find number of nodes in the root.rootsize <- xmlSize(rootnode)# Print the result.print(rootsize)|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Exract the root node form the xml file.rootnode <- xmlRoot(result)# Print the result.print(rootnode[1])|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Give the input file name to the function.result <- xmlParse(file = ""input.xml"")# Exract the root node form the xml file.rootnode <- xmlRoot(result)# Get the first element of the first node.print(rootnode[[1]][[1]])# Get the fifth element of the first node.print(rootnode[[1]][[5]])# Get the second element of the third node.print(rootnode[[3]][[2]])|||# Load the packages required to read XML files.library(""XML"")library(""methods"")# Convert the input xml file to a data frame.xmldataframe <- xmlToDataFrame(""input.xml"")print(xmldataframe)|||{    ""ID"":[""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"" ],   ""Name"":[""Rick"",""Dan"",""Michelle"",""Ryan"",""Gary"",""Nina"",""Simon"",""Guru"" ],   ""Salary"":[""623.3"",""515.2"",""611"",""729"",""843.25"",""578"",""632.8"",""722.5"" ],      ""StartDate"":[ ""1/1/2012"",""9/23/2013"",""11/15/2014"",""5/11/2014"",""3/27/2015"",""5/21/2013"",      ""7/30/2013"",""6/17/2014""],   ""Dept"":[ ""IT"",""Operations"",""IT"",""HR"",""Finance"",""IT"",""Operations"",""Finance""]}|||# Load the package required to read JSON files.library(""rjson"")# Give the input file name to the function.result <- fromJSON(file = ""input.json"")# Print the result.print(result)|||# Load the package required to read JSON files.library(""rjson"")# Give the input file name to the function.result <- fromJSON(file = ""input.json"")# Convert JSON file to a data frame.json_data_frame <- as.data.frame(result)print(json_data_frame)|||# Read the URL.url <- ""http://www.geos.ed.ac.uk/~weather/jcmb_ws/""# Gather the html links present in the webpage.links <- getHTMLLinks(url)# Identify only the links which point to the JCMB 2015 files. filenames <- links[str_detect(links, ""JCMB_2015"")]# Store the file names as a list.filenames_list <- as.list(filenames)# Create a function to download the files by passing the URL and filename list.downloadcsv <- function (mainurl,filename) {   filedetails <- str_c(mainurl,filename)   download.file(filedetails,filename)}# Now apply the l_ply function and save the files into the current R working directory.l_ply(filenames,downloadcsv,mainurl = ""http://www.geos.ed.ac.uk/~weather/jcmb_ws/"")|||install.packages(""RMySQL"")|||# Create a connection Object to MySQL database.# We will connect to the sampel database named ""sakila"" that comes with MySql installation.mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',   host = 'localhost')# List the tables available in this database. dbListTables(mysqlconnection)|||# Query the ""actor"" tables to get all the rows.result = dbSendQuery(mysqlconnection, ""select * from actor"")# Store the result in a R data frame object. n = 5 is used to fetch first 5 rows.data.frame = fetch(result, n = 5)print(data.fame)|||result = dbSendQuery(mysqlconnection, ""select * from actor where last_name = 'TORN'"")# Fetch all the records(with n = -1) and store it as a data frame.data.frame = fetch(result, n = -1)print(data)|||dbSendQuery(mysqlconnection, ""update mtcars set disp = 168.5 where hp = 110"")|||dbSendQuery(mysqlconnection,   ""insert into mtcars(row_names, mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)   values('New Mazda RX4 Wag', 21, 6, 168.5, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4)"")|||# Create the connection object to the database where we want to create the table.mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',    host = 'localhost')# Use the R data frame ""mtcars"" to create the table in MySql.# All the rows of mtcars are taken inot MySql.dbWriteTable(mysqlconnection, ""mtcars"", mtcars[, ], overwrite = TRUE)|||dbSendQuery(mysqlconnection, 'drop table if exists mtcars')|||# Create data for the graph.x <- c(21, 62, 10, 53)labels <- c(""London"", ""New York"", ""Singapore"", ""Mumbai"")# Give the chart file a name.png(file = ""city.png"")# Plot the chart.pie(x,labels)# Save the file.dev.off()|||# Create data for the graph.x <- c(21, 62, 10, 53)labels <- c(""London"", ""New York"", ""Singapore"", ""Mumbai"")# Give the chart file a name.png(file = ""city_title_colours.jpg"")# Plot the chart with title and rainbow color pallet.pie(x, labels, main = ""City pie chart"", col = rainbow(length(x)))# Save the file.dev.off()|||# Create data for the graph.x <-  c(21, 62, 10,53)labels <-  c(""London"",""New York"",""Singapore"",""Mumbai"")piepercent<- round(100*x/sum(x), 1)# Give the chart file a name.png(file = ""city_percentage_legends.jpg"")# Plot the chart.pie(x, labels = piepercent, main = ""City pie chart"",col = rainbow(length(x)))legend(""topright"", c(""London"",""New York"",""Singapore"",""Mumbai""), cex = 0.8,   fill = rainbow(length(x)))# Save the file.dev.off()|||# Get the library.library(plotrix)# Create data for the graph.x <-  c(21, 62, 10,53)lbl <-  c(""London"",""New York"",""Singapore"",""Mumbai"")# Give the chart file a name.png(file = ""3d_pie_chart.jpg"")# Plot the chart.pie3D(x,labels = lbl,explode = 0.1, main = ""Pie Chart of Countries "")# Save the file.dev.off()|||# Create the data for the chartH <- c(7,12,28,3,41)# Give the chart file a namepng(file = ""barchart.png"")# Plot the bar chart barplot(H)# Save the filedev.off()|||# Create the data for the chartH <- c(7,12,28,3,41)M <- c(""Mar"",""Apr"",""May"",""Jun"",""Jul"")# Give the chart file a namepng(file = ""barchart_months_revenue.png"")# Plot the bar chart barplot(H,names.arg=M,xlab=""Month"",ylab=""Revenue"",col=""blue"",main=""Revenue chart"",border=""red"")# Save the filedev.off()|||# Create the input vectors.colors = c(""green"",""orange"",""brown"")months <- c(""Mar"",""Apr"",""May"",""Jun"",""Jul"")regions <- c(""East"",""West"",""North"")# Create the matrix of the values.Values <- matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow = 3, ncol = 5, byrow = TRUE)# Give the chart file a namepng(file = ""barchart_stacked.png"")# Create the bar chartbarplot(Values, main = ""total revenue"", names.arg = months, xlab = ""month"", ylab = ""revenue"", col = colors)# Add the legend to the chartlegend(""topleft"", regions, cex = 1.3, fill = colors)# Save the filedev.off()|||input <- mtcars[,c('mpg','cyl')]print(head(input))|||# Give the chart file a name.png(file = ""boxplot.png"")# Plot the chart.boxplot(mpg ~ cyl, data = mtcars, xlab = ""Number of Cylinders"",   ylab = ""Miles Per Gallon"", main = ""Mileage Data"")# Save the file.dev.off()|||# Give the chart file a name.png(file = ""boxplot_with_notch.png"")# Plot the chart.boxplot(mpg ~ cyl, data = mtcars,    xlab = ""Number of Cylinders"",   ylab = ""Miles Per Gallon"",    main = ""Mileage Data"",   notch = TRUE,    varwidth = TRUE,    col = c(""green"",""yellow"",""purple""),   names = c(""High"",""Medium"",""Low""))# Save the file.dev.off()|||# Create data for the graph.v <-  c(9,13,21,8,36,22,12,41,31,33,19)# Give the chart file a name.png(file = ""histogram.png"")# Create the histogram.hist(v,xlab = ""Weight"",col = ""yellow"",border = ""blue"")# Save the file.dev.off()|||# Create data for the graph.v <- c(9,13,21,8,36,22,12,41,31,33,19)# Give the chart file a name.png(file = ""histogram_lim_breaks.png"")# Create the histogram.hist(v,xlab = ""Weight"",col = ""green"",border = ""red"", xlim = c(0,40), ylim = c(0,5),   breaks = 5)# Save the file.dev.off()|||# Create the data for the chart.v <- c(7,12,28,3,41)# Give the chart file a name.png(file = ""line_chart.jpg"")# Plot the bar chart. plot(v,type = ""o"")# Save the file.dev.off()|||# Create the data for the chart.v <- c(7,12,28,3,41)# Give the chart file a name.png(file = ""line_chart_label_colored.jpg"")# Plot the bar chart.plot(v,type = ""o"", col = ""red"", xlab = ""Month"", ylab = ""Rain fall"",   main = ""Rain fall chart"")# Save the file.dev.off()|||# Create the data for the chart.v <- c(7,12,28,3,41)t <- c(14,7,6,19,3)# Give the chart file a name.png(file = ""line_chart_2_lines.jpg"")# Plot the bar chart.plot(v,type = ""o"",col = ""red"", xlab = ""Month"", ylab = ""Rain fall"",    main = ""Rain fall chart"")lines(t, type = ""o"", col = ""blue"")# Save the file.dev.off()|||input <- mtcars[,c('wt','mpg')]print(head(input))|||# Get the input values.input <- mtcars[,c('wt','mpg')]# Give the chart file a name.png(file = ""scatterplot.png"")# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.plot(x = input$wt,y = input$mpg,   xlab = ""Weight"",   ylab = ""Milage"",   xlim = c(2.5,5),   ylim = c(15,30),		    main = ""Weight vs Milage"")	 # Save the file.dev.off()|||# Give the chart file a name.png(file = ""scatterplot_matrices.png"")# Plot the matrices between 4 variables giving 12 plots.# One variable with 3 others and total 4 variables.pairs(~wt+mpg+disp+cyl,data = mtcars,   main = ""Scatterplot Matrix"")# Save the file.dev.off()|||# Create a vector. x <- c(12,7,3,4.2,18,2,54,-21,8,-5)# Find Mean.result.mean <- mean(x)print(result.mean)|||# Create a vector.x <- c(12,7,3,4.2,18,2,54,-21,8,-5)# Find Mean.result.mean <-  mean(x,trim = 0.3)print(result.mean)|||# Create a vector. x <- c(12,7,3,4.2,18,2,54,-21,8,-5,NA)# Find mean.result.mean <-  mean(x)print(result.mean)# Find mean dropping NA values.result.mean <-  mean(x,na.rm = TRUE)print(result.mean)|||# Create the vector.x <- c(12,7,3,4.2,18,2,54,-21,8,-5)# Find the median.median.result <- median(x)print(median.result)|||# Create the function.getmode <- function(v) {   uniqv <- unique(v)   uniqv[which.max(tabulate(match(v, uniqv)))]}# Create the vector with numbers.v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)# Calculate the mode using the user function.result <- getmode(v)print(result)# Create the vector with characters.charv <- c(""o"",""it"",""the"",""it"",""it"")# Calculate the mode using the user function.result <- getmode(charv)print(result)|||x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)# Apply the lm() function.relation <- lm(y~x)print(relation)|||x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)# Apply the lm() function.relation <- lm(y~x)print(summary(relation))|||# The predictor vector.x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)# The resposne vector.y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)# Apply the lm() function.relation <- lm(y~x)# Find weight of a person with height 170.a <- data.frame(x = 170)result <-  predict(relation,a)print(result)|||# Create the predictor and response variable.x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)relation <- lm(y~x)# Give the chart file a name.png(file = ""linearregression.png"")# Plot the chart.plot(y,x,col = ""blue"",main = ""Height & Weight Regression"",abline(lm(x~y)),cex = 1.3,pch = 16,xlab = ""Weight in Kg"",ylab = ""Height in cm"")# Save the file.dev.off()|||input <- mtcars[,c(""mpg"",""disp"",""hp"",""wt"")]print(head(input))|||input <- mtcars[,c(""mpg"",""disp"",""hp"",""wt"")]# Create the relationship model.model <- lm(mpg~disp+hp+wt, data = input)# Show the model.print(model)# Get the Intercept and coefficients as vector elements.cat(""# # # # The Coefficient Values # # # "",""\n"")a <- coef(model)[1]print(a)Xdisp <- coef(model)[2]Xhp <- coef(model)[3]Xwt <- coef(model)[4]print(Xdisp)print(Xhp)print(Xwt)|||# Select some columns form mtcars.input <- mtcars[,c(""am"",""cyl"",""hp"",""wt"")]print(head(input))|||input <- mtcars[,c(""am"",""cyl"",""hp"",""wt"")]am.data = glm(formula = am ~ cyl + hp + wt, data = input, family = binomial)print(summary(am.data))|||# Create a sequence of numbers between -10 and 10 incrementing by 0.1.x <- seq(-10, 10, by = .1)# Choose the mean as 2.5 and standard deviation as 0.5.y <- dnorm(x, mean = 2.5, sd = 0.5)# Give the chart file a name.png(file = ""dnorm.png"")plot(x,y)# Save the file.dev.off()|||# Create a sequence of numbers between -10 and 10 incrementing by 0.2.x <- seq(-10,10,by = .2) # Choose the mean as 2.5 and standard deviation as 2. y <- pnorm(x, mean = 2.5, sd = 2)# Give the chart file a name.png(file = ""pnorm.png"")# Plot the graph.plot(x,y)# Save the file.dev.off()|||# Create a sequence of probability values incrementing by 0.02.x <- seq(0, 1, by = 0.02)# Choose the mean as 2 and standard deviation as 3.y <- qnorm(x, mean = 2, sd = 1)# Give the chart file a name.png(file = ""qnorm.png"")# Plot the graph.plot(x,y)# Save the file.dev.off()|||# Create a sample of 50 numbers which are normally distributed.y <- rnorm(50)# Give the chart file a name.png(file = ""rnorm.png"")# Plot the histogram for this sample.hist(y, main = ""Normal DIstribution"")# Save the file.dev.off()|||# Create a sample of 50 numbers which are incremented by 1.x <- seq(0,50,by = 1)# Create the binomial distribution.y <- dbinom(x,50,0.5)# Give the chart file a name.png(file = ""dbinom.png"")# Plot the graph for this sample.plot(x,y)# Save the file.dev.off()|||# Probability of getting 26 or less heads from a 51 tosses of a coin.x <- pbinom(26,51,0.5)print(x)|||# How many heads will have a probability of 0.25 will come out when a coin# is tossed 51 times.x <- qbinom(0.25,51,1/2)print(x)|||# Find 8 random values from a sample of 150 with probability of 0.4.x <- rbinom(8,150,.4)print(x)|||input <- warpbreaksprint(head(input))|||output <-glm(formula = breaks ~ wool+tension, data = warpbreaks,   family = poisson)print(summary(output))|||input <- mtcars[,c(""am"",""mpg"",""hp"")]print(head(input))|||# Get the dataset.input <- mtcars# Create the regression model.result <- aov(mpg~hp*am,data = input)print(summary(result))|||# Get the dataset.input <- mtcars# Create the regression model.result <- aov(mpg~hp+am,data = input)print(summary(result))|||# Get the dataset.input <- mtcars# Create the regression models.result1 <- aov(mpg~hp*am,data = input)result2 <- aov(mpg~hp+am,data = input)# Compare the two models.print(anova(result1,result2))|||# Get the data points in form of a R vector.rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)# Convert it to a time series object.rainfall.timeseries <- ts(rainfall,start = c(2012,1),frequency = 12)# Print the timeseries data.print(rainfall.timeseries)# Give the chart file a name.png(file = ""rainfall.png"")# Plot a graph of the time series.plot(rainfall.timeseries)# Save the file.dev.off()|||# Get the data points in form of a R vector.rainfall1 <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)rainfall2 <-            c(655,1306.9,1323.4,1172.2,562.2,824,822.4,1265.5,799.6,1105.6,1106.7,1337.8)# Convert them to a matrix.combined.rainfall <-  matrix(c(rainfall1,rainfall2),nrow = 12)# Convert it to a time series object.rainfall.timeseries <- ts(combined.rainfall,start = c(2012,1),frequency = 12)# Print the timeseries data.print(rainfall.timeseries)# Give the chart file a name.png(file = ""rainfall_combined.png"")# Plot a graph of the time series.plot(rainfall.timeseries, main = ""Multiple Time Series"")# Save the file.dev.off()|||xvalues <- c(1.6,2.1,2,2.23,3.71,3.25,3.4,3.86,1.19,2.21)yvalues <- c(5.19,7.43,6.94,8.11,18.75,14.88,16.06,19.12,3.21,7.58)# Give the chart file a name.png(file = ""nls.png"")# Plot these values.plot(xvalues,yvalues)# Take the assumed values and fit into the model.model <- nls(yvalues ~ b1*xvalues^2+b2,start = list(b1 = 1,b2 = 3))# Plot the chart with new data by fitting it to a prediction from 100 data points.new.data <- data.frame(xvalues = seq(min(xvalues),max(xvalues),len = 100))lines(new.data$xvalues,predict(model,newdata = new.data))# Save the file.dev.off()# Get the sum of the squared residuals.print(sum(resid(model)^2))# Get the confidence intervals on the chosen values of the coefficients.print(confint(model))|||# Load the party package. It will automatically load other# dependent packages.library(party)# Print some records from data set readingSkills.print(head(readingSkills))|||# Load the party package. It will automatically load other# dependent packages.library(party)# Create the input data frame.input.dat <- readingSkills[c(1:105),]# Give the chart file a name.png(file = ""decision_tree.png"")# Create the tree.  output.tree <- ctree(  nativeSpeaker ~ age + shoeSize + score,   data = input.dat)# Plot the tree.plot(output.tree)# Save the file.dev.off()|||# Load the party package. It will automatically load other# required packages.library(party)# Print some records from data set readingSkills.print(head(readingSkills))|||# Load the party package. It will automatically load other# required packages.library(party)library(randomForest)# Create the forest.output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score,            data = readingSkills)# View the forest results.print(output.forest) # Importance of each predictor.print(importance(fit,type = 2)) |||# Load the library.library(""survival"")# Print first few rows.print(head(pbc))|||# Load the library.library(""survival"")# Create the survival object. survfit(Surv(pbc$time,pbc$status == 2)~1)# Give the chart file a name.png(file = ""survival.png"")# Plot the graph. plot(survfit(Surv(pbc$time,pbc$status == 2)~1))# Save the file.dev.off()|||library(""MASS"")print(str(Cars93))|||# Load the library.library(""MASS"")# Create a data frame from the main data set.car.data <- data.frame(Cars93$AirBags, Cars93$Type)# Create a table with the needed variables.car.data = table(Cars93$AirBags, Cars93$Type) print(car.data)# Perform the Chi-Square test.print(chisq.test(car.data))"
Learn R Programming,R - Useful Resources,R - Useful Resources|||Useful Video Courses@@@Useful eBooks|||R Programming Online Training@@@Linear programming@@@Data Visualization using R Programming@@@A-Frame Web VR Programming Tutorial Series (Virtual Reality)@@@Data Analytics using R Programming@@@R Programming Language@@@Computer Programming Tutorial@@@Learning R Programming@@@Modern R Programming Cookbook@@@R Programming By Example@@@Practical Remote  Pair Programming,The following resources contain additional information on R. Please use them to get more in-depth knowledge on this topic.,,,,
Learn R Programming,Discuss R,Discuss R|||Useful Video Courses|||JCL Online Training@@@DB2 Online Training@@@COBOL Online Training@@@Email Marketing Online Training@@@Mainframe Online Training@@@CRO Online Training,"R is a programming language and software environment for statistical analysis, graphics representation and reporting. R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is currently developed by the R Development Core Team. R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems like Linux, Windows and Mac. This programming language was named R, based on the first letter of first name of the two R authors (Robert Gentleman and Ross Ihaka), and partly a play on the name of the Bell Labs Language S.",,,,
