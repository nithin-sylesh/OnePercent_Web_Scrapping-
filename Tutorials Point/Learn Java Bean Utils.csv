Course,Chapters,ALL Headings,Paragraphs,Unordered List Items,Ordered List Items,Tables,Code Examples
Learn Java Bean Utils,Java BeanUtils Tutorial,Java BeanUtils Tutorial@@@Audience@@@Prerequisites|||Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The Java BeanUtils are the components of the Apache Commons which are derived from JavaAPI and provides component architecture for the Java language. The Java BeanUtils design patterns uses utility classes that helps to get and set the property values on Java classes for retrieving and defining the bean properties.|||This tutorial covers most of the topics required for a basic understanding of Java BeanUtils and to get a feel of how it works.|||This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java BeanUtils.|||Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages.",,,,
Learn Java Bean Utils,Java BeanUtils - Overview,Java BeanUtils - Overview|||Description@@@JavaBeans Characteristics@@@External Dependencies@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The Java BeanUtils are the components of the Apache Commons which are derived from JavaAPI and provides component architecture for the Java language. The Java BeanUtils design patterns uses utility classes that helps to get and set the property values on Java classes for retrieving and defining the bean properties.|||The package org.apache.commons.beanutils contains tool called introspection that facilitates the use of getting and setting property values on Java classes and display them in a visual manner in the development tools.|||The below listed are important characteristics of JavaBeans which are useful in the development structure:|||The class should be public and gives a public constructor with no arguments. It allows tools and applications to create new instances of the bean dynamically, without knowing what type of Java class name will be used as shown below:|||The constructor which does not have arguments whose bean's behavior can be configured separately from its instantiation. This can be achieved by using properties of the bean and also used to modify its behavior or data which are displayed by the bean.|||The bean property contains setter and getter methods which are used to access the property values. The design pattern for these properties can be specified by using the set or get prefix for the property names along with the first character capitalized by using the JavaBeans specification. For instance, you can use setter and getter methods for the properties first_name and last_name as shown below:|||If there are getter and setter methods for the property names, then the getter should match the setter datatype. In JavaBean specification, you can have more than one setter with same name, but with different property types.|||There is no need to define the getter and setter methods for each property. In the above code, there is no setter method for fullName property and it is only a read only property.|||You can create a JavaBean where there is no match for naming pattern by using the getter and setter methods. The JavaBean support classes in the Java language and BeanUtils package to specify the property method names in the BeanInfo class along with the bean class.|||The JavaBeans specification provides design patterns for event listeners, combines JavaBeans into component hierarchies and other helpful features of the BeanUtils package.|||You can use the following external dependencies for the commons-beanutils package:|||Logging Package|||Collections Package","The class should be public and gives a public constructor with no arguments. It allows tools and applications to create new instances of the bean dynamically, without knowing what type of Java class name will be used as shown below:

String className = ...;
Class beanClass = Class.forName(className);
Object beanInstance = beanClass.newInstance();

@@@The constructor which does not have arguments whose bean's behavior can be configured separately from its instantiation. This can be achieved by using properties of the bean and also used to modify its behavior or data which are displayed by the bean.@@@The bean property contains setter and getter methods which are used to access the property values. The design pattern for these properties can be specified by using the set or get prefix for the property names along with the first character capitalized by using the JavaBeans specification. For instance, you can use setter and getter methods for the properties first_name and last_name as shown below:

public class Employee {
   public Employee();   // Zero-arguments constructor
   public String getFirstName();
   public void setFirstName(String first_name);
   public String getLastName();
   public void setLastName(String last_name);
   public String getFullName();
}

@@@If there are getter and setter methods for the property names, then the getter should match the setter datatype. In JavaBean specification, you can have more than one setter with same name, but with different property types.@@@There is no need to define the getter and setter methods for each property. In the above code, there is no setter method for fullName property and it is only a read only property.@@@You can create a JavaBean where there is no match for naming pattern by using the getter and setter methods. The JavaBean support classes in the Java language and BeanUtils package to specify the property method names in the BeanInfo class along with the bean class.@@@The JavaBeans specification provides design patterns for event listeners, combines JavaBeans into component hierarchies and other helpful features of the BeanUtils package.|||Logging Package@@@Collections Package",,,String className = ...;Class beanClass = Class.forName(className);Object beanInstance = beanClass.newInstance();|||public class Employee {   public Employee();   // Zero-arguments constructor   public String getFirstName();   public void setFirstName(String first_name);   public String getLastName();   public void setLastName(String last_name);   public String getFullName();}
Learn Java Bean Utils,Java BeanUtils - Background,Java BeanUtils - Background|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The standard JavaBeans of Java language can be used to access the property values of beans using the proper getter methods. The Java language supplies the java.beans.Introspector class to inspect a Java class at runtime. This indicates the property names of getter and setter methods along with the Reflection abilities to call such methods dynamically. You can make use of getting and setting bean properties dynamically by using the API's in the BeanUtils package.|||The JavaBean property types are divided into three types (Some property types are supported by the JavaBeans specification and some are supported by the BeanUtils package):|||Simple: The simple properties contain single value which can be retrieved or altered. You can use property type like Java language primitive such as int, a simple object such as java.lang.String, or complex object which is specified either by using the Java language, an application, or a class library with the application.|||Indexed: An ordered collection of objects can be stored in the indexed property which can be accessed individually by using an integer-valued, non-negative index or subscript. The BeanUtils package includes datatype called java.util.List must be indexed in the JavaBeans specification.|||Mapped: The BeanUtils package contains datatype called java.util.Map which should be mapped in the standard JavaBeans APIs and the individual values can be set and accessed by using a String-valued key.|||You can get and set the property values for the datatypes by using the API methods specified in the PropertyUtils class. Consider the below code snippet of two bean classes defined with getter and setter methods:","Simple: The simple properties contain single value which can be retrieved or altered. You can use property type like Java language primitive such as int, a simple object such as java.lang.String, or complex object which is specified either by using the Java language, an application, or a class library with the application.@@@Indexed: An ordered collection of objects can be stored in the indexed property which can be accessed individually by using an integer-valued, non-negative index or subscript. The BeanUtils package includes datatype called java.util.List must be indexed in the JavaBeans specification.@@@Mapped: The BeanUtils package contains datatype called java.util.Map which should be mapped in the standard JavaBeans APIs and the individual values can be set and accessed by using a String-valued key.",,,"public class Employee {   public FullName getFullName();   public void setFullName(String type, FullName fullname);   public Employee getSubordinate(int index);   public void setSubordinate(int index, Employee subordinate);   public String getFirstName();   public void setFirstName(String first_name);   public String getLastName();   public void setLastName(String last_name);}"
Learn Java Bean Utils,Java BeanUtils - Basic Property Access,Java BeanUtils - Basic Property Access|||Description@@@Example@@@Output@@@Useful Video Courses|||Simple Property@@@Indexed Property@@@Mapped Property|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"You can access the basic properties by using the following ways:|||Simple Property|||Indexed Property|||Mapped Property|||You can get and set the simple property values by using the below API signatures:|||PropertyUtils.getSimpleProperty(Object, String)|||PropertyUtils.SetSimpleProperty(Object, String, Object)|||Parameters:|||Object: It is a bean object that specifies the bean property to be extracted.|||String: It is a string name that specifies the name of the property to be extracted.|||You can use two options for creating indexed properties; first option is building the subscript into property name and second option is defining the subscript in a separate argument to call the method.|||The indexed properties can be get and set by using the below methods:|||PropertyUtils.getIndexedProperty(Object, String)|||PropertyUtils.getIndexedProperty(Object, String, int)|||PropertyUtils.setIndexedProperty(Object, String, Object)|||PropertyUtils.setIndexedProperty(Object, String, int, Object)|||Parameters:|||Object: It is a bean object that specifies the bean property to be extracted.|||String: It is a string name that specifies the name of the property to be extracted.|||int: It sets an index of the property value.|||Object: It specifies the value for an indexed property element.|||You can get and set the mapped property values by using the below API signatures. If you have any extra argument, then it can be written within parentheses as (""("" and "")"") instead of using square brackets.|||PropertyUtils.getMappedProperty(Object, String)|||PropertyUtils.getMappedProperty(Object, String, String)|||PropertyUtils.setMappedProperty(Object, String, Object)|||PropertyUtils.setMappedProperty(Object, String, String, Object)|||Parameters:|||Object: It is a bean object that specifies the bean property to be extracted.|||String: It is a name of the property value that should be set for Mapped property.|||String: It defines the key of the property value to be set.|||Object: It specifies the value of property to be set.|||The below example demonstrates use of above properties in the beanUtils:|||Now we will create one more class called MyBean.java for the bean class:|||Let's carry out the following steps to see how above code works:|||Save the above first code as BeanUtilsPropertyDemo.java.|||Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.","Simple Property@@@Indexed Property@@@Mapped Property|||PropertyUtils.getSimpleProperty(Object, String)@@@PropertyUtils.SetSimpleProperty(Object, String, Object)|||Object: It is a bean object that specifies the bean property to be extracted.@@@String: It is a string name that specifies the name of the property to be extracted.|||PropertyUtils.getIndexedProperty(Object, String)@@@PropertyUtils.getIndexedProperty(Object, String, int)@@@PropertyUtils.setIndexedProperty(Object, String, Object)@@@PropertyUtils.setIndexedProperty(Object, String, int, Object)|||Object: It is a bean object that specifies the bean property to be extracted.@@@String: It is a string name that specifies the name of the property to be extracted.@@@int: It sets an index of the property value.@@@Object: It specifies the value for an indexed property element.|||PropertyUtils.getMappedProperty(Object, String)@@@PropertyUtils.getMappedProperty(Object, String, String)@@@PropertyUtils.setMappedProperty(Object, String, Object)@@@PropertyUtils.setMappedProperty(Object, String, String, Object)|||Object: It is a bean object that specifies the bean property to be extracted.@@@String: It is a name of the property value that should be set for Mapped property.@@@String: It defines the key of the property value to be set.@@@Object: It specifies the value of property to be set.|||Save the above first code as BeanUtilsPropertyDemo.java.@@@Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.",,,"import org.apache.commons.beanutils.PropertyUtils;import java.util.ArrayList;import java.util.List;public class BeanUtilsPropertyDemo{   public static void main(String args[]){   try{      // Creating the bean and allows to access getter and setter properties      MyBean myBean = new MyBean();      // Setting the properties on the myBean      PropertyUtils.setSimpleProperty(myBean, ""stringProp"", ""Hello!This is a string"");      PropertyUtils.setSimpleProperty(myBean, ""floatProp"", new Float(25.20));      // Getting the simple properties      System.out.println(""String Property: "" + PropertyUtils.getSimpleProperty(myBean, ""stringProp""));      System.out.println(""Float Property: "" + PropertyUtils.getSimpleProperty(myBean, ""floatProp""));      // Here we will create a list for the indexed property      List list = new ArrayList();      list.add(""String value 0"");      list.add(""String value 1"");      myBean.setListProp(list);      // get and set this indexed property      PropertyUtils.setIndexedProperty(myBean, ""listProp[1]"", ""This is new string value 1"");      System.out.println(""List Property[1]: "" + PropertyUtils.getIndexedProperty(myBean, ""listProp[1]""));   }catch(Exception e){      System.out.println(e);   }   }}|||import java.util.ArrayList;import java.util.List;public class MyBean {   private String stringProp;   private float floatProp;   //indexed property   @SuppressWarnings(""rawtypes"")   private List listProp = new ArrayList();   public void setStringProp(String stringProp) { this.stringProp = stringProp; }   public String getStringProp() { return this.stringProp; }   public void setFloatProp(float floatProp) { this.floatProp = floatProp; }   public float getFloatProp() { return this.floatProp; }   public void setListProp(List<?> listProp) { this.listProp = listProp; }   public List<?> getListProp() { return this.listProp; }	}"
Learn Java Bean Utils,Java BeanUtils - Nested Property Access,Java BeanUtils - Nested Property Access|||Description@@@Example@@@Output@@@PropertyUtils Method Signatures@@@Example@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"You can access the value of nested property of the bean by concatenating the property names of the access path by using ""."" separators.|||You can get and set the values of Nested property by using the below methods:|||PropertyUtils.getNestedProperty(Object, String)|||PropertyUtils.setNestedProperty(Object, String, Object)|||Parameters:|||Object: It is a bean whose property to be obtained or modified.|||String: It is a name of the nested property to be obtained or modified.|||In this example, you'll see how to get and set the values of nested property. We will be creating three classes; SubBean, AppLayer1Bean for beans and BeanUtilsDemo as a main program to run.|||Now we will create another class called SubBean.java as shown below:|||Create the one more class AppLayer1Bean.java along with the below code:|||Let's carry out the following steps to see how above code works:|||Save the above first code as BeanUtilsDemo.java.|||Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.|||The following methods are provided by the PropertyUtils class, which accepts any arbitrary combinations of simple, indexed and mapped property access to get and set the value of the property of the specified bean.|||PropertyUtils.getProperty(Object, String)|||PropertyUtils.setProperty(Object, String, Object)|||Parameters:|||Object: It is a bean whose property to be obtained or modified.|||String: It is a name of the indexed and/or nested property to be obtained or modified.|||The following simple program illustrates the use of getProperty and setProperty methods:|||Run the code as specified in the above example and you would get the below output:","PropertyUtils.getNestedProperty(Object, String)@@@PropertyUtils.setNestedProperty(Object, String, Object)|||Object: It is a bean whose property to be obtained or modified.@@@String: It is a name of the nested property to be obtained or modified.|||Save the above first code as BeanUtilsDemo.java.@@@Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.|||PropertyUtils.getProperty(Object, String)@@@PropertyUtils.setProperty(Object, String, Object)|||Object: It is a bean whose property to be obtained or modified.@@@String: It is a name of the indexed and/or nested property to be obtained or modified.",,,"import org.apache.commons.beanutils.PropertyUtils;public class BeanUtilsDemo {    public static void main(String args[]){        try{            // create the bean            AppLayer1Bean nested = new AppLayer1Bean();            // set a SubBean which is part of another bean            SubBean sb = new SubBean();            sb.setStringProperty(""Hello World from SubBean"");            nested.setSubBean(sb);		            // accessing and setting nested properties            PropertyUtils.setNestedProperty(                nested, ""subBean.stringProperty"",                ""Hello World from SubBean, set via Nested Property Access"");			            System.out.println(                PropertyUtils.getNestedProperty(nested, ""subBean.stringProperty""));        }        catch(Exception e){            System.out.println(e);        }    }}|||public class SubBean {    private int intProperty;    private String stringProperty;	    public void setIntProperty(int intProperty) {         this.intProperty = intProperty;     }    public int getIntProperty() {        return this.intProperty;     }	    public void setStringProperty(String stringProperty) {         this.stringProperty = stringProperty;     }    public String getStringProperty() {         return this.stringProperty;     }}|||public class AppLayer1Bean {    private SubBean subBean;    public void setSubBean(SubBean subBean) {        this.subBean = subBean;    }    public SubBean getSubBean(){        return this.subBean;    }	}|||import org.apache.commons.beanutils.PropertyUtils;public class PropertyUtilsTest {    public static void main(String args[]){        try{            Tv Color = new Tv();            PropertyUtils.setProperty(Color, ""color"", ""Black"");            String value = (String) PropertyUtils.getProperty(Color, ""color"");            System.out.println(""The color value of Tv is: "" + value);        }        catch(Exception ex){            ex.printStackTrace();        }    }    public static class Tv{        private String color;	             public String getColor(){            return color;        }        public void setColor(String color){            this.color = color;        }    }}"
Learn Java Bean Utils,Java BeanUtils - Customizing Introspection,Java BeanUtils - Customizing Introspection|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The introspection tool can be used to learn about the properties and operations provided by your class. BeanUtils package is depending on JavaBeans specification that determines the available properties for a particular bean class.|||The introspection mechanism can be customized from version 1.9.0 onwards and enables an application to alter or extend the default discovery of bean properties. You can achieve this by using the BeanIntrospector interface. By implementing this interface, we are able to process a specific target class and create its equivalent PropertyDescriptor objects. By default, DefaultBeanIntrospector objects are used by BeanUtils for detecting properties that are matching with the JavaBeans specification.|||You can extend the default discovery mechanism by using the PropertyUtils.addBeanIntrospector(BeanIntrospector) method of PropertyUtils. This custom BeanIntrospector can be called in the time of introspection of a class and adds the detected properties to the final result.",,,,
Learn Java Bean Utils,Java BeanUtils - Suppressing Properties,Java BeanUtils - Suppressing Properties|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"You can suppress the specific properties by using the bean introspection mechanism. The specialized BeanIntrospector interface is implemented by the type called SuppressPropertiesBeanIntrospector which suppresses the special class properties of Java beans. The collection of property names need to be provided which are not accessible on the beans while creating an instance. If these properties are identified by the other BeanIntrospector, then they will be removed while bean class processing.|||You can use a special class property for suppressing the properties for all beans which is genearted from getClass() method and inherited from Object and uses naming pattern for property get methods. In most of situations, an instance of SuppressPropertiesBeanIntrospector can be used to suppress the specific properties and can be achieved by using the SUPPRESS_CLASS constant of SuppressPropertiesBeanIntrospector.",,,,
Learn Java Bean Utils,Java BeanUtils - Background (DynaBeans),Java BeanUtils - Background (DynaBeans)|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"You can give dynamic property access on the existing JavaBean classes without altering with the help of PropertyUtils class. The dynamically calculated property values as JavaBean can also represented by using dynamic property access without writing a Java class to render these properties. This feature will not only save your time, but also allows dealing with cases where set of properties are specified dynamically.|||The DynaBean interface is produced by the BeanUtils package which implements the interface's methods and DynaClass interface by defining set of properties which are supported by the group of DynaBeans. The java.lang.Class provides properties which are supported by JavaBean class instances.|||The below simple code snippet shows how to access the DynaBean properties:|||The getter and setter methods of PropertyUtils property can be used to access the properties in DynaBeans. For instance, the PropertyUtils.getSimpleProperty() method is a DynaBean implementation which will convert to suitable DynaBean getter method clearly when you make the call. Therefore dynamic property access of an application is based on the PropertyUtils APIs and can be used to retrieve either JavaBeans or DynaBeans.",,,,"DynaBean car = ...; // Details depend on which DynaBean implementation you useString companyName = (String) car.get(""companyName"");Model modelName = (Model) car.get(""model"");Object subordinate = car.get(""subordinate"", 2); "
Learn Java Bean Utils,Java BeanUtils - Basic DynaBeans,Java BeanUtils - Basic DynaBeans|||Description@@@Example@@@Output@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,The implementation of BasicDynaBean and BasicDynaClass specifies the capacity of dynamic property to provide the set of properties dynamically. You can start with DynaClass to establish the set of properties. A newInstance() method will create a new DynaBean instances to DynaClass and occupy its initial values as shown in the below example.|||The below example shows usage of basic DynaBean implementation:|||Let's carry out the following steps to see how above code works:|||Save the above first code as DynaBeanExample.java.|||Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.,Save the above first code as DynaBeanExample.java.@@@Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.,,,"package com.javadb.apachecommons;import org.apache.commons.beanutils.BasicDynaClass;import org.apache.commons.beanutils.DynaBean;import org.apache.commons.beanutils.DynaClass;import org.apache.commons.beanutils.DynaProperty;public class DynaBeanExample {   private final String NR_OF_WHEELS = ""numberOfWheels"";   private void runExample() {      DynaClass dynaClass = new BasicDynaClass(""Car"", null,         new DynaProperty[] {            new DynaProperty(NR_OF_WHEELS, Integer.TYPE)         });      try {         DynaBean car = dynaClass.newInstance();         car.set(NR_OF_WHEELS, 4);         System.out.println(""Number of wheels: "" + car.get(NR_OF_WHEELS));         System.out.println(""DynaBean is instance of DynaClass: "" + car.getDynaClass().getName());      } catch (IllegalAccessException | InstantiationException ex) {         System.err.println(ex.getMessage());      }   }   public static void main(String[] args) {      DynaBeanExample ac = new DynaBeanExample();      ac.runExample();   }} "
Learn Java Bean Utils,Java BeanUtils - ResultSetDynaClass,Java BeanUtils - ResultSetDynaClass|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,The ResultSet can be wrapped in the DynaBeans by using the ResultSetDynaClass which renders the results of SQL query as series of DynaBeans. The most commonly used collection is java.sql.ResultSet which is returned when JDBC driver uses SQL SELECT statement. The each row of result set can be made visible by using the Commons BeanUtils package.|||You can make use of the ResultSetDynaClass by using the DynaBean interface as shown in the below code snippet:,,,,"Connection conn = ...;Statement stmt = conn.createStatement();ResultSet res_set = stmt.executeQuery(""select first_name, last_name from student"");Iterator rows = (new ResultSetDynaClass(res_set)).iterator();while (rows.hasNext()) {   DynaBean row = (DynaBean) rows.next();   System.out.println(""First Name is:"" + row.get(""first_name"") + "" and Last Name is:"" + row.get(""last_name""));}rs.close();stmt.close();"
Learn Java Bean Utils,Java BeanUtils - RowSetDynaClass,Java BeanUtils - RowSetDynaClass|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The RowSetDynaClass copies the undisclosed data in the DynaBeans memory while creating an instance which displays the result and using this class, you can close the ResultSet data before proceeding the actual data that was returned. The drawback of this class is, you need to pay for the memory cost for copying the result data. It is more useful in the web application process.|||The main features of RowSetDynaClass are:|||It can be used to implement the java.io.Serializable (Serializable is an interface that does not contain any specific methods) to make classes serialized and deserialized.|||You can transfer the results of SQL query to remote Java based client application such as applet by using this class.|||The usage pattern of RowSetDynaClass will look like as shown below:",It can be used to implement the java.io.Serializable (Serializable is an interface that does not contain any specific methods) to make classes serialized and deserialized.@@@You can transfer the results of SQL query to remote Java based client application such as applet by using this class.,,,"Connection cn = ...;  // Obtain the connection Statement st = cn.createStatement();ResultSet rs = st.executeQuery(""SELECT ..."");RowSetDynaClass dc = new RowSetDynaClass(rs);rs.close();st.close();...;                    // Returns the connectionList rows = dc.getRows();...;                   // Processes the rows as desired"
Learn Java Bean Utils,Java BeanUtils - WrapDynaBean,Java BeanUtils - WrapDynaBean|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"As we have seen in the previous chapters, DynaBeans APIs provides get() and set() methods to access simple, indexed and mapped properties of DynaBeans dynamically. Instead of this, you can use the existing standard JavaBeans classes to access all beans by using the WrapDynaBean and WrapDynaClass. As the name itself indicates WrapDynaBean class is used to wrap the DynaBean APIs throughout the existing JavaBean class.|||To make use of the WrapDynaBean class, create the wrapper as shown in the below simple code:",,,,"BeanDemo bean = ...;DynaBean wrapper = new WrapDynaBean(bean);String yourName = wrapper.get(""yourName"");"
Learn Java Bean Utils,Java BeanUtils - Lazy DynaBeans,Java BeanUtils - Lazy DynaBeans|||Description@@@LazyDynaBean@@@LazyDynaMap@@@LazyDynaList@@@LazyDynaClass@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"Lazy DynaBeans is an implementation of DynaBean, which gives the characteristics of Lazy List and Lazy Map this connects the properties of DynaClass. There are four types of Lazy DynaBeans:|||LazyDynaBean: It specifies lazy DynaBean that provides dynamically modified properties of names and data types.|||LazyDynaMap: It gives light weight implementation of DynaBean to map by using lazy map or list system.|||LazyDynaList: It provides list for DynaBean, Map's or POJOS (Plain Old Java Object that specifies the normal java class).|||LazyDynaClass: It implements the MutableDynaClass interface.|||The following are the features of Lazy DynaBeans:|||Lazy property addition: It is used by the Lazy beans to add property to DynaClass automatically when set method is called and it has capability to add or remove the DynaClass's properties.|||Lazy List/Array growth: The Lazy list or array will grow automatically when an indexed property is not able to accommodate the index being set.|||Lazy List/Array instantiation: The indexed property getter and setter methods of DynaBean's results in lazy list or array instantiation, if there is no existence of an indexed property. If an indexed property is not defined, then it will be added automatically to DynaClass and default List implementation instantiated.|||Lazy Map instantiation: The mapped property getter and setter methods of DynaBean's results in lazy map instantiation, if there is no existence of mapped property. If mapped property is not defined, then it will be added automatically to DynaClass and default Map implementation instantiated.|||Lazy Bean instantiation: The LazyDynaBean will instantiates the bean using a default empty constructor, if DynaClass property is defined as DynaBean or regular bean and does not exist in the DynaBean.|||It is implementation of standard lazy bean which specifies the lazy DynaBean that provides dynamically modified properties of names and data types. It implements the MutableDynaClass interface by associating with the LazyDynaClass. The below simple code shows usage of LazyDynaBean by using getters or setters:|||It gives light weight implementation of DynaBean to map by using lazy map or list system and it does not associates with properties of DynaClass. It itself implements the DynaClass interface and obtain the information of DynaClass from the map contents. LazyDynaMap creates its own Map by instantiating it or can be generated around an existing Map.|||The below code shows creation of new map:|||The below code shows use of existing Map in DynaBean:|||It provides list for DynaBean, Map's or POJOS (Plain Old Java Object that specifies the normal java class). There are two main points of this class:|||It automatically grows and occupies the list with DynaBean, java.util.Map or POJOS to specify the Lazy List behavior.|||It provides easy way to put a Collection or Array into Lazy list and easy way to come out from the Lazy List.|||It implements the MutableDynaClass interface and extends the BasicDynaClass. It can be used as default DynaClass by LazyDynaBean and with other DynaBean implementations. There is nothing to with the DynaClass when you are using the LazyDynaBean.|||The below code creates the LazyDynaClass:|||The below code creates the LazyDynaBean and get the DynaClass:","LazyDynaBean: It specifies lazy DynaBean that provides dynamically modified properties of names and data types.@@@LazyDynaMap: It gives light weight implementation of DynaBean to map by using lazy map or list system.@@@LazyDynaList: It provides list for DynaBean, Map's or POJOS (Plain Old Java Object that specifies the normal java class).@@@LazyDynaClass: It implements the MutableDynaClass interface.|||Lazy property addition: It is used by the Lazy beans to add property to DynaClass automatically when set method is called and it has capability to add or remove the DynaClass's properties.@@@Lazy List/Array growth: The Lazy list or array will grow automatically when an indexed property is not able to accommodate the index being set.@@@Lazy List/Array instantiation: The indexed property getter and setter methods of DynaBean's results in lazy list or array instantiation, if there is no existence of an indexed property. If an indexed property is not defined, then it will be added automatically to DynaClass and default List implementation instantiated.@@@Lazy Map instantiation: The mapped property getter and setter methods of DynaBean's results in lazy map instantiation, if there is no existence of mapped property. If mapped property is not defined, then it will be added automatically to DynaClass and default Map implementation instantiated.@@@Lazy Bean instantiation: The LazyDynaBean will instantiates the bean using a default empty constructor, if DynaClass property is defined as DynaBean or regular bean and does not exist in the DynaBean.|||It automatically grows and occupies the list with DynaBean, java.util.Map or POJOS to specify the Lazy List behavior.@@@It provides easy way to put a Collection or Array into Lazy list and easy way to come out from the Lazy List.",,," DynaBean dynaBean = new LazyDynaBean(); dynaBean.set(""company"", ""Model"");            // simple  dynaBean.set(""customer"", ""fname"", ""Steve"");  // mapped dynaBean.set(""customer"", ""lname"", ""Smith"");  // mapped  dynaBean.set(""address"", 0, addressLine1);    // indexed dynaBean.set(""address"", 1, addressLine2);    // indexed||| DynaBean dynaBean = new LazyDynaBean(); DynaBean dynaBean = new LazyDynaMap();       // create DynaBean dynaBean.set(""company"", ""Model"");            // simple dynaBean.set(""customer"", ""fname"", ""Steve"");  // mapped dynaBean.set(""address"", 0, addressLine1);    // indexed Map demoMap = dynaBean.getMap()              // retrieve the Map||| Map demoMap = ....                               // exisitng Map DynaBean dynaBean = new LazyDynaMap(demoMap);    // wrap Map in DynaBean dynaBean.set(""ford"", ""raptor"");                  // set properties||| MutableDynaClass dynaClass = new LazyDynaClass();    // create DynaClass dynaClass.add(""price"", java.lang.Integer.class);     // add property dynaClass.add(""orders"", OrderBean[].class);          // add indexed property dynaClass.add(""orders"", java.util.TreeMapp.class);   // add mapped property DynaBean dynaBean = new LazyDynaBean(dynaClass);     // Create DynaBean with associated DynaClass||| DynaBean dynaBean = new LazyDynaBean();              	 // Create LazyDynaBean MutableDynaClass dynaClass =           (MutableDynaClass)dynaBean.getDynaClass();    // get DynaClass dynaClass.add(""price"", java.lang.Integer.class);         // add property dynaClass.add(""exBeans"", myPackage.MyBean[].class);      // add 'array' indexed property dynaClass.add(""exMap"", java.util.TreeMapp.class);        // add mapped property"
Learn Java Bean Utils,Java BeanUtils - Background (Data Type Conversions),Java BeanUtils - Background (Data Type Conversions)|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"Data type conversion is a process of changing value from one data type to another. In the previous chapters, dynamically accessed properties of data types are recognized and to achieve the type conversions, we can use Java casts. The BeanUtils package gives various types of APIs and design patterns for performing the data type conversions.",,,,
Learn Java Bean Utils,Java BeanUtils - BeanUtils and ConvertUtils,Java BeanUtils - BeanUtils and ConvertUtils|||Description@@@BeanUtils@@@Example@@@Output@@@ConvertUtils@@@Example@@@Output@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The BeanUtils is defined as a utility method for populating JavaBeans properties and ConvertUtils method converts string scalar values to objects, string arrays to arrays of the specified class.|||The BeanUtils accepts string values by using the setter methods and automatically converts them to suitable property types for Java primitives and uses the getter methods for reverse conversion. The populate() method accepts set of property values from java.util.HashMap and uses the suitable setters whenever bean contain the property with the same name.|||The below example shows usage of BeanUtils properties:|||Now we will create another class called User.java as shown below:|||Let's carry out the following steps to see how above code works:|||Save the above first code as Test.java.|||Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.|||The Apache Commons BeanUtils is a library that comes with a number of converters to convert to and from different data types and also contain ConvertUtils utility class which makes use of these converters.|||The below example shows the conversion of string array to a double array using ConvertUtils utility:|||Save the above first code as ConvertStringArrayToDoubleArray.java.|||Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.",Save the above first code as Test.java.@@@Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.|||Save the above first code as ConvertStringArrayToDoubleArray.java.@@@Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.,,,"import java.util.HashMap;import org.apache.commons.beanutils.BeanUtils;public class Test {    @SuppressWarnings(""unchecked"")    public static void main(String[] args){        @SuppressWarnings(""rawtypes"")        HashMap map = new HashMap();        map.put(""username"",""admin"");        map.put(""password"",""secret"");        map.put(""age"",""52"");                User bean = new User();        try{              BeanUtils.populate(bean,map);        }catch(Exception e){              e.printStackTrace();        }                System.out.println(""Username: ""+bean.getUsername());        System.out.println(""Password: ""+bean.getPassword());        System.out.println(""Age: ""+bean.getAge());    }}|||public class User {    private String username;    private String password;    private String age;        public String getUsername(){        return username;    }        public void setUsername(String username){        this.username = username;    }    public String getPassword() {        return password;    }	    public void setPassword(String password){        this.password = password;    }    public String getAge() {        return age;    }	    public void setAge(String age){        this.age = age;    }}|||package com.javadb;import org.apache.commons.beanutils.ConvertUtils;public class ConvertStringArrayToDoubleArray {    public static void main(String[] args) {        String values[] = { ""5"", ""6"", ""3"" };        double[] doubleValues = (double[])ConvertUtils.convert(values, Double.TYPE);           for (double d : doubleValues) {            System.out.println(d);        }    }}"
Learn Java Bean Utils,Java BeanUtils - Create Custom Converters,Java BeanUtils - Create Custom Converters|||Description@@@Syntax@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"BeanUtils package allows creating your own string object to convert for any java class and the registered converters can be used by all the BeanUtils methods. |||The following are the steps to create and register your own converter:|||First create a class which will implements the Converter interface and the java.lang.Class object of an application class (such as the class which need to be converted and incoming string value to be converted) should be accepted by convert() method.|||The instance of your converter class should be registered by calling ConvertUtils.register() method at the creation time of an application.|||Parameters:|||T: It indicates desired result type.|||type: It indicates that data type to which the value should be converted.|||value: It indicates an input value to be converted|||The above method will either return the converted value or it will throw an exception, if conversion cannot be performed successfully.",First create a class which will implements the Converter interface and the java.lang.Class object of an application class (such as the class which need to be converted and incoming string value to be converted) should be accepted by convert() method.@@@The instance of your converter class should be registered by calling ConvertUtils.register() method at the creation time of an application.|||T: It indicates desired result type.@@@type: It indicates that data type to which the value should be converted.@@@value: It indicates an input value to be converted,,,"public <T> T convert(Class<T> type, Object value);"
Learn Java Bean Utils,Java BeanUtils - Locale Aware Conversions,Java BeanUtils - Locale Aware Conversions|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The regular classes available in org.apache.commons.beanutils are not assigned for any specific event. These classes provide a clear interface to make use of situations very easily where the locale is not main thing. You can use Locale-aware extensions of beanutils classes which helps localization, from the  org.apache.commons.beanutils.locale package.",,,,
Learn Java Bean Utils,Java BeanUtils - Utility Objects & Classes,Java BeanUtils - Utility Objects & Classes|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The utility classes such as BeanUtils, ConvertUtils and PropertyUtils can be accessed through utility objects and shares the same caches and registered converters. You can instantiate corresponding class with same functionality for each static utility class.|||Static utility classes are the classes having only static methods performing some operations on the objects that are passed as parameters. Typically such classes have no state.|||The following table shows the Static Utility Classes and Utility Objects:",,,,
Learn Java Bean Utils,Java BeanUtils - Comparing Beans,Java BeanUtils - Comparing Beans|||Description@@@Example@@@Output@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"In Apache Commons Beanutils, you can compare the JavaBean objects by using the BeanComparator class based on a specified shared property value. This can be done by using the org.apache.commons.beanutils.BeanComparator comparator.|||The below example shows how to compare the two different beans. We will be creating two objects and set the first object to ""BMW"" and the other object to ""AUDI"". Then, we will compare the objects by using the BeanComparator by calling its compare() method.|||Note: For BeanComparator, commons-collection and commons-logging jar files need to be included.|||Now we will create one more class with the below code and save it as Car.java.|||Save the above first code as BeanComparatorExample.java.|||Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.",Save the above first code as BeanComparatorExample.java.@@@Now execute the code using Run option or Ctrl+f11 and output as below gets displayed.,,,"package com.javadb.apachecommons.beanutils;import org.apache.commons.beanutils.BeanComparator;public class BeanComparatorExample {    public static void main(String[] args) {        Car car1 = new Car();        car1.setBrand(""BMW"");                Car car2 = new Car();        car2.setBrand(""AUDI"");                BeanComparator comparator = new BeanComparator(""brand"");                System.out.println(""The value after comparing two beans is: "" + comparator.compare(car1, car2));    }}|||package com.javadb.apachecommons.beanutils;public class Car {    private String brand;	    public String getBrand() {        return brand;    }        public void setBrand(String brand) {        this.brand = brand;    }}"
Learn Java Bean Utils,Java BeanUtils - Operating On Collections,Java BeanUtils - Operating On Collections|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,"The Commons-Collections are build upon interfaces, implementations and utilities. It contains Closure interface in the code that can be applied on the arbitrary input object and code permits to apply Closures to contents of collection. There is Closure called BeanPropertyValueChangeClosure sets specified property to specified value. This value can be combined with commons-collections in which all the beans will have specified property to specified value in the collection.|||For instance, you can set the myCar property to TRUE for entire collection as shown below:",,,,"  //creating the closure BeanPropertyValueChangeClosure closure = new BeanPropertyValueChangeClosure( ""myCar"", Boolean.TRUE ); //updating the Collection CollectionUtils.forAllDo( myCollection, closure );"
Learn Java Bean Utils,Java BeanUtils - Querying Or Filtering Collections,Java BeanUtils - Querying Or Filtering Collections|||Description@@@Syntax@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training," The collections of beans can be filtered in the commons-collections by using the interface Predicate and also provides either true or false value on the evaluation of an input object. There is a Predicate called BeanPropertyValueEqualsPredicate which will assess the set property value against the given value.|||The above syntax has two parameters, which decides what property to be evaluated and what should be its expected value. It creates a Predicate for evaluating the target object and returns true if the value specified by propertyName is equal to the value specified by the propertyValue; otherwise it returns false.|||The property names are defined by org.apache.commons.beanutils.PropertyUtils and can be simple, indexed, nested or mapped.|||For instance, you can filter a collection of beans where myCar property is false:|||The above code filters the 'myCollection' collection and returns the boolean value for the object's myCar property.",,,,"public BeanPropertyValueEqualsPredicate(String propertyName, Object propertyValue)|||// create the closureBeanPropertyValueEqualsPredicate predicate = new BeanPropertyValueEqualsPredicate( ""myCar"", Boolean.FALSE );	// filter the collectionCollectionUtils.filter( myCollection, predicate );"
Learn Java Bean Utils,Java BeanUtils - Transforming Collections,Java BeanUtils - Transforming Collections|||Description@@@Useful Video Courses|||Java Date and Time Online Training@@@Java Servlet Online Training@@@JavaScript Online Training@@@Java Online Training@@@Java Essential Training@@@Java Essentials Online Training,The conversion from input object to output object is supported in commons-collections with the help of Transformer interface. The Transformers can be applied to get the output collection from input collection with the help of codes available in Commons-collections. BeanToPropertyTransformer is an example of Transformer that will convert a bean to its property value. This feature is able to extract a particular property from the input object and present it as output object.|||If you try to find out a particular car model from many car users in a collection. The syntax is shown below:,,,,"     // creating transformer     BeanToPropertyValueTransformer transformer = new BeanToPropertyValueTransformer( ""person.company.carmodel"" );     // transforming Collection     Collection carModel = CollectionUtils.collect( peopleCollection, transformer );"
