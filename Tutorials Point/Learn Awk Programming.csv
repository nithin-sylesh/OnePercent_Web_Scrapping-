Course,Chapters,ALL Headings,Paragraphs,Unordered List Items,Ordered List Items,Tables,Code Examples
Learn Awk Programming,Awk Tutorial,Awk Tutorial@@@Audience@@@Prerequisites,"This tutorial takes you through AWK, one of the most prominent text-processing utility on GNU/Linux. It is very powerful and uses simple programming language. It can solve complex text processing tasks with a few lines of code. Starting with an overview of AWK, its environment, and workflow, the tutorial proceeds to explain the syntax, variables, operators, arrays, loops, and functions used in AWK. It also covers topics such as output redirection and pretty printing.|||This tutorial will be useful for software developers, system administrators, or any enthusiastic reader inclined to learn how to do text processing and data extraction in Unix-like environment.|||You must have a basic understanding of GNU/Linux operating system and shell scripting.",,,,
Learn Awk Programming,AWK - Overview,AWK - Overview|||Types of AWK@@@Typical Uses of AWK,"AWK is an interpreted programming language. It is very powerful and specially designed for text processing. Its name is derived from the family names of its authors − Alfred Aho, Peter Weinberger, and Brian Kernighan.|||The version of AWK that GNU/Linux distributes is written and maintained by the Free Software Foundation (FSF); it is often referred to as GNU AWK.|||Following are the variants of AWK −|||AWK − Original AWK from AT & T Laboratory.|||NAWK − Newer and improved version of AWK from AT & T Laboratory.|||GAWK − It is GNU AWK. All GNU/Linux distributions ship GAWK. It is fully compatible with AWK and NAWK.|||Myriad of tasks can be done with AWK. Listed below are just a few of them −","AWK − Original AWK from AT & T Laboratory.@@@NAWK − Newer and improved version of AWK from AT & T Laboratory.@@@GAWK − It is GNU AWK. All GNU/Linux distributions ship GAWK. It is fully compatible with AWK and NAWK.|||Text processing,@@@Producing formatted text reports,@@@Performing arithmetic operations,@@@Performing string operations, and many more.",,,
Learn Awk Programming,AWK - Environment,AWK - Environment|||Installation Using Package Manager@@@Installation from Source Code,"This chapter describes how to set up the AWK environment on your GNU/Linux system.|||Generally, AWK is available by default on most GNU/Linux distributions. You can use which command to check whether it is present on your system or not. In case you don’t have AWK, then install it on Debian based GNU/Linux using Advance Package Tool (APT) package manager as follows −|||Similarly, to install AWK on RPM based GNU/Linux, use Yellowdog Updator Modifier yum package manager as follows −|||After installation, ensure that AWK is accessible via command line.|||On executing the above code, you get the following result −|||As GNU AWK is a part of the GNU project, its source code is available for free download. We have already seen how to install AWK using package manager. Let us now understand how to install AWK from its source code.|||The following installation is applicable to any GNU/Linux software, and for most other freely-available programs as well. Here are the installation steps −|||Step 1 − Download the source code from an authentic place. The command-line utility wget serves this purpose.|||Step 2 − Decompress and extract the downloaded source code.|||Step 3 − Change into the directory and run configure.|||Step 4 − Upon successful completion, the configure generates Makefile. To compile the source code, issue a make command.|||Step 5 − You can run the test suite to ensure the build is clean. This is an optional step.|||Step 6 − Finally, install AWK. Make sure you have super-user privileges.|||That is it! You have successfully compiled and installed AWK. Verify it by executing the awk command as follows −|||On executing this code, you get the following result −",,,,[jeryy]$ sudo apt-get update[jeryy]$ sudo apt-get install gawk|||[root]# yum install gawk|||[jerry]$ which awk|||[jerry]$ wget http://ftp.gnu.org/gnu/gawk/gawk-4.1.1.tar.xz|||[jerry]$ tar xvf gawk-4.1.1.tar.xz|||[jerry]$ ./configure|||[jerry]$ make|||[jerry]$ make check|||[jerry]$ sudo make install|||[jerry]$ which awk
Learn Awk Programming,AWK - Workflow,AWK - Workflow|||Program Structure|||Read@@@Execute@@@Repeat@@@BEGIN block@@@Body Block@@@END Block,"To become an expert AWK programmer, you need to know its internals. AWK follows a simple workflow − Read, Execute, and Repeat. The following diagram depicts the workflow of AWK −|||AWK reads a line from the input stream (file, pipe, or stdin) and stores it in memory.|||All AWK commands are applied sequentially on the input. By default AWK execute commands on every line. We can restrict this by providing patterns.|||This process repeats until the file reaches its end.|||Let us now understand the program structure of AWK.|||The syntax of the BEGIN block is as follows −|||Syntax|||The BEGIN block gets executed at program start-up. It executes only once. This is good place to initialize variables. BEGIN is an AWK keyword and hence it must be in upper-case. Please note that this block is optional.|||The syntax of the body block is as follows −|||Syntax|||The body block applies AWK commands on every input line. By default, AWK executes commands on every line. We can restrict this by providing patterns. Note that there are no keywords for the Body block.|||The syntax of the END block is as follows −|||Syntax|||The END block executes at the end of the program. END is an AWK keyword and hence it must be in upper-case. Please note that this block is optional.|||Let us create a file marks.txt which contains the serial number, name of the student, subject name, and number of marks obtained.|||Let us now display the file contents with header by using AWK script.|||Example|||When this code is executed, it produces the following result −|||Output|||At the start, AWK prints the header from the BEGIN block. Then in the body block, it reads a line from a file and executes AWK's print command which just prints the contents on the standard output stream. This process repeats until file reaches the end.",,,,"[jerry]$ awk 'BEGIN{printf ""Sr No\tName\tSub\tMarks\n""} {print}' marks.txt"
Learn Awk Programming,AWK - Basic Syntax,AWK - Basic Syntax|||AWK Command Line@@@AWK Program File@@@AWK Standard Options|||Example@@@The -v option@@@The --dump-variables[=file] option@@@The --help option@@@The --lint[=fatal] option@@@The --posix option@@@The --profile[=file] option@@@The --traditional option@@@The --version option,"AWK is simple to use. We can provide AWK commands either directly from the command line or in the form of a text file containing AWK commands.|||We can specify an AWK command within single quotes at command line as shown −|||Consider a text file marks.txt with the following content −|||Let us display the complete content of the file using AWK as follows −|||Example|||On executing this code, you get the following result −|||Output|||We can provide AWK commands in a script file as shown −|||First, create a text file command.awk containing the AWK command as shown below −|||Now we can instruct the AWK to read commands from the text file and perform the action. Here, we achieve the same result as shown in the above example.|||Example|||On executing this code, you get the following result −|||Output|||AWK supports the following standard options which can be provided from the command line.|||This option assigns a value to a variable. It allows assignment before the program execution. The following example describes the usage of the -v option.|||Example|||On executing this code, you get the following result −|||Output|||It prints a sorted list of global variables and their final values to file. The default file is awkvars.out.|||Example|||On executing the above code, you get the following result −|||Output|||This option prints the help message on standard output.|||Example|||On executing this code, you get the following result −|||Output|||This option enables checking of non-portable or dubious constructs. When an argument fatal is provided, it treats warning messages as errors. The following example demonstrates this −|||Example|||On executing this code, you get the following result −|||Output|||This option turns on strict POSIX compatibility, in which all common and gawk-specific extensions are disabled.|||This option generates a pretty-printed version of the program in file. Default file is awkprof.out. Below simple example illustrates this −|||Example|||On executing this code, you get the following result −|||Output|||This option disables all gawk-specific extensions.|||This option displays the version information of the AWK program.|||Example|||When this code is executed, it produces the following result −|||Output",,,,"[jerry]$ awk '{print}' marks.txt |||[jerry]$ awk -f command.awk marks.txt|||[jerry]$ awk -v name=Jerry 'BEGIN{printf ""Name = %s\n"", name}'|||[jerry]$ awk --dump-variables ''[jerry]$ cat awkvars.out |||[jerry]$ awk --help|||[jerry]$ awk --lint '' /bin/ls|||[jerry]$ awk --profile 'BEGIN{printf""---|Header|--\n""} {print} END{printf""---|Footer|---\n""}' marks.txt > /dev/null [jerry]$ cat awkprof.out|||[jerry]$ awk --version"
Learn Awk Programming,AWK - Basic Examples,AWK - Basic Examples|||Printing Column or Field@@@Printing All Lines@@@Printing Columns by Pattern@@@Printing Column in Any Order@@@Counting and Printing Matched Pattern@@@Printing Lines with More than 18 Characters|||Example@@@Output@@@Example@@@Output@@@Example@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output,"This chapter describes several useful AWK commands and their appropriate examples. Consider a text file marks.txt to be processed with the following content −|||You can instruct AWK to print only certain columns from the input field. The following example demonstrates this −|||On executing this code, you get the following result −|||In the file marks.txt, the third column contains the subject name and the fourth column contains the marks obtained in a particular subject. Let us print these two columns using AWK print command. In the above example, $3 and $4 represent the third and the fourth fields respectively from the input record.|||By default, AWK prints all the lines that match pattern.|||On executing this code, you get the following result −|||In the above example, we are searching form pattern a. When a pattern match succeeds, it executes a command from the body block. In the absence of a body block − default action is taken which is print the record. Hence, the following command produces the same result −|||When a pattern match succeeds, AWK prints the entire record by default. But you can instruct AWK to print only certain fields. For instance, the following example prints the third and fourth field when a pattern match succeeds.|||On executing this code, you get the following result −|||You can print columns in any order. For instance, the following example prints the fourth column followed by the third column.|||On executing the above code, you get the following result −|||Let us see an example where you can count and print the number of lines for which a pattern match succeeded.|||On executing this code, you get the following result −|||In this example, we increment the value of counter when a pattern match succeeds and we print this value in the END block. Note that unlike other programming languages, there is no need to declare a variable before using it.|||Let us print only those lines that contain more than 18 characters.|||On executing this code, you get the following result −|||AWK provides a built-in length  function that returns the length of the string. $0 variable stores the entire line and in the absence of a body block, default action is taken, i.e., the print action. Hence, if a line has more than 18 characters, then the comparison results true and the line gets printed.",,,,"[jerry]$ awk '{print $3 ""\t"" $4}' marks.txt|||[jerry]$ awk '/a/ {print $0}' marks.txt|||[jerry]$ awk '/a/' marks.txt|||[jerry]$ awk '/a/ {print $3 ""\t"" $4}' marks.txt|||[jerry]$ awk '/a/ {print $4 ""\t"" $3}' marks.txt|||[jerry]$ awk '/a/{++cnt} END {print ""Count = "", cnt}' marks.txt|||[jerry]$ awk 'length($0) > 18' marks.txt"
Learn Awk Programming,AWK - Built-in Variables,AWK - Built-in Variables|||Standard AWK variables@@@GNU AWK Specific Variables|||ARGC@@@ARGV@@@CONVFMT@@@ENVIRON@@@FILENAME@@@FS@@@NF@@@NR@@@FNR@@@OFMT@@@OFS@@@ORS@@@RLENGTH@@@RS@@@RSTART@@@SUBSEP@@@$0@@@$n@@@ARGIND@@@BINMODE@@@ERRNO@@@FIELDWIDTHS@@@IGNORECASE@@@LINT@@@PROCINFO@@@TEXTDOMAIN,"AWK provides several built-in variables. They play an important role while writing AWK scripts. This chapter demonstrates the usage of built-in variables.|||The standard AWK variables are discussed below.|||It implies the number of arguments provided at the command line.|||Example|||On executing this code, you get the following result −|||Output|||But why AWK shows 5 when you passed only 4 arguments? Just check the following example to clear your doubt.|||It is an array that stores the command-line arguments. The array's valid index ranges from 0 to ARGC-1.|||Example|||On executing this code, you get the following result −|||Output|||It represents the conversion format for numbers. Its default value is %.6g.|||Example|||On executing this code, you get the following result −|||Output|||It is an associative array of environment variables.|||Example|||On executing this code, you get the following result −|||Output|||To find names of other environment variables, use env command.|||It represents the current file name.|||Example|||On executing this code, you get the following result −|||Output|||Please note that FILENAME is undefined in the BEGIN block.|||It represents the (input) field separator and its default value is space. You can also change this by using -F command line option.|||Example|||On executing this code, you get the following result −|||Output|||It represents the number of fields in the current record. For instance, the following example prints only those lines that contain more than two fields.|||Example|||On executing this code, you get the following result −|||Output|||It represents the number of the current record. For instance, the following example prints the record if the current record number is less than three.|||Example|||On executing this code, you get the following result −|||Output|||It is similar to NR, but relative to the current file. It is useful when AWK is operating on multiple files. Value of FNR resets with new file.|||It represents the output format number and its default value is %.6g.|||Example|||On executing this code, you get the following result −|||Output|||It represents the output field separator and its default value is space.|||Example|||On executing this code, you get the following result −|||Output|||It represents the output record separator and its default value is newline.|||Example|||On executing the above code, you get the following result −|||Output|||It represents the length of the string matched by match function. AWK's match function searches for a given string in the input-string.|||Example|||On executing this code, you get the following result −|||Output|||It represents (input) record separator and its default value is newline.|||Example|||On executing this code, you get the following result −|||Output|||It represents the first position in the string matched by match function.|||Example|||On executing this code, you get the following result −|||Output|||It represents the separator character for array subscripts and its default value is \034.|||Example|||On executing this code, you get the following result −|||Output|||It represents the entire input record.|||Example|||On executing this code, you get the following result −|||Output|||It represents the nth field in the current record where the fields are separated by FS.|||Example|||On executing this code, you get the following result −|||Output|||GNU AWK specific variables are as follows −|||It represents the index in ARGV of the current file being processed.|||Example|||On executing this code, you get the following result −|||Output|||It is used to specify binary mode for all file I/O on non-POSIX systems. Numeric values of 1, 2, or 3 specify that input files, output files, or all files, respectively, should use binary I/O. String values of r or w specify that input files or output files, respectively, should use binary I/O. String values of rw or wr specify that all files should use binary I/O.|||A string indicates an error when a redirection fails for getline or if close call fails.|||Example|||On executing this code, you get the following result −|||Output|||A space separated list of field widths variable is set, GAWK parses the input into fields of fixed width, instead of using the value of the FS variable as the field separator.|||When this variable is set, GAWK becomes case-insensitive. The following example demonstrates this −|||Example|||On executing this code, you get the following result −|||Output|||It provides dynamic control of the --lint option from the GAWK program. When this variable is set, GAWK prints lint warnings. When assigned the string value fatal, lint warnings become fatal errors, exactly like --lint=fatal.|||Example|||On executing this code, you get the following result −|||Output|||This is an associative array containing information about the process, such as real and effective UID numbers, process ID number, and so on.|||Example|||On executing this code, you get the following result −|||Output|||It represents the text domain of the AWK program. It is used to find the localized translations for the program's strings.|||Example|||On executing this code, you get the following result −|||Output|||The above output shows English text due to en_IN locale",,,,"[jerry]$ awk 'BEGIN {print ""Arguments ="", ARGC}' One Two Three Four|||[jerry]$ awk 'BEGIN {    for (i = 0; i < ARGC - 1; ++i) {       printf ""ARGV[%d] = %s\n"", i, ARGV[i]    } }' one two three four|||[jerry]$ awk 'BEGIN { print ""Conversion Format ="", CONVFMT }'|||[jerry]$ awk 'BEGIN { print ENVIRON[""USER""] }'|||[jerry]$ awk 'END {print FILENAME}' marks.txt|||[jerry]$ awk 'BEGIN {print ""FS = "" FS}' | cat -vte|||[jerry]$ echo -e ""One Two\nOne Two Three\nOne Two Three Four"" | awk 'NF > 2'|||[jerry]$ echo -e ""One Two\nOne Two Three\nOne Two Three Four"" | awk 'NR < 3'|||[jerry]$ awk 'BEGIN {print ""OFMT = "" OFMT}'|||[jerry]$ awk 'BEGIN {print ""OFS = "" OFS}' | cat -vte|||[jerry]$ awk 'BEGIN {print ""ORS = "" ORS}' | cat -vte|||[jerry]$ awk 'BEGIN { if (match(""One Two Three"", ""re"")) { print RLENGTH } }'|||[jerry]$ awk 'BEGIN {print ""RS = "" RS}' | cat -vte|||[jerry]$ awk 'BEGIN { if (match(""One Two Three"", ""Thre"")) { print RSTART } }'|||[jerry]$ awk 'BEGIN { print ""SUBSEP = "" SUBSEP }' | cat -vte|||[jerry]$ awk '{print $0}' marks.txt|||[jerry]$ awk '{print $3 ""\t"" $4}' marks.txt|||[jerry]$ awk '{    print ""ARGIND   = "", ARGIND; print ""Filename = "", ARGV[ARGIND] }' junk1 junk2 junk3|||[jerry]$ awk 'BEGIN { ret = getline < ""junk.txt""; if (ret == -1) print ""Error:"", ERRNO }'|||[jerry]$ awk 'BEGIN{IGNORECASE = 1} /amit/' marks.txt|||[jerry]$ awk 'BEGIN {LINT = 1; a}'|||[jerry]$ awk 'BEGIN { print PROCINFO[""pid""] }'|||[jerry]$ awk 'BEGIN { print TEXTDOMAIN }'"
Learn Awk Programming,AWK - Operators,AWK - Operators,"Like other programming languages, AWK also provides a large set of operators. This chapter explains AWK operators with suitable examples.|||AWK supports the following arithmetic operators.|||AWK supports the following increment and decrement operators.|||AWK supports the following assignment operators.|||AWK supports the following relational operators.|||AWK supports the following logical operators.|||We can easily implement a condition expression using ternary operator.|||AWK supports the following unary operators.|||There are two formats of exponential operators.|||Space is a string concatenation operator that merges two strings.|||It is represented by in. It is used while accessing array elements.|||This example explains the two forms of regular expressions operators.",,,"S.No.@@@Operators & Description|||1@@@Arithmetic Operators
AWK supports the following arithmetic operators.|||2@@@Increment and Decrement Operators
AWK supports the following increment and decrement operators.|||3@@@Assignment Operators
AWK supports the following assignment operators.|||4@@@Relational Operators
AWK supports the following relational operators.|||5@@@Logical Operators
AWK supports the following logical operators.|||6@@@Ternary Operator
We can easily implement a condition expression using ternary operator.|||7@@@Unary Operators
AWK supports the following unary operators.|||8@@@Exponential Operators
There are two formats of exponential operators.|||9@@@String Concatenation Operator
Space is a string concatenation operator that merges two strings.|||10@@@Array Membership Operator
It is represented by in. It is used while accessing array elements.|||11@@@Regular Expression Operators
This example explains the two forms of regular expressions operators.",
Learn Awk Programming,AWK - Regular Expressions,AWK - Regular Expressions|||Dot@@@Start of line@@@End of line@@@Match character set@@@Exclusive set@@@Alteration@@@Zero or One Occurrence@@@Zero or More Occurrence@@@One or More Occurrence@@@Grouping|||Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output,"AWK is very powerful and efficient in handling regular expressions. A number of complex tasks can be solved with simple regular expressions. Any command-line expert knows the power of regular expressions.|||This chapter covers standard regular expressions with suitable examples.|||It matches any single character except the end of line character. For instance, the following example matches fin, fun, fan etc.|||On executing the above code, you get the following result −|||It matches the start of line. For instance, the following example prints all the lines that start with pattern The.|||On executing this code, you get the following result −|||It matches the end of line. For instance, the following example prints the lines that end with the letter n.|||On executing this code, you get the following result −|||It is used to match only one out of several characters. For instance, the following example matches pattern Call and Tall but not Ball.|||On executing this code, you get the following result −|||In exclusive set, the carat negates the set of characters in the square brackets. For instance, the following example prints only Ball.|||On executing this code, you get the following result −|||A vertical bar allows regular expressions to be logically ORed. For instance, the following example prints Ball and Call.|||On executing this code, you get the following result −|||It matches zero or one occurrence of the preceding character. For instance, the following example matches Colour as well as Color. We have made u as an optional character by using ?.|||On executing this code, you get the following result −|||It matches zero or more occurrences of the preceding character. For instance, the following example matches ca, cat, catt, and so on.|||On executing this code, you get the following result −|||It matches one or more occurrence of the preceding character. For instance below example matches one or more occurrences of the 2.|||On executing the above code, you get the following result −|||Parentheses () are used for grouping and the character | is used for alternatives. For instance, the following regular expression matches the lines containing either Apple Juice or Apple Cake.|||On executing this code, you get the following result −",,,,"[jerry]$ echo -e ""cat\nbat\nfun\nfin\nfan"" | awk '/f.n/'|||[jerry]$ echo -e ""This\nThat\nThere\nTheir\nthese"" | awk '/^The/'|||[jerry]$ echo -e ""knife\nknow\nfun\nfin\nfan\nnine"" | awk '/n$/'|||[jerry]$ echo -e ""Call\nTall\nBall"" | awk '/[CT]all/'|||[jerry]$ echo -e ""Call\nTall\nBall"" | awk '/[^CT]all/'|||[jerry]$ echo -e ""Call\nTall\nBall\nSmall\nShall"" | awk '/Call|Ball/'|||[jerry]$ echo -e ""Colour\nColor"" | awk '/Colou?r/'|||[jerry]$ echo -e ""ca\ncat\ncatt"" | awk '/cat*/'|||[jerry]$ echo -e ""111\n22\n123\n234\n456\n222""  | awk '/2+/'|||[jerry]$ echo -e ""Apple Juice\nApple Pie\nApple Tart\nApple Cake"" | awk    '/Apple (Juice|Cake)/'"
Learn Awk Programming,AWK - Arrays,AWK - Arrays|||Creating Array@@@Deleting Array Elements@@@Multi-Dimensional arrays|||Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Syntax@@@Example@@@Output,"AWK has associative arrays and one of the best thing about it is – the indexes need not to be continuous set of number; you can use either string or number as an array index. Also, there is no need to declare the size of an array in advance – arrays can expand/shrink at runtime.|||Its syntax is as follows −|||Where array_name is the name of array, index is the array index, and value is any value assigning to the element of the array.|||To gain more insight on array, let us create and access the elements of an array.|||On executing this code, you get the following result −|||In the above example, we declare the array as fruits whose index is fruit name and the value is the color of the fruit. To access array elements, we use array_name[index] format.|||For insertion, we used assignment operator. Similarly, we can use delete statement to remove an element from the array. The syntax of delete statement is as follows −|||The following example deletes the element orange. Hence the command does not show any output.|||AWK only supports one-dimensional arrays. But you can easily simulate a multi-dimensional array using the one-dimensional array itself.|||For instance, given below is a 3x3 two-dimensional array −|||In the above example, array[0][0] stores 100, array[0][1] stores 200, and so on. To store 100 at array location [0][0], we can use the following syntax −|||Though we gave 0,0 as index, these are not two indexes. In reality, it is just one index with the string 0,0.|||The following example simulates a 2-D array −|||On executing this code, you get the following result −|||You can also perform a variety of operations on an array such as sorting its elements/indexes. For that purpose, you can use assort and asorti functions",,,,"[jerry]$ awk 'BEGIN {   fruits[""mango""] = ""yellow"";   fruits[""orange""] = ""orange""   print fruits[""orange""] ""\n"" fruits[""mango""]}'|||[jerry]$ awk 'BEGIN {   fruits[""mango""] = ""yellow"";   fruits[""orange""] = ""orange"";   delete fruits[""orange""];   print fruits[""orange""]}'|||[jerry]$ awk 'BEGIN {   array[""0,0""] = 100;   array[""0,1""] = 200;   array[""0,2""] = 300;   array[""1,0""] = 400;   array[""1,1""] = 500;   array[""1,2""] = 600;   # print array elements   print ""array[0,0] = "" array[""0,0""];   print ""array[0,1] = "" array[""0,1""];   print ""array[0,2] = "" array[""0,2""];   print ""array[1,0] = "" array[""1,0""];   print ""array[1,1] = "" array[""1,1""];   print ""array[1,2] = "" array[""1,2""];}'"
Learn Awk Programming,AWK - Control Flow,AWK - Control Flow|||If statement@@@If Else Statement@@@If-Else-If Ladder|||Syntax@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output,"Like other programming languages, AWK provides conditional statements to control the flow of a program. This chapter explains AWK's control statements with suitable examples.|||It simply tests the condition and performs certain actions depending upon the condition. Given below is the syntax of if statement −|||We can also use a pair of curly braces as given below to execute multiple actions −|||For instance, the following example checks whether a number is even or not −|||On executing the above code, you get the following result −|||In if-else syntax, we can provide a list of actions to be performed when a condition becomes false.|||The syntax of if-else statement is as follows −|||In the above syntax, action-1 is performed when the condition evaluates to true and action-2 is performed when the condition evaluates to false. For instance, the following example checks whether a number is even or not −|||On executing this code, you get the following result −|||We can easily create an if-else-if ladder by using multiple if-else statements. The following example demonstrates this −|||On executing this code, you get the following result −",,,,"[jerry]$ awk 'BEGIN {num = 10; if (num % 2 == 0) printf ""%d is even number.\n"", num }'|||[jerry]$ awk 'BEGIN {   num = 11; if (num % 2 == 0) printf ""%d is even number.\n"", num;       else printf ""%d is odd number.\n"", num }'|||[jerry]$ awk 'BEGIN {   a = 30;      if (a==10)   print ""a = 10"";   else if (a == 20)   print ""a = 20"";   else if (a == 30)   print ""a = 30"";}'"
Learn Awk Programming,AWK - Loops,AWK - Loops|||For Loop@@@While Loop@@@Do-While Loop@@@Break Statement@@@Continue Statement@@@Exit Statement|||Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output,"This chapter explains AWK's loops with suitable example. Loops are used to execute a set of actions in a repeated manner. The loop execution continues as long as the loop condition is true.|||The syntax of for loop is −|||Initially, the for statement performs initialization action, then it checks the condition. If the condition is true, it executes actions, thereafter it performs increment or decrement operation. The loop execution continues as long as the condition is true. For instance, the following example prints 1 to 5 using for loop −|||On executing this code, you get the following result −|||The while loop keeps executing the action until a particular logical condition evaluates to true. Here is the syntax of while loop −|||AWK first checks the condition; if the condition is true, it executes the action. This process repeats as long as the loop condition evaluates to true. For instance, the following example prints 1 to 5 using while loop −|||On executing this code, you get the following result −|||The do-while loop is similar to the while loop, except that the test condition is evaluated at the end of the loop. Here is the syntax of do-whileloop −|||In a do-while loop, the action statement gets executed at least once even when the condition statement evaluates to false. For instance, the following example prints 1 to 5 numbers using do-while loop −|||On executing this code, you get the following result −|||As its name suggests, it is used to end the loop execution. Here is an example which ends the loop when the sum becomes greater than 50.|||On executing this code, you get the following result −|||The continue statement is used inside a loop to skip to the next iteration of the loop. It is useful when you wish to skip the processing of some data inside the loop. For instance, the following example uses continue statement to print the even numbers between 1 to 20.|||On executing this code, you get the following result −|||It is used to stop the execution of the script. It accepts an integer as an argument which is the exit status code for AWK process. If no argument is supplied, exit returns status zero. Here is an example that stops the execution when the sum becomes greater than 50.|||On executing this code, you get the following result −|||Let us check the return status of the script.|||On executing this code, you get the following result −",,,,"[jerry]$ awk 'BEGIN { for (i = 1; i <= 5; ++i) print i }'|||[jerry]$ awk 'BEGIN {i = 1; while (i < 6) { print i; ++i } }'|||[jerry]$ awk 'BEGIN {i = 1; do { print i; ++i } while (i < 6) }'|||[jerry]$ awk 'BEGIN {   sum = 0; for (i = 0; i < 20; ++i) {       sum += i; if (sum > 50) break; else print ""Sum ="", sum    } }'|||[jerry]$ awk 'BEGIN {   for (i = 1; i <= 20; ++i) {      if (i % 2 == 0) print i ; else continue   } }'|||[jerry]$ awk 'BEGIN {   sum = 0; for (i = 0; i < 20; ++i) {      sum += i; if (sum > 50) exit(10); else print ""Sum ="", sum    } }'|||[jerry]$ echo $?"
Learn Awk Programming,AWK - Built-in Functions,AWK - Built-in Functions,"AWK has a number of functions built into it that are always available to the programmer. This chapter describes Arithmetic, String, Time, Bit manipulation, and other miscellaneous functions with suitable examples.|||AWK has the following built-in arithmetic functions.|||AWK has the following built-in String functions.|||AWK has the following built-in time functions.|||AWK has the following built-in bit manipulation functions.|||AWK has the following miscellaneous functions.",,,"S.No.@@@Built in functions & Description|||1@@@Arithmetic Functions
AWK has the following built-in arithmetic functions.|||2@@@String Functions
AWK has the following built-in String functions.|||3@@@Time Functions
AWK has the following built-in time functions.|||4@@@Bit Manipulation Functions
AWK has the following built-in bit manipulation functions.|||5@@@Miscellaneous Functions
AWK has the following miscellaneous functions.",
Learn Awk Programming,AWK - User Defined Functions,AWK - User Defined Functions|||Syntax@@@Example@@@Output,"Functions are basic building blocks of a program. AWK allows us to define our own functions. A large program can be divided into functions and each function can be written/tested independently. It provides re-usability of code.|||Given below is the general format of a user-defined function −|||In this syntax, the function_name is the name of the user-defined function. Function name should begin with a letter and the rest of the characters can be any combination of numbers, alphabetic characters, or underscore. AWK's reserve words cannot be used as function names.|||Functions can accept multiple arguments separated by comma. Arguments are not mandatory. You can also create a user-defined function without any argument.|||function body consists of one or more AWK statements.|||Let us write two functions that calculate the minimum and the maximum number and call these functions from another function called main. The functions.awk file contains −|||On executing this code, you get the following result −",,,,"# Returns minimum numberfunction find_min(num1, num2){   if (num1 < num2)   return num1   return num2}# Returns maximum numberfunction find_max(num1, num2){   if (num1 > num2)   return num1   return num2}# Main functionfunction main(num1, num2){   # Find minimum number   result = find_min(10, 20)   print ""Minimum ="", result     # Find maximum number   result = find_max(10, 20)   print ""Maximum ="", result}# Script execution starts hereBEGIN {   main(10, 20)}"
Learn Awk Programming,AWK - Output Redirection,AWK - Output Redirection|||Redirection Operator@@@Append Operator@@@Pipe@@@Two way communication|||Syntax@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output,"So far, we displayed data on standard output stream. We can also redirect data to a file. A redirection appears after the print or printf statement. Redirections in AWK are written just like redirection in shell commands, except that they are written inside the AWK program. This chapter explains redirection with suitable examples.|||The syntax of the redirection operator is −|||It writes the data into the output-file. If the output-file does not exist, then it creates one. When this type of redirection is used, the output-file is erased before the first output is written to it. Subsequent write operations to the same output-file do not erase the output-file, but append to it. For instance, the following example writes Hello, World !!! to the file.|||Let us create a file with some text data.|||On executing this code, you get the following result −|||Now let us redirect some contents into it using AWK's redirection operator.|||On executing this code, you get the following result −|||The syntax of append operator is as follows −|||It appends the data into the output-file. If the output-file does not exist, then it creates one. When this type of redirection is used, new contents are appended at the end of file. For instance, the following example appends Hello, World !!! to the file.|||Let us create a file with some text data.|||On executing this code, you get the following result −|||Now let us append some contents to it using AWK's append operator.|||On executing this code, you get the following result −|||It is possible to send output to another program through a pipe instead of using a file. This redirection opens a pipe to command, and writes the values of items through this pipe to another process to execute the command. The redirection argument command is actually an AWK expression. Here is the syntax of pipe −|||Let us use tr command to convert lowercase letters to uppercase.|||On executing this code, you get the following result −|||AWK can communicate to an external process using |&, which is two-way communication. For instance, the following example uses tr command to convert lowercase letters to uppercase. Our command.awk file contains −|||On executing this code, you get the following result −|||Does the script look cryptic? Let us demystify it.|||The first statement, cmd = ""tr [a-z] [A-Z]"", is the command to which we establish the two-way communication from AWK.|||The next statement, i.e., the print command provides input to the tr command. Here &| indicates two-way communication.|||The third statement, i.e., close(cmd, ""to""), closes the to process after competing its execution.|||The next statement cmd |& getline out stores the output into out variable with the aid of getline function.|||The next print statement prints the output and finally the close function closes the command.","The first statement, cmd = ""tr [a-z] [A-Z]"", is the command to which we establish the two-way communication from AWK.@@@The next statement, i.e., the print command provides input to the tr command. Here &| indicates two-way communication.@@@The third statement, i.e., close(cmd, ""to""), closes the to process after competing its execution.@@@The next statement cmd |& getline out stores the output into out variable with the aid of getline function.@@@The next print statement prints the output and finally the close function closes the command.",,,"[jerry]$ echo ""Old data"" > /tmp/message.txt[jerry]$ cat /tmp/message.txt|||[jerry]$ awk 'BEGIN { print ""Hello, World !!!"" > ""/tmp/message.txt"" }'[jerry]$ cat /tmp/message.txt|||[jerry]$ echo ""Old data"" > /tmp/message.txt [jerry]$ cat /tmp/message.txt|||[jerry]$ awk 'BEGIN { print ""Hello, World !!!"" >> ""/tmp/message.txt"" }'[jerry]$ cat /tmp/message.txt|||[jerry]$ awk 'BEGIN { print ""hello, world !!!"" | ""tr [a-z] [A-Z]"" }'|||BEGIN {   cmd = ""tr [a-z] [A-Z]""   print ""hello, world !!!"" |& cmd   close(cmd, ""to"")      cmd |& getline out   print out;   close(cmd);}"
Learn Awk Programming,AWK - Pretty Printing,AWK - Pretty Printing|||Escape Sequences@@@Format Specifier@@@Optional Parameters with %|||Syntax@@@New Line@@@Horizontal Tab@@@Vertical Tab@@@Backspace@@@Carriage Return@@@Form Feed@@@%c@@@%d and %i@@@%e and %E@@@%f@@@%g and %G@@@%o@@@%u@@@%s@@@%x and %X@@@%%@@@Width@@@Leading Zeros@@@Left Justification@@@Prefix Sign@@@Hash,"So far we have used AWK's print and printf functions to display data on standard output. But printf is much more powerful than what we have seen before. This function is borrowed from the C language and is very helpful while producing formatted output. Below is the syntax of the printf statement −|||In the above syntax fmt is a string of format specifications and constants. expr-list is a list of arguments corresponding to format specifiers.|||Similar to any string, format can contain embedded escape sequences. Discussed below are the escape sequences supported by AWK −|||The following example prints Hello and World in separate lines using newline character −|||Example|||On executing this code, you get the following result −|||Output|||The following example uses horizontal tab to display different field −|||Example|||On executing the above code, you get the following result −|||Output|||The following example uses vertical tab after each filed −|||Example|||On executing this code, you get the following result −|||Output|||The following example prints a backspace after every field except the last one. It erases the last number from the first three fields. For instance, Field 1 is displayed as Field, because the last character is erased with backspace. However, the last field Field 4 is displayed as it is, as we did not have a \b after Field 4.|||Example|||On executing this code, you get the following result −|||Output|||In the following example, after printing every field, we do a Carriage Return and print the next value on top of the current printed value. It means, in the final output, you can see only Field 4, as it was the last thing to be printed on top of all the previous fields.|||Example|||On executing this code, you get the following result −|||Output|||The following example uses form feed after printing each field.|||Example|||On executing this code, you get the following result −|||Output|||As in C-language, AWK also has format specifiers. The AWK version of the printf statement accepts the following conversion specification formats −|||It prints a single character. If the argument used for %c is numeric, it is treated as a character and printed. Otherwise, the argument is assumed to be a string, and the only first character of that string is printed.|||Example|||Output|||On executing this code, you get the following result −|||It prints only the integer part of a decimal number.|||Example|||On executing this code, you get the following result −|||Output|||It prints a floating point number of the form [-]d.dddddde[+-]dd.|||Example|||On executing this code, you get the following result −|||Output|||The %E format uses E instead of e.|||Example|||On executing this code, you get the following result −|||Output|||It prints a floating point number of the form [-]ddd.dddddd.|||Example|||On executing this code, you get the following result −|||Output|||Uses %e or %f conversion, whichever is shorter, with non-significant zeros suppressed.|||Example|||Output|||On executing this code, you get the following result −|||The %G format uses %E instead of %e.|||Example|||On executing this code, you get the following result −|||Output|||It prints an unsigned octal number.|||Example|||On executing this code, you get the following result −|||Output|||It prints an unsigned decimal number.|||Example|||On executing this code, you get the following result −|||Output|||It prints a character string.|||Example|||On executing this code, you get the following result −|||Output|||It prints an unsigned hexadecimal number. The %X format uses uppercase letters instead of lowercase.|||Example|||On executing this code, you get the following result −|||Output|||Now let use %X and observe the result −|||Example|||On executing this code, you get the following result −|||Output|||It prints a single % character and no argument is converted.|||Example|||On executing this code, you get the following result −|||Output|||With % we can use following optional parameters −|||The field is padded to the width. By default, the field is padded with spaces but when 0 flag is used, it is padded with zeroes.|||Example|||On executing this code, you get the following result −|||Output|||A leading zero acts as a flag, which indicates that the output should be padded with zeroes instead of spaces. Please note that this flag only has an effect when the field is wider than the value to be printed. The following example describes this −|||Example|||On executing this code, you get the following result −|||Output|||The expression should be left-justified within its field. When the input-string is less than the number of characters specified, and you want it to be left justified, i.e., by adding spaces to the right, use a minus symbol (–) immediately after the % and before the number.|||In the following example, output of the AWK command is piped to the cat command to display the END OF LINE($) character.|||Example|||On executing this code, you get the following result −|||Output|||It always prefixes numeric values with a sign, even if the value is positive.|||Example|||On executing this code, you get the following result −|||Output|||For %o, it supplies a leading zero. For %x and %X, it supplies a leading 0x or 0X respectively, only if the result is non-zero. For %e, %E, %f, and %F, the result always contains a decimal point. For %g and %G, trailing zeros are not removed from the result. The following example describes this −|||Example|||On executing this code, you get the following result −|||Output",,,,"[jerry]$ awk 'BEGIN { printf ""Hello\nWorld\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Sr No\tName\tSub\tMarks\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Sr No\vName\vSub\vMarks\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Field 1\bField 2\bField 3\bField 4\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Field 1\rField 2\rField 3\rField 4\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Sr No\fName\fSub\fMarks\n"" }'|||[jerry]$ awk 'BEGIN { printf ""ASCII value 65 = character %c\n"", 65 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %d\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %E\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %e\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %f\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %g\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %G\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Octal representation of decimal number 10 = %o\n"", 10}'|||[jerry]$ awk 'BEGIN { printf ""Unsigned 10 = %u\n"", 10 }'|||[jerry]$ awk 'BEGIN { printf ""Name = %s\n"", ""Sherlock Holmes"" }'|||[jerry]$ awk 'BEGIN {    printf ""Hexadecimal representation of decimal number 15 = %x\n"", 15}'|||[jerry]$ awk 'BEGIN {    printf ""Hexadecimal representation of decimal number 15 = %X\n"", 15}'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %d%%\n"", 80.66 }'|||[jerry]$ awk 'BEGIN {    num1 = 10; num2 = 20; printf ""Num1 = %10d\nNum2 = %10d\n"", num1, num2 }'|||[jerry]$ awk 'BEGIN {    num1 = -10; num2 = 20; printf ""Num1 = %05d\nNum2 = %05d\n"", num1, num2 }'|||[jerry]$ awk 'BEGIN { num = 10; printf ""Num = %-5d\n"", num }' | cat -vte|||[jerry]$ awk 'BEGIN {    num1 = -10; num2 = 20; printf ""Num1 = %+d\nNum2 = %+d\n"", num1, num2 }'|||[jerry]$ awk 'BEGIN {    printf ""Octal representation = %#o\nHexadecimal representaion = %#X\n"", 10, 10}'"
Learn Awk Programming,AWK - Quick Guide,AWK - Quick Guide@@@AWK - Overview@@@AWK - Environment@@@AWK - Workflow@@@AWK - Basic Syntax@@@AWK - Basic Examples@@@AWK - Built-in Variables@@@AWK - Operators@@@AWK - Regular Expressions@@@AWK - Arrays@@@AWK - Control Flow@@@AWK - Loops@@@AWK - Built-in Functions@@@AWK - User Defined Functions@@@AWK - Output Redirection@@@AWK - Pretty Printing|||Types of AWK@@@Typical Uses of AWK@@@Installation Using Package Manager@@@Installation from Source Code@@@Program Structure@@@AWK Command Line@@@AWK Program File@@@AWK Standard Options@@@Printing Column or Field@@@Printing All Lines@@@Printing Columns by Pattern@@@Printing Column in Any Order@@@Counting and Printing Matched Pattern@@@Printing Lines with More than 18 Characters@@@Standard AWK variables@@@GNU AWK Specific Variables@@@Dot@@@Start of line@@@End of line@@@Match character set@@@Exclusive set@@@Alteration@@@Zero or One Occurrence@@@Zero or More Occurrence@@@One or More Occurrence@@@Grouping@@@Creating Array@@@Deleting Array Elements@@@Multi-Dimensional arrays@@@If statement@@@If Else Statement@@@If-Else-If Ladder@@@For Loop@@@While Loop@@@Do-While Loop@@@Break Statement@@@Continue Statement@@@Exit Statement@@@Redirection Operator@@@Append Operator@@@Pipe@@@Two way communication@@@Escape Sequences@@@Format Specifier@@@Optional Parameters with %|||Read@@@Execute@@@Repeat@@@BEGIN block@@@Body Block@@@END Block@@@Example@@@The -v option@@@The --dump-variables[=file] option@@@The --help option@@@The --lint[=fatal] option@@@The --posix option@@@The --profile[=file] option@@@The --traditional option@@@The --version option@@@Example@@@Output@@@Example@@@Output@@@Example@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@ARGC@@@ARGV@@@CONVFMT@@@ENVIRON@@@FILENAME@@@FS@@@NF@@@NR@@@FNR@@@OFMT@@@OFS@@@ORS@@@RLENGTH@@@RS@@@RSTART@@@SUBSEP@@@$0@@@$n@@@ARGIND@@@BINMODE@@@ERRNO@@@FIELDWIDTHS@@@IGNORECASE@@@LINT@@@PROCINFO@@@TEXTDOMAIN@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Syntax@@@Example@@@Output@@@Syntax@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@Example@@@Output@@@Example@@@Output@@@Syntax@@@New Line@@@Horizontal Tab@@@Vertical Tab@@@Backspace@@@Carriage Return@@@Form Feed@@@%c@@@%d and %i@@@%e and %E@@@%f@@@%g and %G@@@%o@@@%u@@@%s@@@%x and %X@@@%%@@@Width@@@Leading Zeros@@@Left Justification@@@Prefix Sign@@@Hash,"AWK is an interpreted programming language. It is very powerful and specially designed for text processing. Its name is derived from the family names of its authors − Alfred Aho, Peter Weinberger, and Brian Kernighan.|||The version of AWK that GNU/Linux distributes is written and maintained by the Free Software Foundation (FSF); it is often referred to as GNU AWK.|||Following are the variants of AWK −|||AWK − Original AWK from AT & T Laboratory.|||NAWK − Newer and improved version of AWK from AT & T Laboratory.|||GAWK − It is GNU AWK. All GNU/Linux distributions ship GAWK. It is fully compatible with AWK and NAWK.|||Myriad of tasks can be done with AWK. Listed below are just a few of them −|||This chapter describes how to set up the AWK environment on your GNU/Linux system.|||Generally, AWK is available by default on most GNU/Linux distributions. You can use which command to check whether it is present on your system or not. In case you don’t have AWK, then install it on Debian based GNU/Linux using Advance Package Tool (APT) package manager as follows −|||Similarly, to install AWK on RPM based GNU/Linux, use Yellowdog Updator Modifier yum package manager as follows −|||After installation, ensure that AWK is accessible via command line.|||On executing the above code, you get the following result −|||As GNU AWK is a part of the GNU project, its source code is available for free download. We have already seen how to install AWK using package manager. Let us now understand how to install AWK from its source code.|||The following installation is applicable to any GNU/Linux software, and for most other freely-available programs as well. Here are the installation steps −|||Step 1 − Download the source code from an authentic place. The command-line utility wget serves this purpose.|||Step 2 − Decompress and extract the downloaded source code.|||Step 3 − Change into the directory and run configure.|||Step 4 − Upon successful completion, the configure generates Makefile. To compile the source code, issue a make command.|||Step 5 − You can run the test suite to ensure the build is clean. This is an optional step.|||Step 6 − Finally, install AWK. Make sure you have super-user privileges.|||That is it! You have successfully compiled and installed AWK. Verify it by executing the awk command as follows −|||On executing this code, you get the following result −|||To become an expert AWK programmer, you need to know its internals. AWK follows a simple workflow − Read, Execute, and Repeat. The following diagram depicts the workflow of AWK −|||AWK reads a line from the input stream (file, pipe, or stdin) and stores it in memory.|||All AWK commands are applied sequentially on the input. By default AWK execute commands on every line. We can restrict this by providing patterns.|||This process repeats until the file reaches its end.|||Let us now understand the program structure of AWK.|||The syntax of the BEGIN block is as follows −|||Syntax|||The BEGIN block gets executed at program start-up. It executes only once. This is good place to initialize variables. BEGIN is an AWK keyword and hence it must be in upper-case. Please note that this block is optional.|||The syntax of the body block is as follows −|||Syntax|||The body block applies AWK commands on every input line. By default, AWK executes commands on every line. We can restrict this by providing patterns. Note that there are no keywords for the Body block.|||The syntax of the END block is as follows −|||Syntax|||The END block executes at the end of the program. END is an AWK keyword and hence it must be in upper-case. Please note that this block is optional.|||Let us create a file marks.txt which contains the serial number, name of the student, subject name, and number of marks obtained.|||Let us now display the file contents with header by using AWK script.|||Example|||When this code is executed, it produces the following result −|||Output|||At the start, AWK prints the header from the BEGIN block. Then in the body block, it reads a line from a file and executes AWK's print command which just prints the contents on the standard output stream. This process repeats until file reaches the end.|||AWK is simple to use. We can provide AWK commands either directly from the command line or in the form of a text file containing AWK commands.|||We can specify an AWK command within single quotes at command line as shown −|||Consider a text file marks.txt with the following content −|||Let us display the complete content of the file using AWK as follows −|||Example|||On executing this code, you get the following result −|||Output|||We can provide AWK commands in a script file as shown −|||First, create a text file command.awk containing the AWK command as shown below −|||Now we can instruct the AWK to read commands from the text file and perform the action. Here, we achieve the same result as shown in the above example.|||Example|||On executing this code, you get the following result −|||Output|||AWK supports the following standard options which can be provided from the command line.|||This option assigns a value to a variable. It allows assignment before the program execution. The following example describes the usage of the -v option.|||Example|||On executing this code, you get the following result −|||Output|||It prints a sorted list of global variables and their final values to file. The default file is awkvars.out.|||Example|||On executing the above code, you get the following result −|||Output|||This option prints the help message on standard output.|||Example|||On executing this code, you get the following result −|||Output|||This option enables checking of non-portable or dubious constructs. When an argument fatal is provided, it treats warning messages as errors. The following example demonstrates this −|||Example|||On executing this code, you get the following result −|||Output|||This option turns on strict POSIX compatibility, in which all common and gawk-specific extensions are disabled.|||This option generates a pretty-printed version of the program in file. Default file is awkprof.out. Below simple example illustrates this −|||Example|||On executing this code, you get the following result −|||Output|||This option disables all gawk-specific extensions.|||This option displays the version information of the AWK program.|||Example|||When this code is executed, it produces the following result −|||Output|||This chapter describes several useful AWK commands and their appropriate examples. Consider a text file marks.txt to be processed with the following content −|||You can instruct AWK to print only certain columns from the input field. The following example demonstrates this −|||On executing this code, you get the following result −|||In the file marks.txt, the third column contains the subject name and the fourth column contains the marks obtained in a particular subject. Let us print these two columns using AWK print command. In the above example, $3 and $4 represent the third and the fourth fields respectively from the input record.|||By default, AWK prints all the lines that match pattern.|||On executing this code, you get the following result −|||In the above example, we are searching form pattern a. When a pattern match succeeds, it executes a command from the body block. In the absence of a body block − default action is taken which is print the record. Hence, the following command produces the same result −|||When a pattern match succeeds, AWK prints the entire record by default. But you can instruct AWK to print only certain fields. For instance, the following example prints the third and fourth field when a pattern match succeeds.|||On executing this code, you get the following result −|||You can print columns in any order. For instance, the following example prints the fourth column followed by the third column.|||On executing the above code, you get the following result −|||Let us see an example where you can count and print the number of lines for which a pattern match succeeded.|||On executing this code, you get the following result −|||In this example, we increment the value of counter when a pattern match succeeds and we print this value in the END block. Note that unlike other programming languages, there is no need to declare a variable before using it.|||Let us print only those lines that contain more than 18 characters.|||On executing this code, you get the following result −|||AWK provides a built-in length  function that returns the length of the string. $0 variable stores the entire line and in the absence of a body block, default action is taken, i.e., the print action. Hence, if a line has more than 18 characters, then the comparison results true and the line gets printed.|||AWK provides several built-in variables. They play an important role while writing AWK scripts. This chapter demonstrates the usage of built-in variables.|||The standard AWK variables are discussed below.|||It implies the number of arguments provided at the command line.|||Example|||On executing this code, you get the following result −|||Output|||But why AWK shows 5 when you passed only 4 arguments? Just check the following example to clear your doubt.|||It is an array that stores the command-line arguments. The array's valid index ranges from 0 to ARGC-1.|||Example|||On executing this code, you get the following result −|||Output|||It represents the conversion format for numbers. Its default value is %.6g.|||Example|||On executing this code, you get the following result −|||Output|||It is an associative array of environment variables.|||Example|||On executing this code, you get the following result −|||Output|||To find names of other environment variables, use env command.|||It represents the current file name.|||Example|||On executing this code, you get the following result −|||Output|||Please note that FILENAME is undefined in the BEGIN block.|||It represents the (input) field separator and its default value is space. You can also change this by using -F command line option.|||Example|||On executing this code, you get the following result −|||Output|||It represents the number of fields in the current record. For instance, the following example prints only those lines that contain more than two fields.|||Example|||On executing this code, you get the following result −|||Output|||It represents the number of the current record. For instance, the following example prints the record if the current record number is less than three.|||Example|||On executing this code, you get the following result −|||Output|||It is similar to NR, but relative to the current file. It is useful when AWK is operating on multiple files. Value of FNR resets with new file.|||It represents the output format number and its default value is %.6g.|||Example|||On executing this code, you get the following result −|||Output|||It represents the output field separator and its default value is space.|||Example|||On executing this code, you get the following result −|||Output|||It represents the output record separator and its default value is newline.|||Example|||On executing the above code, you get the following result −|||Output|||It represents the length of the string matched by match function. AWK's match function searches for a given string in the input-string.|||Example|||On executing this code, you get the following result −|||Output|||It represents (input) record separator and its default value is newline.|||Example|||On executing this code, you get the following result −|||Output|||It represents the first position in the string matched by match function.|||Example|||On executing this code, you get the following result −|||Output|||It represents the separator character for array subscripts and its default value is \034.|||Example|||On executing this code, you get the following result −|||Output|||It represents the entire input record.|||Example|||On executing this code, you get the following result −|||Output|||It represents the nth field in the current record where the fields are separated by FS.|||Example|||On executing this code, you get the following result −|||Output|||GNU AWK specific variables are as follows −|||It represents the index in ARGV of the current file being processed.|||Example|||On executing this code, you get the following result −|||Output|||It is used to specify binary mode for all file I/O on non-POSIX systems. Numeric values of 1, 2, or 3 specify that input files, output files, or all files, respectively, should use binary I/O. String values of r or w specify that input files or output files, respectively, should use binary I/O. String values of rw or wr specify that all files should use binary I/O.|||A string indicates an error when a redirection fails for getline or if close call fails.|||Example|||On executing this code, you get the following result −|||Output|||A space separated list of field widths variable is set, GAWK parses the input into fields of fixed width, instead of using the value of the FS variable as the field separator.|||When this variable is set, GAWK becomes case-insensitive. The following example demonstrates this −|||Example|||On executing this code, you get the following result −|||Output|||It provides dynamic control of the --lint option from the GAWK program. When this variable is set, GAWK prints lint warnings. When assigned the string value fatal, lint warnings become fatal errors, exactly like --lint=fatal.|||Example|||On executing this code, you get the following result −|||Output|||This is an associative array containing information about the process, such as real and effective UID numbers, process ID number, and so on.|||Example|||On executing this code, you get the following result −|||Output|||It represents the text domain of the AWK program. It is used to find the localized translations for the program's strings.|||Example|||On executing this code, you get the following result −|||Output|||The above output shows English text due to en_IN locale|||Like other programming languages, AWK also provides a large set of operators. This chapter explains AWK operators with suitable examples.|||AWK supports the following arithmetic operators.|||AWK supports the following increment and decrement operators.|||AWK supports the following assignment operators.|||AWK supports the following relational operators.|||AWK supports the following logical operators.|||We can easily implement a condition expression using ternary operator.|||AWK supports the following unary operators.|||There are two formats of exponential operators.|||Space is a string concatenation operator that merges two strings.|||It is represented by in. It is used while accessing array elements.|||This example explains the two forms of regular expressions operators.|||AWK is very powerful and efficient in handling regular expressions. A number of complex tasks can be solved with simple regular expressions. Any command-line expert knows the power of regular expressions.|||This chapter covers standard regular expressions with suitable examples.|||It matches any single character except the end of line character. For instance, the following example matches fin, fun, fan etc.|||On executing the above code, you get the following result −|||It matches the start of line. For instance, the following example prints all the lines that start with pattern The.|||On executing this code, you get the following result −|||It matches the end of line. For instance, the following example prints the lines that end with the letter n.|||On executing this code, you get the following result −|||It is used to match only one out of several characters. For instance, the following example matches pattern Call and Tall but not Ball.|||On executing this code, you get the following result −|||In exclusive set, the carat negates the set of characters in the square brackets. For instance, the following example prints only Ball.|||On executing this code, you get the following result −|||A vertical bar allows regular expressions to be logically ORed. For instance, the following example prints Ball and Call.|||On executing this code, you get the following result −|||It matches zero or one occurrence of the preceding character. For instance, the following example matches Colour as well as Color. We have made u as an optional character by using ?.|||On executing this code, you get the following result −|||It matches zero or more occurrences of the preceding character. For instance, the following example matches ca, cat, catt, and so on.|||On executing this code, you get the following result −|||It matches one or more occurrence of the preceding character. For instance below example matches one or more occurrences of the 2.|||On executing the above code, you get the following result −|||Parentheses () are used for grouping and the character | is used for alternatives. For instance, the following regular expression matches the lines containing either Apple Juice or Apple Cake.|||On executing this code, you get the following result −|||AWK has associative arrays and one of the best thing about it is – the indexes need not to be continuous set of number; you can use either string or number as an array index. Also, there is no need to declare the size of an array in advance – arrays can expand/shrink at runtime.|||Its syntax is as follows −|||Where array_name is the name of array, index is the array index, and value is any value assigning to the element of the array.|||To gain more insight on array, let us create and access the elements of an array.|||On executing this code, you get the following result −|||In the above example, we declare the array as fruits whose index is fruit name and the value is the color of the fruit. To access array elements, we use array_name[index] format.|||For insertion, we used assignment operator. Similarly, we can use delete statement to remove an element from the array. The syntax of delete statement is as follows −|||The following example deletes the element orange. Hence the command does not show any output.|||AWK only supports one-dimensional arrays. But you can easily simulate a multi-dimensional array using the one-dimensional array itself.|||For instance, given below is a 3x3 two-dimensional array −|||In the above example, array[0][0] stores 100, array[0][1] stores 200, and so on. To store 100 at array location [0][0], we can use the following syntax −|||Though we gave 0,0 as index, these are not two indexes. In reality, it is just one index with the string 0,0.|||The following example simulates a 2-D array −|||On executing this code, you get the following result −|||You can also perform a variety of operations on an array such as sorting its elements/indexes. For that purpose, you can use assort and asorti functions|||Like other programming languages, AWK provides conditional statements to control the flow of a program. This chapter explains AWK's control statements with suitable examples.|||It simply tests the condition and performs certain actions depending upon the condition. Given below is the syntax of if statement −|||We can also use a pair of curly braces as given below to execute multiple actions −|||For instance, the following example checks whether a number is even or not −|||On executing the above code, you get the following result −|||In if-else syntax, we can provide a list of actions to be performed when a condition becomes false.|||The syntax of if-else statement is as follows −|||In the above syntax, action-1 is performed when the condition evaluates to true and action-2 is performed when the condition evaluates to false. For instance, the following example checks whether a number is even or not −|||On executing this code, you get the following result −|||We can easily create an if-else-if ladder by using multiple if-else statements. The following example demonstrates this −|||On executing this code, you get the following result −|||This chapter explains AWK's loops with suitable example. Loops are used to execute a set of actions in a repeated manner. The loop execution continues as long as the loop condition is true.|||The syntax of for loop is −|||Initially, the for statement performs initialization action, then it checks the condition. If the condition is true, it executes actions, thereafter it performs increment or decrement operation. The loop execution continues as long as the condition is true. For instance, the following example prints 1 to 5 using for loop −|||On executing this code, you get the following result −|||The while loop keeps executing the action until a particular logical condition evaluates to true. Here is the syntax of while loop −|||AWK first checks the condition; if the condition is true, it executes the action. This process repeats as long as the loop condition evaluates to true. For instance, the following example prints 1 to 5 using while loop −|||On executing this code, you get the following result −|||The do-while loop is similar to the while loop, except that the test condition is evaluated at the end of the loop. Here is the syntax of do-whileloop −|||In a do-while loop, the action statement gets executed at least once even when the condition statement evaluates to false. For instance, the following example prints 1 to 5 numbers using do-while loop −|||On executing this code, you get the following result −|||As its name suggests, it is used to end the loop execution. Here is an example which ends the loop when the sum becomes greater than 50.|||On executing this code, you get the following result −|||The continue statement is used inside a loop to skip to the next iteration of the loop. It is useful when you wish to skip the processing of some data inside the loop. For instance, the following example uses continue statement to print the even numbers between 1 to 20.|||On executing this code, you get the following result −|||It is used to stop the execution of the script. It accepts an integer as an argument which is the exit status code for AWK process. If no argument is supplied, exit returns status zero. Here is an example that stops the execution when the sum becomes greater than 50.|||On executing this code, you get the following result −|||Let us check the return status of the script.|||On executing this code, you get the following result −|||AWK has a number of functions built into it that are always available to the programmer. This chapter describes Arithmetic, String, Time, Bit manipulation, and other miscellaneous functions with suitable examples.|||AWK has the following built-in arithmetic functions.|||AWK has the following built-in String functions.|||AWK has the following built-in time functions.|||AWK has the following built-in bit manipulation functions.|||AWK has the following miscellaneous functions.|||Functions are basic building blocks of a program. AWK allows us to define our own functions. A large program can be divided into functions and each function can be written/tested independently. It provides re-usability of code.|||Given below is the general format of a user-defined function −|||In this syntax, the function_name is the name of the user-defined function. Function name should begin with a letter and the rest of the characters can be any combination of numbers, alphabetic characters, or underscore. AWK's reserve words cannot be used as function names.|||Functions can accept multiple arguments separated by comma. Arguments are not mandatory. You can also create a user-defined function without any argument.|||function body consists of one or more AWK statements.|||Let us write two functions that calculate the minimum and the maximum number and call these functions from another function called main. The functions.awk file contains −|||On executing this code, you get the following result −|||So far, we displayed data on standard output stream. We can also redirect data to a file. A redirection appears after the print or printf statement. Redirections in AWK are written just like redirection in shell commands, except that they are written inside the AWK program. This chapter explains redirection with suitable examples.|||The syntax of the redirection operator is −|||It writes the data into the output-file. If the output-file does not exist, then it creates one. When this type of redirection is used, the output-file is erased before the first output is written to it. Subsequent write operations to the same output-file do not erase the output-file, but append to it. For instance, the following example writes Hello, World !!! to the file.|||Let us create a file with some text data.|||On executing this code, you get the following result −|||Now let us redirect some contents into it using AWK's redirection operator.|||On executing this code, you get the following result −|||The syntax of append operator is as follows −|||It appends the data into the output-file. If the output-file does not exist, then it creates one. When this type of redirection is used, new contents are appended at the end of file. For instance, the following example appends Hello, World !!! to the file.|||Let us create a file with some text data.|||On executing this code, you get the following result −|||Now let us append some contents to it using AWK's append operator.|||On executing this code, you get the following result −|||It is possible to send output to another program through a pipe instead of using a file. This redirection opens a pipe to command, and writes the values of items through this pipe to another process to execute the command. The redirection argument command is actually an AWK expression. Here is the syntax of pipe −|||Let us use tr command to convert lowercase letters to uppercase.|||On executing this code, you get the following result −|||AWK can communicate to an external process using |&, which is two-way communication. For instance, the following example uses tr command to convert lowercase letters to uppercase. Our command.awk file contains −|||On executing this code, you get the following result −|||Does the script look cryptic? Let us demystify it.|||The first statement, cmd = ""tr [a-z] [A-Z]"", is the command to which we establish the two-way communication from AWK.|||The next statement, i.e., the print command provides input to the tr command. Here &| indicates two-way communication.|||The third statement, i.e., close(cmd, ""to""), closes the to process after competing its execution.|||The next statement cmd |& getline out stores the output into out variable with the aid of getline function.|||The next print statement prints the output and finally the close function closes the command.|||So far we have used AWK's print and printf functions to display data on standard output. But printf is much more powerful than what we have seen before. This function is borrowed from the C language and is very helpful while producing formatted output. Below is the syntax of the printf statement −|||In the above syntax fmt is a string of format specifications and constants. expr-list is a list of arguments corresponding to format specifiers.|||Similar to any string, format can contain embedded escape sequences. Discussed below are the escape sequences supported by AWK −|||The following example prints Hello and World in separate lines using newline character −|||Example|||On executing this code, you get the following result −|||Output|||The following example uses horizontal tab to display different field −|||Example|||On executing the above code, you get the following result −|||Output|||The following example uses vertical tab after each filed −|||Example|||On executing this code, you get the following result −|||Output|||The following example prints a backspace after every field except the last one. It erases the last number from the first three fields. For instance, Field 1 is displayed as Field, because the last character is erased with backspace. However, the last field Field 4 is displayed as it is, as we did not have a \b after Field 4.|||Example|||On executing this code, you get the following result −|||Output|||In the following example, after printing every field, we do a Carriage Return and print the next value on top of the current printed value. It means, in the final output, you can see only Field 4, as it was the last thing to be printed on top of all the previous fields.|||Example|||On executing this code, you get the following result −|||Output|||The following example uses form feed after printing each field.|||Example|||On executing this code, you get the following result −|||Output|||As in C-language, AWK also has format specifiers. The AWK version of the printf statement accepts the following conversion specification formats −|||It prints a single character. If the argument used for %c is numeric, it is treated as a character and printed. Otherwise, the argument is assumed to be a string, and the only first character of that string is printed.|||Example|||Output|||On executing this code, you get the following result −|||It prints only the integer part of a decimal number.|||Example|||On executing this code, you get the following result −|||Output|||It prints a floating point number of the form [-]d.dddddde[+-]dd.|||Example|||On executing this code, you get the following result −|||Output|||The %E format uses E instead of e.|||Example|||On executing this code, you get the following result −|||Output|||It prints a floating point number of the form [-]ddd.dddddd.|||Example|||On executing this code, you get the following result −|||Output|||Uses %e or %f conversion, whichever is shorter, with non-significant zeros suppressed.|||Example|||Output|||On executing this code, you get the following result −|||The %G format uses %E instead of %e.|||Example|||On executing this code, you get the following result −|||Output|||It prints an unsigned octal number.|||Example|||On executing this code, you get the following result −|||Output|||It prints an unsigned decimal number.|||Example|||On executing this code, you get the following result −|||Output|||It prints a character string.|||Example|||On executing this code, you get the following result −|||Output|||It prints an unsigned hexadecimal number. The %X format uses uppercase letters instead of lowercase.|||Example|||On executing this code, you get the following result −|||Output|||Now let use %X and observe the result −|||Example|||On executing this code, you get the following result −|||Output|||It prints a single % character and no argument is converted.|||Example|||On executing this code, you get the following result −|||Output|||With % we can use following optional parameters −|||The field is padded to the width. By default, the field is padded with spaces but when 0 flag is used, it is padded with zeroes.|||Example|||On executing this code, you get the following result −|||Output|||A leading zero acts as a flag, which indicates that the output should be padded with zeroes instead of spaces. Please note that this flag only has an effect when the field is wider than the value to be printed. The following example describes this −|||Example|||On executing this code, you get the following result −|||Output|||The expression should be left-justified within its field. When the input-string is less than the number of characters specified, and you want it to be left justified, i.e., by adding spaces to the right, use a minus symbol (–) immediately after the % and before the number.|||In the following example, output of the AWK command is piped to the cat command to display the END OF LINE($) character.|||Example|||On executing this code, you get the following result −|||Output|||It always prefixes numeric values with a sign, even if the value is positive.|||Example|||On executing this code, you get the following result −|||Output|||For %o, it supplies a leading zero. For %x and %X, it supplies a leading 0x or 0X respectively, only if the result is non-zero. For %e, %E, %f, and %F, the result always contains a decimal point. For %g and %G, trailing zeros are not removed from the result. The following example describes this −|||Example|||On executing this code, you get the following result −|||Output","AWK − Original AWK from AT & T Laboratory.@@@NAWK − Newer and improved version of AWK from AT & T Laboratory.@@@GAWK − It is GNU AWK. All GNU/Linux distributions ship GAWK. It is fully compatible with AWK and NAWK.|||Text processing,@@@Producing formatted text reports,@@@Performing arithmetic operations,@@@Performing string operations, and many more.|||The first statement, cmd = ""tr [a-z] [A-Z]"", is the command to which we establish the two-way communication from AWK.@@@The next statement, i.e., the print command provides input to the tr command. Here &| indicates two-way communication.@@@The third statement, i.e., close(cmd, ""to""), closes the to process after competing its execution.@@@The next statement cmd |& getline out stores the output into out variable with the aid of getline function.@@@The next print statement prints the output and finally the close function closes the command.",,"S.No.@@@Operators & Description|||1@@@Arithmetic Operators
AWK supports the following arithmetic operators.|||2@@@Increment and Decrement Operators
AWK supports the following increment and decrement operators.|||3@@@Assignment Operators
AWK supports the following assignment operators.|||4@@@Relational Operators
AWK supports the following relational operators.|||5@@@Logical Operators
AWK supports the following logical operators.|||6@@@Ternary Operator
We can easily implement a condition expression using ternary operator.|||7@@@Unary Operators
AWK supports the following unary operators.|||8@@@Exponential Operators
There are two formats of exponential operators.|||9@@@String Concatenation Operator
Space is a string concatenation operator that merges two strings.|||10@@@Array Membership Operator
It is represented by in. It is used while accessing array elements.|||11@@@Regular Expression Operators
This example explains the two forms of regular expressions operators.&&&S.No.@@@Built in functions & Description|||1@@@Arithmetic Functions
AWK has the following built-in arithmetic functions.|||2@@@String Functions
AWK has the following built-in String functions.|||3@@@Time Functions
AWK has the following built-in time functions.|||4@@@Bit Manipulation Functions
AWK has the following built-in bit manipulation functions.|||5@@@Miscellaneous Functions
AWK has the following miscellaneous functions.","[jeryy]$ sudo apt-get update[jeryy]$ sudo apt-get install gawk|||[root]# yum install gawk|||[jerry]$ which awk|||[jerry]$ wget http://ftp.gnu.org/gnu/gawk/gawk-4.1.1.tar.xz|||[jerry]$ tar xvf gawk-4.1.1.tar.xz|||[jerry]$ ./configure|||[jerry]$ make|||[jerry]$ make check|||[jerry]$ sudo make install|||[jerry]$ which awk|||[jerry]$ awk 'BEGIN{printf ""Sr No\tName\tSub\tMarks\n""} {print}' marks.txt|||[jerry]$ awk '{print}' marks.txt |||[jerry]$ awk -f command.awk marks.txt|||[jerry]$ awk -v name=Jerry 'BEGIN{printf ""Name = %s\n"", name}'|||[jerry]$ awk --dump-variables ''[jerry]$ cat awkvars.out |||[jerry]$ awk --help|||[jerry]$ awk --lint '' /bin/ls|||[jerry]$ awk --profile 'BEGIN{printf""---|Header|--\n""} {print} END{printf""---|Footer|---\n""}' marks.txt > /dev/null [jerry]$ cat awkprof.out|||[jerry]$ awk --version|||[jerry]$ awk '{print $3 ""\t"" $4}' marks.txt|||[jerry]$ awk '/a/ {print $0}' marks.txt|||[jerry]$ awk '/a/' marks.txt|||[jerry]$ awk '/a/ {print $3 ""\t"" $4}' marks.txt|||[jerry]$ awk '/a/ {print $4 ""\t"" $3}' marks.txt|||[jerry]$ awk '/a/{++cnt} END {print ""Count = "", cnt}' marks.txt|||[jerry]$ awk 'length($0) > 18' marks.txt|||[jerry]$ awk 'BEGIN {print ""Arguments ="", ARGC}' One Two Three Four|||[jerry]$ awk 'BEGIN {    for (i = 0; i < ARGC - 1; ++i) {       printf ""ARGV[%d] = %s\n"", i, ARGV[i]    } }' one two three four|||[jerry]$ awk 'BEGIN { print ""Conversion Format ="", CONVFMT }'|||[jerry]$ awk 'BEGIN { print ENVIRON[""USER""] }'|||[jerry]$ awk 'END {print FILENAME}' marks.txt|||[jerry]$ awk 'BEGIN {print ""FS = "" FS}' | cat -vte|||[jerry]$ echo -e ""One Two\nOne Two Three\nOne Two Three Four"" | awk 'NF > 2'|||[jerry]$ echo -e ""One Two\nOne Two Three\nOne Two Three Four"" | awk 'NR < 3'|||[jerry]$ awk 'BEGIN {print ""OFMT = "" OFMT}'|||[jerry]$ awk 'BEGIN {print ""OFS = "" OFS}' | cat -vte|||[jerry]$ awk 'BEGIN {print ""ORS = "" ORS}' | cat -vte|||[jerry]$ awk 'BEGIN { if (match(""One Two Three"", ""re"")) { print RLENGTH } }'|||[jerry]$ awk 'BEGIN {print ""RS = "" RS}' | cat -vte|||[jerry]$ awk 'BEGIN { if (match(""One Two Three"", ""Thre"")) { print RSTART } }'|||[jerry]$ awk 'BEGIN { print ""SUBSEP = "" SUBSEP }' | cat -vte|||[jerry]$ awk '{print $0}' marks.txt|||[jerry]$ awk '{print $3 ""\t"" $4}' marks.txt|||[jerry]$ awk '{    print ""ARGIND   = "", ARGIND; print ""Filename = "", ARGV[ARGIND] }' junk1 junk2 junk3|||[jerry]$ awk 'BEGIN { ret = getline < ""junk.txt""; if (ret == -1) print ""Error:"", ERRNO }'|||[jerry]$ awk 'BEGIN{IGNORECASE = 1} /amit/' marks.txt|||[jerry]$ awk 'BEGIN {LINT = 1; a}'|||[jerry]$ awk 'BEGIN { print PROCINFO[""pid""] }'|||[jerry]$ awk 'BEGIN { print TEXTDOMAIN }'|||[jerry]$ echo -e ""cat\nbat\nfun\nfin\nfan"" | awk '/f.n/'|||[jerry]$ echo -e ""This\nThat\nThere\nTheir\nthese"" | awk '/^The/'|||[jerry]$ echo -e ""knife\nknow\nfun\nfin\nfan\nnine"" | awk '/n$/'|||[jerry]$ echo -e ""Call\nTall\nBall"" | awk '/[CT]all/'|||[jerry]$ echo -e ""Call\nTall\nBall"" | awk '/[^CT]all/'|||[jerry]$ echo -e ""Call\nTall\nBall\nSmall\nShall"" | awk '/Call|Ball/'|||[jerry]$ echo -e ""Colour\nColor"" | awk '/Colou?r/'|||[jerry]$ echo -e ""ca\ncat\ncatt"" | awk '/cat*/'|||[jerry]$ echo -e ""111\n22\n123\n234\n456\n222""  | awk '/2+/'|||[jerry]$ echo -e ""Apple Juice\nApple Pie\nApple Tart\nApple Cake"" | awk    '/Apple (Juice|Cake)/'|||[jerry]$ awk 'BEGIN {   fruits[""mango""] = ""yellow"";   fruits[""orange""] = ""orange""   print fruits[""orange""] ""\n"" fruits[""mango""]}'|||[jerry]$ awk 'BEGIN {   fruits[""mango""] = ""yellow"";   fruits[""orange""] = ""orange"";   delete fruits[""orange""];   print fruits[""orange""]}'|||[jerry]$ awk 'BEGIN {   array[""0,0""] = 100;   array[""0,1""] = 200;   array[""0,2""] = 300;   array[""1,0""] = 400;   array[""1,1""] = 500;   array[""1,2""] = 600;   # print array elements   print ""array[0,0] = "" array[""0,0""];   print ""array[0,1] = "" array[""0,1""];   print ""array[0,2] = "" array[""0,2""];   print ""array[1,0] = "" array[""1,0""];   print ""array[1,1] = "" array[""1,1""];   print ""array[1,2] = "" array[""1,2""];}'|||[jerry]$ awk 'BEGIN {num = 10; if (num % 2 == 0) printf ""%d is even number.\n"", num }'|||[jerry]$ awk 'BEGIN {   num = 11; if (num % 2 == 0) printf ""%d is even number.\n"", num;       else printf ""%d is odd number.\n"", num }'|||[jerry]$ awk 'BEGIN {   a = 30;      if (a==10)   print ""a = 10"";   else if (a == 20)   print ""a = 20"";   else if (a == 30)   print ""a = 30"";}'|||[jerry]$ awk 'BEGIN { for (i = 1; i <= 5; ++i) print i }'|||[jerry]$ awk 'BEGIN {i = 1; while (i < 6) { print i; ++i } }'|||[jerry]$ awk 'BEGIN {i = 1; do { print i; ++i } while (i < 6) }'|||[jerry]$ awk 'BEGIN {   sum = 0; for (i = 0; i < 20; ++i) {       sum += i; if (sum > 50) break; else print ""Sum ="", sum    } }'|||[jerry]$ awk 'BEGIN {   for (i = 1; i <= 20; ++i) {      if (i % 2 == 0) print i ; else continue   } }'|||[jerry]$ awk 'BEGIN {   sum = 0; for (i = 0; i < 20; ++i) {      sum += i; if (sum > 50) exit(10); else print ""Sum ="", sum    } }'|||[jerry]$ echo $?|||# Returns minimum numberfunction find_min(num1, num2){   if (num1 < num2)   return num1   return num2}# Returns maximum numberfunction find_max(num1, num2){   if (num1 > num2)   return num1   return num2}# Main functionfunction main(num1, num2){   # Find minimum number   result = find_min(10, 20)   print ""Minimum ="", result     # Find maximum number   result = find_max(10, 20)   print ""Maximum ="", result}# Script execution starts hereBEGIN {   main(10, 20)}|||[jerry]$ echo ""Old data"" > /tmp/message.txt[jerry]$ cat /tmp/message.txt|||[jerry]$ awk 'BEGIN { print ""Hello, World !!!"" > ""/tmp/message.txt"" }'[jerry]$ cat /tmp/message.txt|||[jerry]$ echo ""Old data"" > /tmp/message.txt [jerry]$ cat /tmp/message.txt|||[jerry]$ awk 'BEGIN { print ""Hello, World !!!"" >> ""/tmp/message.txt"" }'[jerry]$ cat /tmp/message.txt|||[jerry]$ awk 'BEGIN { print ""hello, world !!!"" | ""tr [a-z] [A-Z]"" }'|||BEGIN {   cmd = ""tr [a-z] [A-Z]""   print ""hello, world !!!"" |& cmd   close(cmd, ""to"")      cmd |& getline out   print out;   close(cmd);}|||[jerry]$ awk 'BEGIN { printf ""Hello\nWorld\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Sr No\tName\tSub\tMarks\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Sr No\vName\vSub\vMarks\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Field 1\bField 2\bField 3\bField 4\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Field 1\rField 2\rField 3\rField 4\n"" }'|||[jerry]$ awk 'BEGIN { printf ""Sr No\fName\fSub\fMarks\n"" }'|||[jerry]$ awk 'BEGIN { printf ""ASCII value 65 = character %c\n"", 65 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %d\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %E\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %e\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %f\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %g\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %G\n"", 80.66 }'|||[jerry]$ awk 'BEGIN { printf ""Octal representation of decimal number 10 = %o\n"", 10}'|||[jerry]$ awk 'BEGIN { printf ""Unsigned 10 = %u\n"", 10 }'|||[jerry]$ awk 'BEGIN { printf ""Name = %s\n"", ""Sherlock Holmes"" }'|||[jerry]$ awk 'BEGIN {    printf ""Hexadecimal representation of decimal number 15 = %x\n"", 15}'|||[jerry]$ awk 'BEGIN {    printf ""Hexadecimal representation of decimal number 15 = %X\n"", 15}'|||[jerry]$ awk 'BEGIN { printf ""Percentags = %d%%\n"", 80.66 }'|||[jerry]$ awk 'BEGIN {    num1 = 10; num2 = 20; printf ""Num1 = %10d\nNum2 = %10d\n"", num1, num2 }'|||[jerry]$ awk 'BEGIN {    num1 = -10; num2 = 20; printf ""Num1 = %05d\nNum2 = %05d\n"", num1, num2 }'|||[jerry]$ awk 'BEGIN { num = 10; printf ""Num = %-5d\n"", num }' | cat -vte|||[jerry]$ awk 'BEGIN {    num1 = -10; num2 = 20; printf ""Num1 = %+d\nNum2 = %+d\n"", num1, num2 }'|||[jerry]$ awk 'BEGIN {    printf ""Octal representation = %#o\nHexadecimal representaion = %#X\n"", 10, 10}'"
Learn Awk Programming,AWK - Useful Resources,AWK - Useful Resources|||Useful Links on AWK@@@Useful Books on AWK,"The following resources contain additional information on AWK. Please use them to get more in-depth knowledge on this.|||AWK Wiki −  Wikipedia Reference for AWK.|||To enlist your site on this page, please drop an email to contact@tutorialspoint.com",AWK Wiki −  Wikipedia Reference for AWK.,,,
Learn Awk Programming,Discuss AWK,Discuss AWK,"This tutorial takes you through AWK, one of the most prominent text-processing utility on GNU/Linux. It is very powerful and uses simple programming language. It can solve complex text processing tasks with a few lines of code. Starting with an overview of AWK, its environment, and workflow, the tutorial proceeds to explain the syntax, variables, operators, arrays, loops, and functions used in AWK. It also covers topics such as output redirection and pretty printing.",,,,
