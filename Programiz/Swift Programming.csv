Links,Main Heading,Chapter Headings,Description,Contents,Unordered Lists,Ordered Lists,Table Data
https://www.programiz.com/swift-programming,Learn Swift Programming,About Swift Programming$$$Why Learn Swift?$$$How to learn Swift?,"Swift is a powerful and intuitive programming language developed by Apple. It is used to create apps for iOS, macOS, watchOS, and so on. Swift code is concise yet expressive (easier to understand and write). Our Swift tutorial will guide you to learn Swift one step at a time.",,"Open Source - Swift source code and development builds are available for everyone.$$$Fast and Powerful - Swift programming is fast and powerful. Also, the source code is concise yet expressive.$$$Interoperability - Swift code can be used along with the existing Objective-C projects.$$$It is used for creating applications for iOS, macOS, watchOS, and so on.$$$It is also used in server applications that provide safety and high performance.$$$Swift tutorial from Programiz - We provide step by step Swift tutorials. Get started with Swift.$$$Official Swift tutorial - You can learn Swift by following the official documentation. To learn more, visit the official Swift tutorial documentation.$$$Practice- The only way you can learn programming is by practicing and writing a lot of code.",,
https://www.programiz.com/swift-programming/hello-world,"Swift ""Hello, World!"" Program","Swift ""Hello, World!"" Program$$$How Swift ""Hello, World!"" Program Works?$$$Table of Contents",,"In this tutorial, you will learn to write a program to print ""Hello, World!"" in Swift.|||A Hello World is a simple program that prints Hello, World! on the screen. This program is often used to introduce a new programming language to beginners.|||Let's explore how to create ""Hello, World!"" program in Swift.|||Output|||Note: If you want to run this program on your computer, make sure that Swift is properly installed. To learn more about setting up Swift on your computer, visit Getting Started with Swift.|||Here are the different sections of the Hello World program in Swift:|||1. Swift Comment|||We use two slashes // to write comments in Swift.||||||Comments are hints that we can add to our program to make our code more understandable. They are meant for people reading the code. To learn more, visit Swift Comments.|||2. print Statement|||The code above displays the text Hello, World! on your screen.|||Congratulations! You just wrote your first program in Swift.|||Next we'll learn about variables, constants, and literals in Swift.","Introduction$$$""Hello, World!"" Program$$$Working",,
https://www.programiz.com/swift-programming/variables-constants-literals,"Swift Variables, Constants and Literals (With Examples)",1. Swift Variables$$$Declare Variables in Swift$$$Assign Values to Variables$$$Change Value of a Variable$$$Rules for naming Swift Variables$$$2. Swift Constants$$$Declare Constants in Swift$$$3. Swift Literals$$$Integer Literals$$$Floating-point Literals$$$Boolean Literals$$$String and Character Literals$$$Table of Contents,,"In this tutorial, you will learn about variables, constants, and literals in Swift.|||In programming, a variable is a container (storage area) to hold data. For example,|||Here, num is a variable storing the value 10.|||In Swift, we use the var keyword to declare variables. For example,|||Here,|||Note: In Swift, we cannot change the type of a variable once it's declared.|||You can assign values to variables using the = operator.|||Output|||You can also assign a variable directly without the type annotation as:|||Here, the compiler automatically figures out that siteName is a variable of the String type.|||You can change the value of an existing variable. Hence, the name variable. For example,|||Output|||Here, the value of siteName is changed from ""programiz.com"" to ""apple.com"".|||The rules for naming variables are:|||Notes:|||A constant is a special type of variable whose value cannot be changed. For example,|||Here, after a is initialized to 5, we cannot change its value.|||In Swift, we use the let keyword to declare constants. The value of a constant cannot be changed. For example,|||Output|||Also, you cannot declare a constant without initializing it. For example,||||||Output|||Notes:|||Literals are representations of fixed values in a program. They can be numbers, characters, or strings, etc. For example, ""Hello, World!"", 12, 23.0, ""C"", etc.|||Literals are often used to assign values to variables or constants.|||For example:|||In the above expression, siteName is a variable, and ""Apple.com"" is a literal.|||Integer literals are those that do not have a fractional or an exponential part.|||There are four types of integer literals in Swift:|||Floating-point literals are numeric literals that have floating decimal points. For example,|||Here, 3.14 is a floating-point literal assigned to the piValue constant.|||There are two boolean literals: true and false.|||For example,|||Here, true is a boolean literal assigned to pass.|||Character literals are Unicode characters enclosed in double-quotes. For example,|||Here, S is a character literal assigned to someCharacter.|||Similarly, String literals are sequences of characters enclosed in double quotes "".|||For example,|||Here, ""Swift is fun"" is a string literal assigned to someString.","siteName is a variable of type String. Meaning, it can only store textual values.$$$id is a variable of Int type. Meaning, it can only store integer values.$$$It's a good practice to give a descriptive variable name. For example, numberofApples is a better variable name than a, apple, or n.$$$In Swift, variable names are generally written in camelCase if they have multiple words. For example, myVariable, addTwoNums, etc.$$$If you are sure that the value of a variable won't change throughout the program, it's recommended to use let.$$$The rules for naming variables also apply to constants.$$$Swift Variables$$$Declare Variables in Swift $$$Assign Values to Variables$$$Change Value of a Variable$$$Rules for naming Variables$$$Swift Constants $$$Declare Constants in Swift$$$Swift Literals","Variables names must start with either a letter, an underscore _, or the dollar sign $. For example,// validvar a = ""hello""var _a = ""hello""var $a = ""hello""$$$Variable names cannot start with numbers. For example,// invalidvar 1a = ""hello"" // throws error$$$Swift is case-sensitive. So A and a are different variables. For example,var A = 5 var a = 55print(A) // 5print(a) // 55$$$Avoid using Swift keywords like var, String, class, etc. as variable names.","Type|||Example|||Remarks$$$Decimal|||5, 10, -68|||Regular numbers.$$$Binary|||0b101, 0b11|||Start with 0b.$$$Octal|||0o13|||Start with 0o.$$$Hexadecimal|||0x13|||Start with 0x."
https://www.programiz.com/swift-programming/data-types,Swift Data Types (With Examples),Swift Data Types$$$Swift Character$$$Swift String$$$Swift Integer$$$Swift Boolean$$$Swift Float$$$Swift Double$$$Variants of Int type$$$Table of Contents,,"In this tutorial, you will learn about data types in Swift programming with the help of examples.|||In computer programming, data types specify the type of data that can be stored inside a variable. For example,|||Here, Int is a data type that specifies that the num variable can only store integer data.|||There are six basic types of data types in Swift programming.|||The character data type is used to represent a single-character string. We use the Character keyword to create character-type variables. For example,|||In the above example, we have created a Character type variable named letter. Here, we have assigned ""s"" to the letter.|||Note: If you try to assign more than one character like ""abc"" to variables of Character type, you'll get an error message.|||The string data type is used to represent textual data.|||We use the String keyword to create string-type variables. For example,|||In the above example, we have created a String type variable named language. Here, we have assigned ""swift"" to the language.|||To learn more about strings and characters, visit Swift Characters and Strings.|||An integer data type is used to represent a whole number with no fractional component. We use the Int keyword to create integer-type variables. For example,|||In the above example, we have created an Int type variable named number. Here, we have assigned 3 to the number.|||Here are some of the basic properties of integers in swift programming.|||Swift programming provides different variants of Int type having different sizes.||||||A boolean data type is used to represent logical entities. It can have one of two values: true or false. We use the Bool keyword to create boolean-type variables. For example,|||Output|||In the above example, we have created Bool type variables: passCheck and failCheck. Here, we have assigned true to the passCheck variable and false to the failCheck variable.|||If we don't assign any value to a boolean variable, it takes false as its default value.|||Note: Booleans are frequently used with if-else statements. To learn more, visit Swift if...else Statement.|||A float data type is used to represent a number with a fractional component. We use the Float keyword to create float-type variables. For example,|||In the above example, we have created a Float type variable named piValue. Here, we have assigned 3.14 to piValue.|||Here are some of the basic properties of float in swift programming.|||Like Float, a double data type is also used to represent a number with fractional components.|||However, Double supports data up to 15 decimal places. We use the Double keyword to create double variables. For example,|||In the above example, we have created a Double type variable named latitude. Here, we have assigned 27.7007697012432 to latitude.|||Here are some of the basic properties of double in swift programming:|||Note: If we have a number like 27.7007697012432, we use:",Size: Depends on the platform type$$$Range: -231 to 231-1 (32 bit platform)-263 to 263-1 (64-bit platform)$$$Size: 32-bit floating-point number$$$Range: 1.2 x 10-38 to 3.4 x 1038 (Up to 6 decimal places)$$$Size: 64-bit floating-point number$$$Range: 2.3 x 10-308 to 1.7 x 10308 (Up to 15 decimal places)$$$Double to store the number with more precision (up to 15 decimal places)$$$Float to store the number with less precision (up to 6 decimal places)$$$Introduction$$$Swift Data Types$$$Character$$$String$$$Integer$$$Boolean$$$Float $$$Double,,"Data Types|||Example|||Description$$$Character|||""s"",""a""|||a 16-bit Unicode character$$$String|||""hello world!""|||represents textual data$$$Int|||3, -23|||an integer number$$$Float|||2.4, 3.14, -23.21|||represents 32-bit floating-point number$$$Double|||2.422342412414|||represents 64-bit floating-point number$$$Bool|||true and false|||Any of two values: true or false$$$Variant|||Size|||Range$$$Int8|||8 bit|||-128 to 127$$$Int16|||16 bit|||-215 to 215-1$$$Int32|||32 bit|||-231 to 231-1$$$Int64|||64 bit|||-263 to 263-1$$$UInt|||Depends on platform|||0 to 232(32-bit platform) 0 to 264(64-bit platform)"
https://www.programiz.com/swift-programming/characters-strings,Swift Characters and Strings (With Examples),Swift Character$$$Character Example$$$Swift String$$$String Example$$$String Operations$$$Escape Sequences$$$String Interpolation$$$Swift Multiline String$$$1. Compare Two Strings$$$2. Join Two Strings$$$3. Find Length of String$$$Other Built-in Functions$$$Create String Instance$$$Table of Contents,,"In this tutorial, you will learn about Swift characters and strings. You'll also learn different operations that can be performed on strings and characters.|||Character is a data type that represents a single-character string (""a"", ""@"", ""5"", etc).|||We use the Character keyword to create character-type variables in Swift. For example,|||Here, the letter variable can only store single-character data.|||In the above example, we have created two character variables: letter and symbol. Here, we have assigned ""H"" to letter and ""@"" to symbol.|||Note: If we try to assign more than one character to a Character variable, we will get an error.|||In Swift, a string is used to store textual data (""Hey There!"", ""Swift is awesome."", etc).|||We use the String keyword to create string-type variables. For example,|||Here, the name variable can only store textual data.|||Note: Since a string contains multiple characters, it is called a sequence of characters.|||Output|||In the above example, we have created string-type variables: name and message with values ""Swift"" and ""I love Swift"" respectively.|||Notice the statement,|||Here, we haven't used the String keyword while creating the variable. It is because Swift is able to infer the type based on the value.|||Note: In Swift, we use double quotes to represent strings and characters.|||The String class in Swift provides various built-in functions that allow us to perform different operations on strings.|||We use the == operator to compare two strings. If two strings are equal, the operator returns true. Otherwise, it returns false. For example,|||Output|||In the above example,|||We use the append() function to join two strings in Swift. For example,|||Output|||In the above example, we have used the append() method to join name and greet.|||Concatenate Using + and +=||||||We can also use the + and += operators to concatenate two strings.|||Output|||In the above example, we have used the + and += operators to join two strings: greet and name.|||Note: We cannot create greet using let. It is because the += operator joins two strings and assigns the new value to greet.|||We use the count property to find the length of a string. For example,|||Note: The count property counts the total number of characters in a string including whitespaces.|||The escape sequence is used to escape some of the characters present inside a string.|||Suppose we need to include double quotes inside a string.|||Since strings are represented by double quotes, the compiler will treat ""This is "" as the string. Hence, the above code will cause an error.|||To solve this issue, we use the escape character \ in Swift.|||Now the program will run without any error. Here, the escape character will tell the compiler to ignore the character after \.|||Here is a list of all the escape sequences supported by Swift.|||We can also use the backslash character \ to use variables and constants inside a string. For example,|||Output|||In the above example, notice the line|||Here, we are using the name variable inside the string message. This process is called String Interpolation in Swift.|||We can also create a multiline string in Swift. For this, we use triple double quotes """""". For example,|||Output|||In the above example, anything inside the enclosing triple-quotes is one multiline string.|||Note: Multi-line strings must always begin on a new line. Otherwise, it will generate an error.|||We can also create a string using an initializer syntax. For example,|||Here, the initializer syntax String() will create an empty string.","str1 and str2 are not equal. Hence, the result is false.$$$str1 and str3 are equal. Hence, the result is true.$$$Swift Character$$$Character Example$$$Swift String$$$String Example$$$String Operations$$$Compare Two Strings$$$Join Two Strings$$$Find Length of String $$$Escape Sequences$$$String Interpolation$$$Swift Multiline String$$$Create String Instance ",,"Built-in function|||Description$$$isEmpty|||determines if a string is empty or not$$$capitalized|||capitalizes the first letter of every word in a string$$$uppercased()|||converts string to uppercase$$$lowercase()|||converts string to lowercase$$$hasPrefix()|||determines if a string starts with certain characters or not$$$hasSuffix()|||determines if a string ends with certain characters or not$$$Escape Sequences|||Character$$$\0|||null$$$\\|||plain backslash$$$\t|||a horizontal tab$$$\n|||line feed$$$\""|||double quote"
https://www.programiz.com/swift-programming/basic-input-output,Swift Basic Input and Output (With Examples),Swift Output$$$Example 1: Swift Print Statement$$$Example 2: print() with terminator$$$Example 3: print() with separator$$$Example: Print Variables and Literals$$$Example: Print Concatenated Strings$$$Print Variables and Strings together$$$Swift Basic Input$$$Table of Contents,,"In this tutorial, we will learn simple ways to display output to users and take input from users in Swift.|||In Swift, we can simply use the print() function to print output. For example,|||Here, the print() function displays the string enclosed inside the double quotation.|||Syntax of print()|||In the above code, the print() function is taking a single parameter.|||However, the actual syntax of the print function accepts 3 parameters|||Here,|||Note: separator and terminator are optional. If we don't include them inside the print(), their default values: single space "" "" for separator and new line ""\n"" for terminator are used.|||Output|||In the above example, the print() statement only includes the items to be printed. Here, the value for terminator is not used. Hence, it takes the default value ""\n"".|||So we get the output in two different lines.|||Output|||Notice that we have included the terminator: "" "" after the end of the first print() statement.|||Hence, we get the output in a single line separated by space.|||Output|||In the above example, the print() statement includes multiple items separated by a comma.|||Notice that we have used the optional parameter separator: "". "" inside the print() statement. Hence, the output includes items separated by .  not comma.|||We can also use the print() function to print Swift variables. For example,|||Output||||||We can also join two strings together inside a print() statement. For example,|||Output|||Here,|||To learn more about joining strings, visit Swift Join String.|||In Swift, we can print a string and variable together by using string interpolation. Here, we use the backslash and bracket to print variables inside a string. For example,|||Output|||In the above example, the string inside the print() statement includes|||Now, the print() statement takes the value of the variable year and joins it with the string.|||Hence, we get the output: ""Swift was introduced in 2014"".|||In Swift, we cannot directly take input from the Xcode playground.|||However, we can create a Command line Tool in Xcode and use the readLine() function to take input from users.|||For example,|||Output|||In the above example, we are asking users to input values. Notice the code,|||Here, the readLine() takes input from the user and assigns it to the name variable.|||The readLine() function doesn't return a regular string. Instead, it returns an optional string. Hence, we have used name! to forcefully unwrap the name.|||To learn more about optional, visit Swift Optionals.|||Note: The above program only runs if you have created a command line tool in Xcode. To learn how to create command line tools, visit Command Line Tool on macOS.","items - values inside the double quotation$$$separator (optional) - allows us to separate multiple items inside print().$$$terminator (optional) - allows us to add add specific values like new line ""\n"", tab ""\t""$$$the + operator joins two strings ""Programiz is "" and ""awesome.""$$$the print() function prints the joined string$$$Text: Swift was introduced in$$$Variable: /(year)$$$Swift Output$$$Example 1: Swift Print Statement$$$Example 3: print() with separator$$$Example: Print Variables and Literals$$$Example: Print Concatenated Strings$$$Print Variables and Strings together$$$Swift Basic Input",,
https://www.programiz.com/swift-programming/expressions-statements-blocks,"Swift Expressions, Statements and Code blocks",Swift Expressions$$$Swift Statements$$$Swift Code Blocks$$$1. Simple Statements$$$2. Conditional Statements$$$3. Loop Statements$$$Table of Contents,,"In this article, you will learn about Swift expressions, statements and blocks.|||An expression is a combination of variables, operators, literals, and functions. For example,|||Here, expressions are:|||Statements are instructions to perform a specific task. For example,|||Here, we have used the print statement to instruct the computer to display the text ""Hello World"".|||There are three types of statements in Swift: |||The simple statement consists of either an expression or declaration. For example,|||Here, var score = 9 * 5 is a statement that assigns the result of 9 * 5 to the score variable.|||Simple statements are the most common types of statements in Swift. The print statement we have used earlier is also an example of simple statements.|||The conditional statement allows us to execute a certain block of code only when certain conditions are met. For example,||||||In the above example, if (age > 18) is a conditional statement. Here, the print statement is only executed if the condition age > 18 is true.|||There are two types of conditional statements:|||Loop statements allow us to repeatedly execute a block of code. For example,|||Output|||In the above example, we have used a for loop statement: for i in 1...3. It executes the print statement 3 times.|||There are three types of looping statements in Swift.|||Note: 1...3 represents the range in Swift. To learn more, visit Swift Ranges.|||A code block is a group of statements (zero or more) that is enclosed in curly braces { }. For example,|||Here, the code block consists two statements:","var marks = 80 - represents we are assigning 80 to marks$$$num1 == num2 - compares num1 and num2$$$if...else statement$$$switch statement$$$for-in loop$$$while loop$$$repeat while loop$$$let sum = 2+3$$$print(""Result is \(sum)"")$$$Swift Expressions$$$Swift Statements$$$Swift Code Blocks",,
https://www.programiz.com/swift-programming/comments,Swift Comments: How to use them and Why?,Single Line Comment$$$Multiline Comment$$$Use of Swift Comment$$$Table of Contents,,"In this article, you will learn about Swift comments, why and how to use them.|||In computer programming, comments are hints that we use to make our code more understandable.|||Comments are completely ignored by the compiler. They are meant for fellow programmers.|||There are two ways to add comments in Swift:|||In Swift, any line that starts with // is a single line comment. For example,|||Here, we have created two single-line comments:|||We can also use the single-line comment along with the code.|||In Swift, any text between /* and */ is a multiline comment. For example,||||||In the above example, we have used /*...*/ to write the comment that extends for multiple lines.|||If we write comments in our code, it will be easier for future reference.|||Also, it will be easier for other developers to understand the code.|||If we get an error while running the program, we can comment the line of code that causes the error instead of removing it. For example,|||Here, print(""Error Line) was causing an error so we have changed it as comment. Now, the program runs without any error.|||This is how comments can be a valuable debugging tool.|||Note: Always use comments to explain why we did something rather than how we did something. Comments shouldn't be the substitute for the way to explain poorly written code.",// - Single Line comments$$$/*...*/ - Multiline Comments$$$// create a variable$$$// print the value$$$Introduction$$$Single Line Comment$$$Multiline Comment$$$Use of Swift Comment,,
https://www.programiz.com/swift-programming/optionals,Swift Optionals: How to Use them (With Examples),How to declare an Optional?$$$Optional Handling$$$Example 1: How to declare an optional in Swift?$$$Example 2: Assigning and accessing a value from an optional$$$Example 3: Explicitly declaring an unwrapped optional$$$Example 4: Fatal error when accessing a null unwrapped optional$$$1. If-statement$$$2. Optional Binding (if-let)$$$3. Guard statement$$$4. Nil-coalescing operator$$$Table of Contents,,"In this article, you will learn about optional, its use cases and optional handling in Swift.|||In the previous article, we learned about different data types available in Swift and also noticed variable or constant declared of those types contains a default value.|||Example:|||When you run the program, the output will be:|||However there is another data type in Swift called Optional, whose default value is a null value (nil). You can use optional when you want a variable or constant contain no value in it. An optional type may contain a value or absent a value (a null value).|||Non technically, you can think optional as a shoe box. The shoe box may or may not contain a shoe in it. So, you should know beforehand while accessing the shoe from the box.|||You can simply represent a Data type as Optional by appending ! or ? to the Type. If an optional contains a value in it, it returns value as Optional<Value>, if not it returns nil.|||When you run the program, the output will be:|||In the above program, we have initialized a optional type using ? and !. Both ways are valid to create an optional but there is one major difference which we will explore below.|||Declaring an optional Int means the variable will either have an integer value or no value. Since no value is assigned to the variable, you can see both print statement outputs nil on the screen.|||When you run the program, the output will be:|||In the above program, we have declared an optional of Int type and assigned value 5 in it.|||As you can see, printing the optional as print(someValue) doesn't give you 5 but Optional(5). It is of the form as described above: Optional<Value>. In order to access the <Value> from it, we need a mechanism called unwrapping.|||You can unwrap an optional by appending ! character at the end of the variable/constant as in the next line print(someValue!). print(someValue!) unwraps the optional and outputs 5 on the screen.|||However, remember, this kind of unwrapping mechanism should only be used when you are certain that the optional will sure have a value when you access it.|||You can also create an unwrapped optional as:|||When you run the program, the output will be:|||In the above program, Int! creates a unwrapped optional, which automatically unwraps the value while you access it so that you don't need to everytime append the ! character.|||Be certain while you use these kinds of optionals, the variable will always need to have a value when you access it. If you don't, you will get a fatal error crash.|||When you run the program, you will get a crash as fatal error: unexpectedly found nil while unwrapping an Optional value because the code unwrappedValue:Int = someValue tries to assign value from Optional someValue to variable unwrappedValue.||||||However, somevalue is an Optional type that contains nil value. Trying to assign nil value to variable unwrappedValue which is not an optional will lead to crash.|||There are different techniques to handle this case which are explained below.|||In order to use value of an optional, it needs to be unwrapped. Better way to use optional value is by conditional unwrapping rather than force unwrapping using ! operator.|||This is because conditionally unwrapping asks Check if this variable has a value? . If yes, give the value, otherwise it will handle the nil case.|||On the contrary, force unwrapping says This variable does have a value while you use it. Therefore, when you force unwrap a variable that is nil, your program will throw an unexpectedly found nil while unwrapping an optional exception and crash. Some of the techniques for conditional unwrapping are explained below:|||You can use if statement and compare optional with nil to find out whether a optional contains a value or not. You can use the comparison operator ""equal to"" operator (==) or the ""not equal to"" operator (!=) in the if statement.|||When you run the program, the output will be:|||In the above program, the code inside if statement executes if an optional contain a value, otherwise the statement inside the else block executes. The major drawback of optional handling using this technique is, you still need to unwrap the value from optional using ! operator.|||Optional binding helps you to find out whether an optional contains a value or not. If an optional contains a value, that value is available as a temporary constant or variable. Therefore, optional binding can be used with if statement to check for a value inside an optional, and to extract that value into a constant or variable in a single action.|||When you run the program, the output will be:|||In the above program, the code inside if statement executes if the optional contains a value. Otherwise the else block gets executed. The if-let statement also automatically unwraps the value and places the unwrapped value in temp constant. This technique has major advantage because you don't need to forcely unwrap the value although being certain an optional contains a value.|||You can use guard to handle optionals in Swift. Don't worry if you don't know what guard is. For now, just think of guard as an if-else condition with no if block. If the condition fails, else statement is executed. If not, next statement is executed. See Swift guard for more details.|||When you run the program, the output will be:|||In the above program, the guard contains a condition whether an optional someValue contains a value or not. If it contains a value then guard-let statement automatically unwraps the value and places the unwrapped value in temp constant. Otherwise, else block gets executed and and it would return to the calling function. Since, the optional contains a value, print function is called.|||In Swift, you can also use nil-coalescing operator to check whether a optional contains a value or not. It is defined as (a ?? b). It unwraps an optional a and returns it if it contains a value, or returns a default value b if a is nil.|||When you run the program, the output will be:|||In the above program, variable someValue is defined optional and contains nil value. The nil coalescing operator fails to unwrap the optional therefore returns defaultValue. Therefore the statement print(unwrappedValue) outputs 5 in the console.|||When you run the program, the output will be:|||However, in the above program, optional variable someValue is initialized with value 10. So, the nil coalescing operator successfully unwraps the value from someValue. Therefore, the statement someValue ?? defaultValue returns 10 and the statement print(unwrappedValue) outputs 10 in the console.",What is Swift Optional?$$$How to declare an optional?$$$Assign and access value from optional$$$Explicitly declared unwrapped optional$$$Fatal error when accessing unwrapped optional$$$Optional handlingIf-statementIf-let statementGuard statementNil-coalescing operator$$$If-statement$$$If-let statement$$$Guard statement$$$Nil-coalescing operator,,
https://www.programiz.com/swift-programming/operators,Swift Operators (With Examples),Types of Operators$$$1. Swift Arithmetic Operators$$$2. Swift Assignment Operators$$$3. Swift Comparison Operators$$$4. Swift Logical Operators$$$5. Swift Bitwise Operators$$$6. Other Swift Operators$$$Example 1: Arithmetic Operators in Swift$$$Example 2: Assignment Operators$$$Example 3: Comparison Operators$$$Example 4: Logical Operators$$$Table of Contents,,"In this article, you'll learn everything about different types of operators in Swift programming language, their syntax and how to use them with examples.|||Operators are special symbols that perform operations on variables and values. For example,|||Here, + is an operator that adds two numbers: 5 and 6.|||Here's a list of different types of Swift operators that you will learn in this tutorial.|||Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, etc. For example,|||Here, - is an arithmetic operator that subtracts two values or variables.|||Output|||In the above example, we have used|||/ Division Operator|||The / operator performs division between two numbers. However, if two numbers are integers, we will only get the quotient. For example,|||If we use the / operator with floating-point numbers, we will get the actual result. For example,|||% Modulo Operator|||The modulo operator % computes the remainder. For example,|||Note: The % operator can only be used with integers.|||Assignment operators are used to assign values to variables. For example,||||||Here, = is an assignment operator that assigns 5 to x. Here's a list of different assignment operators available in Swift.|||Output|||Comparison operators compare two values/variables and return a boolean result: true or false. For example,|||Here, the > comparison operator is used to compare whether a is greater than b or not.|||Output|||Note: Comparison operators are used in decision-making and loops. We'll discuss more of the comparison operator in later tutorials.|||Logical operators are used to check whether an expression is true or false. They are used in decision-making. For example,|||Here, && is the logical operator AND. Since both a > 2 and b >= 6 are true, the result is true.|||Output|||In Swift, bitwise operators are used to perform operations on individual bits.|||Bitwise operators are rarely used in everyday programming. To learn more, visit Swift bitwise operators to learn more.|||Here's a list of other operators available in Swift. We'll learn more about these operators in later tutorials",+ to add a and b$$$- to subtract b from a$$$* to multiply a and b$$$Introduction$$$Swift Arithmetic Operators$$$Swift Assignment Operators$$$Swift Comparison Operators$$$Swift Logical Operators$$$Swift Bitwise Operators$$$Other Swift Operators,Arithmetic operators$$$Assignment Operators$$$Comparison Operators$$$Logical Operators$$$Bitwise Operators$$$Other Operators,"Operator|||Operation|||Example$$$+|||Addition|||5 + 2 = 7$$$-|||Subtraction|||4 - 2 = 2$$$*|||Multiplication|||2 * 3 = 6$$$/|||Division|||4 / 2 = 2$$$%|||Modulo|||5 % 2 = 1$$$Operator|||Name|||Example$$$=|||Assignment Operator|||a = 7$$$+=|||Addition Assignment|||a += 1 // a = a + 1$$$-=|||Subtraction Assignment|||a -= 3 // a = a - 3$$$*=|||Multiplication Assignment|||a *= 4 // a = a * 4$$$/=|||Division Assignment|||a /= 3 // a = a / 3$$$%=|||Remainder Assignment|||a %= 10 // a = a % 5$$$Operator|||Meaning|||Example$$$==|||Is Equal To|||3 == 5 gives us false$$$!=|||Not Equal To|||3 != 5 gives us true$$$>|||Greater Than|||3 > 5 gives us false$$$<|||Less Than|||3 < 5 gives us true$$$>=|||Greater Than or Equal To|||3 >= 5 give us false$$$<=|||Less Than or Equal To|||3 <= 5 gives us true$$$Operator|||Example|||Meaning$$$&&|||a && b|||Logical AND:true only if both the operands are true$$$|||||a || b|||Logical OR:true if at least one of the operands is true$$$!|||!a|||Logical NOT:true if the operand is false and vice-versa.$$$Operator|||Description$$$&|||Binary AND$$$||||Binary OR$$$^|||Binary XOR$$$~|||Binary One's Complement$$$<<|||Binary Shift Left$$$>>|||Binary Shift Right$$$Operator|||Description|||Example$$$? :|||Ternary Operator - returns value based on the condition|||(5 > 2) ? ""Success"" : ""Error"" // Success$$$??|||Nil-Coalescing Operator - checks whether an optional contains a value or not|||number ?? 5$$$...|||Range Operator - defines range containing values|||1...3 // range containing values 1,2,3"
https://www.programiz.com/swift-programming/operator-precedence-associativity,Swift Operator precedence and associativity (With Examples),Operator precedence table$$$Swift Operator Associativity$$$Operator Associativity Table$$$Example: Operator precedence with the complex assignment operator$$$Table of Contents,,"In this article you will learn about the rules used to evaluate a expression with operators and operands.|||Operator precedence is a set of rules that determines which operator is executed first.|||Before you learn about operator precedence, make sure to know about Swift operators.|||Let's take an example, suppose there is more than one operator in an expression.|||Here,|||In this case, operator precedence is used to identify which operator is executed first. The operator precedence of * is higher than + so multiplication is executed first.|||The table below lists the precedence of Swift operators. The higher it appears in the table, the higher its precedence.|||Output|||In the above example, we have created a variable num with the value 15. Notice the statement|||num += 10 - 2 * 3||||||Here, the precedence order from higher to lower is *, -, and +=. Hence, the statement is executed as num += 10 - (2 * 3).|||If an expression has two operators with similar precedence, the expression is evaluated according to its associativity (either left to right, or right to left). For example,|||Here, operators * and / have the same precedence. And, their associativity is from left to right. Hence, 6 * 4 is executed first.|||Note: If we want to execute the division first, we can use parentheses as print(6 * (4/3)).|||If an expression has two operators with similar precedence, the expression is evaluated according to its associativity.|||For example,|||Here, operators * and / have the same precedence. However, their associativity is left. Hence, 6 * 4 is executed first.|||The table below shows the associativity of Swift operators.","if + is executed first, the value of num will be 52$$$if * is executed first, the value of num will be 28$$$Left Associativity - operators are evaluated from left to right$$$Right Associativity - operators are evaluated from right to left$$$Non-associativity - operators have no defined behavior$$$Introduction$$$Operator precedence table$$$Example: Operator precedence with the complex assignment operator$$$Swift Operator Associativity$$$Operator Associativity Table",,Operators|||Examples$$$Bitwise shift |||>> <<$$$Multiplicative|||% * /$$$Additive|||| - + - ^$$$Range |||..< ...$$$Casting|||is as$$$Nil-Coalescing |||??$$$Comparison |||!= > < >= <= === ==$$$Logical AND|||&&$$$Logical OR|||||$$$Ternary Operator|||? :$$$Assignment Precedence||||= %= /= *= >>= <<= ^= += -=$$$Operators|||Associativity$$$Bitwise Shift: >> <<|||none$$$Multiplicative: % * /|||left$$$Additive: | + - ^|||left$$$Range: ..< ...|||none$$$Casting: is as|||none$$$Nil-Coalescing: ??|||right$$$Comparison: != > < >= <= === ==|||none$$$Logical AND: &&|||left$$$Logical OR: |||||left$$$Ternary Operator: ? :|||right$$$Assignment: |= %= /= *= >>= <<= ^=|||right
https://www.programiz.com/swift-programming/ternary-conditional-operator,Swift Ternary Conditional Operator (With Examples),Ternary Operator in Swift$$$Ternary operator instead of if...else$$$Nested Ternary Operators$$$Example: Swift Ternary Operator$$$Table of Contents,,"In this article, you will learn to use conditional or ternary operator to alter control flow of the program.|||A ternary operator can be used to replace the if...else statement in certain scenarios.|||Before you learn about the ternary operator, make sure to know about Swift if...else statement.|||A ternary operator evaluates a condition and executes a block of code based on the condition. Its syntax is|||Here, the ternary operator evaluates condition and|||The ternary operator takes 3 operands (condition, expression1, and expression2). Hence, the name ternary operator.|||Output|||In the above example, we have used a ternary operator to check pass or fail.|||let result = (marks >= 40) ? ""pass"" : ""fail""|||Here, if marks is greater or equal to 40, pass is assigned to result. Otherwise, fail is assigned to result.|||The ternary operator can be used to replace certain types of if...else statements. For example,||||||You can replace this code|||with|||Output|||Here, both programs give the same output. However, the use of the ternary operator makes our code more readable and clean.|||We can use one ternary operator inside another ternary operator. This is called a nested ternary operator in Swift. For example,|||Output|||The number is Positive.|||In the above example, we the nested ternary operator ((num > 0) ? ""Positive"" : ""Negative"" is executed if the condition num == 0 is false.|||Note: It is recommended not to use nested ternary operators as they make our code more complex.","if condition is true, expression1 is executed.$$$if condition is false, expression2 is executed.$$$Introduction$$$Ternary Operator in Swift$$$Example: Swift Ternary Operator$$$Ternary operator instead of if...else$$$Nested Ternary Operators",,
https://www.programiz.com/swift-programming/bitwise-operators,Swift Bitwise and Bit Shift Operators (With Examples),Bitwise AND Operator$$$Bitwise OR Operator$$$Bitwise XOR Operator$$$Bitwise NOT Operator$$$Left Shift Operator$$$Right Shift Operator$$$Example 1: Bitwise AND Operator$$$Example 2: Bitwise OR Operator$$$Example 3: Bitwise XOR Operator$$$2's complement$$$Example 4: Bitwise NOT Operator$$$Example 5: Left Shift Operator$$$Example 5: Right Shift Operator$$$Table of Contents,,"In this tutorial, we will learn about the bitwise operator and different types of shift operators in Swift with the help of examples.|||Bitwise operators perform operations on integer data at the individual bit-level. These operations include testing, setting, or shifting the actual bits. For example,|||In the example, & and | are bitwise operators.|||Here's the list of various bitwise operators included in Swift|||The bitwise AND & operator returns 1 if and only if both the operands are 1. Otherwise, it returns 0.|||The bitwise AND operation on a and b can be represented in the table below:|||Note: The table above is known as the ""Truth Table"" for the bitwise AND operator.|||Let's take a look at the bitwise AND operation of two integers 12 and 25:|||In the above example, we have declared two variables a and b. Here, notice the line,|||Here, we are performing bitwise AND operation between a and b.|||The bitwise OR | operator returns 1 if at least one of the operands is 1. Otherwise, it returns 0.|||The bitwise OR operation on a and b can be represented in the table below:|||Let us look at the bitwise OR operation of two integers 12 and 25:|||Here, we are performing bitwise OR between 12 and 25.|||The bitwise XOR ^ operator returns 1 if and only if one of the operands is 1. However, if both the operands are 0, or if both are 1, then the result is 0.|||The bitwise XOR operation on a and b can be represented in the table below:|||Let us look at the bitwise XOR operation of two integers 12 and 25:|||Here, we are performing bitwise XOR between 12 and 25.|||The bitwise NOT ~ operator inverts the bit( 0 becomes 1, 1 becomes 0).|||The bitwise NOT operation on a can be represented in the table below:||||||It is important to note that the bitwise NOT of any integer N is equal to -(N + 1). For example,|||Consider an integer 35. As per the rule, the bitwise NOT of 35 should be -(35 + 1) = -36. Now, let's see if we get the correct answer or not.|||In the above example, bitwise NOT of 00100011 is 11011100. Here, if we convert the result into decimal we get 220.|||However, it is important to note that we cannot directly convert the result into decimal and get the desired output. This is because the binary result 11011100 is also equivalent to -36.|||To understand this we first need to calculate the binary output of -36. We use 2's complement to calculate the binary of negative integers.|||The 2's complement of a number N gives -N. It is computed by inverting the bits(0 to 1 and 1 to 0) and then adding 1. For example,|||Here, we can see the 2's complement of 36 (i.e. -36) is 11011100. This value is equivalent to the bitwise complement of 35 that we have calculated in the previous section.|||Hence, we can say that the bitwise complement of 35 = -36.|||In the above example, we have performed the bitwise NOT operation on 12.|||This is exactly what we got in the output.|||The left shift operator shifts all bits towards the left by a specified number of bits. It is denoted by <<.|||As we can see from the image above,|||In the above example, we have created a variable a with the value 3. Notice the statement|||Here, we are performing 2 bits left shift operation on a.|||The right shift operator shifts all bits towards the right by a certain number of specified bits. It is denoted by >>.|||As we can see from the image above,|||Note: Signed integer represents both positive and negative integers while an unsigned integer only represents positive integers.|||In the above example, we are performing 2 bits right shift operations on values 4 and -4.|||As you can see the result is different for 4 and -4. This is because 4 is an unsigned integer so the vacancy is filled with 0 and -4 is a negative signed number so vacancy is filled with 1.","We have a 4-digit number. When we perform a 1 bit left shift operation on it, each bit is shifted to the left by 1 bit.$$$As a result, the left-most bit is discarded, while the right-most bit remains vacant. This vacancy is replaced by 0.$$$We have a 4-digit number. When we perform a 1-bit right shift operation on it, each bit is shifted to the right by 1 bit.$$$As a result, the right-most bit is discarded, while the left-most bit remains vacant. This vacancy is replaced by 0 for unsigned numbers.$$$For signed numbers, the sign bit (0 for positive number, 1 for negative number) is used to fill the vacated bit positions.$$$Introduction$$$Bitwise AND$$$Bitwise OR$$$Bitwise XOR$$$Bitwise NOT$$$Left Shift$$$Right Shift",,Operators|||Name|||Example$$$&|||Bitwise AND|||a & b$$$||||Bitwise OR|||a | b$$$^|||Bitwise XOR|||a ^ b$$$~|||Bitwise NOT|||~ a$$$<<|||Bitwise Shift Left|||a << b$$$>>|||Bitwise Shift Right|||a >> b$$$a|||b|||a & b$$$0|||0|||0$$$0|||1|||0$$$1|||0|||0$$$1|||1|||1$$$a|||a|||a | b$$$0|||0|||0$$$0|||1|||1$$$1|||1|||1$$$1|||0|||1$$$a|||b|||a ^ b$$$0|||0|||0$$$0|||1|||1$$$1|||0|||1$$$1|||1|||0
https://www.programiz.com/swift-programming/if-else-statement,"Swift if, if...else Statement (With Examples)",1. Swift if Statement$$$2. Swift if...else Statement$$$3. Swift if...else if...else Statement$$$Swift nested if Statement$$$Example 1: if Statement$$$Example 2: Swift if...else Statement$$$Example 3: Swift if..else if Statement$$$Example 4: Nested if...else Statement$$$Table of Contents,,"In this tutorial, you will learn about the Swift if...else statement with the help of examples to create decision-making programs.|||In computer programming, we use the if statement to run a block code only when a certain condition is met.|||For example, assigning grades (A, B, C) based on marks obtained by a student.|||In Swift, there are three forms of the if...else statement.|||The syntax of if statement in Swift is:|||The if statement evaluates condition inside the parenthesis ().|||Note: The code inside { } is the body of the if statement.|||Output|||In the above example, we have created a variable named number. Notice the test condition,|||Here, since number is greater than 0, the condition evaluates true.|||If we change the variable to a negative integer. Let's say -5.|||Now, when we run the program, the output will be:|||This is because the value of number is less than 0. Hence, the condition evaluates to false. And, the body of if block is skipped.|||An if statement can have an optional else clause.|||The syntax of if-else statement is:|||The if...else statement evaluates the condition inside the parenthesis.|||If the condition evaluates to true,|||If the condition evaluates to false,|||Output||||||In the above example, we have created a variable named number. Here, the test expression|||Since the value of number is 10, the test expression evaluates to true. Hence code inside the body of if is executed.|||If we change the variable to a negative integer. Let's say -5.|||Now if we run the program, the output will be:|||Here, the test expression evaluates to false. Hence code inside the body of else is executed.|||The if...else statement is used to execute a block of code among two alternatives.|||However, if you need to make a choice between more than two alternatives, then we use the if...else if...else statement.|||The syntax of the if...else if...else statement is:|||Here,|||Output|||In the above example, we have created a variable named number with the value 0. Here, we have two condition expressions:|||Here, both the conditions evaluate to false. Hence the statement inside the body of else is executed.|||You can also use an if statement inside of an if statement. This is known as a nested if statement.|||The syntax of nested if statement is:|||Notes:|||Output|||In the above example, we have used a nested if statement to check whether the given number is positive, negative, or 0.","If condition is evaluated to true, the code inside the body of if is executed.$$$If condition is evaluated to false, the code inside the body of if is skipped.$$$Swift if Statement$$$Example: if Statement$$$Swift if...else Statement$$$Example: if...else$$$Swift if...else if...else Statement$$$Example: if..else if$$$Swift nested if Statement$$$Example: Nested if...else","if the percentage is above 90, assign grade A$$$if the percentage is above 75, assign grade B$$$if the percentage is above 65, assign grade C$$$if statement$$$if...else statement$$$if...else if...else statement$$$the code inside if is executed$$$the code inside else is skipped$$$the code inside else is executed$$$the code inside if is skipped$$$If condition1 evaluates to true, code block 1 is executed.$$$If condition1 evaluates to false, then condition2 is evaluated.If condition2 is true, code block 2 is executed.If condition2 is false, code block 3 is executed.$$$If condition2 is true, code block 2 is executed.$$$If condition2 is false, code block 3 is executed.$$$if (number > 0) - checks if number is greater than 0$$$else if (number < 0) - checks if number is less than 0$$$We can add else and else if statements to the inner if statement as required.$$$We can also insert inner if statement inside the outer else or else if statements(if they exist)$$$We can nest multiple layers of if statements.",
https://www.programiz.com/swift-programming/switch-statement,Swift switch Statement (With Examples),Flowchart of Switch Statement$$$Switch Statement with fallthrough$$$Tuple in Switch Statement$$$Example 1: Simple program using Switch Statement$$$Example 2: Switch Statement with Range$$$Table of Contents,,"In this article, you will learn to use switch control statements to control the flow of your program's execution.|||The switch statement allows us to execute a block of code among many alternatives.|||The syntax of the switch statement in Swift is:|||The switch statement evaluates an expression inside parentheses ().|||Note: We can do the same thing with the if...else...if ladder. However, the syntax of the switch statement is cleaner and much easier to read and write.|||Output|||In the above example, we have assigned 4 to the dayOfWeek variable. Now, the variable is compared with the value of each case statement.|||Since the value matches with case 4, the statement print(""Wednesday"") inside the case is executed, and the program is terminated.|||If we use the fallthrough keyword inside the case statement, the control proceeds to the next case even if the case value does not match with the switch expression. For example,|||Output|||In the above example, since the value matches with case 4, the statement print(""Wednesday"") inside the case is executed|||We have also used the keyword fallthrough. So, the statement print(""Thursday"") inside case 5 is executed even if the case doesn't match with the case statement.||||||Output|||In the above example, instead of a single value, we have used numeric ranges for each case: case 0...16, case 17...30, and case 31...45.|||Here, the value of ageGroup is 33 that falls under the range 32...45. Hence, the statement print(""Middle-aged Adults"") is executed.|||In Swift, we can also use tuples in switch statements. For example,|||Output|||In the above example, we have created a tuple named info with values: ""Dwight"" and 38.|||Here, instead of a single value, each case statement also includes tuples: case (""Dwight"", 38) and case (""Micheal"", 46).|||Now, the value of info is compared with each case statement. Since the value matches with case (""Dwight"", 38), the statement print(""Dwight is 38 years old"") is executed.|||To learn more about tuples, visit Swift Tuple.",Introduction$$$Flowchart of Switch Statement$$$Example 1: Switch Statement$$$Switch Statement with fallthrough$$$Switch Statement with Range$$$Tuple in Swift Switch Statement,"If the result of the expression is equal to value1, statements of the case value1: are executed.$$$If the result of the expression is equal to value2, statements of the case value2: are executed.$$$If there is no match, statements of the default case are executed.",
https://www.programiz.com/swift-programming/for-in-loop,Swift for Loop (with Examples),Swift for-in Loop$$$Flowchart of for-in Loop$$$Example: Loop Over Array$$$for Loop with where Clause$$$for Loop With Range$$$for Loop with Stride Function$$$Table of Contents,,"In this tutorial, we will learn how to use for-in loop in Swift with the help of examples.|||In computer programming, loops are used to repeat a block of code.|||For example, if we want to show a message 100 times, then we can use a loop. It's just a simple example; you can achieve much more with loops.|||There are 3 types of loops in Swift:|||In Swift, the for-in loop is used to run a block of code for a certain number of times. It is used to iterate over any sequences such as an array, range, string, etc.|||The syntax of the for-in loop is:|||Here, val accesses each item of sequence on each iteration. Loop continues until we reach the last item in the sequence.|||Output|||In the above example, we have created an array called languages.|||Initially, the value of language is set to the first element of the array,i.e. Swift, so the print statement inside the loop is executed.|||language is updated with the next element of the array and the print statement is executed again. This way the loop runs until the last element of an array is accessed.|||In Swift, we can also add a where clause with for-in loop. It is used to implement filters in the loop. That is, if the condition in where clause returns true, the loop is executed.|||Output|||In the above example, we have used a for-in loop to access each elements of languages. Notice the use of where clause in the for-in loop.||||||for language in languages where language != ""Java""|||Here, if the condition in where clause returns true, the code inside the loop is executed. Otherwise, it is not executed.|||A range is a series of values between two numeric intervals. For example,|||Here, 1...3 defines a range containing values 1, 2, 3.|||In Swift, we can use for loop to iterate over a range. For example,|||Output|||In the above example, we have used the for-in loop to iterate over a range from 1 to 3.|||The value of i is set to 1 and it is updated to the next number of the range on each iteration. This process continues until 3 is reached.|||If we want a loop to increment by some fixed value in each iteration, instead of range, we have to use stride(from:to:by) function. For example,|||Output|||In the above example, the loop iterates over the range from 1 to 10 with an interval of 2. However, 10 is not included in the sequence.|||Here, the value of i is set to 1 and it is updated by an interval of 2 on each iteration.",Introduction$$$Swift for-in Loop$$$Flowchart of for Loop$$$Example: Swift for Loop$$$for Loop with filter$$$for Loop With Range$$$for with Stride Function,for in loop$$$while loop$$$repeat...while loop,"Iteration|||language|||condition: != ""Java""|||Output$$$1st|||Swift|||true|||Swift is printed.$$$2nd|||Java|||false|||Java is not printed$$$3rd|||Go|||true|||Go is printed$$$4th|||JavaScript|||true|||JavaScript is printed$$$Iteration|||Condition|||Action$$$1st|||true|||1 is printed. i is increased to 2.$$$2nd|||true|||2 is printed. i is increased to 3.$$$3rd|||true|||3 is printed. i is increased to 4.$$$4th|||false|||The loop is terminated"
https://www.programiz.com/swift-programming/repeat-while-loop,Swift while and repeat while Loop (With Examples),Swift while Loop$$$Flowchart of while Loop$$$repeat...while Loop$$$Flowchart of repeat...while Loop$$$Infinite while Loop$$$for vs while loop$$$Example 1: Swift while Loop$$$Example 2: while Loop to Display Game Level$$$Example 3: repeat...while Loop$$$Table of Contents,,"In this tutorial, you will learn about while loop and repeat...while loop with the help of examples.|||In programming, loops are used to repeat a block of code. For example, if you want to show a message 100 times, then you can use a loop. It's just a simple example, you can achieve much more with loops.|||In the previous tutorial, you learned about the Swift for-in Loop. Here, you are going to learn about while and repeat...while loops.|||Swift while loop is used to run a specific code until a certain condition is met.|||The syntax of while loop is:|||Here,|||Output|||Here's how the program works.|||Output|||In the above example, we have used a while loop to check the current level and display it on the console.|||The repeat...while loop is similar to while loop with one key difference. The body of repeat...while loop is executed once before the test expression is checked.||||||The syntax of repeat..while loop is:|||Here,|||In the above example, initially the value of i = 1 and n = 5. For the first time the statement inside the loop executes without checking the condition. The condition is checked after the first iteration is complete.|||Here's how this program works,|||If the condition of a while loop is always true, the loop runs for infinite times (until the memory is full). This is called infinite while loop. For example,|||Output|||Here, the condition is always true. Hence, the while loop will run for infinite times.|||A for-in loop is usually used when the number of iterations is known. For example,|||However, a while loop is usually used when the number of iterations are unknown. For example,|||Note: The working of repeat...while is the same as the while. Hence, it is also used when the number of iterations is unknown.","A while loop evaluates condition inside the parenthesis ().$$$If condition evaluates to true, the code inside the while loop is executed.$$$condition is evaluated again.$$$This process continues until the condition is false.$$$When condition evaluates to false, the loop stops.$$$The body of the loop is executed at first. Then condition is evaluated.$$$If condition evaluates to true, the body of the loop inside the repeat statement is executed again.$$$condition is evaluated once again.$$$This process continues until condition evaluates to false. Then the loop stops.$$$Introduction$$$Swift while Loop$$$Flowchart of while Loop$$$Example 1: Swift while Loop$$$repeat...while Loop$$$Flowchart of repeat...while Loop$$$Example 3: repeat...while Loop$$$Infinite while Loop$$$for vs while loop",,Variable|||Condition: i <= n|||Action$$$i = 1n = 5|||true|||1 is printed. i is increased to 2.$$$i = 2n = 5|||true|||2 is printed. i is increased to 3.$$$i = 3n = 5|||true|||3 is printed. i is increased to 4.$$$i = 4n = 5|||true|||4 is printed. i is increased to 5.$$$i = 5n = 5|||true|||5 is printed. i is increased to 6.$$$i = 6n = 5|||false|||The loop is terminated.$$$Variable|||Condition: i <= n|||Action$$$i = 1n = 5|||not checked|||1 is printed. i is increased to 2.$$$i = 2n = 5|||true|||2 is printed. i is increased to 3.$$$i = 3n = 5|||true|||3 is printed. i is increased to 4.$$$i = 4n = 5|||true|||4 is printed. i is increased to 5.$$$i = 5n = 5|||true|||5 is printed. i is increased to 6.$$$i = 6n = 5|||false|||The loop is terminated.
https://www.programiz.com/swift-programming/nested-loops,Swift Nested Loops (With Examples),Swift Nested for Loop$$$Swift for Loop inside a while Loop$$$break and continue Inside Nested Loop$$$Table of Contents,,"In this tutorial, we will learn about nested loops in Swift with the help of examples.|||If a loop exists inside the body of another loop, it's called a nested loop. Here's an example of the nested for loop.|||Here, the inner for loop for j in 1...2 is nested inside the outer for loop for i in 1...5.|||A nested for loop includes one for loop inside another for loop. For example,|||Output|||In the above example, the outer loop iterates 2 times and prints 2 weeks: Week: 1 and Week: 2.|||And, the inner loop iterates 7 times and prints the 7 days: Day: 1, Day: 2, and so on.|||Note: Similarly, we can also create nested while and repeat...while loops. For example,|||We can also create nested loops of different types. That is, we can put a for loop inside a while loop and vice versa. For example,|||Output|||Here, we have used a for loop inside the while loop.|||Note: Similarly, we can also nest a repeat...while loop inside a while or for loop.|||1. break inside Nested Loop|||When we use a break statement inside the inner loop, it terminates the inner loop but not the outer loop. For example,||||||Output|||In the above example, we have used the break statement inside the inner for loop. Notice the line,|||Here, the program terminates the loop when week is 2.|||Hence, days for week 2 are not printed. However, the outer loop that prints week is unaffected.|||2. continue inside a Nested Loop|||Similarly, when we use a continue statement inside the inner loop, it skips the current iteration of the inner loop only. For example,|||Output|||In the above example, we have used the continue statement inside the inner for loop. Notice the code,|||Here, the continue statement is executed when the value of day is odd. Hence, the program only prints those days that are even.|||We can see the continue statement has affected only the inner loop. The outer loop is working without any problem.",Introduction$$$Nested for Loop$$$for Loop inside while$$$break with Nested Loop$$$continue with Nested Loop,,
https://www.programiz.com/swift-programming/break-statement,Swift break Statement (With Examples),Working of Swift break Statement$$$Swift break statement with for loop$$$break with while Loop$$$Swift break statement with nested loops$$$Swift Labeled break$$$Example: Labeled Statement with break$$$Table of Contents,,"In this tutorial, you will learn about the break statement with the help of examples.|||The break statement is used to terminate the loop immediately when it is encountered.|||The syntax of the break statement is:|||Before you learn about the break statement, make sure you know about:|||We can use the break statement with for loop to terminate the loop when certain condition is met. For example,|||Output|||In the above example, we have used the for loop to print the value of i. Notice the use of the break statement,|||Here, when i is equal to 3, the break statement terminates the loop. Hence, the output doesn't include values after 2.|||Note: The break statement is almost always used with decision-making statements.|||We can also terminate a while loop using the break statement. For example,|||Output|||In the above example, we have used while loop to find the first 5 multiples of 6. Here notice the line,|||This means when i greater than or equal to 5, the while loop is terminated.|||When we use the break statement with nested loops, it terminates the inner loop. For example,|||Output||||||In the above example, we have used the break statement inside the inner for loop.|||Here, when value if i is 2, the break statement is executed. It terminates the inner loop and control flow of the program moves to the outer loop.|||Hence, the value of i = 2 is never displayed in the output.|||Till now, we have used the unlabeled break statement. However, there's another form of break statement in Swift known as the labeled break.|||When using nested loops, we can terminate the outer loop with a labeled break statement.|||As you can see in the above image, we have used the outerloop identifier to specify the outer loop. Now, notice how the break statement is used (break outerloop).|||Here, the break statement is terminating the labeled statement (i.e. outer loop). Then, the control of the program jumps to the statement after the labeled statement.|||Output|||In the above example, we have labeled our loops as:|||This helps to identify the loops. Notice the use of labeled break statement.|||Here, the break statement will now terminate the outer loop labeled with outerloop.",Swift for loop$$$Swift if...else statement$$$Swift while loop$$$Introduction$$$Working of Swift break Statement$$$Swift break statement with for loop$$$break with while Loop$$$Swift break statement with nested loops$$$Swift Labeled break$$$Example: Labeled Statement with break,,
https://www.programiz.com/swift-programming/continue-statement,Swift continue Statement (With Examples),Working of Swift continue Statement$$$Swift continue Statement With for Loop$$$continue with while loop$$$Swift continue statement with nested loops$$$Swift Labeled continue$$$Example: Labeled Statement with continue$$$Table of Contents,,"In this tutorial, we will learn about the continue statement with the help of examples.|||The continue statement is used to skip the current iteration of the loop and the control flow of the program goes to the next iteration.|||The syntax of the continue statement is:|||Before you learn about the continue statement, make sure you know about:|||We can use the continue statement with the for loop to skip the current iteration of the loop. Then the control of the program jumps to the next iteration. For example,|||Output|||In the above example, we have used the for loop to print the value of i. Notice the use of the continue statement,|||Here, when i is equal to 3, the continue statement is executed. Hence, the value 3 is not printed to the output.|||Note: The continue statement is almost always used with decision-making statements.|||We can also skip the current iteration of the while loop using the continue statement. For example,|||Output|||In the above example, we have used the while loop to print the odd numbers between 1 to 10. Notice the line,|||Here, when the number is even, the continue statement skips the current iteration and starts the next iteration.|||When we use the continue statement with nested loops, it skips the current iteration of the inner loop. For example,|||Output||||||In the above example, we have used the continue statement inside the inner for loop.|||Here, when the value of j is 2, the continue statement is executed. Hence, the value of j = 2 is never displayed in the output.|||Till now, we have used the unlabeled continue statement. However, there is another form of continue statement in Swift known as labeled continue.|||When using nested loops, we can skip the current iteration of the outer loop with a labeled continue statement.|||As we can see in the above image, we have used the outerloop identifier to specify the outer loop. Now, notice how the continue statement is used (continue outerloop)|||Here, the continue statement is skipping the current iteration of the labeled statement (i.e. outer loop). Then, the program control goes to the next iteration of the labeled statement.|||Output|||In the above example, we have labeled our loops as:|||outerloop: for i in 1...3 {...}|||innerloop: for j in 1...3 {...}|||This helps to identify the loops. Notice the use of labeled continue statement.|||Here, the continue statement will skip the iteration of outer loop labeled with outerloop when the value of j is equal to 3.|||Note: The use of labeled continue is often discouraged as it makes your code hard to understand.",Swift for loop$$$Swift if...else statement$$$Swift while loop$$$Introduction$$$Working of Swift continue Statement$$$Swift continue Statement With for Loop$$$continue with while loop$$$Swift continue statement with nested loops$$$Swift Labeled continue,,
https://www.programiz.com/swift-programming/guard-statement,Swift guard Statement (With Examples),Syntax of guard Statement$$$Working of Swift guard Statement$$$guard Statement Inside a Function$$$guard with multiple conditions$$$guard-let Statement$$$guard Vs if Statement$$$Example: Swift Guard Statement$$$Table of Contents,,"In this tutorial, we will learn the use of guard statement to control the flow of your program's execution.|||In Swift, we use the guard statement to transfer program control out of scope when certain conditions are not met.|||The guard statement is similar to the if statement with one major difference. The if statement runs when a certain condition is met. However, the guard statement runs when a certain condition is not met.|||The syntax of the guard statement is:|||Here, expression returns either true or false. If the expression evaluates to|||Note: We must use return, break, continue or throw to exit from the guard scope.|||Output|||In the above example, we have used the guard statement to check if the number is even or odd. Notice the line,|||Here, if i is|||Hence, we only get the even numbers as our output.|||We have used the continue statement inside guard to transfer the control to the next iteration of the loop.|||Note: The use of control statements like continue, break, etc. is compulsory. Otherwise, we will get an error: 'guard' body must not fall through, consider using a 'continue' or 'return' to exit the scope.|||The guard statement is generally used with functions. A function is a block of code that performs a specific task. To learn more, visit Swift Function.|||Let's see how we can use a guard statement with functions.|||Output|||In the above example, we have created a function named checkOddEven(). Notice the use of guard statement inside the function.|||Here, the guard statement checks if the number is even or odd. Since the number is odd, the condition number % 2 == 0 returns false.|||Hence, the code inside the guard statement is executed.|||Now, let's change the value of number to an even number, say 24.|||Output||||||Here, since the number is even, the condition number % 2 == 0 evaluates to true.|||So, the code inside the guard statement is skipped and the other code inside of the function is executed. Hence, we get Even Number as an output|||guard statements can also chain multiple conditions separated by comma (,) as:|||Output|||In the above example, the guard statement contains two conditions separated by a comma.|||Here, there will be the Logical AND relation between two conditions. That is, the guard condition is true only if both conditions are true.|||While working with Swift Optionals, the guard statement is used as the guard-let statement. For example,|||Output|||In the above example, we have created an optional variable named age. Here, we are using the guard-let statement to check whether age contains a value or not.|||Since age contains some value, the code inside the guard-let block is not executed. This works similar to the condition of guard being true.|||The guard statement is introduced as an alternative to the if statement. For example,|||Suppose we want to check if a person is eligible to vote, we can use the if statement as:|||Output|||This same program can be written using the guard statement as:|||Output|||As you can see, with the guard statement, we can exit from the function as soon as the condition evaluates to false.","true - statements inside the code block of guard are not executed$$$false - statements inside the code block of guard are executed$$$odd - , i % 2== 0 evaluates to false. And, the code inside the guard is executed.$$$even - , i % 2 == 0 evaluates to true. And, the code inside the guard is skipped.$$$Introduction$$$Working of Swift guard Statement$$$guard Statement Inside a Function$$$guard with multiple conditions$$$guard-let Statement$$$guard Vs if Statement ",,
https://www.programiz.com/swift-programming/arrays,Swift Arrays (With Examples),Create a Swift Array$$$Access Array Elements$$$Add Elements to an Array$$$Modify the Elements of an Array$$$Remove an Element from an Array$$$Other Array Methods$$$Looping Through Array$$$Find Number of Array Elements$$$Check if an Array is Empty$$$Array With Mixed Data Types$$$Table of Contents,,"In this tutorial, you will learn about Swift arrays with the help of examples.|||An array is a collection of similar types of data. For example,|||Suppose we need to record the age of 5 students. Instead of creating 5 separate variables, we can simply create an array:|||Here's how we create an array in Swift.|||Output|||In the above example, we have created an array named numbers. Here, [Int] specifies that the array can only store integer data.|||Swift is a type inference language that is, it can automatically identify the data type of an array based on its values. Hence, we can create arrays without specifying the data type. For example,|||Create an Empty Array|||In Swift, we can also create an empty array. For example,|||Output|||In the above example, value is an empty array that doesn't contain any element.|||It is important to note that, while creating an empty array, we must specify the data type inside the square bracket [] followed by an initializer syntax (). Here, [Int]() specifies that the empty array can only store integer data elements.|||Note: In Swift, we can create arrays of any data type like Int, String, etc.|||In Swift, each element in an array is associated with a number. The number is known as an array index.|||We can access elements of an array using the index number (0, 1, 2 …). For example,|||In the above example, we have created an array named languages.|||Here, we can see each array element is associated with the index number. And, we have used the index number to access the elements.|||Note: The array index always starts with 0. Hence, the first element of an array is present at index 0, not 1.|||Swift Array provides different methods to add elements to an array.|||1. Using append()|||The append() method adds an element at the end of the array. For example,|||Output|||In the above example, we have created an array named numbers. Notice the line,|||Here, append() adds 32 at the end of the array.|||We can also use the append() method to add all elements of one array to another. For example,|||Output|||In the above example, we have two arrays named primeNumbers and evenNumbers. Notice the statement,||||||Here, we are adding all elements of evenNumbers to primeNumbers.|||Note: We must use contentOf with append() if we want to add all elements from one array to another.|||2. Using insert()|||The insert() method is used to add elements at the specified position of an array. For example,|||Output|||Here, numbers.insert(32, at:1) adds 32 at the index 1.|||We can use the array index to modify the array element. For example,|||Output|||Here, initially the value at index 1 is Repeat. We then changed the value to Sleep using|||We can use the remove() method to remove the last element from an array. For example,|||Output|||Similarly, we can also use|||We can use the for loop to iterate over the elements of an array. For example,|||Output|||We can use the count property to find the number of elements present in an array. For example,|||Output|||The isEmpty property is used to check if an array is empty or not. For example,|||Output|||In the above example, we have used isEmpty property to check if arrays numbers and evenNumbers are empty. Here, isEmpty returns|||Till now, we have been using arrays that hold elements of a single data type.|||However, in Swift, we can also create arrays that can hold elements of multiple data types. For example,|||Output|||In the above example, we have created an array named address.|||Here, [Any] specifies that address can hold elements of any data type. In this case, it stores both String and Integer data.",removeFirst() - to remove the first element$$$removeLast() - to remove the last element$$$removeAll() - to remove all elements of an array$$$true - if the array is empty$$$false - if the array is not empty$$$Introduction$$$Create a Swift Array$$$Access Array Elements$$$Add Elements to an Array$$$Modify the Elements of an Array$$$Remove an Element from an Array$$$Other Array Methods$$$Looping Through Array$$$Find Number of Array Elements$$$Check if an Array is Empty$$$Array With Mixed Data Types,,Method|||Description$$$sort()|||sorts array elements$$$shuffle()|||changes the order of array elements$$$forEach()|||calls a function for each element$$$contains()|||searches for the element in an array$$$swapAt()|||exchanges the position of array elements$$$reverse()|||reverses the order of array elements
https://www.programiz.com/swift-programming/sets,Swift Sets (With Examples),Create a Set in Swift$$$Add Elements to a Set$$$Remove an Element from a Set$$$Other Set Methods$$$Iterate Over a Set$$$Find Number of Set Elements$$$Swift Set Operations$$$Check if two sets are equal$$$Create an Empty Set$$$1. Union of Two Sets$$$2. Intersection between Two Sets$$$3. Difference between Two Sets$$$4. Symmetric Difference between Two Sets$$$5. Check Subset of a Set$$$Table of Contents,,"In this tutorial, we will learn Set and its various operations in Swift with the help of examples.|||A set is a collection of unique data. That is, elements of a set cannot be duplicate. For example,|||Suppose we want to store information about student IDs. Since student IDs cannot be duplicate, we can use a set.|||Here's how we can create a set in Swift.|||Output|||In the above example, notice the statement,|||Here, the Set keyword specifies that studentID is a set. Since all the elements of the set are integers, studentID is a set of Int type.|||However, we can also specify the type of set as|||Note: When you run this code, you might get output in a different order. This is because the set has no particular order.|||We use the insert() method to add the specified element to a set. For example,|||Output|||In the above example, we have created a set named employeeID. Notice the line,|||Here, insert() adds 32 to our set.|||We use the remove() method to remove the specified element from a set. For example,|||Output|||Similarly, we can also use|||We can use the for loop to iterate over the elements of a set. For example,|||Output|||We can use the count property to find the number of elements present in a Set. For example,|||Output|||Swift Set provides different built-in methods to perform mathematical set operations like union, intersection, subtraction, and symmetric difference.|||The union of two sets A and B include all the elements of set A and B.|||We use the union() method to perform the set union operation. For example,|||Output|||Note: setA.union(setB) is equivalent to A ⋃ B set operation.||||||The intersection of two sets A and B include the common elements between set A and B.|||We use the intersection() method to perform the intersection between two sets. For example,|||Output|||Note: setA.intersection(setB) is equivalent to A ⋂ B set operation.|||The difference between two sets A and B include elements of set A that are not present on set B.|||We use the subtracting() method to perform the difference between two sets. For example,|||Output|||Note: setA.substracting(setB) is equivalent to A - B set operation.|||The symmetric difference between two sets A and B includes all elements of A and B without the common elements.|||We use the symmetricDifference() method to perform symmetric difference between two sets. For example,|||Output|||Set B is said to be the subset of set A if all elements of B are also present in A.|||We use the Subset() method to check if one set is a subset of another or not. For example,|||Output|||We can use the == operator to check whether two sets are equal or not. For example,|||Output|||In the above example, setA and setB have the same elements, so the condition|||evaluates to true. Hence, the statement print(""Set A and Set B are same"") inside the if is executed.|||In Swift, we can also create an empty set. For example,|||Output|||It is important to note that, while creating an empty set, we must specify the data type inside the <> followed by an initializer syntax ().|||Here, <Int>() specifies that the empty set can only store integer data elements.",removeFirst() - to remove the first element of a set$$$removeAll() - to remove all elements of a set$$$Introduction$$$Create a Set in Swift$$$Add Elements to a Set$$$Remove an Element from a Set$$$Other Set Methods$$$Iterate Over a Set $$$Find Number of Set Elements$$$Set Union$$$Set Intersection$$$Set Difference$$$Set Symmetric Difference$$$Check Subset of a Set,,Method|||Description$$$sorted()|||sorts set elements$$$forEach()|||performs the specified actions on each element$$$contains()|||searches the specified element in a set$$$randomElement()|||returns a random element from the set$$$firstIndex()|||returns the index of the given element
https://www.programiz.com/swift-programming/dictionary,Swift Dictionary (With Examples),Create a dictionary in Swift$$$Example: Swift Dictionary$$$Add Elements to a Dictionary$$$Change Value of Dictionary$$$Access Elements from Dictionary$$$Remove an Element from a Dictionary$$$Other Dictionary Methods$$$Iterate Over a Dictionary$$$Find Number of Dictionary Elements$$$Create an Empty Dictionary$$$Table of Contents,,"In this tutorial, we'll learn everything about Swift dictionaries; how they are created, accessing, adding, removing elements from them, and various built-in methods.|||Swift dictionary is an unordered collection of items. It stores elements in key/value pairs. Here, keys are unique identifiers that are associated with each value.|||Let's see an example.|||If we want to store information about countries and their capitals, we can create a dictionary with country names as keys and capitals as values.|||Here's how we can create a dictionary in Swift.|||Output|||In the above example, we have created a dictionary named capitalCity. Here,|||When we run this code, we might get output in a different order. This is because the dictionary has no particular order.|||Note: Here, keys and values both are of String type. We can also have keys and values of different data types.|||Output|||In the above example, we have created a dictionary named numbers. Here, keys are of Int type and values are of String type.|||We can add elements to a dictionary using the name of the dictionary with []. For example,|||Output|||In the above example, we have created a dictionary named capitalCity. Notice the line,|||Here, we have added a new element to capitalCity with key: Japan and value: Tokyo.|||We can also use [] to change the value associated with a particular key. For example,|||Output|||In the above example, we have created a dictionary named studentID. Initially, the value associated with the key 112 is ""Kyle"". Now, notice the line,|||Here, we have changed the value associated with the key 112 to ""Stan"".|||In Swift, we can access the keys and values of a dictionary independently.|||1. Access Keys Only||||||We use the keys property to access all the keys from the dictionary. For Example,|||Output|||2. Access Values Only|||Similarly, we use the values property to access all the values from the dictionary. For Example,|||Output|||We use the removeValue() method to remove an element from the dictionary. For example,|||Output|||Here, we have created a dictionary named studentID. Notice the|||The removeValue() method removes the element associated with the key 112.|||Note: We can also use removeAll() function to remove all elements of a dictionary.|||We use the for loop to iterate over the elements of a dictionary. For example,|||Output|||We can use the count property to find the number of elements present in a dictionary. For example,|||Output|||In Swift, we can also create an empty dictionary. For example,|||Output|||In the above example, we have created an empty dictionary. Notice the expression|||Here,|||Note: It is compulsory to specify the data type of dictionary while creating an empty dictionary.","Keys are ""Nepal"", ""Italy"", ""England""$$$Values are ""Kathmandu"", ""Rome"", ""London""$$$Int specifies that keys of the dictionary will be of integer type$$$String specifies that values of the dictionary will be of String type.$$$Introduction$$$Create a dictionary in Swift$$$Add Elements to a Dictionary$$$Change Value of Dictionary$$$Access Elements from Dictionary$$$Remove an Element from a Dictionary$$$Other Dictionary Methods$$$Iterate Over a Dictionary$$$Find Number of Dictionary Elements$$$Create an Empty Dictionary",,Keys|||Values$$$Nepal|||Kathmandu$$$Italy|||Rome$$$England|||London$$$Method|||Description$$$sorted()|||sorts dictionary elements$$$shuffled()|||changes the order of dictionary elements$$$contains()|||checks if the specified element is present$$$randomElement()|||returns a random element from the dictionary$$$firstIndex()|||returns the index of the specified element
https://www.programiz.com/swift-programming/tuples,Swift Tuple (With Examples),Create A Tuple$$$Access Tuple Elements$$$Modify Tuple Element$$$Named Tuples$$$Swift Nested Tuple$$$Add/Remove Elements From Tuple$$$Example: Swift Tuple$$$Example: Named Tuple$$$Example: Nested Tuple$$$Dictionary Inside a Tuple$$$Table of Contents,,"In this tutorial, we'll learn everything about Swift tuples with the help of examples|||In Swift, a tuple is a group of different values. And, each value inside a tuple can be of different data types.|||Suppose we need to store information about the name and price of a product, we can create a tuple with a value to store name (string) and another value to store price (float)|||In Swift, we use the parenthesis () to store elements of a tuple. For example,|||Here, product is a tuple with a string value Macbook and integer value 1099.99.|||Like an array, each element of a tuple is represented by index numbers (0, 1, ...) where the first element is at index 0.|||We use the index number to access tuple elements. For example,|||Output|||In the above example, we have created a tuple named product with two values.|||We have used the index number: product.0 and product.1 to access tuple elements.|||Note: Since the first value of the tuple is a string and the second is an integer. So the type of the tuple is (String, Int).|||We can modify a tuple element by assigning a new value to the particular index. For example,|||Output|||In the above example, we have created a tuple named product with values: MacBook and 1099.99. Notice the line,|||Here, we have changed the tuple value at index 1 to 1299.99.|||Note: The tuple index always starts with 0. Hence, the first element of a tuple is present at index 0, not 1.|||In Swift, we can also provide names for each element of the tuple. For example,|||To access the elements of a named tuple, we can also use these names instead of index numbers.|||Output|||In the above example, we have provided names: product and version to the first and the second element of the tuple.||||||We have used the . notation and the provided names to access the corresponding values of the tuple.|||Note: It is the best practice to use the named tuples as it makes our code more readable.|||In Swift, we can create a tuple as an element of another tuple. For example,|||Here, we have a tuple (""a"", ""b"", ""c"") as the third element of the alphabets tuple. This is called a nested tuple.|||In the above example, notice the line,|||Here, we have first accessed the third element of the alphabets tuple.|||Since the third element of the is also a tuple, we have used|||to access the first element of the nested tuple.|||We cannot add or remove elements from a tuple in Swift. For example,|||Output|||Here, we have created a tuple with values: ""Programiz"" and ""Apple"". Now, the type of tuple is fixed to (String, String).|||So, when we try to add and remove elements from the tuple, we get errors.|||In Swift, we can use a dictionary to add an element to a tuple. For example,|||Output|||In the above example, the third element of the tuple is a dictionary|||As we know we can add elements to a dictionary. So, we use the code.|||to add an element inside the dictionary.|||This way we are able to add an element to a tuple. And, the type of tuple is still the same (String, String, Dictionary). So, we don't get any errors.|||To learn more about dictionary, visit Swift Dictionary",Introduction$$$Create A Tuple$$$Access Tuple Elements$$$Modify Tuple Element$$$Named Tuples$$$Swift Nested Tuple$$$Add/Remove Elements From Tuple,,
https://www.programiz.com/swift-programming/functions,Swift Functions (With Examples),Swift Function Declaration$$$Calling a function in Swift$$$Example: Swift Function$$$Function Parameters$$$Example: Function Parameters$$$Swift Function Return Type$$$Example: Function Return Type$$$Example: Add Two Numbers$$$Swift Library Functions$$$Example: Swift Library Function$$$Benefits of Using Functions$$$Table of Contents,,"In this tutorial, we will learn about the Swift function and function expressions with the help of examples.|||A function is a block of code that performs a specific task.|||Suppose we need to create a program to create a circle and color it. In this case, we can create two functions:|||Hence, a function helps us break our program into smaller chunks to make our code reusable and easy to understand.|||In Swift, there are two types of function:|||Let's first learn about user-defined functions.|||The syntax to declare a function is:|||Here,|||Let's see an example,|||Here, we have created a function named greet(). It simply prints the text Hello World!.|||This function doesn't have any parameters and return type. We will learn about return type and parameters later in this tutorial.|||In the above example, we have declared a function named greet().|||Now, to use this function, we need to call it.|||Here's how we can call the greet() function in Swift.|||Output|||In the above example, we have created a function named greet(). Here's how the program works:|||Here,|||As mentioned earlier, a function can also have parameters. A parameter is a value that is accepted by a function. For example,|||If we create a function with parameters, we need to pass the corresponding values while calling them. For example,|||Here, num1: 3, num2: 4 specifies that parameters num1 and num2 will get values 3 and 4 respectively.|||Note: To learn more about function parameters, visit Swift Function Parameters.|||Output||||||In the above program, we have created a function named addNumbers() with parameters: num1 and num2.|||Note: The data type of function parameter should always match the data passed during the function call. Here, the data type of num1 and num2 is Int, so we have passed integer values 3 and 4 during a function call.|||A Swift function may or may not return a value. If we want our function to return some value, we can use the return statement. For example,|||Here, we are returning the variable sum. The -> Int in the function definition specifies that the return type of the function is an integer.|||If a function returns any value, the return type of the value should be specified in the function definition (-> returnType). Otherwise, it will generate an error.|||Output|||In the above example, we have created a function named findSquare(). The function accepts a number and returns the square of the number.|||Output|||In Swift, standard library functions are the built-in functions that can be used directly in our program. For example,|||These library functions are defined inside the framework. And, to use them we must include the framework inside our program.|||For example, sqrt() and pow() are defined inside the Foundation framework.|||Output|||In the above example, we have used|||Here, notice the statement,|||Since sqrt() and pow() are defined inside the Foundation library, we need to include it in our program.|||1. Code Reusable - We can use the same function multiple times in our program which makes our code reusable. For example,|||Output|||In the above program, we have created the function named getSquare() to calculate the square of a number. Here, the function is used to calculate the square of numbers from 1 to 3.|||Hence, the same method is used again and again.|||2. Code Readability - Functions help us break our code into chunks to make our program readable and easy to understand.","User-defined Function - We can create our own functions based on our requirements.$$$Standard Library Functions - These are built-in functions in Swift that are available to use.$$$func - keyword used to declare a function$$$functionName - any name given to the function$$$parameters - any value passed to function$$$returnType - specifies the type of value returned by the function$$$print() - prints the string inside the quotation marks$$$sqrt() - returns the square root of a number$$$pow() - returns the power of a number$$$sqrt(25) - to compute the square root of 25$$$pow(2, 3) - computes the power of a number i.e. 23$$$Introduction$$$Swift Function Declaration$$$Calling a function in Swift$$$Function Parameters$$$Swift Function Return Type$$$Swift Library Functions$$$Benefits of Using Functions","a function to draw the circle$$$a function to color the circle$$$When the function is called, the control of the program goes to the function definition.$$$All codes inside the function are executed.$$$The control of the program jumps to the next statement after the function call.",
https://www.programiz.com/swift-programming/function-parameter-return-values,Swift Function Parameters and Return Values (With Examples),Swift Function Parameters$$$Function Parameter with Default Values$$$Function With Argument Label$$$Omit Argument Labels$$$Function with variadic parameters$$$Function With inout Parameters$$$Swift Function Return Values$$$Function with Return Multiple Values$$$Example: Function with Argument Label$$$Example: Multiple Return Values$$$Table of Contents,,"In this tutorial, we will learn about function parameters and return values in Swift with the help of examples.|||A function parameter is a value that is accepted by a function.|||Before you learn about function parameters and return values, make sure to know about Swift functions.|||Let's see an example,|||Output|||In the above example, the function addNumbers() takes two parameters: a and b. Notice the line,|||Here, a: 2, b: 3 specifies that parameters a and b will get values 2 and 3 respectively.|||Note: The values 2 and 3 passed during the function call are also called as arguments.|||In Swift, we can provide default values to function parameters.|||We use the = operator to provide default values. For example,|||Output|||In the above example, notice the function definition|||Here, we have provided default values 7 and 8 for parameters a and b respectively. Here's how this program works|||1. addNumbers(a: 2, b: 3)|||Both values are passed during the function call. Hence, these values are used instead of the default values.|||2. addNumbers(a: 2)|||Only one the value for parameter a is passed during the function call. So, the default value is used for parameter b.|||3. addNumbers()|||No value is passed during the function call. Hence, default value is used for both parameters a and b.|||In Swift, we can use the argument labels to define a function in an expressive and sentence-like manner. For example,|||Here, the sum() function has argument labels: of and and.|||While calling a function, we can use the argument label instead of parameter names. For example,|||Here, we are calling sum() with values 2 and 3 using argument labels.|||Output|||Note: It makes more sense while calling the function as sum(of: 2, and: 3) instead of sum(a: 2, b: 3).|||We can also omit the argument label by writing a _ before the parameter name. For example,|||Output|||Note: If we use _ before the parameter name, then we can call the function without an argument label or parameter name.|||Sometimes, we do not know in advance the number of arguments that will be passed into a function. To handle this kind of situation, we can use variadic parameters in Swift.||||||Variadic parameters allow us to pass a varying number of values during a function call.|||We use the ... character after the parameter's type to denote the variadic parameters. For example,|||Output|||In the above example, we have created the function sum() that accepts variadic parameters. Notice the lines,|||Here, we are able to call the same function with different arguments.|||Note: After getting multiple values, numbers behave as an array so we are able to use the for loop to access each value.|||When we define a function parameter, the function parameter cannot be modified inside the function body. For example,|||Here, the above code will generate an error: Error: cannot assign to value: 'name' is a 'let' constant. This is because the parameter behaves as a constant value.|||To overcome this, we need to define the parameter as an inout parameter. For example,|||Output|||In the above example, we have declared a function changeName() that accepts inout parameter name.|||While calling a function with inout parameter, we must use the ampersand(&) sign before a variable name passed as an argument.|||Behind the scenes, an in-out parameter has a value that is passed into the function, is modified by the function, and is passed back out of the function to replace the original value. Therefore the value passed in the function call must be a variable.|||A function may or may not return value. If we want our function to return some value, we use the return statement and return type. For example,|||Output|||In the above example, we have created a function named addNumbers(). The function adds two numbers and returns the sum.|||The returned value is stored in the result variable.|||A function can also return multiple values. For example,|||Here, the return statement returns two values: message and marks.|||Also, -> (String, Int) specifies the return type message and marks. And, the order should be the same. That is, the first returned value should be a string and second should be an integer.|||Output|||In the above example, the compute() function accepts a number and computes the square and the cube of the number. Notice the line,|||Here, the function is returning the number, its square and the cube value at once.|||The returned values are stored in result. Here, result is a tuple that stores multiple values. To learn more, visit Swift Tuple.|||To access individual values from a tuple, we use the index number. That's why result.0 returns 5, result.1 returns 25, and results.2 returns 125.",Swift Function Parameters$$$Function Parameter with Default Values$$$Function With Argument Label$$$Function with variadic parameters$$$Function With inout Parameters$$$Swift Function Return Values$$$Function with Return Multiple Values,,
https://www.programiz.com/swift-programming/nested-functions,Nested Functions in Swift (With Examples),Syntax of Nested Function$$$Example 1: Swift Nested function$$$Example 2: Nested Function with Parameters$$$Example 3: Nested Function with Return Values$$$Table of Contents,,"In this tutorial, we will learn about nested functions in Swift with the help of examples.|||In Swift, a function can exist inside the body of another function. This is called a nested function.|||Before you learn about nested functions make sure to know about Swift functions.|||Here's how we create nested functions in swift.|||Here, the function function2() is nested inside the outer function function1()|||Output|||In the above example, we have created two functions:|||Here, we are calling the inner function displayName() from the outer function.|||Note: If we try to call the inner function from outside of the outer function, we'll get the error message: use of unresolved identifier.|||Output|||In the above example, the function display() is nested inside the function addNumbers(). Notice the inner function,||||||Here, it consists of two parameters num1 and num2. Hence, we have passed 5 and 10 while calling it (display(num1: 5, num2: 10))|||Output|||In the above example, the functions add() and subtract() are nested inside the operate() function . Notice the declaration of the outer function|||Here, the return type (Int, Int) -> Int specifies that the outer function returns a function with|||Since this matches the function definition of inner functions, the outer function returns one of the inner functions.|||This is why we are able to call the inner function from outside of the outer function as well using|||Here, operation(8, 3) is replaced by either add(8, 3) or subtract(8, 3) based on the value of symbol passed to the operate() function.",greetMessage() - a regular function$$$displayName() - an inner function nested inside greetMessage()$$$two parameters of Int type and$$$a return value of Int type.$$$Introduction,,
https://www.programiz.com/swift-programming/recursion,Swift Recursion (With Examples),Working of Recursion in Swift$$$Example: Find factorial of a number$$$Advantages and Disadvantages of Function Recursion$$$Example 1: Swift Function Recursion$$$Table of Contents,,"In this tutorial, we will learn about recursive function in Swift and its working with the help of examples.|||A function that calls itself is known as a recursive function. And, this technique is known as recursion.|||A physical world example would be to place two parallel mirrors facing each other. Any object in between them would be reflected recursively.|||Here, the recurse() function is calling itself over and over again. The figure below shows how recursion works.|||Stopping Condition for Recursion|||If we don't mention any condition to break the recursive call, the function will keep calling itself infinitely.|||We use the if...else statement (or similar approach) to break the recursion.|||Normally, a recursive function has two branches:|||For example,|||Output|||In the above example, we have created a recursive function named countDown(). Here, the function calls itself until the number passed to it becomes 0.||||||When the number is equal to 0, the if condition breaks the recursive call.|||Working of the program|||Output|||In the above example, we have a recursive function named factorial(). Notice the statement|||Here, we are recursively calling factorial() by decreasing the value of the num parameter.|||Working of the Program|||Below are the advantages and disadvantages of using recursion in Swift programming.|||1. Advantages|||2. Disadvantages","One for recursive calls.$$$Another for breaking the call under certain conditions.$$$Initially, the value of num is 3 inside factorial().$$$In the next recursive call, num becomes 2.$$$Similarly, the process continues until num becomes 0.$$$When num is equal to 0, the if condition breaks the recursive call.$$$It makes our code shorter and cleaner.$$$Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal.$$$It takes a lot of stack space compared to an iterative program.$$$It uses more processor time.$$$It can be more difficult to debug compared to an equivalent iterative program.$$$Introduction$$$Working of Recursion in Swift$$$Example: Find factorial of a number",,Iteration|||Function call|||Print|||number == 0 ?$$$1|||countDown(3)|||3|||false$$$2|||countDown(2)|||2|||false$$$3|||countDown(1)|||1|||false$$$4|||countDown(0)|||0|||true(function call stops)
https://www.programiz.com/swift-programming/ranges,Ranges in Swift (With Examples),Types of Range in Swift$$$1. Closed Range$$$2. Half-Open Range$$$3. One-sided Range$$$Access Array Elements Using Swift Range$$$Things to Remember About Swift Range$$$Table of Contents,,"In this article, we will learn about Swift ranges and its type with the help of examples.|||In Swift, a range is a series of values between two numeric intervals. For example,|||Here,|||In Swift, there are three types of range:|||A closed range includes all the values in the interval from the lower bound to the upper bound.|||It is declared using the ... (3 dots) operator. For example,|||Output|||In the above example, we have created a closed range 1...4.|||Since it is a closed range, it contains all the numbers between 1 to 4 including the lower bound (1) and upper bound (4).|||Here, we have used the Swift for loop to access all the values in the range.|||A half-open range includes all the values from the lower bound to the upper bound. However, it excludes the upper bound (last number).|||It is declared using the ..< operator. For example,|||Output|||In the above example, we have created a half-open range 1..<4. Since it is a half-open range, it excludes the upper bound element 4.||||||We can create a one-sided range using either of the ... or the ..< operator.|||A one-sided range contains elements up to infinite in one direction. For example,|||Here, ...<2 is a one-sided range. It contains all elements from 2 to -∞. Similarly, the range|||contains all elements from 2 to +∞.|||We can verify this by checking if a certain number is present in the range. For example,|||Output|||Here, we have used contains() method to check if a certain number is present in the range.|||Note: With a one-sided range, we only set either upper bound or lower bound.|||We can also use the Swift range to access array elements. For Example,|||Output|||Here, the range 0...2 acts as array indices and helps us access all array elements.|||1. The lower bound value must be smaller than the upper bound value. For example,|||2. The lower bound and upper bound value can be negative. For example,","... is a range operator$$$1...4 contains values 1, 2, 3, 4$$$1 is lower bound (first element)$$$4 is upper bound (last element)$$$Closed Range$$$Half-Open Range$$$One-Sided Range$$$Introduction$$$Types of Range in Swift$$$Closed Range $$$Half-Open Range$$$One-sided Range$$$Access Array Elements Using Swift Range $$$Things to Remember About Swift Range",,
https://www.programiz.com/swift-programming/function-overloading,Swift Function Overloading (With Examples),Example1: Overloading with Different Parameter Types$$$Example2: Overloading with Different Number of Parameters$$$Example 3: Function overloading with Argument Label$$$Table of Contents,,"In this tutorial, we will learn about the function overloading in Swift with examples.|||In Swift, two or more functions may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both).|||These functions are called overloaded functions and this feature is called function overloading. For example:|||Here, the test() function is overloaded. These functions have the same name but accept different arguments.|||Note: The return types of the above functions are not the same. It is because function overloading is not associated with return types. Overloaded functions may have the same or different return types, but they must differ in parameters.|||Output|||In the above example, we have overloaded the displayValue() function:|||Based on the type of the argument passed during the function call, the corresponding function is called.|||Output||||||Here, we have overloaded the display() function with different numbers of parameters.|||Based on the number of arguments passed during the function call, the corresponding function is called.|||Output|||In the above example, two functions with the same name display() have the same number and the same type of parameters. However, we are still able to overload the function.|||It is because, in Swift, we can also overload the function by using argument labels.|||Here, two functions have different argument labels. And, based on the argument label used during the function call, the corresponding function is called.",one function has Int type parameter$$$another has String type parameter$$$Introduction,,
https://www.programiz.com/swift-programming/closures,Swift Closures (With Examples),Swift Closure Declaration$$$Closure Parameters$$$Closure That Returns Value$$$Closures as Function Parameter$$$Trailing Closure$$$Autoclosure$$$Example: Swift Closure$$$Example: Closure as function parameter$$$Example: Trailing Closure$$$Example: Autoclosure$$$Table of Contents,,"In this tutorial, you will learn about Swift closures with the help of examples.|||In Swift, a closure is a special type of function without the function name. For example,|||Here, we have created a closure that prints Hello World.|||Before you learn about closures, make sure to know about Swift Functions.|||We don't use the func keyword to create closure. Here's the syntax to declare a closure:|||Here,|||Let's see an example,|||Here, we have defined a closure and assigned it to the variable named greet. Statement enclosed inside the {} is the closure body.|||To execute this closure, we need to call it. Here's how we can call the closure|||The closure simply prints the text Hello World.|||Note: This closure doesn't have any parameters and return type.|||Output|||In the above example, we have defined a closure and assigned it to the variable named greet.|||When we call the closure, the print() statement inside the closure is executed.|||Similar to functions, a closure can also accept parameters. For example,|||Output|||In the above example, we have assigned a closure to the greetUser variable.|||Inside the closure, (name: String) specifies that the closure accepts the String type parameter named. Notice that we have used in to separate closure parameter with body.|||Also, notice the call of closure|||Here, we have passed a string value ""Delilah"" to our closure.|||And finally, the statement inside the closure is executed.|||Note: Unlike function, we call the closure without mentioning the parameter name.|||A Swift closure may or may not return a value. If we want our closure to return some value, we need to mention it's return type and use the return statement. For example,||||||Output|||In the above example, we have defined a closure that returns the square of a number. Notice the closure definition,|||Here, (num: Int) -> (Int) indicates that the closure|||The returned value is stored in the result variable.|||In Swift, we can create a function that accepts closure as its parameter.|||Here,|||Now, to call this function, we need to pass a closure as its argument|||Output|||In trailing closure, if a function accepts a closure as its last parameter,|||We can call the function by passing closure as a function body without mentioning the name of the parameter. For example,|||Here, everything inside the {...} is a closure body.|||Output|||In the above example, the grabLunch() function accepts a closure search: () -> (). Here, closure is the last parameter of the function.|||Hence, we have called the function by passing the closure argument as function definition.|||While calling a function, we can also pass the closure without using the braces {}.For example,|||To pass the closure argument without using braces, we must use the @autoclosure keyword in function definition. For example,|||Here, the @autoclosure automatically adds curly braces.|||Output|||Note: We cannot pass arguments to an autoclosure. If we try to do so we'll get the error message as: argument type of @autoclosure parameter must be '()'.",(num: Int) - indicates the parameter of integer type$$$-> (Int) - represents the closure return value of Int type$$$return square - return statement inside the closure$$$search - function parameter$$$() -> () - represents the type of the closure$$$search() - call closure from the inside of the function.$$$Introduction$$$Swift Closure Declaration$$$Closure Parameters$$$Closure That Returns Value$$$Closures as Function Parameter$$$Trailing Closure$$$Autoclosure,parameters - any value passed to closure$$$returnType - specifies the type of value returned by the closure$$$in (optional) - used to separate parameters/returnType from closure body,
https://www.programiz.com/swift-programming/classes-objects,Swift Classes and Objects (With Examples),Swift Classes$$$Define Swift Class$$$Swift Objects$$$Access Class Property using Objects$$$Example: Swift Class and Objects$$$Create Multiple Objects of Class$$$Function Inside Swift Class$$$Swift Initializer$$$Struct Vs Class in Swift$$$Example: Swift Initializer$$$Table of Contents,,"In this tutorial, we will learn about Swift Classes and we'll also learn to create objects with the help of examples.|||Swift is also an object-oriented programming language. And, like other oop languages, it also supports the concept of objects and classes.|||An object is simply a collection of data (variables) and methods (functions). Similarly, a class is a blueprint for that object.|||Before we learn about objects, let's first know about classes in Swift.|||A class is considered as a blueprint of objects. We can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.|||Since many houses can be made from the same description, we can create many objects from a class.|||We use the class keyword to create a class in Swift. For example,|||Here, we have created a class named ClassName.|||Let's see an example,|||Here,|||Note: The variables and constants inside a class are called properties.|||An object is called an instance of a class. For example, suppose Bike is a class then we can create objects like bike1, bike2, etc from the class.|||Here's the syntax to create an object.|||Let's see an example,|||Here, bike1 is the object of the class. Now, we can use this object to access the class properties.|||We use the . notation to access the properties of a class. For example,|||Here, we have used bike1.name and bike.gears to change and access the value of name and gears property respectively.|||Output|||In the above example, we have defined the class named Bike with two properties: name and gears.|||We have also created an object bike1 of the class Bike.|||Finally, we have accessed and modified the properties of an object using . notation.|||We can also create multiple objects from a single class. For example,|||Output|||In the above example, we have created two objects employee1 and employee2 of the Employee class|||Note: We can create as many instances of the structure as we want.|||We can also define a function inside a Swift class. A Swift Function defined inside a class is called a method.||||||Let's see an example,|||Output|||In the above example, we have created a class named Room with:|||Here, we have created an object named studyRoom from the Room class. We then used the object to assign values to properties: length and breadth.|||Notice that we have also used the object to call the method inside the class|||Here, we have used the . notation to call the method. Finally, the statement inside the method is executed.|||Earlier we assigned a default value to a class property.|||However, we can also initialize values using the initializer. For example,|||Here, init() is the initializer that is used to assign the value of the name variable. We have used the self.name to refer to the name property of the bike1 object.|||If we use an initializer to initialize values inside a class, we need to pass the corresponding value during the object creation of the class.|||Here,|||Output|||In the above example, we have created the class named Bike with two properties name and gear.|||We have used the custom initializer to assign values to the properties of the class.|||Finally, while creating an object of the Bike class, we have passed values ""BMX Bike"" and 2 as arguments.|||Even though the working of struct and class looks similar, there exist some major differences between them.|||1. Class is the concept of object-oriented programming. So, it provides some OOP features like Inheritance where we can derive a new class from the existing class.|||However, inheritance of structs is not available.|||To learn more about inheritance, visit Swift Inheritance.|||2. Classes are of reference type. This means each instance of a class shares the same copy of data. For example,|||As you can see here, we are changing the color for the bike1 object. However, the color is changed for the bike2 object as well.|||On the other hand, structs are of the value type. This means each instance of a struct will have an independent copy of data. For example,|||As you can see here, we are changing the color for the bike1 object. However, the color of the bike2 object is unchanged.","Bike - the name of the class$$$name/gear - variables inside the class with default values """" and 0 respectively.$$$Properties: length and breadth$$$Method: calculateArea()$$$""Mountain Bike"" is passed to the name parameter of init()$$$self represents the bike1 object$$$self.name is equal to Mountain Bike$$$Introduction$$$Define Swift Class$$$Swift Objects$$$Access Class Property using Objects$$$Example: Swift Class and Objects$$$Create Multiple Objects of Class$$$Function Inside Swift Class $$$Swift Initializer $$$Example: Swift Initializer",,
https://www.programiz.com/swift-programming/properties,Swift Properties (With Examples),Swift Computed Property$$$Getters And Setters for Computed Properties$$$Swift Static Properties$$$Example 1: Swift Properties$$$Example: Swift Computed Property$$$Swift static Property$$$Table of Contents,,"In this tutorial, we will learn about Swift Property and its types with the help of examples.|||A Swift variable or constant defined inside a class or struct are called properties. For example,|||Here, inside the Person class we have defined two properties:|||Before you learn about properties, make sure you know the working of class and struct in Swift.|||Output|||In the above example, we have created a class named Person with two properties: name and age.|||Here, we have used the object person1 to access the properties:|||Note: These properties we defined above are also called stored properties as they store actual values for each instance of the Person class.|||Earlier, we discussed about stored properties that store value for each instance. For example,|||Here, num1 is a stored property, which stores some value for an instance of Calculator.|||However, there is another type of property called computed properties. Unlike stored property, a computed property calculates the value. For example,|||Here, sum is a computed property that doesn't store a value, rather it computes the addition of two values.|||Note: The curly braces {..} indicates the body of the computed property.|||Output|||In the above example, we have|||Here, the computed property sum computes the addition of num1 and num2|||Now, we can access the computed value by accessing the computed property||||||In Swift, we can also include a getter and setter inside a computed property.|||Let's see an example,|||Output|||In the above example, we have created a computed property named sum. Inside the sum, we have|||1. Getter - to get the sum of num1 and num2|||2. Setter - to change value of num1 and num2|||Here, the setter has a new value named modify that can be used to set new values to num1 and num2.|||Finally, we have used,|||In the previous example, we have used objects of the class to access its properties. However, we can also create properties that can be accessed and modified without creating objects.|||These types of properties are called static properties. In Swift, we use the static keyword to create a static property. For example,|||Here, name is the static property. Now to access and modify the value of a static property, we use the class name.|||Output|||In the above example, we have a static property: name and a non-static property - founded Here,|||A static property is of the class type (associated with class rather than object), so we are able to access them using class names.|||Note: Similarly, we can also create static properties inside a struct. static properties inside a struct are of a struct type, so we use the struct name to access them.","name - of String type with default value """"$$$age - of Int type with default value 0$$$person1.name - access the name property$$$person1.age - access the age property$$$Stored properties: num1 and num2$$$Computed Property: sum.$$$getter - returns the computed value$$$setter - changes the value$$$obj.sum - to access getter$$$obj.sum = 5 - to access setter$$$University.name - access the static property using class name$$$obj.founded - access the non-static property using the object of the class$$$Introduction$$$Example 1: Swift Properties$$$Swift Static Properties$$$Swift static Property$$$Swift Computed Property$$$Getters And Setters for Computed Properties",,
https://www.programiz.com/swift-programming/methods,Swift Methods (With Examples),Swift static Methods$$$Swift self property in Methods$$$Swift mutating Methods$$$Example 1: Swift Methods$$$Example 2: Calculate Area and Volume using Swift Methods$$$Example: Swift static Methods$$$Example: Swift self property$$$Example: Modifying Value Types from Method$$$Table of Contents,,"In this tutorial, we will learn about Swift Method and its types with the help of examples.|||A Swift function defined inside a class is called method. For example,|||Here, greet() is a method defined inside the Person class. Before you learn about methods, make sure you know the working of class and struct in Swift.|||Output|||In the above example, we have created a method named greet() inside the Person class. Here, we have used the object nick of the class to call the method.|||The greet() method simply prints the string ""Hey there!"" inside it.|||Output|||In the above example, we have created a class named Hall with two methods:|||Since these methods are declared inside the class, we have used the object hall1 of the class to call them.|||In the previous example, we have used objects of the class to access its methods. However, we can also create methods that can be accessed without creating objects.|||These types of methods are called static methods. In Swift, we use the static keyword to create a static method. For example,|||Here, add() is the static method.|||To access a static method, we use the class name. For example,|||Output|||In the above example, we have created a class named Calculator. The class contains static method: add() and non-static method - multiply()|||Here,|||A static method is of class type (associated with class rather than object), so we are able to access them using class names.|||Note: Similarly, we can also create static methods inside a struct. static methods inside a struct are of struct type, so we use the struct name to access them.||||||Sometimes the name of a property and the name of a method parameter might be the same. For example,|||Here, both the property and the method parameter have the same name physics.|||In such cases there might be ambiguity between the names. So to distinguish between them, we use the self property. The self property refers to the current object of the method.|||Output|||In the above example, we have used the same name physics for the property and method parameters.|||To distinguish between them, we have used the self property inside the checkEligibility() method|||Here,|||Since the condition (28 < 50) is true, the statement inside if is executed.|||In Swift, if we declare properties inside a class or struct, we cannot modify them inside the methods. For example,|||Here, since struct is a value type, if we try to modify the value of salary, we'll get an error message.|||However, if we want to modify the properties of a value type from the inside of a method, we need to use the mutating keyword while declaring a method.|||Output|||In the above example, we have created a struct named Employee. Notice,|||Here, the mutating method allows us to modify the value of salary inside the method.",calculateArea() - to compute the area of the hall$$$calulateVolume() - to compute the volume of the hall$$$Calculator.add() - calls static method using the class name$$$obj.multiply() - calls a non-static method using the object of the class.$$$self.physics - refers to the property of the student1 object with value 28.$$$physics - refers to the method parameter with value 50.$$$Introduction$$$Example 1: Swift Methods$$$Swift static Methods$$$Example: Swift static Methods$$$Swift self property in Methods$$$Swift mutating Methods,,
https://www.programiz.com/swift-programming/initializer,Swift Initializer (With Examples),Example: Swift Initializer$$$Parameterized Initializer$$$Example: Parameterized Initializer$$$Initializer Overloading$$$Swift convenience Initializer$$$Failable Initializer$$$Memberwise Initializer for structs$$$Example: Memberwise Initializer$$$Table of Contents,,"In this tutorial, we will learn about the Swift initializer and its type with the help of examples.|||An initializer is a special type of function that is used to create an object of a class or struct.|||In Swift, we use the init() method to create an initializer. For example,|||Here, the method init() is an initializer of the class Wall.|||Output|||In the above example, we have created an initializer named init(). Inside the initializer, we have initialized the value of the length property.|||Notice the following statement:|||Here, when the wall1 object is created, the init() initializer is called. And, the value of the length property is initialized to 5.5.|||A Swift initializer can also accept one or more parameters. Such initializers are known as parameterized initializers (initializers with parameters).|||Let's see an example,|||Here,|||Output|||In the above example, we have created an initializer init() with two parameters: length and height. Notice the expressions,|||Here, while creating an object of the Wall class, we pass the values for the member properties as arguments.|||With the member variables thus initialized, we can now calculate the area of the wall with the calculateArea() method.|||Swift Initializers can be overloaded in a similar way as function overloading.|||In initializer overloading, two or more initializers can have the same name if they have different types or numbers of parameters.|||And, based on the arguments passed during the object creation, the corresponding initializer is called.|||Let's see an example,|||Output|||In the above example, we have created a class Person that has a single property age.|||We have also defined two initializers: init() and init(age: Int).|||The method getAge() returns the value of age, and we use it to print the age of person1 and person2.|||In previous examples, the initializer we defined were primary initializers of the class. These primary initializers are also called designated initializers.||||||However, we can also define a secondary/supporting initializer for a class called convenience initializer.|||To define a convenience initializer, we use the convenience keyword before the initializer. For example,|||Output|||In the above example, we have created a designated initializer: init() and a convenience initializer: convenience init().|||Inside the convenience initializer, we have called the designated initializer and assigned values to the properties.|||When the university1 object is created, the convenience initializer is called.|||This makes our code look cleaner compared to calling the designated initializer:|||Note: Convenience Initializers are useful when it comes to assigning default values to stored properties.|||In some cases initializers might or might not work, this is called a failable initializer.|||We write a failable initializer by placing a question mark (?) after the init keyword and return nil if something goes wrong. For example,|||Output|||In the above example, we have created the failable initializer init?() with a parameter named folder.|||And, we have used the if statement and the isEmpty property|||to check if the folder is empty and returns nil if it is empty.|||For the folder1 object, we have passed an empty string """" which triggers an initialization failure, so the statement inside it is executed first and then it returns nil.|||And finally, the statement inside the else block is executed|||In Swift, we are not required to create an initializer while working with structs. Swift automatically generates a memberwise for us. For example,|||Here, we have not created any initializer inside the Person struct. However, Swift auto generates a memberwise initializer for us,|||Here, values inside the parentheses () are automatically assigned to corresponding properties of the struct. This is called a memberwise initializer.|||Output|||In the above example, we have used the auto-generated memberwise initializer to assign values to corresponding properties of the Person struct.|||Here, the value of name is set to Dwight, and age is set to 43.",init(length: Double) - initializer with parameter length$$$var wall1 = Wall(length: 10.5) - pass value 10.5 to the parameter length$$$self.length = length - assigns the value of the length parameter (10.5) to the length property$$$self.length - specify that the length property is associated with the current object which is wall1$$$Introduction$$$Example: Swift Initializer $$$Swift Parameterized Initializer$$$Example: Swift Parameterized Initializer$$$Swift Initializer Overloading$$$Swift convenience Initializer$$$Swift Failable Initializer$$$Memberwise Initializer for Swift structs,"We have not passed any argument to the person1 object, so the first initializer is called. Hence, age is initialized to 20.$$$We have passed 23 as an argument to person2. So, the second initializer is called and age is initialized to 23.",
https://www.programiz.com/swift-programming/deinitialization,Swift Deinitialization (With Examples),Example: Swift Deinitializer$$$Table of Contents,,"In this tutorial, we will learn about Swift deinitialization with the help of examples.|||Deinitialization is a process to deallocate class instances when they're no longer needed. This frees up the memory space occupied by the system.|||We use the deinit keyword to create a deinitializer. For example,|||Here, deinit is the deinitializer of the Race class.|||Before you learn about deintializers, make sure you know about the Swift Initializer.|||Output|||In the above example,|||1. We have created a deinitializer inside the Race class.||||||2. Then, we have created an instance of the Race class and assigned it to a Race type variable named result.|||Here, Race? indicates that result is an optional, so it can store two types of values:|||3. Finally, we assign nil to result:|||This deallocates the instance. The deinitializer is called automatically right before the class instance is deallocated. And the statement inside it is executed.|||Note:","values of the Race type.$$$a nil value.$$$In Swift, we only use deinitializers when we manually want to deallocate instances. Otherwise, Swift automatically does the deallocation.$$$Deinitializers can only be used with classes and not with structs.$$$Each class can only have a single deinitializer.$$$Introduction$$$Example: Swift Deinitializer$$$Points to Remember",,
https://www.programiz.com/swift-programming/inheritance,Swift Inheritance (With Examples),is-a relationship$$$Method Overriding in Swift Inheritance$$$super Keyword in Swift Inheritance$$$Why Inheritance?$$$Example: Swift Inheritance$$$Example: Method Overriding$$$Example: Benefits of Inheritance$$$Table of Contents,,"In this tutorial, we will learn about Swift inheritance and its types with the help of examples.|||Like other OOP languages, Swift also supports the concept of class inheritance.|||Inheritance allows us to create a new class from an existing class.|||The new class that is created is known as subclass (child or derived class) and the existing class from which the child class is derived is known as superclass (parent or base class).|||Swift Inheritance Syntax|||In Swift, we use the colon : to inherit a class from another class. For example,|||Here, we are inheriting the Dog subclass from the Animal superclass.|||Output|||In the above example, we have derived a subclass Dog from a superclass Animal. Notice the statements,|||Here, we are using labrador (object of Dog) to access name and eat() of the Animal class. This is possible because the subclass inherits all properties and methods of the superclass.|||Also, we have accessed the name property inside the method of the Dog class.|||In Swift, inheritance is an is-a relationship. That is, we use inheritance only if there exists an is-a relationship between two classes. For example,|||Here, Car can inherit from Vehicle, Apple can inherit from Fruit, and so on.|||In the previous example, we see the object of the subclass can access the method of the superclass.|||However, what if the same method is present in both the superclass and subclass?|||In this case, the method in the subclass overrides the method in the superclass. This concept is known as method overriding in Swift.|||We use the override keyword to tell the compiler that we are overriding a method.|||Output|||In the above example, the same method eat() is present in both the Dog class and the Animal class.|||Now, when we call the eat() method using the object of the Dog subclass, the method of the Dog class is called.|||This is because the eat() method of the Dog subclass overrides the same method of the Animal superclass. We have used the override keyword to specify the method is overridden.||||||Previously we saw that the same method in the subclass overrides the method in the superclass.|||However, if we need to access the superclass method from the subclass, we use the super keyword. For example,|||Output|||In the above example, the eat() method of the Dog subclass overrides the same method of the Animal superclass.|||Inside the Dog class, we have used|||to call the eat() method of the Animal superclass from the Dog subclass.|||So, when we call the eat() method using the labrador object|||Both the overridden and the superclass version of the eat() method is executed.|||To understand the benefits of Inheritance, let's consider a situation.|||Suppose we are working with regular polygons such as squares, pentagons, and so on. And, we have to find the perimeter of these polygons based on the input.|||1. Since the formula to calculate perimeter is common for all regular polygons, we can create a Polygon class and a method calculatePerimeter() to calculate perimeter.|||2. And inherit Square and Pentagon classes from the RegularPolygon class. Each of these classes will have properties to store the length and number of sides because they are different for all polygons.|||We pass the value of the length and sides to calculatePerimeter() to compute the perimeter.|||This is how inheritance makes our code reusable and more intuitive.|||Output|||In the above example, we have created a RegularPolygon class that calculates the perimeter of the regular polygon.|||Here, the RegularSquare and RegularTriangle inherits from RegularPolygon.|||The formula to calculate the parameter of a regular polygon is common for all, so we have reused the calculatePerimeter() method of the superclass.|||And since the formula to calculate the area is different for different shapes, we have created a separate method inside the subclass to calculate the area.",Introduction$$$Example: Swift Inheritance$$$is-a relationship$$$Method Overriding in Swift Inheritance$$$super Keyword in Swift Inheritance$$$Why Inheritance?,Car is a Vehicle$$$Apple is a Fruit$$$Cat is an Animal,
https://www.programiz.com/swift-programming/overriding,Swift Overriding Methods and Properties (With Examples),Example: Swift Method Overriding$$$Access Overridden Method in Swift$$$Prevent Method Overriding$$$Override Swift Properties$$$Table of Contents,,"In this tutorial, we will learn about property and method overriding in Swift with the help of examples.|||In Swift Inheritance, the subclass inherits the methods and properties of the superclass. This allows subclasses to directly access the superclass members.|||Now, if the same method is defined in both the superclass and the subclass, then the method of the subclass class overrides the method of the superclass. This is known as overriding.|||We use the override keyword to declare method overriding. For example,|||Here, the displayInfo() method of the Car subclass overrides the same method of the Vehicle superclass.|||Output|||In the above example, we are overriding the displayInfo() method of the superclass Vehicle inside the subclass Car.|||Here, we have used the override keyword to specify the overridden method.|||Now, when we call the displayInfo() method using the object car1 of Car,|||the method inside the subclass is called.|||This is because the displayInfo() method of the Car subclass overrides the same method of the Vehicle superclass.|||To access the method of the superclass from the subclass, we use the super keyword. For example,|||Output|||In the above example, the displayInfo() method of the Car subclass overrides the same method of the Vehicle superclass.|||Inside the displayInfo() of Car, we have used|||to call the displayInfo() method of Vehicle||||||So, when we call the displayInfo() method using the car1 object|||both the overridden and the superclass version of the displayInfo() methods are executed.|||In Swift, we can prevent the method from overriding.|||To make a method non-overridable, we use the final keyword while declaring a method in the superclass. For example,|||In the above example, we have marked the displayInfo() method in the superclass as final.|||Once the method is declared as final, we cannot override it. So when we try to override the final method,|||we get an error message: error: instance method overrides a 'final' instance method.|||In Swift, we can override the computed properties. For example,|||Output|||In the above example, we have created a computed property inside the superclass University. Notice the code inside the subclass Fee,|||We are overriding the computed property cost. Now, when we access the cost property using the object amount of Fee,|||the property inside the subclass is called.|||Note: We cannot override the stored properties in Swift. For example,",Introduction$$$Example: Swift Method Overriding $$$Access Overridden Method in Swift$$$Prevent Method Overriding$$$Override Swift Properties,,
https://www.programiz.com/swift-programming/protocols,Swift Protocols (With Examples),Conform Class To Swift Protocol$$$Conforming Multiple Protocols$$$Swift Protocol Inheritance$$$Protocol Extensions$$$Example 1: Swift Protocol$$$Example 2: Swift Protocol To Calculate Area$$$Example 3: Conforming Multiple Protocols$$$Example 4: Swift Protocol Inheritance$$$Table of Contents,,"In this tutorial, we will learn about Swift protocols with the help of examples.|||In Swift, a protocol defines a blueprint of methods or properties that can then be adopted by classes (or any other types).|||We use the protocol keyword to define a protocol. For example,|||Here,|||Notes:|||In Swift, to use a protocol, other classes must conform to it. After we conform a class to the protocol, we must provide an actual implementation of the method.|||Here's how to conform a class to the protocol,|||Here, we have conformed the Employee class to the Greet protocol. So, we must provide an implementation of the name property and the message() method.|||Output|||In the above example, we have created a protocol named Greet. The protocol contains a blueprint of the name property and the message() method.|||Here, the Employee class conforms to Greet and provides the actual implementation of name and message().|||Output|||In the above example, we have created a protocol named Polygon. The protocol contains a blueprint of the getArea() method with two parameters: length and breadth.|||Here, the Rectangle class conforms to Polygon and provides the actual implementation of the getArea() method.|||In Swift, a class can also conform to multiple protocols. For example,|||Here, the class named Calculate conforms to the Sum and Multiplication protocols.|||Output||||||In the above example, we have created two protocols: Sum and Multiplication. Also, we have created a class named Calculate that conforms to these two protocols.|||We have created a blueprint of methods named addition() and product() inside the Sum and Multiplication protocols respectively.|||Since Calculate conforms to Sum and Multiplication, we have provided an actual implementation of addition() and product() inside the class.|||Finally, we have accessed these methods using the calc1 object of the class.|||Similar to classes, protocols can inherit other protocols. For example,|||Here, the Brand protocol inherits the Car protocol. Now, if any class implements Brand, it should provide implementations for all properties of both Car and Brand.|||Output|||In the above example, the Brand protocol inherits the Car protocol.|||Here, the Mercedes class only conforms to Brand. But since Brand inherits Car, we need to implement all the properties of both Car and Brand.|||Note: A protocol can inherit multiple protocols. For example,|||In Swift, we can extend protocols using the extension keyword. For example,|||Output|||In the above example, we have created the protocol Brake that defines the function applyBrake().|||We have extended the Brake protocol and defined the stop() function inside it.|||We can access the extended protocol using the car1 object.","Greet - name of the protocol$$$name - a gettable property$$$message() - method definition without any implementation$$$The protocol just holds the method or properties definition, not their actual body.$$$The protocol must specify whether the property will be gettable or gettable and settable.$$$Introduction$$$Conform Class To Swift Protocol$$$Conforming Multiple Protocols $$$Swift Protocol Inheritance$$$Protocol Extensions ",,
https://www.programiz.com/swift-programming/enum,Swift enum (With Examples),Create enum variables$$$Swift enum With Switch Statement$$$Iterate Over enum Cases$$$Swift enums with rawValue$$$Swift enum Associated Values$$$Assign values to enum variables$$$Example: Swift Enumeration$$$Example: Iterate Over enum Cases$$$Example: enums With Raw Values$$$Example: enum Associated Values$$$Table of Contents,,"In this tutorial, we will learn about Swift enum (enumeration) with the help of examples.|||In Swift, an enum (short for enumeration) is a user-defined data type that has a fixed set of related values.|||We use the enum keyword to create an enum. For example,|||Here,|||Note: Enum values are also called enum cases. And, we use the case keyword to declare values inside the enum.|||Since enum is a data-type, we can create variables of enum type. For example,|||Here, currentSeason is a Season type variable. It can only store values (spring, summer, autumn, winter) present inside the enum.|||We use the enum name and the . notation to assign values to an enum variable. For example,|||Here, we have assigned the member value summer to the enum variable currentSeason.|||Output|||In the above example,|||Note: Similar to variables, we can also create enum variables and assign value in a single line. For example,|||We can also use an enum with a switch statement in Swift. For example,|||Output|||In the above example, we have created an enum named PizzaSize with values: small, medium, large. Notice the statement,|||Here, we are assigning the value medium to the enum variable size.|||We have used the enum variable size inside the switch statement. And, the value is compared with the value of each case statement.|||Since the value matches with case .medium, the statement inside the case is executed.|||In Swift, we use the CaseIterable protocol to iterate over an enum. For example,|||Now we can use the allCases property to loop through each case of an enum.|||Output||||||In the above example, we have conformed the CaseIterable protocol with the enum Season.|||We then use the allCases property with the for loop to iterate over each case of the enum.|||In Swift, we can also assign values to each enum case. For example,|||Here, we have assigned values 29 and 31 to enum cases small and medium respectively. These values are called raw values.|||Note that we have used Int with enum name to define that enum cases can only include integer raw values.|||Access enum raw values|||To access the raw value of an enum, we use the rawValue property. For example,|||Here, we have accessed the value of the medium case.|||Output|||In the above example, we have created the enum named Size which has a raw value of Int type.|||Here, we have accessed the value of the small case using the rawValue property.|||Note: Raw values can be of strings, characters, integers, or floating-point number types.|||In Swift, we can also attach additional information to an enum case. For example,|||Here, for the name case, we can attach a String type value.|||Now, we can assign the associated value to the case.|||Here, Razer is the associated value of the name case.|||Output|||In the above example, the associated value|||To learn more about associated values, visit Swift enum Associated Value.","Season - name of the enum$$$spring/summer/autumn/winter - values defined inside the enum$$$Season - an enum with 4 values: spring, summer, autumn, winter$$$currentSeason - enum type variable$$$currentSeason = Season.summer - assigns enum value to currentSeason$$$Razor is assigned to the name case.$$$1599 is assigned to the price case.$$$Introduction$$$Create enum variables$$$Swift enum With Switch Statement$$$Iterate Over enum Cases$$$Swift enums with rawValue$$$Swift enum Associated Values",,
https://www.programiz.com/swift-programming/associated-value-enum,Swift enum With Associated Values (With Examples),Example: Swift enum with Associated Values$$$Associate Multiple Values$$$Named Associated Values$$$enum Associated Values and Switch Statement$$$Raw Values VS Associated Values$$$Example: Named Associated Values$$$Table of Contents,,"In this tutorial, we will learn about associated values in Swift enums with the help of examples.|||In Swift enum, we learned how to define a data type that has a fixed set of related values.|||However, sometimes we may want to attach additional information to enum values. These additional information attached to enum values are called associated values.|||Let's see an example,|||Here, (String) is additional information attached to the value km. It represents that the value of km can only be a String.|||Now, here's how we assign the associated value to the enum value.|||Here, ""Metric System"" is the value associated with the km value.|||Output|||In the above example, we have created an enum named Distance with the following associated values:|||In Swift, we can also associate multiple values to a single enum value. For example,|||Output|||Here, we have created an enum with two values: gpa and grade. Notice the enum values,|||This indicates that we have to associate three Double and String values to gpa and grade respectively. These associated values are also called tuples.|||So, we have attached 3.6, 2.9, 3.8 to gpa.|||And, we have attached ""A"", ""B"", ""C"" to grade.|||In Swift, we can also provide a name to the associated value to make our code more readable. For example,|||Here, we have provided the name inches to the associated value.|||It makes more sense while reading the named associated value instead of||||||Output|||In the above example, we have provided the name inches to the associated value.|||While passing associated value to the case, we have used the provided name,|||We can use a Swift switch Statement to match enum associated values. For example,|||Output|||In the above example, we have used a switch statement to match the enum associated values. Notice the statement,|||Here, we have attached 5.4 to suv and assigned it to the enum variable choice.|||Then, we have used choice inside the switch statement to compare the enum case with the value of each case statement. Notice the switch case statement,|||Here, let binds the associated value to the height variable, which we can use in the body of the case.|||Since the value matches with case let .suv, the statement inside the case is executed.|||In Swift, raw values are predefined constant values provided to each enum value. For example,|||Here, we have provided the raw values: ""Four Wheeler"" and ""Two Wheeler"" to car and bike respectively.|||However, associated values are more like variables associated with the enum values. For example,|||Here, grade and gpa have an associated value of String and Double type respectively.|||And we assign the associated value to the enum value while creating a variable.|||Notes:","""Metric System"" is assigned to the km value.$$$""Imperial System"" is assigned to the miles value.$$$Introduction$$$Example: Swift enum with Associated Values$$$Associate Multiple Values$$$Named Associated Values$$$enum Associated Values and Switch Statement$$$Raw Values VS Associated Values",An enum cannot have both raw values and associated values at the same time.$$$The raw values of an enum must be of the same data type. But associated values can be of any type.,
https://www.programiz.com/swift-programming/structs,Swift Structs (With Examples),Define Swift Structure$$$Struct Instances$$$Example: Swift Access Struct Properties$$$Example: Create Multiple Instances of Struct$$$Swift Memberwise Initializer$$$Function Inside Swift Struct$$$Example: Memberwise Initializer$$$Table of Contents,,"In this tutorial, you will learn about Swift struct and you'll also learn to create struct instances with the help of examples.|||In Swift, a struct is used to store variables of different data types. For example,|||Suppose we want to store the name and age of a person. We can create two variables: name and age and store value.|||However, suppose we want to store the same information of multiple people.|||In this case, creating variables for an individual person might be a tedious task. To overcome this we can create a struct that stores name and age. Now, this struct can be used for every person.|||Here's the syntax to define struct in Swift:|||Here,|||Let's see an example,|||Here, we have defined a struct named Person. Inside the curly braces {}, the struct contains two variables name and age with values """" and 0 respectively.|||Note: The variables and constants inside a struct are called properties.|||A struct definition is just a blueprint. To use a struct, we need to create an instance of it. For example,|||Here, we have created an instance by writing the name of the structure Person followed by a default initializer ()|||Now, we can use the person1 instance to access and modify the struct properties. For example,|||Here, we have used the dot notation . to access struct properties.|||Output|||In the above example, we have defined the struct named Person with two properties: name and age.|||We have also created an instance person1 of the struct Person.|||Finally, we have accessed and modified the properties of an instance using . notation.|||Output||||||In the above example, we have created two instances student1 and student2 of the Student struct|||Note: We can create as many instances of the structure as we want.|||Earlier we assigned a default value to a struct property.|||We have created an instance using the default initializer.|||However, if we do not assign a default value to struct property.|||We pass value while creating an instance|||Here, values inside the parenthesis () are automatically assigned to corresponding properties of the struct. This is called a memberwise initializer.|||Note: We can also use a memberwise initializer even if we have assigned a default value to a struct property.|||Output|||In the above example, we have created the instance person1 for the Person struct.|||Since we have not assigned default values to the properties, we use a memberwise initializer to assign values.|||We can also define a function inside a swift struct. A function defined inside a struct is called a method.|||Let's see an example,|||Output|||In the above example, we have defined the method named applyBraking() inside the Car struct. Notice the accessing of the method,|||Here, we have used . notation to access method defined inside the struct. Finally, the statement inside the method is executed.",struct - keyword used to define a structure$$$StructName - the name of the structure$$$Introduction$$$Define Swift Structure$$$Structure Instances$$$Swift Memberwise Initializer$$$Function Inside Swift Struct,,
https://www.programiz.com/swift-programming/singleton,Swift Singleton (With Examples),Example: Swift Singleton$$$Table of Contents,,"In this tutorial, we will learn about Swift Singleton with the help of examples.|||In Swift, Singleton is a design pattern that ensures a class can have only one object. Such a class is called singleton class.|||To create a singleton class, we need to follow some rule|||1. Create a private initializer|||An initializer allows us to instantiate an object of a class. And, making the initializer of a class restricts the object creation of the class from outside of the class.|||Here, the initializer of the FileManager class is private. So, when we try to create an object of FileManager outside of the class, we get an error.|||2. Create static type Singleton Object|||In Singleton class, we create a single static type object of the class. Making the object static allows us to access the object using the class name.||||||Here, we are accessing the fileObj object using the class name FileManager.|||Output|||In the above example, we have created a singleton class FileManager. Since it is a singleton class, we have made the initializer private and created a static object named fileObj.|||Notice the line,|||Here, we have accessed the object fileObj using the class name FileManager. We then accessed the method checkFileAccess().|||Note: A design pattern is like our code library that includes various coding techniques shared by programmers around the world.|||It's important to note that, there are only a few scenarios (like file managing, API requests) where singletons make sense. We recommend you avoid using singletons completely if you are not sure whether to use them or not. Learn more: What is so bad about Singleton?",Introduction,,
https://www.programiz.com/swift-programming/error-handling,Swift Error Handling (With Examples),Steps For Error Handling in Swift$$$1. Create enum of Errors$$$2. Create a Throwing Function$$$3. Function Call Using try Keyword$$$4. Handling Errors Using do-catch Statement$$$Example: Swift Error Handling$$$Disable Error Handling$$$Causes of Error in Swift$$$Table of Contents,,"In this tutorial, we will learn to handle Swift errors with the help of examples.|||An error (exception) is an unexpected event that occurs during program execution. For example,|||Here, we are trying to divide a number. So this type of error causes the abnormal termination of the program.|||In Swift, we need to create an enum that represents the type of errors we may encounter while writing the program.|||The enum we create must conform to the Error protocol so that we can throw an error value inside the function.|||Let's see an example,|||Here, we have created an enum named DivisionError with the value dividedByZero.|||Since DivisionError conforms to the Error protocol, we'll now be able to throw the error value of the enum.|||In order to throw errors, we need to create a throwing function using the throws keyword.|||Then we use the throw statement inside the function to throw a particular error represented by the enum. For example,|||Here, we have created a throwing function named division() using the throws keyword. The function throws the dividedByZero value of the DivisionError enum if denominator == 0|||Now, based on the value passed during the function call, the function throws an error if the error condition is met.|||Note: The throw keyword has the same effect as the return keyword. return returns some value from the function, whereas throw returns error value from the function.|||In Swift, we use the try keyword while calling the throwing function. It indicates that a function can throw an error. For example,|||However, the error handling process is still incomplete. If we run the program now, we'll get an error message: An error was thrown and was not caught|||So, in order to catch the thrown error, we use the do-catch statement.|||In Swift, we wrap the try code in the do block and add the catch block to handle all errors. For example,|||Here, we have called the throwing function division() from within the do block and attached the catch block to catch the error in case the function throws one.||||||The above catch block is executed based on the enum value of DivisionError.|||This is the final step to handle possible errors that may occur in our program.|||Output|||In the above example,|||We have used try to pass values to the throwing function|||to check if the passed values meet the error condition or not.|||If the error condition is|||In Swift, sometimes we can be confident that the throwing function won't throw an error at runtime.|||In that case, we can write try! during the function call to disable the error handling. For example,|||Output|||In the above example, we have used try! during the function call to disable the error handling.|||Here, since we have assigned value 5 to denominator, we know that the program will not throw an error. So we have disabled the error handling.|||Also notice that when we use try!, we don't need to use the do-catch statement.|||Note: If we use try! and there is an error, our app will simply crash.|||An error can occur for many reasons. Some of them are:|||Since the errors abnormally terminate the execution of a program, it is important to handle these kinds of errors.","DivisionError is an enum$$$division() is a throwing function$$$the do-catch statement handles the error$$$met - the throwing function throws the error, which is caught by the catch block.$$$not met - the else statement inside throwing function and print statement inside the do block are executed.$$$Invalid user input$$$Device failure$$$Loss of network connection$$$Physical limitations (out of disk memory)$$$Code errors$$$Opening an unavailable file$$$Introduction$$$Steps For Error Handling in Swift$$$Create enum of Errors$$$Create a Throwing Function$$$Function Call Using try Keyword$$$Handling Errors Using do-catch Statement$$$Example: Swift Error Handling$$$Disable Error Handling$$$Causes of Error in Swift",Create an enum that represents the types of errors.$$$Create a throwing function using the throws keyword.$$$Call the function using the try keyword.$$$Wrap the code with try in the do {...} block and add the catch {...} block to handle all errors.,
https://www.programiz.com/swift-programming/generics,Swift Generics (With Examples),Swift Generic Function$$$Example: Swift Generic Function$$$Swift Generic Class$$$Type Constraints in Swift Generics$$$Advantages of Swift Generics$$$Example: Type Constraints$$$1. Code Reusability$$$2. Used with Collections$$$Table of Contents,,"In this tutorial, we will learn about Swift Generics, how to create generic functions and types, and its advantages with the help of examples.|||Swift Generics allows us to create a single function and class (or any other types) that can be used with different data types.|||This helps us to reuse our code.|||In Swift, we can create a function that can be used with any type of data. Such a function is known as a Generic Function.|||Here's how we can create a generic function in Swift:|||Here,|||And based on the type of the value passed to the function, the T is replaced by that data type (Int, String, and so on).|||Note: We can provide any name to the type parameter: <S>, <Element>, etc. But generally, we use T.|||Output|||In the above example, we have created a generic function named displayData() with the type parameter <T>.|||Now, when we call the generic function|||we have passed a string value, so the placeholder parameter T is automatically replaced by String.|||Similarly, when we pass Int to the generic function|||the placeholder is replaced by Int.|||Similar to the generic function, we can also create a class that can be used with any type of data. Such a class is known as Generic Class.|||Let's see an example,|||Output|||In the above example, we have created a generic class named Information. This class can be used to work with any type of data.||||||We have created two objects of Information|||Here,|||In general, the type parameter can accept any data type (Int, String, Double, ...).|||However, if we want to use generics for some specific types (such as accepting data of number types) only, then we can use type constraints.|||Here's how we create type constraints:|||Here, <T: Numeric> adds constraints to the type parameter. It defines that T needs to conform to the Numeric protocol.|||Note: Numeric is the built-in protocol for numeric values like Int and Double.|||Output|||In the above example, we have created a generic function named addition(). Notice the expression,|||Here, the generic function is created with type constraints. This means addition() can only work with data types that conform to Numeric protocol (Int, Double, and so on).|||Note: If we try to pass other types, say String, we'll get an error: argument type 'String' does not conform to the expected type 'Numeric'.|||With the help of generics in Swift, we can write code that will work with different types of data. For example,|||Here, we have created a generics function. This same function can be used to perform operations on integer data, string data, and so on.|||Swift array uses the concept of generics. For example,|||Here, list1 array that holds Int values and list2 array that holds String values.|||Similar to arrays, dictionaries are also generic in Swift.",We have created a generic function named displayData().$$$T used inside the angle bracket <> is called the type parameter.$$$Introduction$$$Swift Generic Function$$$Example: Swift Generic Function$$$Swift Generic Class$$$Type Constraints$$$Advantages of Swift Generics,"intObj - the type parameter T is replaced by Int. Now, the Information works with integer data.$$$stringObj - the type parameter T is replaced by String. Now, the Information works with string data.",
https://www.programiz.com/swift-programming/extension,Swift Extension (With Examples),Example: Swift Extension$$$Computed Property In Extension$$$Protocol Extension$$$Example: Computed Property In Extension$$$Table of Contents,,"In this tutorial, we will learn about Swift extensions with the help of examples.|||In Swift, we can add new functionality to existing types. We can achieve this using an extension.|||We use the extension keyword to declare an extension. For example,|||Here, we have created an extension of the Temperature class using the extension keyword.|||Now, inside the extension, we can add new functionality to Temperature.|||Output|||In the above example, we have created an extension of the Temperature class.|||This extension adds the following features to Temperature:|||We have then created an object named temp1 of Temperature, and used it to access the method created inside the extension.|||Note: Properties defined inside the class (like celsius) can be used inside the extension too.|||In Swift, we cannot add stored properties in extensions. For example,|||However, Swift lets us add computed properties to an extension. For example,|||Here, area is a computed property defined in the extension body.||||||Output|||In the above example, we have created an extension of the Circle class, where we have defined a computed property named area.|||This property calculates the area of the circle based on the value of radius.|||In Swift, we can also extend the protocols. For example,|||Output|||In the above example, we have created the protocol Brake that defines the function applyBrake().|||We have extended the Brake protocol and defined the body of the applyBrake() function inside it.|||Now, since the Car class conforms to the Brake protocol|||we can access the extended protocol using the car1 object.",convert() - a method that simply converts the temperature from celsius to fahrenheit.$$$fahrenheit - a variable declared inside convert() that stores the result of the conversion.$$$Introduction$$$Example: Swift Extension$$$Computed Property In Extension$$$Protocol Extension,,
https://www.programiz.com/swift-programming/access-control,Swift Access Control,Types of Swift Access Controls$$$public Access Control$$$private Access Control$$$fileprivate Access Control$$$internal Access Control$$$Example: internal Within The Same Module$$$Table of Contents,,"In this tutorial, we will learn about Swift access control, its types, and how to use them with the help of examples.|||In Swift, access controls are used to set the accessibility (visibility) of classes, structs, enums, properties, methods, initializers, and subscripts. For example,|||Here, |||Note the keyword public and private. These are access controls in Swift. |||In Swift, there are four access controls:|||In Swift, when methods, properties, classes, and so on are declared public, then we can access them from anywhere. |||The public access modifier has no scope restriction. For example,|||Output|||In the above example, we have created a class named Animal with two public data members: legCount and display(). |||We have then created an object of Animal class named obj. We then access the public data members directly by using the codes obj1.legCount and obj1.display(). |||When we declare a type member as private, then it can only be accessed within the same class or struct. For example,|||In the above example, we have created a class named Student with a property name and a method display(). Notice the statements,|||Since name and display() are marked as private, we are not able to access them outside Student. Here, the code will generate the following error.||||||When we declare a type member as fileprivate, then it can only be accessed within the defined source file. For example,|||Output|||In the above example, we have created the fileprivate data members name and display() inside the Student class.|||Since the name and display() are marked as fileprivate, these data members are accessible from anywhere in the source file where it is defined.|||Note: If we create another Swift file and try to access the fileprivate data members, we'll get an error.  |||When we declare a type or type member as internal, it can be accessed only within the same module.|||A module is a collection of types (classes, protocols, etc) and resources (data). They are built to work together and form a logical unit of functionality.|||Output|||In the above example, we have created a class named Student with a property name. Since name is internal, we are able to access it outside the class as they are in the same module.|||If we use internal within a single module, it works just like the public access modifier.|||Note: ","If we create another module and try to access the internal data members, we'll get an error.$$$To learn how to create a module, visit Swift Module.$$$Introduction$$$Types of Swift Access Controls$$$public Access Control$$$private Access Control$$$fileprivate Access Control$$$internal Access Control",method1() is public i.e. it can be accessed by other classes.$$$method2() is private i.e. it can not be accessed by other classes.,Controls|||Description$$$public |||declarations are accessible from everywhere $$$private|||declarations are accessible only within the defined class or struct$$$fileprivate|||declarations are accessible only within the current swift file$$$internal |||declarations are accessible only within the defined module (default)
https://www.programiz.com/swift-programming/typealias,Swift Typealias: How to use them and Why?,How to create a typealias?$$$Typealias for built-in types$$$Typealias for user defined types$$$Typealias for complex types$$$Table of Contents,,"In this article, you will learn about typealias and its use cases in Swift.|||A type alias allows you to provide a new name for an existing data type into your program. After a type alias is declared, the aliased name can be used instead of the existing type throughout the program.|||Type alias do not create new types. They simply provide a new name to an existing type.|||The main purpose of typealias is to make our code more readable, and clearer in context for human understanding.|||It is declared using the keyword typealias as:|||In Swift, you can use typealias for most types. They can be either:|||You can use typealias for all built in data Types as String, Int, Float etc.|||For example:|||The above declaration allows StudentName to be used everywhere instead of String. So, if you want to create a constant of type string but represents more like student name. You can do as:|||Without using typealias, you should declare constant of type string as:|||Above both examples creates a constant of type String. But declaring with typealias, our code becomes more readable.||||||There are many cases when you need to create your own data type. Suppose you want to create a Type that represents Student, you can create it using a class as:|||Now a group of students can be represented as an array as:|||The above declaration can be made more readable by creating your own type for Array<Student> using typealias as:|||Now we can make our code more readable as:|||Lets analyze one more example. Suppose we have a method that takes a closure as an input parameter.|||Don't worry if you do not know about closures. Just think of it as a special type of function. We have explained it detail in the article: Swift closures.|||The above example takes a closure as an input to someMethod. The closure takes an Int value and returns String.|||You can see the use of (Int)->(String) makes less sense to the reader. You can use typealias to provide a new name for it:|||Now you can rewrite the method as:|||We can see the same code looks more clear and programmer friendly with the use of typealias.","Built-in types (for.eg: String, Int)$$$User-defined types (for.e.g: class, struct, enum)$$$Complex types (for e.g: closures)$$$What is a typealias?$$$How to create a typealias?$$$Typealias for built-in types$$$Typealias for user defined types$$$Typealias for complex types",,
