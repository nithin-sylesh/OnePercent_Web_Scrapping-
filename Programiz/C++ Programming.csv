Links,Main Heading,Chapter Headings,Description,Contents,Unordered Lists,Ordered Lists,Table Data
https://www.programiz.com/cpp-programming,Learn C++ Programming,About C++ Programming$$$Why Learn C++?$$$How to learn C++?$$$C++ Resources,"C++ is a powerful general-purpose programming language. It can be used to develop operating systems, browsers, games, and so on. C++ supports different ways of programming like procedural, object-oriented, functional, and so on. This makes C++ powerful as well as flexible. Our C++ programming tutorial will guide you to learn C++ programming one step at a time.",,"Multi-paradigm Language - C++ supports at least seven different styles of programming. Developers can choose any of the styles.$$$General Purpose Language - You can use C++ to develop games, desktop apps, operating systems, and so on.$$$Speed - Like C programming, the performance of optimized C++ code is exceptional.$$$Object-oriented - C++ allows you to divide complex problems into smaller sets by using objects.$$$C++ is used to develop games, desktop apps, operating systems, browsers, and so on because of its performance.$$$After learning C++, it will be much easier to learn other programming languages like Java, Python, etc.$$$C++ helps you to understand the internal architecture of a computer, how computer stores and retrieves information.$$$C++ tutorial from Programiz - We provide step by step C++ tutorials, examples, and references. Get started with C++.$$$Official C++ documentation - Might be hard to follow and understand for beginners. Visit official C++ documentation.$$$Write a lot of C++ programming code- The only way you can learn programming is by writing a lot of code.$$$Read C++ code- Join Github's open-source projects and read other people's code.$$$C++ Examples$$$C++ References$$$C++ Guide",,
https://www.programiz.com/cpp-programming/variables-literals,"C++ Variables, Literals and Constants",C++ Variables$$$C++ Literals$$$C++ Constants$$$Rules for naming a variable$$$1. Integers$$$2. Floating-point Literals$$$3. Characters$$$4. Escape Sequences$$$5. String Literals$$$Table of Contents,,"In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.|||In programming, a variable is a container (storage area) to hold data.|||To indicate the storage area, each variable should be given a unique name (identifier). For example,|||Here, age is a variable of the int data type, and we have assigned an integer value 14 to it.|||Note: The int data type suggests that the variable can only hold integers. Similarly, we can use the double data type if we have to store decimals and exponentials.|||We will learn about all the data types in detail in the next tutorial.|||The value of a variable can be changed, hence the name variable.|||Note: We should try to give meaningful names to variables. For example, first_name is a better variable name than fn.|||Literals are data used for representing fixed values. They can be used directly in the code. For example: 1, 2.5, 'c' etc.|||Here, 1, 2.5 and 'c' are literals. Why? You cannot assign different values to these terms.|||Here's a list of different literals in C++ programming.|||An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:|||For example:|||In C++ programming, octal starts with a 0, and hexadecimal starts with a 0x.|||A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:||||||-2.0|||0.0000234|||-0.22E-5|||Note: E-5 = 10-5|||A character literal is created by enclosing a single character inside single quotation marks. For example: 'a', 'm', 'F', '2', '}' etc.|||Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc.|||In order to use these characters, escape sequences are used.|||A string literal is a sequence of characters enclosed in double-quote marks. For example:|||We will learn about strings in detail in the C++ string tutorial.|||In C++, we can create variables whose value cannot be changed. For that, we use the const keyword. Here's an example:|||Here, we have used the keyword const to declare a constant named LIGHT_SPEED. If we try to change the value of LIGHT_SPEED, we will get an error.|||A constant can also be created using the #define preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.","A variable name can only have alphabets, numbers, and the underscore _.$$$A variable name cannot begin with a number.$$$It is a preferred practice to begin variable names with a lowercase character. For example, name is preferable to Name.$$$A variable name cannot be a keyword. For example, int is a keyword that is used to denote integers.$$$A variable name can start with an underscore. However, it's not considered a good practice.$$$decimal (base 10)$$$octal (base 8)$$$hexadecimal (base 16)$$$C++ Variables$$$Rules for naming a variable$$$C++ Literals$$$Integers$$$Floating-point Literals$$$Characters$$$Escape Sequences$$$String Literals$$$C++ Constants",,"Escape Sequences|||Characters$$$\b|||Backspace$$$\f|||Form feed$$$\n|||Newline$$$\r|||Return$$$\t|||Horizontal tab$$$\v|||Vertical tab$$$\\|||Backslash$$$\'|||Single quotation mark$$$\""|||Double quotation mark$$$\?|||Question mark$$$\0|||Null Character$$$""good""|||string constant$$$""""|||null string constant$$$"" ""|||string constant of six white space$$$""x""|||string constant having a single character$$$""Earth is round\n""|||prints string with a newline"
https://www.programiz.com/cpp-programming/data-types,C++ Data Types,C++ Fundamental Data Types$$$C++ Type Modifiers$$$Derived Data Types$$$1. C++ int$$$2. C++ float and double$$$3. C++ char$$$4. C++ wchar_t$$$5. C++ bool$$$6. C++ void$$$C++ Modified Data Types List$$$Table of Contents,,"In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples.|||In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example,|||Here, age is a variable of type int. Meaning, the variable can only store integers of either 2 or 4 bytes.|||The table below shows the fundamental data types, their meaning, and their sizes (in bytes):|||Now, let us discuss these fundamental data types in more detail.|||As mentioned above, these two data types are also used for exponentials. For example,|||Note: In C++, an integer value is stored in a char variable rather than the character itself. To learn more, visit C++ characters.|||Notice the letter L before the quotation marks.||||||Note: There are also two other fixed-size character types char16_t and char32_t introduced in C++11.|||Note: We cannot declare variables of the void type.|||We can further modify some of the fundamental data types by using type modifiers. There are 4 type modifiers in C++. They are:|||We can modify the following data types with the above modifiers:|||Let's see a few examples.|||Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc.|||We will learn about these derived data types in later tutorials.","The int keyword is used to indicate integers.$$$Its size is usually 4 bytes. Meaning, it can store values from -2147483648 to 2147483647.$$$For example,$$$float and double are used to store floating-point numbers (decimals and exponentials).$$$The size of float is 4 bytes and the size of double is 8 bytes. Hence, double has two times the precision of float. To learn more, visit C++ float and double.$$$For example,$$$Keyword char is used for characters.$$$Its size is 1 byte.$$$Characters in C++ are enclosed inside single quotes ' '.$$$For example,$$$Wide character wchar_t is similar to the char data type, except its size is 2 bytes instead of 1.$$$It is used to represent characters that require more memory to represent them than a single char.$$$For example,$$$The bool data type has one of two possible values: true or false.$$$Booleans are used in conditional statements and loops (which we will learn in later chapters).$$$For example,$$$The void keyword indicates an absence of data. It means ""nothing"" or ""no value"".$$$We will use void when we learn about functions and pointers.$$$int$$$double$$$char$$$C++ Fundamental Data Types$$$int$$$float and double$$$char$$$wchar_t$$$bool$$$void$$$C++ Type Modifiers$$$Derived Data Types",signed$$$unsigned$$$short$$$long,"Data Type|||Meaning|||Size (in Bytes)$$$int|||Integer|||2 or 4$$$float|||Floating-point|||4$$$double|||Double Floating-point|||8$$$char|||Character|||1$$$wchar_t|||Wide Character|||2$$$bool|||Boolean|||1$$$void|||Empty|||0$$$Data Type|||Size (in Bytes)|||Meaning$$$signed int|||4|||used for integers (equivalent to int)$$$unsigned int|||4|||can only store positive integers$$$short|||2|||used for small integers (range -32768 to 32767)$$$unsigned short|||2|||used for small positive integers (range 0 to 65,535)$$$long|||at least 4|||used for large integers (equivalent to long int)$$$unsigned long|||4|||used for large positive integers or 0 (equivalent to unsigned long int)$$$long long|||8|||used for very large integers (equivalent to long long int).$$$unsigned long long|||8|||used for very large positive integers or 0 (equivalent to unsigned long long int)$$$long double|||12|||used for large floating-point numbers$$$signed char|||1|||used for characters (guaranteed rangeÂ -127 to 127)$$$unsigned char|||1|||used for characters (range 0 to 255)"
https://www.programiz.com/cpp-programming/input-output,C++ Basic Input/Output,C++ Output$$$C++ Input$$$C++ Taking Multiple Inputs$$$Example 1: String Output$$$Example 2: Numbers and Characters Output$$$Example 3: Integer Input/Output$$$Table of Contents,,"In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples.|||In C++, cout sends formatted output to standard output devices, such as the screen. We use the cout object along with the << operator for displaying output.|||Output|||How does this program work?|||Note: If we don't include the using namespace std; statement, we need to use std::cout instead of cout.|||This is the preferred method as using the std namespace can create potential problems.|||However, we have used the std namespace in our tutorials in order to make the codes more readable.||||||To print the numbers and character variables, we use the same cout object but without using quotation marks.|||Output|||Notes:|||In C++, cin takes formatted input from standard input devices such as the keyboard. We use the cin object along with the >> operator for taking input.|||Output|||In the program, we used|||to take input from the user. The input is stored in the variable num. We use the >> operator with cin to take input.|||Note: If we don't include the using namespace std; statement, we need to use std::cin instead of cin.|||Output","We first include the iostream header file that allows us to display output.$$$The cout object is defined inside the std namespace. To use the std namespace, we used the using namespace std; statement.$$$Every C++ program starts with the main() function. The code execution begins from the start of the main() function.$$$cout is an object that prints the string inside quotation marks "" "". It is followed by the << operator.$$$return 0; is the ""exit status"" of the main() function. The program ends with this statement, however, this statement is not mandatory.$$$The endl manipulator is used to insert a new line. That's why each output is displayed in a new line.$$$The << operator can be used more than once if we want to print different variables, strings and so on in a single statement. For example:$$$C++ Output$$$Example 1: String Output$$$Example 2: Numbers and Characters Output$$$C++ Input$$$Example 3: Integer Input/Output$$$C++ Multiple Input",,
https://www.programiz.com/cpp-programming/type-conversion,C++ Type Conversion,Implicit Type Conversion$$$C++ Explicit Conversion$$$Example 1: Conversion From int to double$$$Example 2: Automatic Conversion from double to int$$$Data Loss During Conversion (Narrowing Conversion)$$$C-style Type Casting$$$Function-style Casting$$$Example 3: Type Casting$$$Type Conversion Operators$$$Table of Contents,,"In this tutorial, we will learn about the basics of C++ type conversion with the help of examples.|||C++ allows us to convert data of one type to that of another. This is known as type conversion.|||There are two types of type conversion in C++.|||The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion.|||Let us look at two examples of implicit type conversion.|||Output|||In the program, we have assigned an int data to a double variable.|||Here, the int value is automatically converted to double by the compiler before it is assigned to the num_double variable. This is an example of implicit type conversion.|||Output|||In the program, we have assigned a double data to an int variable.|||Here, the double value is automatically converted to int by the compiler before it is assigned to the num_int variable. This is also an example of implicit type conversion.|||Note: Since int cannot have a decimal part, the digits after the decimal point areÂ truncated in the above example.|||As we have seen from the above example, conversion from one data type to another is prone to data loss. This happens when data of a larger type is converted to data of a smaller type.|||When the user manually changes data from one type to another, this is known as explicit conversion. This type of conversion is also known as type casting.|||There are three major ways in which we can use explicit conversion in C++. They are:||||||As the name suggests, this type of casting is favored by the C programming language. It is also known as cast notation.|||The syntax for this style is:|||For example,|||We can also use the function like notation to cast data from one type to another.|||The syntax for this style is:|||For example,|||Output|||We used both the C style type conversion and the function-style casting for type conversion and displayed the results. Since they perform the same task, both give us the same output.|||Besides these two type castings, C++ also has four operators for type conversion. They are known as type conversion operators. They are:|||We will learn about these casts in later tutorials.|||Recommended Tutorials:","static_cast$$$dynamic_cast$$$const_cast$$$reinterpret_cast$$$C++ string to int and Vice-versa$$$C++ string to float, double and Vice-versa$$$Introduction$$$Implicit Type Conversion$$$Example: int to double Conversion$$$Example: Conversion from double to int$$$Data Loss During Conversion$$$C++ Explicit Conversion:$$$C-style Type Casting$$$Function-style Casting$$$Example: Type Casting$$$Type Conversion Operators",Implicit Conversion$$$Explicit Conversion (also known as Type Casting)$$$C-style type casting (also known as cast notation)$$$Function notation (also known as old C++ style type casting)$$$Type conversion operators,
https://www.programiz.com/cpp-programming/operators,C++ Operators,1. C++ Arithmetic Operators$$$2. C++ Assignment Operators$$$3. C++ Relational Operators$$$4. C++ Logical Operators$$$5. C++ Bitwise Operators$$$6. Other C++ Operators$$$Example 1: Arithmetic Operators$$$Increment and Decrement Operators$$$Example 2: Increment and Decrement Operators$$$Example 3: Assignment Operators$$$Example 4: Relational Operators$$$Example 5: Logical Operators$$$Table of Contents,,"In this tutorial, we will learn about the different types of operators in C++ with the help of examples. In programming, an operator is a symbol that operates on a value or a variable.|||Operators are symbols that perform operations on variables and values. For example, + is an operator used for addition, while - is an operator used for subtraction.|||Operators in C++ can be classified into 6 types:|||Arithmetic operators are used to perform arithmetic operations on variables and data. For example,|||Here, the + operator is used to add two variables a and b. Similarly there are various other arithmetic operators in C++.|||Output|||Here, the operators +, - and * compute addition, subtraction, and multiplication respectively as we might have expected.|||/ Division Operator|||Note the operation (a / b) in our program. The / operator is the division operator.|||As we can see from the above example, if an integer is divided by another integer, we will get the quotient. However, if either divisor or dividend is a floating-point number, we will get the result in decimals.|||% Modulo Operator|||The modulo operator % computes the remainder. When a = 9 is divided by b = 4, the remainder is 1.|||Note: The % operator can only be used with integers.|||C++ also provides increment and decrement operators: ++ and -- respectively.|||For example,|||Here, the code ++num; increases the value of num by 1.|||Output|||In the above program, we have used the ++ and -- operators as prefixes (++a and --b). However, we can also use these operators as postfix (a++ and b--).||||||To learn more, visit increment and decrement operators.|||In C++, assignment operators are used to assign values to variables. For example,|||Here, we have assigned a value of 5 to the variable a.|||Output|||A relational operator is used to check the relationship between two operands. For example,|||Here, > is a relational operator. It checks if a is greater than b or not.|||If the relation is true, it returns 1 whereas if the relation is false, it returns 0.|||Output|||Note: Relational operators are used in decision-making and loops.|||Logical operators are used to check whether an expression is true or false. If the expression is true, it returns 1 whereas if the expression is false, it returns 0.|||In C++, logical operators are commonly used in decision making. To further understand the logical operators, let's see the following examples,|||Output|||Explanation of logical operator program|||In C++, bitwise operators are used to perform operations on individual bits. They can only be used alongside char and int data types.|||To learn more, visit C++ bitwise operators.|||Here's a list of some other common operators available in C++. We will learn about them in later tutorials.",++ increases the value of the operand by 1$$$-- decreases it by 1$$$(3 != 5) && (3 < 5) evaluates to 1 because both operands (3 != 5) and (3 < 5) are 1 (true).$$$(3 == 5) && (3 < 5) evaluates to 0 because the operand (3 == 5) is 0 (false).$$$(3 == 5) && (3 > 5) evaluates to 0 because both operands (3 == 5) and (3 > 5) are 0 (false).$$$(3 != 5) || (3 < 5) evaluates to 1 because both operands (3 != 5) and (3 < 5) are 1 (true).$$$(3 != 5) || (3 > 5) evaluates to 1 because the operand (3 != 5) is 1 (true).$$$(3 == 5) || (3 > 5) evaluates to 0 because both operands (3 == 5) and (3 > 5) are 0 (false).$$$!(5 == 2) evaluates to 1 because the operand (5 == 2) is 0 (false).$$$!(5 == 5) evaluates to 0 because the operand (5 == 5) is 1 (true).$$$C++ Operators$$$Arithmetic Operators$$$Increment and Decrement Operators$$$Assignment Operators$$$Relational Operators$$$Logical Operators$$$Other Operators,Arithmetic Operators$$$Assignment Operators$$$Relational Operators$$$Logical Operators$$$Bitwise Operators$$$Other Operators,"Operator|||Operation$$$+|||Addition$$$-|||Subtraction$$$*|||Multiplication$$$/|||Division$$$%|||Modulo Operation (Remainder after division)$$$Operator|||Example|||Equivalent to$$$=|||a = b;|||a = b;$$$+=|||a += b;|||a = a + b;$$$-=|||a -= b;|||a = a - b;$$$*=|||a *= b;|||a = a * b;$$$/=|||a /= b;|||a = a / b;$$$%=|||a %= b;|||a = a % b;$$$Operator|||Meaning|||Example$$$==|||Is Equal To|||3 == 5 gives us false$$$!=|||Not Equal To|||3 != 5 gives us true$$$>|||Greater Than|||3 > 5 gives us false$$$<|||Less Than|||3 < 5 gives us true$$$>=|||Greater Than or Equal To|||3 >= 5 give us false$$$<=|||Less Than or Equal To|||3 <= 5 gives us true$$$Operator|||Example|||Meaning$$$&&|||expression1 && expression2|||Logical AND.True only if all the operands are true.$$$|||||expression1 || expression2|||Logical OR.True if at least one of the operands is true.$$$!|||!expression|||Logical NOT.True only if the operand is false.$$$Operator|||Description$$$&|||Binary AND$$$||||Binary OR$$$^|||Binary XOR$$$~|||Binary One's Complement$$$<<|||Binary Shift Left$$$>>|||Binary Shift Right$$$Operator|||Description|||Example$$$sizeof|||returns the size of data type|||sizeof(int); // 4$$$?: |||returns value based on the condition|||string result = (5 > 0) ? ""even"" : ""odd""; // ""even""$$$&|||represents memory address of the operand|||&num; // address of num$$$.|||accesses members of struct variables or class objects|||s1.marks = 92;$$$->|||used with pointers to access the class or struct variables|||ptr->marks = 92;$$$<<|||prints the output value|||cout << 5;$$$>>|||gets the input value|||cin >> num;"
https://www.programiz.com/cpp-programming/comments,C++ Comments,Single Line Comments$$$Multi-line comments$$$Using Comments for Debugging$$$Why use Comments?$$$Table of Contents,,"In this tutorial, we will learn about C++ comments, why we use them, and how to use them with the help of examples.|||C++ comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by C++ compilers.|||There are two ways to add comments to code:|||// - Single Line Comments|||/* */ -Multi-line Comments|||In C++, any line that starts with // is a comment. For example,|||Here, we have used two single-line comments:|||We can also use single line comment like this:|||In C++, any line between /* and */ is also a comment. For example,|||This syntax can be used to write both single-line and multi-line comments.||||||Comments can also be used to disable code to prevent it from being executed. For example,|||If we get an error while running the program, instead of removing the error-prone code, we can use comments to disable it from being executed; this can be a valuable debugging tool.|||Pro Tip: Remember the shortcut for using comments; it can be really helpful. For most code editors, it's Ctrl + / for Windows and Cmd + / for Mac.|||If we write comments on our code, it will be easier for us to understand the code in the future. Also, it will be easier for your fellow developers to understand the code.|||Note: Comments shouldn't be the substitute for a way to explain poorly written code in English. We should always write well-structured and self-explanatory code. And, then use comments.|||As a general rule of thumb, use comments to explain Why you did something rather than How you did something, and you are good.",// declaring a variable$$$// initializing the variable 'a' with the value 2$$$Introduction$$$Single Line Comments$$$Multi-line comments$$$Using Comments for Debugging$$$Why use Comments?,,
https://www.programiz.com/cpp-programming/if-else,C++ If...else (With Examples),C++ if Statement$$$C++ if...else$$$C++ if...else...else if statement$$$C++ Nested if...else$$$Body of if...else With Only One Statement$$$More on Decision Making$$$Example 1: C++ if Statement$$$Example 2: C++ if...else Statement$$$Example 3: C++ if...else...else if$$$Example 4: C++ Nested if$$$Table of Contents,,"In this tutorial, we will learn about the if...else statement to create decision making programs with the help of examples.|||In computer programming, we use the if...else statement to run one block of code under certain conditions and another block of code under different conditions.|||For example, assigning grades (A, B, C) based on marks obtained by a student.|||There are three forms of if...else statements in C++.|||The syntax of the if statement is:|||The if statement evaluates the condition inside the parentheses ( ).|||Note: The code inside { } is the body of the if statement.|||Output 1|||When the user enters 5, the condition number > 0 is evaluated to true and the statement inside the body of if is executed.|||Output 2|||When the user enters -5, the condition number > 0 is evaluated to false and the statement inside the body of if is not executed.|||The if statement can have an optional else clause. Its syntax is:|||The if..else statement evaluates the condition inside the parenthesis.|||If the condition evaluates true,|||If the condition evaluates false,|||Output 1|||In the above program, we have the condition number >= 0. If we enter the number greater or equal to 0, then the condition evaluates true.|||Here, we enter 4. So, the condition is true. Hence, the statement inside the body of if is executed.|||Output 2||||||Here, we enter -4. So, the condition is false. Hence, the statement inside the body of else is executed.|||The if...else statement is used to execute a block of code among two alternatives. However, if we need to make a choice between more than two alternatives, we use the if...else if...else statement.|||The syntax of the if...else if...else statement is:|||Here,|||Note: There can be more than one else if statement but only one if and else statements.|||Output 1|||Output 2|||Output 3|||In this program, we take a number from the user. We then use the if...else if...else ladder to check whether the number is positive, negative, or zero.|||If the number is greater than 0, the code inside the if block is executed. If the number is less than 0, the code inside the else if block is executed. Otherwise, the code inside the else block is executed.|||Sometimes, we need to use an if statement inside another if statement. This is known as nested if statement.|||Think of it as multiple layers of if statements. There is a first, outer if statement, and inside it is another, inner if statement. Its syntax is:|||Notes:|||Output 1|||Output 2|||Output 3|||In the above example,|||Note: As you can see, nested if...else makes your logic complicated. If possible, you should always try to avoid nested if...else.|||If the body of if...else has only one statement, you can omit { } in the program. For example, you can replace|||with|||The output of both programs will be the same.|||Note: Although it's not necessary to use { } if the body of if...else has only one statement, using { } makes your code more readable.|||In certain situations, a ternary operator can replace an if...else statement. To learn more, visit C++ Ternary Operator.|||If we need to make a choice between more than one alternatives based on a given test condition, the switch statement can be used. To learn more, visit C++ switch.|||Check out these examples to learn more:|||C++ Program to Check Whether Number is Even or Odd|||C++ Program to Check Whether a character is Vowel or Consonant.|||C++ Program to Find Largest Number Among Three Numbers","if the percentage is above 90, assign grade A$$$if the percentage is above 75, assign grade B$$$if the percentage is above 65, assign grade C$$$If the condition evaluates to true, the code inside the body of if is executed.$$$If the condition evaluates to false, the code inside the body of if is skipped.$$$the code inside the body of if is executed$$$the code inside the body of else is skipped from execution$$$the code inside the body of else is executed$$$the code inside the body of if is skipped from execution$$$If condition1 evaluates to true, the code block 1 is executed.$$$If condition1 evaluates to false, then condition2 is evaluated.$$$If condition2 is true, the code block 2 is executed.$$$If condition2 is false, the code block 3 is executed.$$$We can add else and else if statements to the inner if statement as required.$$$The inner if statement can also be inserted inside the outer else or else if statements (if they exist).$$$We can nest multiple layers of if statements.$$$We take an integer as an input from the user and store it in the variable num.$$$We then use an if...else statement to check whether num is not equal to 0.If true, then the inner if...else statement is executed.If false, the code inside the outer else condition is executed, which prints ""The number is 0 and it is neither positive nor negative.""$$$The inner if...else statement checks whether the input number is positive i.e. if num is greater than 0.If true, then we print a statement saying that the number is positive.If false, we print that the number is negative.$$$If true, then the inner if...else statement is executed.$$$If false, the code inside the outer else condition is executed, which prints ""The number is 0 and it is neither positive nor negative.""$$$If true, then we print a statement saying that the number is positive.$$$If false, we print that the number is negative.$$$Introduction$$$C++ if Statement$$$Example: if Statement$$$C++ if...else$$$Example: if...else Statement$$$C++ if...else...else if statement$$$Example: C++ if...else...else if$$$C++ Nested if...else$$$Example: Nested if...else",if statement$$$if...else statement$$$if...else if...else statement,
https://www.programiz.com/cpp-programming/for-loop,C++ for Loop (With Examples),C++ for loop$$$Flowchart of for Loop in C++$$$Ranged Based for Loop$$$Example 1: Printing Numbers From 1 to 5$$$Example 2: Display a text 5 times$$$Example 3: Find the sum of first n Natural Numbers$$$Example 4: Range Based for Loop$$$C++ Infinite for loop$$$Table of Contents,,"In this tutorial, we will learn about the C++ for loop and its working with the help of some examples.|||In computer programming, loops are used to repeat a block of code.|||For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.|||That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops.|||There are 3 types of loops in C++.|||This tutorial focuses on C++ for loop. We will learn about the other type of loops in the upcoming tutorials.|||The syntax of for-loop is:|||Here,|||To learn more about conditions, check out our tutorial on C++ Relational and Logical Operators.|||Output|||Here is how this program works|||Output|||Here is how this program works|||Output|||In the above example, we have two variables num and sum. The sum variable is assigned with 0 and the num variable is assigned with the value provided by the user.||||||Note that we have used a for loop.|||Here,|||When iÂ becomes 11, the condition is false and sum will be equal to 0 + 1 + 2 + ... + 10.|||In C++11, a new range-based for loop was introduced to work with collections such as arrays and vectors. Its syntax is:|||Here, for every value in the collection, the for loop is executed and the value is assigned to the variable.|||Output|||In the above program, we have declared and initialized an int array named num_array. It has 10 items.|||Here, we have used a range-based for loop to access all the items in the array.|||If the condition in a for loop is always true, it runs forever (until memory is full). For example,|||In the above program, the condition is always true which will then run the code for infinite times.|||Check out these examples to learn more:|||In the next tutorial, we will learn about while and do...while loop.","for loop$$$while loop$$$do...while loop$$$initialization - initializes variables and is executed only once$$$condition - if true, the body of for loop is executedif false, the for loop is terminated$$$update - updates the value of initialized variables and again checks the condition$$$int iÂ = 1: initializes the iÂ variable$$$i <= num: runs the loop as long as iÂ is less than or equal to num$$$++i: increases the iÂ variable by 1 in each iteration$$$C++ Program to Calculate Sum of Natural Numbers$$$C++ Program to Find Factorial$$$C++ Program to Generate Multiplication Table$$$Introduction$$$C++ for loop$$$Printing Numbers From 1 to 5$$$Display a text 5 times$$$Find the sum of first n Natural Numbers$$$Ranged Based for Loop$$$C++ Infinite for loop",,Iteration|||Variable|||i <= 5|||Action$$$1st|||i = 1|||true|||1 is printed. i is increased to 2.$$$2nd|||i = 2|||true|||2 is printed. i is increased to 3.$$$3rd|||i = 3|||true|||3 is printed. i is increased to 4.$$$4th|||i = 4|||true|||4 is printed. i is increased to 5.$$$5th|||i = 5|||true|||5 is printed. i is increased to 6.$$$6th|||i = 6|||false|||The loop is terminated$$$Iteration|||Variable|||i <= 5|||Action$$$1st|||i = 1|||true|||Hello World! is printed and i is increased to 2.$$$2nd|||i = 2|||true|||Hello World! is printed and i is increased to 3.$$$3rd|||i = 3|||true|||Hello World! is printed and i is increased to 4.$$$4th|||i = 4|||true|||Hello World! is printed and i is increased to 5.$$$5th|||i = 5|||true|||Hello World! is printed and i is increased to 6.$$$6th|||i = 6|||false|||The loop is terminated
https://www.programiz.com/cpp-programming/do-while-loop,C++ while and do...while Loop (With Examples),C++ while Loop$$$C++ do...while Loop$$$Infinite while loop$$$for vs while loops$$$Flowchart of while Loop$$$Example 1: Display Numbers from 1 to 5$$$Example 2: Sum of Positive Numbers Only$$$Flowchart of do...while Loop$$$Example 3: Display Numbers from 1 to 5$$$Example 4: Sum of Positive Numbers Only$$$Table of Contents,,"In this tutorial, we will learn the use of while and do...while loops in C++ programming with the help of some examples.|||In computer programming, loops are used to repeat a block of code.|||For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.|||That was just a simple example;Â we can achieve much more efficiency and sophistication in our programs by making effective use ofÂ loops.|||There are 3 types of loops in C++.|||In the previous tutorial, we learned about the C++ for loop. Here, we are going to learn about while and do...while loops.|||The syntax of the while loop is:|||Here,|||To learn more about the conditions, visit C++ Relational and Logical Operators.|||Output|||Here is how the program works.|||Output|||In this program, the user is prompted to enter a number, which is stored in the variable number.|||In order to store the sum of the numbers, we declare a variable sum and initialize it to the value of 0.|||The while loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the sum variable.|||When the user enters a negative number, the loop terminates. Finally, the total sum is displayed.||||||The do...while loop is a variant of the while loop with one important difference: the body of do...while loop is executed once before the condition is checked.|||Its syntax is:|||Here,|||Output|||Here is how the program works.|||Output 1|||Here, the do...while loop continues until the user enters a negative number. When the number is negative, the loop terminates; the negative number is not added to the sum variable.|||Output 2|||The body of the do...while loop runs only once if the user enters a negative number.|||If the condition of a loop is always true, the loop runs for infinite times (until the memory is full). For example,|||Here is an example of an infinite do...while loop.|||In the above programs, the condition is always true. Hence, the loop body will run for infinite times.|||A for loop is usually used when the number of iterations is known. For example,|||Here, we know that the for-loop will be executed 5 times.|||However, while and do...while loops are usually used when the number of iterations is unknown. For example,|||Check out these examples to learn more:","A while loop evaluates the condition$$$If the condition evaluates to true, the code inside the while loop is executed.$$$The condition is evaluated again.$$$This process continues until the condition is false.$$$When the condition evaluates to false, the loop terminates.$$$The body of the loop is executed at first. Then the condition is evaluated.$$$If the condition evaluates to true, the body of the loop inside the do statement is executed again.$$$The condition is evaluated once again.$$$If the condition evaluates to true, the body of the loop inside the do statement is executed again.$$$This process continues until the condition evaluates to false. Then the loop stops.$$$C++ Program to Display Fibonacci Series$$$C++ Program to Find GCD$$$C++ Program to Find LCM$$$Introduction$$$C++ while Loop$$$Example: Display Numbers from 1 to 5$$$Example: Sum of Positive Numbers Only$$$C++ do...while Loop$$$Example: Display Numbers from 1 to 5$$$Example: Sum of Positive Numbers Only$$$Infinite while loop$$$for vs while loops",for loop$$$while loop$$$do...while loop,Iteration|||Variable|||i <= 5|||Action$$$1st|||i = 1|||true|||1 is printed and i is increased to 2.$$$2nd|||i = 2|||true|||2 is printed and i is increased to 3.$$$3rd|||i = 3|||true|||3 is printed and i is increased to 4$$$4th|||i = 4|||true|||4 is printed and i is increased to 5.$$$5th|||i = 5|||true|||5 is printed and i is increased to 6.$$$6th|||i = 6|||false|||The loop is terminated$$$Iteration|||Variable|||i <= 5|||Action$$$Â |||i = 1|||not checked|||1 is printed and i is increased to 2$$$1st|||i = 2|||true|||2 is printed and i is increased to 3$$$2nd|||i = 3|||true|||3 is printed and i is increased to 4$$$3rd|||i = 4|||true|||4 is printed and i is increased to 5$$$4th|||i = 5|||true|||5 is printed and i is increased to 6$$$5th|||i = 6|||false|||The loop is terminated
https://www.programiz.com/cpp-programming/break-statement,C++ break Statement (With Examples),Working of C++ break Statement$$$Example 1: break with for loop$$$Example 2: break with while loop$$$break with Nested loop$$$Table of Contents,,"In this tutorial, we will learn about the break statement and its working in loops with the help of examples.|||In C++, the break statement terminates the loop when it is encountered.|||The syntax of the break statement is:|||Before you learn about the break statement, make sure you know about:|||Output|||In the above program, the for loop is used to print the value of i in each iteration. Here, notice the code:|||This means, when i is equal to 3, the break statement terminates the loop. Hence, the output doesn't include values greater than or equal to 3.|||Note: The break statement is usually used with decision-making statements.|||Output|||In the above program, the user enters a number. The while loop is used to print the total sum of numbers entered by the user. Here, notice the code,||||||This means, when the user enters a negative number, the break statement terminates the loop and codes outside the loop are executed.|||The while loop continues until the user enters a negative number.|||When break is used with nested loops, break terminates the inner loop. For example,|||Output|||In the above program, the break statement is executed when i == 2. It terminates the inner loop, and the control flow of the program moves to the outer loop.|||Hence, the value of i = 2 is never displayed in the output.|||The break statement is also used with the switch statement. To learn more, visit C++ switch statement.",C++ for loop$$$C++ if...else$$$C++ while loop$$$Introduction$$$Working of C++ break Statement$$$Example: break with for loop$$$Example: break with while loop$$$break with Nested loop,,
https://www.programiz.com/cpp-programming/continue-statement,C++ continue Statement (With Examples),Working of C++ continue Statement$$$Example 1: continue with for loop$$$Example 2: continue with while loop$$$continue with Nested loop$$$Table of Contents,,"In this tutorial, we will learn about the continue statement and its working with loops with the help of examples.|||In computer programming, the continue statement is used to skip the current iteration of the loop and the control of the program goes to the next iteration.|||The syntax of the continue statement is:|||Before you learn about the continue statement, make sure you know about,|||In a for loop, continue skips the current iteration and the control flow jumps to the update expression.|||Output|||In the above program, we have used the the for loop to print the value of i in each iteration. Here, notice the code,|||This means|||Note: The continue statement is almost always used with decision-making statements.|||In a while loop, continue skips the current iteration and control flow of the program jumps back to the while condition.||||||Output|||In the above program, the user enters a number. The while loop is used to print the total sum of positive numbers entered by the user, as long as the numbers entered are not greater than 50.|||Notice the use of the continue statement.|||Note: The continue statement works in the same way for the do...while loops.|||When continue is used with nested loops, it skips the current iteration of the inner loop. For example,|||Output|||In the above program, when the continue statement executes, it skips the current iteration in the inner loop. And the control of the program moves to the update expression of the inner loop.|||Hence, the value of j = 2 is never displayed in the output.|||Note: The break statement terminates the loop entirely. However, the continue statement only skips the current iteration.","C++ for loop$$$C++ if...else$$$C++ while loop$$$When i is equal to 3, the continue statement skips the current iteration and starts the next iteration$$$Then, i becomes 4, and the condition is evaluated again.$$$Hence, 4 and 5 are printed in the next two iterations.$$$When the user enters a number greater than 50, the continue statement skips the current iteration. Then the control flow of the program goes to the condition of while loop.$$$When the user enters a number less than 0, the loop terminates.$$$Introduction$$$Working of C++ continue Statement$$$Example: continue with for loop$$$Example: continue with while loop$$$continue with Nested loop",,
https://www.programiz.com/cpp-programming/switch-case,C++ switch...case Statement (With Examples),Flowchart of switch Statement$$$Example: Create a Calculator using the switch Statement$$$Table of Contents,,"In this tutorial, we will learn about switch statement and its working in C++ programming with the help of some examples.|||The switch statement allows us to execute a block of code among many alternatives.|||The syntax of the switch statement in C++ is:|||How does the switch statement work?|||The expression is evaluated once and compared with the values of each case label.|||Note: We can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is cleaner and much easier to read and write.|||Output 1|||Output 2|||Output 3||||||Output 4|||Output 5|||In the above program, we are using the switch...case statement to perform addition, subtraction, multiplication, and division.|||How This Program Works|||Notice that the break statement is used inside each case block. This terminates the switch statement.|||If the break statement is not used, all cases after the correct case are executed.","If there is a match, the corresponding code after the matching label is executed. For example, if the value of the variable is equal to constant2, the code after case constant2: is executed until the break statement is encountered.$$$If there is no match, the code after default: is executed.$$$If the user enters +, addition is performed on the numbers.$$$If the user enters -, subtraction is performed on the numbers.$$$If the user enters *, multiplication is performed on the numbers.$$$If the user enters /, division is performed on the numbers.$$$If the user enters any other character, the default code is printed.$$$Introduction$$$Flowchart$$$Example: Create a Calculator","We first prompt the user to enter the desired operator. This input is then stored in the char variable named oper.$$$We then prompt the user to enter two numbers, which are stored in the float variables num1 and num2.$$$The switch statement is then used to check the operator entered by the user:If the user enters +, addition is performed on the numbers.If the user enters -, subtraction is performed on the numbers.If the user enters *, multiplication is performed on the numbers.If the user enters /, division is performed on the numbers.If the user enters any other character, the default code is printed.",
https://www.programiz.com/cpp-programming/goto,C++ goto Statement,Syntax of goto Statement$$$Example: goto Statement$$$Reason to Avoid goto Statement,,"In this article, you'll learn about goto statment, how it works and why should it be avoided.|||In C++ programming, the goto statement is used for altering the normal sequence of program execution by transferring control to some other part of the program.|||In the syntax above, label is an identifier. When goto label; is encountered, the control of program jumps to label: and executes the code below it.|||Output||||||You can write any C++ program without the use of goto statement and is generally considered a good idea not to use them.|||The goto statement gives the power to jump to any part of a program but, makes the logic of the program complex and tangled.|||In modern programming, the goto statement is considered a harmful construct and a bad programming practice.|||The goto statement can be replaced in most of C++ program with the use of break and continue statements.",,,
https://www.programiz.com/cpp-programming/function,C++ Function (With Examples),C++ User-defined Function$$$C++ Library Functions$$$C++ Function Declaration$$$Calling a Function$$$Example 1: Display a Text$$$Function Parameters$$$Example 2: Function with Parameters$$$Return Statement$$$Example 3: Add Two Numbers$$$Function Prototype$$$Example 4: C++ Function Prototype$$$Benefits of Using User-Defined Functions$$$Example 5: C++ Program to Find the Square Root of a Number$$$Table of Contents,,"In this tutorial, we will learn about the C++ function and function expressions with the help of examples.|||A function is a block of code that performs a specific task.|||Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem:|||Dividing a complex problem into smaller chunks makes our program easy to understand and reusable.|||There are two types of function:|||In this tutorial, we will focus mostly on user-defined functions.|||C++ allows the programmer to define their own function.|||A user-defined function groups code to perform a specific task and that group of code is given a name (identifier).|||When the function is invoked from any part of the program, it all executes the codes defined in the body of the function.|||The syntax to declare a function is:|||Here's an example of a function declaration.	Â |||Here,|||Note: We will learn about returnType and parameters later in this tutorial.|||In the above program, we have declared a function named greet(). To use the greet() function, we need to call it.|||Here's how we can call the above greet() function.|||Output|||As mentioned above, a function can be declared with parameters (arguments). A parameter is a value that is passed when declaring a function.|||For example, let us consider the function below:|||Here, the int variable num is the function parameter.||||||We pass a value to the function parameter while calling the function.|||Output|||In the above program, we have used a function that has one int parameter and one double parameter.|||We then pass num1 and num2 as arguments. These values are stored by the function parameters n1 and n2 respectively.|||Note: The type of the arguments passed while calling the function must match with the corresponding parameters defined in the function declaration.|||In the above programs, we have used void in the function declaration. For example,|||This means the function is not returning any value.|||It's also possible to return a value from a function. For this, we need to specify the returnType of the function during function declaration.|||Then, the return statement can be used to return a value from a function.|||For example,|||Here, we have the data type int instead of void. This means that the function returns an int value.|||The code return (a + b); returns the sum of the two parameters as the function value.|||The return statement denotes that the function has ended. Any code after return inside the function is not executed.|||Output|||In the above program, the add() function is used to find the sum of two numbers.|||We pass two int literals 100 and 78 while calling the function.|||We store the returned value of the function in the variable sum, and then we print it.|||Notice that sum is a variable of int type. This is because the return value of add() is of int type.|||In C++, the code of function declaration should be before the function call. However, if we want to define a function after the function call, we need to use the function prototype. For example,|||In the above code, the function prototype is:|||This provides the compiler with information about the function name and its parameters. That's why we can use the code to call a function before the function has been defined.|||The syntax of a function prototype is:|||Output|||The above program is nearly identical to Example 3. The only difference is that here, the function is defined after the function call.|||That's why we have used a function prototype in this example.|||Library functions are the built-in functions in C++ programming.|||Programmers can use library functions by invoking the functions directly; they don't need to write the functions themselves.|||Some common library functions in C++ are sqrt(), abs(), isdigit(), etc.|||In order to use library functions, we usually need to include the header file in which these library functions are defined.|||For instance, in order to use mathematical functions such as sqrt() and abs(), we need to include the header file cmath.|||Output|||In this program, the sqrt() library function is used to calculate the square root of a number.|||The function declaration of sqrt() is defined in the cmath header file. That's why we need to use the code #include <cmath> to use the sqrt() function.|||To learn more, visit C++ Standard Library functions.",a function to draw the circle$$$a function to color the circle$$$the name of the function is greet()$$$the return type of the function is void$$$the empty parentheses mean it doesn't have any parameters$$$the function body is written inside {}$$$Functions make the code reusable. We can declare them once and use them multiple times.$$$Functions make the program easier as each small task is divided into a function.$$$Functions increase readability.$$$Introduction$$$User-defined Function$$$Function Declaration$$$Calling a Function$$$Example: Display a Text$$$Function Parameters$$$Return Statement$$$Function Prototype$$$Benefits of Using User-Defined Functions$$$C++ Library Functions,Standard Library Functions: Predefined in C++$$$User-defined Function: Created by users,
https://www.programiz.com/cpp-programming/user-defined-function-types,C++ User-defined Function Types,Example 1: No arguments passed and no return value$$$Example 2: No arguments passed but a return value$$$Example 3: Arguments passed but no return value$$$Example 4: Arguments passed and a return value.$$$Which method is better?,,"In this tutorial, you will learn about different approaches you can take to solve a single problem using functions.|||For better understanding of arguments and return in functions, user-defined functions can be categorised as:|||Consider a situation in which you have to check prime number. This problem is solved below by making user-defined function in 4 different ways as mentioned above.|||In the above program, prime() is called from the main() with no arguments.|||prime() takes the positive number from the user and checks whether the number is a prime number or not.|||Since, return type of prime() is void, no value is returned from the function.|||In the above program, prime() function is called from the main() with no arguments.|||prime() takes a positive integer from the user. Since, return type of the function is an int, it returns the inputted number from the user back to the calling main() function.|||Then, whether the number is prime or not is checked in the main() itself and printed onto the screen.||||||In the above program, positive number is first asked from the user which is stored in the variable num.|||Then, num is passed to the prime() function where, whether the number is prime or not is checked and printed.|||Since, the return type of prime() is a void, no value is returned from the function.|||In the above program, a positive integer is asked from the user and stored in the variable num.|||Then, num is passed to the function prime() where, whether the number is prime or not is checked.|||Since, the return type of prime() is an int, 1 or 0 is returned to the main() calling function. If the number is a prime number, 1 is returned. If not, 0 is returned.|||Back in the main() function, the returned 1 or 0 is stored in the variable flag, and the corresponding text is printed onto the screen.|||All four programs above gives the same output and all are technically correct program.|||There is no hard and fast rule on which method should be chosen.|||The particular method is chosen depending upon the situation and how you want to solve a problem.",Function with no argumentÂ and no return value$$$Function with no argument but return value$$$Function with argument but no return value$$$Function with argument and return value,,
https://www.programiz.com/cpp-programming/function-overloading,C++ Function Overloading (With Examples),Example 1: Overloading Using Different Types of Parameter$$$Example 2: Overloading Using Different Number of Parameters$$$Table of Contents,,"In this tutorial, we will learn about the function overloading in C++ with examples.|||In C++, two functions can have the same name if the number and/or type of arguments passed is different.|||These functions having the same name but different arguments are known as overloaded functions. For example:|||Here, all 4 functions are overloaded functions.|||Notice that the return types of all these 4 functions are not the same. Overloaded functions may or may not have different return types but they must have different arguments. For example,|||Here, both functions have the same name, the same type, and the same number of arguments. Hence, the compiler will throw an error.|||Output|||In this program, we overload the absolute() function. Based on the type of parameter passed during the function call, the corresponding function is called.|||Output||||||Here, the display() function is called three times with different arguments. Depending on the number and type of arguments passed, the corresponding display() function is called.|||The return type of all these functions is the same but that need not be the case for function overloading.|||Note: In C++, many standard library functions are overloaded. For example, the sqrt() function can take double, float, int, etc. as parameters. This is possible because the sqrt() function is overloaded in C++.",Introduction$$$Example 1: Overloading using Different Parameter Types$$$Example 2: Overloading using Different Number of Parameters,,
https://www.programiz.com/cpp-programming/default-argument,C++ Programming Default Arguments (Parameters),Working of default arguments$$$Example: Default Argument$$$Things to Remember$$$Table of Contents,,"In this tutorial, we will learn C++ default arguments and their working with the help of examples.|||In C++ programming, we can provide default values for function parameters.|||If a function with default arguments is called without passing arguments, then the default parameters are used.|||However, if arguments are passed while calling the function, the default arguments are ignored.|||We can understand the working of default arguments from the image above:||||||Output|||Here is how this program works:|||We can also define the default parameters in the function definition itself. The program below is equivalent to the one above.",Introduction$$$Working of default arguments$$$Example: Default Argument$$$Things to Remember,"When temp() is called, both the default parameters are used by the function.$$$When temp(6) is called, the first argument becomes 6Â while the default value is used for the second parameter.$$$When temp(6, -2.3) is called, both the default parameters are overridden, resulting in i = 6 and f = -2.3.$$$When temp(3.4) is passed, the function behaves in an undesired way because the second argument cannot be passed without passing the first argument.Therefore, 3.4 is passed as the first argument. Since the first argument has been defined as int, the value that is actually passed is 3.$$$display() is called without passing any arguments. In this case, display() uses both the default parameters c = '*' and n = 1.$$$display('#') is called with only one argument. In this case, the first becomes '#'. The second default parameter n = 1 is retained.$$$display('#', count) is called with both arguments. In this case, default arguments are not used.$$$Once we provide a default value for a parameter, all subsequent parameters must also have default values. For example,// Invalidvoid add(int a, int b = 3, int c, int d);// Invalidvoid add(int a, int b = 3, int c, int d = 4);// Validvoid add(int a, int c, int b = 3, int d = 4);$$$If we are defining the default arguments in the function definition instead of the function prototype, then the function must be defined before the function call.// Invalid codeint main() {    // function call    display();}void display(char c = '*', int count = 5) {    // code}",
https://www.programiz.com/cpp-programming/storage-class,"C++ Storage Class: Local, Global, Static, Register and Thread Local",Local Variable$$$Global Variable$$$Register Variable (Deprecated in C++11)$$$Thread Local Storage$$$Example 1: Local variable$$$Example 2: Global variable$$$Static Local variable$$$Example 3: Static local variable,,"In this article, you'll learn about different storage classes in C++. Namely: local, global, static local, register and thread local.|||Every variable in C++ has two features: type and storage class.|||Type specifies the type of data that can be stored in a variable. For example: int, float, char etc.|||And, storage class controls two different properties of a variable: lifetime (determines how long a variable can exist) and scope (determines which part of the program can access it).|||Depending upon the storage class of a variable, it can be divided into 4 major types:|||A variable defined inside a function (defined inside function body between braces) is called a local variable or automatic variable.|||Its scope is only limited to the function where it is defined. In simple terms, local variable exists and can be accessed only inside a function.|||The life of a local variable ends (It is destroyed) when the function exits.||||||The variable var cannot be used inside test() and var1 cannot be used inside main() function.|||Keyword auto was also used for defining local variables before as: auto int var;|||But, after C++11 auto has a different meaning and should not be used for defining local variables.|||If a variable is defined outside all functions, then it is called a global variable.|||The scope of a global variable is the whole program. This means, It can be used and changed at any part of the program after its declaration.|||Likewise, its life ends only when the program ends.|||Output|||In the above program, c is a global variable.|||This variable is visible to both functions main() and test() in the above program.|||Keyword static is used for specifying a static variable. For example:|||A static local variable exists only inside a function where it is declared (similar to a local variable) but its lifetime starts when the function is called and ends only when the program ends.|||The main difference between local variable and static variable is that, the value of static variable persists the end of the program.|||Output|||In the above program, test() function is invoked 2 times.|||During the first call, variable var is declared as static variable and initialized to 0. Then 1 is added to var which is displayed in the screen.|||When the function test() returns, variable var still exists because it is a static variable.|||During second function call, no new variable var is created. The same var is increased by 1 and then displayed to the screen.|||Output of above program if var was not specified as static variable|||Keyword register is used for specifying register variables.|||Register variables are similar to automatic variables and exists inside a particular function only. It is supposed to be faster than the local variables.|||If a program encounters a register variable, it stores the variable in processor's register rather than memory if available. This makes it faster than the local variables.|||However, this keyword was deprecated in C++11 and should not be used.|||Thread-local storage is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread.|||Keyword thread_local is used for this purpose.|||Learn more about thread local storage.",Local variable$$$Global variable$$$Static local variable$$$Register Variable$$$Thread Local Storage,,
https://www.programiz.com/cpp-programming/recursion,C++ Recursion (With Example),Working of Recursion in C++$$$Example 1: Factorial of a Number Using Recursion$$$Advantages and Disadvantages of Recursion$$$Working of Factorial Program$$$Advantages of C++ Recursion$$$Disadvantages of C++ Recursion$$$Table of Contents,,"In this tutorial, we will learn about recursive function in C++ and its working with the help of examples.|||A function that calls itself is known as a recursive function. And, this technique is known as recursion.|||The figure below shows how recursion works by calling itself over and over again.|||The recursion continues until some condition is met.|||To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call and the other doesn't.|||Output||||||As we can see, the factorial() function is calling itself. However, during each call, we have decreased the value of n by 1. When n is less than 1, the factorial() function ultimately returns the output.|||Below are the pros and cons of using recursion in C++.","It makes our code shorter and cleaner.$$$Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal.$$$It takes a lot of stack space compared to an iterative program.$$$It uses more processor time.$$$It can be more difficult to debug compared to an equivalent iterative program.$$$Introduction$$$Working of Recursion$$$Advantages$$$Disadvantages",,
https://www.programiz.com/cpp-programming/return-reference,C++ Return by Reference,Example: Return by Reference$$$Important Things to Remember When Returning by Reference.,,"In this article, you'll learn how to return a value by reference in a function and use it efficiently in your program.|||In C++ Programming, not only can you pass values by reference to a function but you can also return a value by reference.|||To understand this feature, you should have the knowledge of:|||Output|||In program above, the return type of function test() is int&. Hence, this function returns a reference of the variable num.||||||The return statement is return num;. Unlike return by value, this statement doesn't return value of num, instead it returns the variable itself (address).|||So, when the variable is returned, it can be assigned a value as done in test() = 5;|||This stores 5 to the variable num, which is displayed onto the screen.","Global variables$$$Ordinary function returns value but this function doesn't. Hence, you cannot return a constant from the function.int& test() {    return 2;}$$$You cannot return a local variable from this function.int& test() {    int n = 2;     return n; }",,
https://www.programiz.com/cpp-programming/arrays,C++ Arrays (With Examples),C++ Array Declaration$$$Access Elements in C++ Array$$$C++ Array Initialization$$$How to insert and print array elements?$$$Example 1: Displaying Array Elements$$$Example 2: Take Inputs from User and Store Them in an Array$$$Example 3: Display Sum and Average of Array Elements Using for Loop$$$C++ Array Out of Bounds$$$Few Things to Remember:$$$C++ Array With Empty Members$$$Table of Contents,,"In this tutorial, we will learn to work with arrays. We will learn to declare, initialize, and access array elements in C++ programming with the help of examples.|||In C++, an array is a variable that can store multiple values of the same type. For example,|||Suppose a class has 27 students, and we need to store the grades of all of them. Instead of creating 27 separate variables, we can simply create an array:|||Here, grade is an array that can hold a maximum of 27 elements of double type.|||In C++, the size and type of arrays cannot be changed after its declaration.|||For example,|||Here,|||In C++, each element in an array is associated with a number. The number is known as an array index. We can access elements of an array by using those indices.|||Consider the array x we have seen above.|||In C++, it's possible to initialize an array during declaration. For example,|||Another method to initialize array during declaration:|||Here, we have not mentioned the size of the array. In such cases, the compiler automatically computes the size.|||In C++, if an array has a size n, we can store upto n number of elements in the array. However, what will happen if we store less than n number of elements.|||For example,|||Here, the array x has a size of 6. However, we have initialized it with only 3 elements.|||In such cases, the compiler assigns random values to the remaining places. Oftentimes, this random value is simply 0.|||Output|||Here, we have used a for loop to iterate from i = 0 to i = 4. In each iteration, we have printed numbers[i].||||||We again used a range based for loop to print out the elements of the array. To learn more about this loop, check C++ Ranged for Loop.|||Note: In our range based loop, we have used the code const int &n instead of int n as the range declaration. However, the const int &n is more preferred because:|||Output|||Once again, we have used a for loop to iterate from i = 0 to i = 4. In each iteration, we took an input from the user and stored it in numbers[i].|||Then, we used another for loop to print all the array elements.|||Output|||In this program:|||Note: We used a ranged for loop instead of a normal for loop.|||A normal for loop requires us to specify the number of iterations, which is given by the size of the array.|||But a ranged for loop does not require such specifications.|||If we declare an array of size 10, then the array will contain elements from index 0 to 9.|||However, if we try to access the element at index 10 or more than 10, it will result in Undefined Behaviour.","int - type of element to be stored$$$x - name of the array$$$6 - size of the array$$$The array indices start with 0. Meaning x[0] is the first element stored at index 0.$$$If the size of an array is n, the last element is stored at index (n-1). In this example, x[5] is the last element.$$$Elements of an array have consecutive addresses. For example, suppose the starting address of x[0] is 2120d. Then, the address of the next element x[1] will be 2124d, the address of x[2] will be 2128d and so on.Here, the size of each element is increased by 4. This is because the size of int is 4 bytes.$$$Introduction$$$C++ Array Declaration$$$Access Array Elements$$$Array Initialization$$$Array With Empty Members$$$Example: Displaying Array Elements$$$Example: Store User Inputs in Array$$$Example: Calculate Sum and Average$$$C++ Array Out of Bounds","Using int n simply copies the array elements to the variable n during each iteration. This is not memory-efficient.&n, however, uses the memory address of the array elements to access their data without copying them to a new variable. This is memory-efficient.$$$We are simply printing the array elements, not modifying them. Therefore, we use const so as not to accidentally change the values of the array.$$$We have initialized a double array named numbers but without specifying its size. We also declared three double variables sum, count, and average.Here, sum =0 and count = 0.$$$Then we used a range based for loop to print the array elements. In each iteration of the loop, we add the current array element to sum.$$$We also increase the value of count by 1 in each iteration, so that we can get the size of the array by the end of the for loop.$$$After printing all the elements, we print the sum and the average of all the numbers. The average of the numbers is given by average = sum / count;",
https://www.programiz.com/cpp-programming/multidimensional-arrays,C++ Multidimensional Arrays (2nd and 3d arrays),Multidimensional Array Initialization$$$Example 1: Two Dimensional Array$$$Example 2: Taking Input for Two Dimensional Array$$$Example 3: Three Dimensional Array$$$1. Initialization of two-dimensional array$$$2. Initialization of three-dimensional array$$$Table of Contents,,"In this tutorial, we'll learn about multi-dimensional arrays in C++. More specifically, how to declare them, access them, and use them efficiently in our program.|||In C++, we can create an array of an array, known as a multidimensional array. For example:|||Here, x is a two-dimensional array. It can hold a maximum of 12 elements.|||We can think of this array as a table with 3 rows and each row has 4 columns as shown below.|||Three-dimensional arrays also work in a similar way. For example:|||This array x can hold a maximum of 24 elements.|||We can find out the total number of elements in the array simply by multiplying its dimensions:|||Like a normal array, we can initialize a multidimensional array in more than one way.|||The above method is not preferred. A better way to initialize this array with the same array elements is given below:|||This array has 2 rows and 3 columns, which is why we have two rows of elements with 3 elements each.|||This is not a good way of initializing a three-dimensional array. A better way to initialize this array is:|||Notice the dimensions of this three-dimensional array.|||The first dimension has the value 2. So, the two elements comprising the first dimension are:|||The second dimension has the value 3. Notice that each of the elements of the first dimension has three elements each:|||Finally, there are four int numbers inside each of the elements of the second dimension:|||Output||||||In the above example, we have initialized a two-dimensional int array named test that has 3 ""rows"" and 2 ""columns"".|||Here, we have used the nested for loop to display the array elements.|||Finally, we print the array elements in each iteration.|||Output|||Here, we have used a nested for loop to take the input of the 2d array. Once all the input has been taken, we have used another nested for loop to print the array members.|||Output|||The basic concept of printing elements of a 3d array is similar to that of a 2d array.|||However, since we are manipulating 3 dimensions, we use a nested for loop with 3 total loops instead of just 2:|||As we can see, the complexity of the array increases exponentially with the increase in dimensions.",the outer loop from i == 0 to i == 2 access the rows of the array$$$the inner loop from j == 0 to j == 1 access the columns of the array$$$the outer loop from i == 0 to i == 1 accesses the first dimensionÂ of the array$$$the middleÂ loop from j == 0 to j == 2Â accesses the second dimensionÂ of the array$$$the innermostÂ loop from k == 0 to k == 1Â accesses the third dimensionÂ of the array$$$Introduction$$$Multidimensional Array Initialization$$$Example: Two Dimensional Array$$$Example: Three Dimensional Array,,
https://www.programiz.com/cpp-programming/passing-arrays-function,C++ Passing Arrays as Function Parameters (With Examples),Syntax for Passing Arrays as Function Parameters$$$C++ Returning an Array From a Function$$$Example 1: Passing One-dimensional Array to a Function$$$Passing Multidimensional Array to a Function$$$Example 2: Passing Multidimensional Array to a Function$$$Table of Contents,,"In this tutorial, we will learn how to pass a single-dimensional and multidimensional array as a function parameter in C++ with the help of examples.|||In C++, we can pass arrays as an argument to a function. And, also we can return arrays from a function.|||Before you learn about passing arrays as a function argument, make sure you know about C++ Arrays and C++ Functions.|||The syntax for passing an array to a function is:|||Let's see an example,|||Here, we have passed an int type array named marks to the function total(). The size of the array is 5.|||Output|||Here,|||We can also pass Multidimensional arrays as an argument to the function. For example,||||||Output|||In the above program, we have defined a function named display(). The function takes a two dimensional array, int n[][2] as its argument and prints the elements of the array.|||While calling the function, we only pass the name of the two dimensional array as the function argument display(num).|||Note: It is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified. This is why we have used int n[][2].|||We can also pass arrays with more than 2 dimensions as a function argument.|||We can also return an array from the function. However, the actual array is not returned. Instead the address of the first element of the array is returned with the help of pointers.|||We will learn about returning arrays from a function in the coming tutorials.",Introduction$$$Syntax for Passing Array$$$Passing One-dimensional Array to Function$$$Passing Multidimensional Array to Function$$$Retrun an Array from a Function,"When we call a function by passing an array as the argument, only the name of the array is used.display(marks);Here, the argument marks represent the memory address of the first element of array marks[5].$$$However, notice the parameter of the display() function.void display(int m[5])Here, we use the full declaration of the array in the function parameter, including the square braces [].$$$The function parameter int m[5] converts to int* m;. This points to the same address pointed by the array marks. This means that when we manipulate m[5] in the function body, we are actually manipulating the original array marks.C++ handles passing an array to a function in this way to save memory and time.",
https://www.programiz.com/cpp-programming/strings,C++ Strings: Using char array and string object,C-strings$$$string Object$$$Passing String to a Function$$$How to define a C-string?$$$Alternative ways of defining a string$$$Example 1: C++ String to read a word$$$Example 2: C++ String to read a line of text$$$Example 3: C++ string using string data type,,"In this tutorial, you'll learn to handle strings in C++. You'll learn to declare them, initialize them and use them for various input/output operations.|||String is a collection of characters. There are two types of strings commonly used in C++ programming language:|||In C programming, the collection of characters is stored in the form of arrays.Â This is also supported in C++ programming. Hence it's called C-strings.|||C-strings are arrays of type char terminated with null character, that is, \0 (ASCII value of null character is 0).|||In the above code, str is a string and it holds 4 characters.|||Although, ""C++"" has 3 character, the null character \0Â is added to the end of the string automatically.|||Like arrays, it is not necessary to use all the space allocated for the string. For example:|||C++ program to display a string entered by user.|||Output||||||Notice that, in the second example only ""Programming"" is displayed instead of ""Programming is fun"".|||This is because the extraction operator >> works as scanf() in C and considers a space "" "" has a terminating character.|||C++ program to read and display an entire line entered by user.|||Output|||To read the text containing blank space, cin.get function can be used. This function takes two arguments.|||First argument is the name of the string (address of first element of string) and second argument is the maximum size of the array.|||In the above program, str is the name of the string and 100 is the maximum size of the array.|||In C++, you can also create a string object for holding strings.|||Unlike using char arrays, string objects has no fixed length, and can be extended as per your requirement.|||Output|||In this program, a string str is declared. Then the string is asked from the user.|||Instead of using cin>> or cin.get() function, you can get the entered line of text using getline().|||getline() function takes the input stream as the first parameter which is cin and str as the location of the line to be stored.|||Strings are passed to a function in a similar way arrays are passed to a function.|||Output|||In the above program, two strings are asked to enter. These are stored in str and str1 respectively, where str is a char array and str1 is a string object.|||Then, we have two functions display() that outputs the string onto the string.|||The only difference between the two functions is the parameter. The first display() function takes char array as a parameter, while the second takes string as a parameter.|||This process is known as function overloading. Learn more about Function Overloading.",Strings that are objects of string class (The Standard C++ Library string class)$$$C-strings (C-style Strings),,
https://www.programiz.com/cpp-programming/structure,C++ Structures,How to declare a structure in C++ programming?$$$How to define a structure variable?$$$How to access members of a structure?$$$Example: C++ Structure,,"In this article, you'll learn about structures in C++ programming; what is it, how to define it and use it in your program.|||Structure is a collection of variables of different data types under a single name. It is similar to a class in that, both holds a collecion of data of different data types.|||For example: You want to store some information about a person: his/her name, citizenship number and salary. You can easily create different variables name, citNo, salary to store these information separately.|||However, in the future, you would want to store information about multiple persons. Now, you'd need to create different variables for each information per person: name1, citNo1, salary1, name2, citNo2, salary2|||You can easily visualize how big and messy the code would look. Also, since no relation between the variables (information) would exist, it's going to be a daunting task.|||A better approach will be to have a collection of all related information under a single name Person, and use it for every person. Now, the code looks much cleaner, readable and efficient as well.|||This collection of all related information under a single name Person is a structure.|||The struct keyword defines a structure type followed by an identifier (name of the structure).|||Then inside the curly braces, you can declare one or more members (declare variables inside curly braces) of that structure. For example:|||Here a structure person is defined which has three members: name, age and salary.||||||When a structure is created, no memory is allocated.|||The structure definition is only the blueprint for the creating of variables. You can imagine it as a datatype. When you define an integer as below:|||The int specifies that, variable foo can hold integer element only. Similarly, structure definition only specifies that, what property a structure variable holds when it is defined.|||Note:Â Remember to end the declaration with a semicolon (;)|||Once you declare a structure person as above. You can define a structure variable as:|||Here, a structure variable bill is defined which is of type structure Person.|||When structure variable is defined, only then the required memory is allocated by the compiler.|||Considering you have either 32-bit or 64-bit system, the memory of float is 4 bytes, memory of int is 4 bytes and memory of char is 1 byte.|||Hence, 58 bytes of memory is allocated for structure variable bill.|||The members of structure variable is accessed using a dot (.) operator.|||Suppose, you want to access age of structure variable bill and assign it 50 to it. You can perform this task by using following code below:|||C++ Program to assign data to members of a structure variable and display it.|||Output|||Here a structure Person is declared which has three members name, age and salary.|||Inside main() function, a structure variable p1 is defined. Then, the user is asked to enter information and data entered by user is displayed.|||You should also check out these structure related tutorials:",How to pass structures to functions?$$$How to use pointers with structures?,,
https://www.programiz.com/cpp-programming/structure-function,C++ Structure and Function,Passing structure to function in C++$$$Example 1: C++ Structure and Function$$$Example 2: Returning structure from function in C++,,"In this article, you'll find relevant examples to pass structures as an argument to a function, and use them in your program.|||Structure variables can be passed to a function and returned in a similar way as normal arguments.|||A structure variable can be passed to a function in similar way as normal argument. Consider this example:|||Output|||In this program, user is asked to enter the name, age and salary of a Person inside main() function.|||Then, the structure variable p is to passed to a function using.|||The return type of displayData() is void and a single argument of type structure Person is passed.|||Then the members of structure p is displayed from this function.|||The output of this program is the same as the program above.||||||In this program, we have created twoÂ structureÂ variablesÂ pÂ and tempÂ of type PersonÂ under theÂ main() function.|||The structure variable p is passed to getData() function which takes input from the user which is then stored in the temp variable.|||We then assign the value of temp to p.|||Then the structure variable p is passed to displayData() function, which displays the information.|||Note:Â We don't really needÂ to use the temp variable for most compilers and C++ versions. Instead, we can simply use the following code:",,,
https://www.programiz.com/cpp-programming/structure-pointer,C++ Pointers to Structure,Example: Pointers to Structure,,"In this article, you'll find relevant examples that will help you to work with pointers to access data within a structure.|||A pointer variable can be created not only for native types like (int, float, double etc.) but they can also be created for user defined types like structure.|||If you do not know what pointers are, visit C++ pointers.|||Here is how you can create pointer for structures:||||||This program creates a pointer ptr of type structure temp.|||Output|||In this program, a pointer variable ptr and normal variable d of type structure Distance is defined.|||The address of variable d is stored to pointer variable, that is, ptr is pointing to variable d. Then, the member function of variable d is accessed using pointer.|||Notes:","Since pointer ptr is pointing to variable d in this program, (*ptr).inch and d.inch are equivalent. Similarly, (*ptr).feet and d.feet are equivalent.$$$However, if we are using pointers, it is far more preferable to access struct members using the -> operator,Â sinceÂ the .Â operator has a higher precedence than the * operator.Hence,Â we enclose *ptr in brackets when using (*ptr).inch.Because of this, it is easier to make mistakes if both operators are used together in a single code.Â ptr->feet is same as (*ptr).feetptr->inch is same as (*ptr).inc",,
https://www.programiz.com/cpp-programming/enumeration,C++ Enumeration,Enumerated Type Declaration$$$Why enums are used in C++ programming?$$$Example 1: Enumeration Type$$$Example2: Changing Default Value of Enums$$$How to use enums for flags?,,"In this article, you will learn to work with enumeration (enum). Also, you will learn where enums are commonly used in C++ programming.|||An enumeration is a user-defined data type that consists of integral constants. To define an enumeration, keyword enum is used.|||Here, the name of the enumeration is season.|||And, spring, summer and winter are values of type season.|||By default, spring is 0, summer is 1 and so on. You can change the default value of an enum element during declaration (if necessary).|||When you create an enumerated type, only blueprint for the variable is created. Here's how you can create variables of enum type.|||Here, a variable check of type enum boolean is created.||||||Here is another way to declare same check variable using different syntax.|||Output|||Output|||An enum variable takes only one value out of many possible values. Example to demonstrate it,|||Output|||It's because the size of an integer is 4 bytes.;|||This makes enum a good choice to work with flags.|||You can accomplish the same task using C++ structures. However, working with enums gives you efficiency along with flexibility.|||Let us take an example,|||Suppose you are designing a button for Windows application. You can set flags ITALICS, BOLD and UNDERLINE to work with text.|||There is a reason why all the integral constants are power of 2 in above pseudocode.|||Since, the integral constants are power of 2, you can combine two or more flags at once without overlapping using bitwise OR | operator. This allows you to choose two or more flags at once. For example,|||Output|||When the output is 5, you always know that bold and underline is used.|||Also, you can add flag to your requirements.|||Here, we have added italics to our design. Note, only code for italics is written inside the if statement.|||You can accomplish almost anything in C++ programming without using enumerations. However, they can be pretty handy in certain situations. That's what differentiates good programmers from great programmers.",,,
https://www.programiz.com/cpp-programming/object-class,C++ Classes and Objects,C++ Class$$$C++ Objects$$$Create a Class$$$Syntax to Define Object in C++$$$C++ Access Data Members and Member Functions$$$Example 1: Object and Class in C++ Programming$$$Example 2: Using public and private in C++ Class$$$Table of Contents,,"In this tutorial, we will learn about objects and classes and how to use them in C++ with the help of examples.|||In previous tutorials, we learned about functions and variables. Sometimes it's desirable to put related functions and data in one place so that it's logical and easier to work with.|||Suppose, we need to store the length, breadth, and height of a rectangular room and calculate its area and volume.|||To handle this task, we can create three variables, say, length, breadth, and height along with the functions calculateArea() and calculateVolume().|||However, in C++, rather than creating separate variables and functions, we can also wrap these related data and functions in a single place (by creating objects). This programming paradigm is known as object-oriented programming.	But before we can create objects and use them in C++, we first need to learn about classes.|||A class is a blueprint for the object.	We can think of a class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.|||A class is defined in C++ using keyword class followed by the name of the class.|||The body of the class is defined inside the curly brackets and terminated by a semicolon at the end.|||For example,|||Here, we defined a class named Room.|||The variables length, breadth, and height declared inside the class are known as data members. And, the functions calculateArea() and calculateVolume() are known as member functions of a class.|||When a class is defined, only the specification for the object is defined; no memory or storage is allocated.||||||To use the data and access functions defined in the class, we need to create objects.|||We can create objects of Room class (defined in the above example) as follows:|||Here, two objects room1 and room2 of the Room class are created in sampleFunction(). Similarly, the objects room3 and room4 are created in main().|||As we can see, we can create objects of a class in any function of the program. We can also create objects of a class within the class itself, or in other classes.|||Also, we can create as many objects as we want from a single class.|||We can access the data members and member functions of a class by using a . (dot) operator. For example,|||This will call the calculateArea() function inside the Room class for object room2.|||Similarly, the data members can be accessed as:|||In this case, it initializes the length variable of room1 to 5.5.|||Output|||In this program, we have used the Room class and its object room1 to calculate the area and volume of a room.|||In main(), we assigned the values of length, breadth, and height with the code:|||We then called the functions calculateArea() and calculateVolume() to perform the necessary calculations.|||Note the use of the keyword public in the program. This means the members are public and can be accessed anywhere from the program.|||As per our needs, we can also create private members using the private keyword. The private members of a class can only be accessed from within the class. For example,	Â |||Here, a and function1() are private. Thus they cannot be accessed from outside the class.|||On the other hand, b and function2() are accessible from everywhere in the program.|||To learn more about public and private keywords, please visit our C++ Class Access Modifiers tutorial.|||Output|||The above example is nearly identical to the first example, except that the class variables are now private.|||Since the variables are now private, we cannot access them directly from main(). Hence, using the following code would be invalid:|||Instead, we use the public function initData() to initialize the private variables via the function parameters double len, double brth, and double hgt.|||To learn more on objects and classes, visit these topics:",C++ Constructors$$$How to pass and return an object from a function?$$$Introduction$$$C++ Class$$$Create a Class$$$C++ Objects$$$Define Object in C++$$$Example: Object and Class in C++$$$Example: private and public members in a Class,,
https://www.programiz.com/cpp-programming/constructors,C++ Constructors: Types and Copy Constructors,C++ Default Constructor$$$C++ Parameterized Constructor$$$C++ Copy Constructor$$$Example 1: C++ Default Constructor$$$Example 2: C++ Parameterized Constructor$$$Example 3: C++ Copy Constructor$$$Table of Contents,,"In this tutorial, we will learn about the C++ constructor and its type with the help examples.|||A constructor is a special type of member function that is called automatically when an object is created.|||In C++, a constructor has the same name as that of the class and it does not have a return type. For example,|||Here, the function Wall() is a constructor of the class Wall. Notice that the constructor|||A constructor with no parameters is known as a default constructor. In the example above, Wall() is a default constructor.|||Output|||Here, when the wall1 object is created, the Wall() constructor is called. This sets the length variable of the object to 5.5.|||Note: If we have not defined a constructor in our class, then the C++ compiler will automatically create a default constructor with an empty code and no parameters.||||||In C++, a constructor with parameters is known as a parameterized constructor. This is the preferred method to initialize member data.|||Output|||Here, we have created a parameterized constructor Wall() that has 2 parameters: double len and double hgt. The values contained in these parameters are used to initialize the member variables length and height.|||When we create an object of the WallÂ class, we pass the values for the member variables as arguments. The code for this is:|||With the member variables thus initialized, we can now calculate the area of the wall with the calculateArea() function.|||The copy constructor in C++ is used to copy data of one object to another.|||Output|||In this program, we have used a copy constructor to copy the contents of one object of the Wall class to another. The code of the copy constructor is:|||Notice that the parameter of this constructor has the address of an object of the Wall class.|||We then assign the values of the variables of the obj object to the corresponding variables of the object calling the copy constructor. This is how the contents of the object are copied.|||In main(), we then create two objects wall1 and wall2 and then copy the contents of wall1Â to wall2:|||Here, the wall2 object calls its copy constructor by passing the address of the wall1 object as its argument i.e. &obj = &wall1.|||Note: A constructor is primarily used to initialize objects. They are also used to run a default code when an object is created.","has the same name as the class,$$$does not have a return type, and$$$is public$$$Introduction$$$C++ Default Constructor$$$Parameterized Constructor C++$$$C++ Copy Constructor",,
https://www.programiz.com/cpp-programming/pass-return-object-function,How to pass and return object from C++ Functions?,Example 1: C++ Pass Objects to Function$$$Example 2: C++ Return Object from a Function$$$Table of Contents,,"In this tutorial, we will learn to pass objects to a function and return an object from a function in C++ programming.|||In C++ programming, we can pass objects to a function in a similar manner as passing regular arguments.|||Output||||||Here, we have passed two Student objects student1 and student2 as arguments to the calculateAverage() function.|||Output|||In this program, we have created a function createStudent() that returns an object of Student class.|||We have called createStudent() from the main() method.|||Here, we are storing the object returned by the createStudent() method in the student1.",C++ Pass Objects to Function$$$Return Object from a Function in C++,,
https://www.programiz.com/cpp-programming/operator-overloading,C++ Operator Overloading (With Examples),Syntax for C++ Operator Overloading$$$Operator Overloading in Unary Operators$$$Operator Overloading in Binary Operators$$$Things to Remember in C++ Operator Overloading$$$Example1: ++ Operator (Unary Operator) Overloading$$$Example 2: ++ Operator (Unary Operator) Overloading$$$Example 3: Return Value from Operator Function (++ Operator)$$$Example 4: C++ Binary Operator Overloading$$$Table of Contents,,"In this tutorial, we will learn about operator overloading with the help of examples.|||In C++, we can change the way operators work for user-defined types like objects and structures. This is known as operator overloading. For example,|||Suppose we have created three objects c1, c2 and result from a class named Complex that represents complex numbers.|||Since operator overloading allows us to change how operators work, we can redefine how the + operator works and use it to add the complex numbers of c1 and c2 by writing the following code:|||instead of something like|||This makes our code intuitive and easy to understand.|||Note: We cannot use operator overloading for fundamental data types like int, float, char and so on.|||To overload an operator, we use a special operator function.Â We define the function inside the class or structure whose objects/variables we want the overloaded operator to work with.|||Here,|||Unary operators operate on only one operand. The increment operator ++ and decrement operator -- are examples of unary operators.|||Output|||Here, when we use ++count1;, the void operator ++ () is called. This increases the value attribute for the object count1 by 1.|||Note: When we overload operators, we can use it to work in any way we like. For example, we could have used ++ to increase value by 100.|||However, this makes our code confusing and difficult to understand. It's our job as a programmer to use operator overloading properly and in a consistent and intuitive way.|||The above example works only when ++ is used as a prefix. To make ++ work as a postfix we use this syntax.|||Notice the int inside the parentheses. It's the syntax used for using unary operators as postfix; it's not a function parameter.||||||Output|||The Example 2 works when ++ is used as both prefix and postfix. However, it doesn't work if we try to do something like this:|||This is because the return type of our operator function is void. We can solve this problem by making Count as the return type of the operator function.|||Output|||Here, we have used the following code for prefix operator overloading:|||The code for the postfix operator overloading is also similar. Notice that we have created an object temp and returned its value to the operator function.|||Also, notice the code|||The variable value belongs to the count1 object in main() because count1 is calling the function, while temp.value belongs to the temp object.|||Binary operators work on two operands. For example,|||Here, + is a binary operator that works on the operands num and 9.|||When we overload the binary operator for user-defined types by using the code:|||The operator function is called using the obj1 object and obj2 is passed as an argument to the function.|||Output|||In this program, the operator function is:|||Instead of this, we also could have written this function like:|||However,|||Visit these pages to learn more on:","returnType is the return type of the function.$$$operator is a keyword.$$$symbol is the operator we want to overload. Like: +, <, -, ++, etc.$$$arguments is the arguments passed to the function.$$$using & makes our code efficient by referencing the complex2 object instead of making a duplicate object inside the operator function.$$$using const is considered a good practice because it prevents the operator function from modifying complex2.$$$How to overload increment operator in right way?$$$How to overload binary operator - to subtract complex numbers?$$$Introduction$$$Syntax for C++ Operator Overloading$$$Operator Overloading in Unary Operators$$$Example: ++ Operator (Unary Operator) Overloading$$$Example: Return Value from Operator Function (++ Operator)$$$Operator Overloading in Binary Operators$$$Example: C++ Binary Operator Overloading$$$Things to Remember in C++ Operator Overloading","Two operators = and & are already overloaded by default in C++. For example, to copy objects of the same class, we can directly use the = operator. We do not need to create an operator function.$$$Operator overloading cannot change the precedence and associativity of operators. However, if we want to change the order of evaluation, parentheses should be used.$$$There are 4 operators that cannot be overloaded in C++. They are::: (scope resolution). (member selection).* (member selection through pointer to function)?: (ternary operator)$$$:: (scope resolution)$$$. (member selection)$$$.* (member selection through pointer to function)$$$?: (ternary operator)",
https://www.programiz.com/cpp-programming/pointers,C++ Pointers,Address in C++$$$C++ Pointers$$$Common mistakes when working with pointers$$$Example 1: Printing Variable Addresses in C++$$$Assigning Addresses to Pointers$$$Get the Value from the Address Using Pointers$$$Example 2: Working of C++ Pointers$$$Changing Value Pointed by Pointers$$$Example 3: Changing Value Pointed by Pointers$$$Table of Contents,,"In this tutorial, we will learn about pointers in C++ and their working with the help of examples.|||In C++, pointers are variables that store the memory addresses of other variables.|||If we have a variable var in our program, &var will give us its address in the memory. For example,|||Output|||Here, 0x at the beginning represents the address is in the hexadecimal form.|||Notice that the first address differs from the second by 4 bytes and the second address differs from the third by 4 bytes.|||This is because the size of an int variable is 4 bytes in a 64-bit system.|||Note: You may not get the same results when you run the program.|||As mentioned above, pointers are used to store addresses rather than values.|||Here is how we can declare pointers.|||Here, we have declared a pointer pointVar of the int type.|||We can also declare pointers in the following way.|||Let's take another example of declaring pointers.||||||Here, we have declared a pointer pointVar and a normal variable p.Note: The * operator is used after the data type to declare pointers.|||Here is how we can assign addresses to pointers:|||Here, 5 is assigned to the variable var. And, the address of var is assigned to the pointVar pointer with the code pointVar = &var.|||To get the value pointed by a pointer, we use the * operator. For example:|||In the above code, the address of var is assigned to pointVar. We have used the *pointVar to get the value stored in that address.|||When * is used with pointers, it's called the dereference operator. It operates on a pointer and gives the value pointed by the address stored in the pointer. That is, *pointVar = var.|||Note: In C++, pointVar and *pointVar is completely different. We cannot do something like *pointVar = &var;|||Output|||If pointVar points to the address of var, we can change the value of var by using *pointVar.|||For example,|||Here, pointVar and &var have the same address, the value of var will also be changed when *pointVar is changed.|||Output|||Suppose, we want a pointer varPoint to point to the address of var. Then,|||Recommended Readings:",How to use generic data type pointers using a void pointer?$$$How to represent an array using a pointer?$$$How to use pointers with functions?$$$How to use pointers with structures?$$$Address in C++$$$C++ Pointers$$$Assigning Addresses to Pointers$$$Get the Value Using Pointers$$$Example: Working of C++ Pointers$$$Changing Value Pointed by Pointers$$$Common mistakes,,
https://www.programiz.com/cpp-programming/pointers-arrays,C++ Pointers and Arrays,Point to Every Array Elements$$$Example 1: C++ Pointers and Arrays$$$Example 2: Array name used as pointer$$$Table of Contents,,"In this tutorial, we will learn about the relation between arrays and pointers with the help of examples.|||In C++, Pointers are variables that hold addresses of other variables. Not only can a pointer store the address of a single variable, it can also store the address of cells of an array.|||Consider this example:|||Here, ptr is a pointer variable while arr is an int array. The code ptr = arr; stores the address of the first element of the array in variable ptr.|||Notice that we have used arr instead of &arr[0]. This is because both are the same. So, the code below is the same as the code above.|||The addresses for the rest of the array elements are given by &arr[1], &arr[2], &arr[3], and &arr[4].|||Suppose we need to point to the fourth element of the array using the same pointer ptr.|||Here, if ptr points to the first element in the above example then ptr + 3 will point to the fourth element. For example,|||Similarly, we can access the elements using the single pointer. For example,|||Suppose if we have initialized ptr = &arr[2]; then|||Note: The address between ptr and ptr + 1 differs by 4 bytes. It is because ptr is a pointer to an int data. And, the size of int is 4 bytes in a 64-bit operating system.|||Similarly, if pointer ptr is pointing to char type data, then the address between ptr and ptr + 1 is 1 byte. It is because the size of a character is 1 byte.|||Output|||In the above program, we first simply printed the addresses of the array elements without using the pointer variable ptr.|||Then, we used the pointer ptr to point to the address of a[0], ptr + 1 to point to the address of a[1], and so on.||||||In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why we can use pointers to access elements of arrays.|||However, we should remember that pointers and arrays are not the same.|||There are a few cases where array names don't decay to pointers. To learn more, visit: When does array name doesn't decay into a pointer?|||Output|||Here,|||We first used the pointer notation to store the numbers entered by the user into the array arr.|||This code is equivalent to the code below:|||Â |||Notice that we haven't declared a separate pointer variable, but rather we are using the array name arr for the pointer notation.|||As we already know, the array name arr points to the first element of the array. So, we can think of arr as acting like a pointer.|||Similarly, we then used for loop to display the values of arr using pointer notation.|||This code is equivalent to",Pointers and Arrays$$$Point Array Elements$$$Example: C++ Pointers and Arrays$$$Example: Array name used as pointer,"We first used the pointer notation to store the numbers entered by the user into the array arr.cin >> *(arr + i) ;This code is equivalent to the code below:Â cin >> arr[i];Notice that we haven't declared a separate pointer variable, but rather we are using the array name arr for the pointer notation.As we already know, the array name arr points to the first element of the array. So, we can think of arr as acting like a pointer.$$$Similarly, we then used for loop to display the values of arr using pointer notation.cout << *(arr + i) << endl ;This code is equivalent tocout << arr[i] << endl ;",
https://www.programiz.com/cpp-programming/pointers-function,C++ Call by Reference: Using pointers [With Examples],Example 1: Passing by reference without pointers$$$Example 2: Passing by reference using pointers$$$Table of Contents,,"In this tutorial, we will learn about C++ call by reference to pass pointers as an argument to the function with the help of examples.|||In the C++ Functions tutorial, we learned about passing arguments to a function. This method used is called passing by value because the actual value is passed.|||However, there is another way of passing arguments to a function where the actual values of arguments are not passed. Instead, the reference to values is passed.|||For example,|||Notice the & in void func2(int &numRef). This denotes that we are using the address of the variable as our parameter.|||So, when we call the func2() function in main() by passing the variable num as an argument, we are actually passing the address of num variable instead of the value 5.|||Output|||In this program, we passed the variables a and b to the swap() function. Notice the function definition,||||||Here, we are using & to denote that the function will accept addresses as its parameters.|||Hence, the compiler can identify that instead of actual values, the reference of the variables is passed to function parameters.|||In the swap() function, the function parameters n1 and n2 are pointing to the same value as the variables a and b respectively. Hence the swapping takes place on actual value.|||The same task can be done using the pointers. To learn about pointers, visit C++ Pointers.|||Output|||Here, we can see the output is the same as the previous example. Notice the line,|||Here, the address of the variable is passed during the function call rather than the variable.|||Since the address is passed instead of value, a dereference operator * must be used to access the value stored in that address.|||*n1 and *n2 gives the value stored at address n1 and n2 respectively.|||Since n1 and n2 contain the addresses of a and b, anything is done to *n1 and *n2 will change the actual values of a and b.|||Hence, when we print the values of a and b in the main() function, the values are changed.",C++ Call by reference$$$Example: Call by reference without pointers$$$Example: Call by reference using pointers,,
https://www.programiz.com/cpp-programming/memory-management,C++ Memory Management: new and delete,C++ new Operator$$$delete Operator$$$Example 1: C++ Dynamic Memory Allocation$$$Example 2: C++ new and delete Operator for Arrays$$$Example 3: C++ new and delete Operator for Objects$$$Table of Contents,,"In this tutorial, we will learn to manage memory effectively in C++ using new and delete operations with the help of examples.|||C++ allows us to allocate the memory of a variable or an array in run time. This is known as dynamic memory allocation.|||In other programming languages such as Java and Python, the compiler automatically manages the memories allocated to variables. But this is not the case in C++.|||In C++, we need to deallocate the dynamically allocated memory manually after we have no use for the variable.|||We can allocate and then deallocate memory dynamically using the new and delete operators respectively.|||The new operator allocates memory to a variable. For example,|||Here, we have dynamically allocated memory for an int variable using the new operator.|||Notice that we have used the pointer pointVar to allocate the memory dynamically. This is because the new operator returns the address of the memory location.|||In the case of an array, the new operator returns the address of the first element of the array.|||From the example above, we can see that the syntax for using the new operator is|||Once we no longer need to use a variable that we have declared dynamically, we can deallocate the memory occupied by the variable.|||For this, the delete operator is used. It returns the memory to the operating system. This is known as memory deallocation.|||The syntax for this operator is|||Consider the code:|||Here, we have dynamically allocated memory for an int variable using the pointer pointVar.||||||After printing the contents of pointVar, we deallocated the memory using delete.|||Note: If the program uses a large amount of unwanted memory using new, the system may crash because there will be no memory available for the operating system. In this case, the delete operator can help the system from crash.|||Output|||In this program, we dynamically allocated memory to two variables of int and float types. After assigning values to them and printing them, we finally deallocate the memories using the code|||Note: Dynamic memory allocation can make memory management more efficient.|||Especially for arrays, where a lot of the times we don't know the size of the array until the run time.|||Output|||In this program, we have asked the user to enter the number of students and store it in the num variable.|||Then, we have allocated the memory dynamically for the float array using new.|||We enter data into the array (and later print them) using pointer notation.|||After we no longer need the array, we deallocate the array memory using the code delete[] ptr;.|||Notice the use of [] after delete. We use the square brackets [] in order to denote that the memory deallocation is that of an array.|||Output|||In this program, we have created a Student class that has a private variable age.|||We have initializedÂ age to 12 in the default constructor Student() and print its value with the function getAge().|||In main(), we have created a Student object using the new operator and use the pointer ptr to point to its address.|||The moment the object is created, the Student() constructor initializes age to 12.|||We then call the getAge() function using the code:|||Notice the arrow operator ->. This operator is used to access class members using pointers.",Introduction$$$C++ new Operator$$$delete Operator in C++$$$Example: C++ Dynamic Memory Allocation$$$Example: new and delete Operator for Arrays in C++$$$Example: new and delete Operator for Objects in C++,,
https://www.programiz.com/cpp-programming/inheritance,C++ Inheritance,is-a relationship$$$Example 1: Simple Example of C++ Inheritance$$$C++ protected Members$$$Access Modes in C++ Inheritance$$$Member Function Overriding in Inheritance$$$Example 2 : C++ protected Members$$$Table of Contents,,"In this tutorial, we will learn about inheritance in C++ with the help of examples.|||Inheritance is one of the key features of Object-oriented programming in C++. It allows us to create a new class (derived class) from an existing class (base class).|||The derived class inherits the features from the base class and can have additional features of its own. For example,|||Here, the Dog class is derived from the Animal class. Since Dog is derived from Animal, members of Animal are accessible to Dog.|||Notice the use of the keyword public while inheriting Dog from Animal.|||We can also use the keywords private and protected instead of public. We will learn about the differences between using private, public and protected later in this tutorial.|||Inheritance is an is-a relationship. We use inheritance only if an is-a relationship is present between the two classes.|||Here are some examples:||||||Output|||Here, dog1 (the object of derived class Dog) can access members of the base class Animal. It's because Dog is inherited from Animal.|||The access modifier protected is especially relevant when it comes to C++ inheritance.|||Like private members, protected members are inaccessible outside of the class. However, they can be accessed by derived classes and friend classes/functions.|||We need protected members if we want to hide the data of a class, but still want that data to be inherited by its derived classes.|||To learn more about protected, refer to our C++ Access Modifiers tutorial.|||Output|||Here, the variable type is protected and is thus accessible from the derived class Dog. We can see this as we have initialized type in the Dog class using the function setType().|||On the other hand, the private variable color cannot be initialized in Dog.|||Also, since the protected keyword hides data, we cannot access type directly from an object of Dog or Animal class.|||In our previous tutorials, we have learned about C++ access specifiers such as public, private, and protected.|||So far, we have used the public keyword in order to inherit a class from a previously-existing base class. However, we can also use the private and protected keywords to inherit classes. For example,|||The various ways we can derive classes are known as access modes. These access modes have the following effect:|||The private members of the base class are always private in the derived class.|||To learn more, visit our C++ public, private, protected inheritance tutorial.|||Suppose, base class and derived class have member functions with the same name and arguments.|||If we create an object of the derived class and try to access that member function, the member function in the derived class is invoked instead of the one in the base class.|||The member function of derived class overrides the member function of base class.|||Learn more about Function overriding in C++.|||Recommended Reading: C++ Multiple Inheritance",A car is a vehicle.$$$Orange is a fruit.$$$A surgeon is a doctor.$$$A dog is an animal.$$$Introduction$$$is-a relationship$$$Example: Simple Example of C++ Inheritance$$$C++ protected Members$$$Example: C++ protected Members$$$Access Modes in C++ Inheritance$$$Member Function Overriding in Inheritance,"public: If a derived class is declared in public mode, then the members of the base class are inherited by the derived class just as they are.$$$private: In this case, all the members of the base class become private members in the derived class.$$$protected: The public members of the base class become protected members in the derived class.",
https://www.programiz.com/cpp-programming/public-protected-private-inheritance,"C++ Public, Protected and Private Inheritance","public, protected and private inheritance in C++$$$Example 1: C++ public Inheritance$$$Example 2: C++ protected Inheritance$$$Example 3: C++ private Inheritance$$$Accessibility in public Inheritance$$$Accessibility in protected Inheritance$$$Accessibility in private Inheritance$$$Table of Contents",,"In this tutorial, we will learn to use public, protected and private inheritance in C++ with the help of examples.|||In C++ inheritance, we can derive a child class from the base class in different access modes. For example,|||Notice the keyword public in the code|||This means that we have created a derived class from the base class in public mode. Alternatively, we can also derive classes in protected or private modes.|||These 3 keywords (public, protected, and private) are known as access specifiers in C++ inheritance.|||public, protected, and private inheritance have the following features:|||Note: private members of the base class are inaccessible to the derived class.|||Output|||Here, we have derived PublicDerived from Base in public mode.|||As a result, in PublicDerived:|||Since private and protected members are not accessible from main(), we need to create public functions getPVT() and getProt() to access them:|||Notice that theÂ getPVT()Â function has been defined inside Base. But theÂ getProt()Â function has been defined inside PublicDerived.|||This is because pvt, which is private in Base, is inaccessible to PublicDerived.|||However, prot is accessible to PublicDerivedÂ due toÂ public inheritance. So, getProt()Â can access the protectedÂ variable from withinÂ PublicDerived.||||||Output|||Here, we have derived ProtectedDerived from Base in protected mode.|||As a result, in ProtectedDerived:|||As we know, protected members cannot be directly accessedÂ from outside the class. As a result, we cannot use getPVT() from ProtectedDerived.|||That is also why we need to create the getPub() function in ProtectedDerived in order to access the pub variable.|||Output|||Here, we have derived PrivateDerived from Base in private mode.|||As a result, in PrivateDerived:|||As we know, private members cannot be directly accessed from outside the class. As a result, we cannot use getPVT() from PrivateDerived.|||That is also why we need to create the getPub() function in PrivateDerived in order to access the pub variable.","public inheritance makes public members of the base class public in the derived class, and the protected members of the base class remain protected in the derived class.$$$protected inheritance makes the public and protected members of the base class protected in the derived class.$$$private inheritance makes the public and protected members of the base class private in the derived class.$$$prot is inherited as protected.$$$pub and getPVT() are inherited as public.$$$pvt is inaccessible since it is private in Base.$$$prot, pub and getPVT() are inherited as protected.$$$pvt is inaccessible since it is private in Base.$$$prot, pub and getPVT() are inherited as private.$$$pvt is inaccessible since it is private in Base.$$$Introduction$$$public, protected and private inheritance in C++$$$Example 1: C++ public Inheritance$$$Example 2: protected Inheritance$$$Example 3: private Inheritance in C++",,Accessibility|||private members|||protected members|||public members$$$Base Class|||Yes|||Yes|||Yes$$$Derived Class|||No|||Yes|||Yes$$$Accessibility|||private members|||protected members|||public members$$$Base Class|||Yes|||Yes|||Yes$$$Derived Class|||No|||Yes|||Yes (inherited as protected variables)$$$Accessibility|||private members|||protected members|||public members$$$Base Class|||Yes|||Yes|||Yes$$$Derived Class|||No|||Yes (inherited as private variables)|||Yes (inherited as private variables)
https://www.programiz.com/cpp-programming/function-overriding,C++ Function Overriding,Example 1: C++ Function Overriding$$$Access Overridden Function in C++$$$Example 2: C++ Access Overridden Function to the Base Class$$$Example 3: C++ Call Overridden Function From Derived Class$$$Example 4: C++ Call Overridden Function Using Pointer$$$Table of Contents,,"In this tutorial, we will learn about function overriding in C++ with the help of examples.|||As we know, inheritance is a feature of OOP that allows us to create derived classes from a base class. The derived classes inherit features of the base class.|||Suppose, the same function is defined in both the derived class and the based class. Now if we call this function using the object of the derived class, the function of the derived class is executed.|||This is known as function overriding in C++. The function in derived class overrides the function in base class.|||Output|||Here, the same function print() is defined in both Base and Derived classes.|||So, when we call print() from the Derived object derived1, the print() from Derived is executed by overriding the function in Base.|||As we can see, the function was overridden because we called the function from an object of the Derived class.|||Had we called the print() function from an object of the Base class, the function would not have been overridden.|||To access the overridden function of the base class, we use the scope resolution operator ::.|||We can also access the overridden function by using a pointer of the base class to point to an object of the derived class and then calling the function from that pointer.|||Output|||Here, this statement|||accesses the print() function of the Base class.||||||Output|||In this program, we have called the overridden function inside the Derived class itself.|||Notice the code Base::print();, which calls the overridden function inside the Derived class.|||Output|||In this program, we have created a pointer of Base type named ptr. This pointer points to the Derived object derived1.|||When we call the print() function using ptr, it calls the overridden function from Base.|||This is because even though ptr points to a Derived object, it is actually of Base type. So, it calls the member function of Base.|||In order to override the Base function instead of accessing it, we need to use virtual functions in the Base class.",Introduction$$$Example: C++ Function Overriding$$$Access Overridden Function in C++$$$Example: Call Overridden Function From Derived Class$$$Example: Call Overridden Function Using Pointer,,
https://www.programiz.com/cpp-programming/multilevel-multiple-inheritance,"C++ Multiple, Multilevel and Hierarchical Inheritance",C++ Multilevel Inheritance$$$C++ Multiple Inheritance$$$C++ Hierarchical Inheritance$$$Example 1: C++ Multilevel Inheritance$$$Example 2: Multiple Inheritance in C++ Programming$$$Ambiguity in Multiple Inheritance$$$Syntax of Hierarchical Inheritance$$$Example 3: Hierarchical Inheritance in C++ Programming$$$Table of Contents,,"In this tutorial, we will learn about different models of inheritance in C++ programming: Multiple, Multilevel and Hierarchical inheritance with examples.|||Inheritance is one of the core feature of an object-oriented programming language. It allows software developers to derive a new class from the existing class. The derived class inherits the features of the base class (existing class).|||There are various models of inheritance in C++ programming.|||In C++ programming, not only you can derive a class from the base class but you can also derive a class from the derived class. This form of inheritance is known as multilevel inheritance.|||Here, class B is derived from the base class A and the class C is derived from the derived class B.|||Output||||||In this program, class C is derived from class B (which is derived from base class A).|||The obj object of class C is defined in the main() function.|||When the display() function is called, display() in class A is executed. It's because there is no display() function in class C and class B.|||The compiler first looks for the display() function in class C. Since the function doesn't exist there, it looks for the function in class B (as C is derived from B).|||The function also doesn't exist in class B, so the compiler looks for it in class A (as B is derived from A).|||If display() function exists in C, the compiler overrides display() of class A (because of member function overriding).|||In C++ programming, a class can be derived from more than one parent. For example, A class Bat is derived from base classes Mammal and WingedAnimal. It makes sense because bat is a mammal as well as a winged animal.|||Output|||The most obvious problem with multiple inheritance occurs during function overriding.|||Suppose, two base classes have a same function which is not overridden in derived class.|||If you try to call the function using the object of the derived class, compiler shows error. It's because compiler doesn't know which function to call. For example,|||This problem can be solved using the scope resolution function to specify which function to class either base1 or base2|||If more than one class is inherited from the base class, it's known as hierarchical inheritance. In hierarchical inheritance, all features that are common in child classes are included in the base class.|||For example, Physics, Chemistry, Biology are derived from Science class. Similarly, Dog, Cat, Horse are derived from Animal class.|||Output|||Here, both the Dog and Cat classes are derived from the Animal class. As such, both the derived classes can access the info() function belonging to the Animal class.",Introduction$$$C++ Multilevel Inheritance$$$Example: C++ Multilevel Inheritance$$$C++ Multiple Inheritance$$$Example: Multiple Inheritance in C++ Programming$$$Ambiguity in Multiple Inheritance$$$C++ Hierarchical Inheritance$$$Example: Multiple Inheritance in C++ Programming,,
https://www.programiz.com/cpp-programming/friend-function-class,C++ Friend Functions and Classes (With Examples),friend Function in C++$$$friend Class in C++$$$Example 1: Working of friend Function$$$Example 2: Add Members of Two Different Classes$$$Example 3: C++ friend Class$$$Table of Contents,,"In this tutorial, we will learn to create friend functions and friend classes in C++ with the help of examples.|||Data hiding is a fundamental concept of object-oriented programming. It restricts the access of private members from outside of the class.|||Similarly, protected members can only be accessed by derived classes and are inaccessible from outside. For example,|||However, there is a feature in C++ called friend functions that break this rule and allow us to access member functions from outside the class.|||Similarly, there is a friend class as well, which we will learn later in this tutorial.|||A friend function can access the private and protected data of a class. We declare a friend function using the friend keyword inside the body of the class.|||Output||||||Here, addFive() is a friend function that can access both private and public data members.|||Though this example gives us an idea about the concept of a friendÂ function, it doesn't show any meaningful use.|||A more meaningful use would be operating on objects of two different classes. That's when the friend function can be very helpful.|||Output|||In this program, ClassA and ClassB have declared add() as a friend function. Thus, this function can access private data of both classes.|||One thing to notice here is the friend function inside ClassA is using the ClassB. However, we haven't defined ClassB at this point.|||For this to work, we need a forward declaration of ClassB in our program.|||We can also use a friend Class in C++ using the friend keyword. For example,|||When a class is declared a friend class, all the member functions of the friend class become friend functions.|||Since ClassB is a friend class, we can access all members of ClassA from inside ClassB.|||However, we cannot access members of ClassB from inside ClassA. It is because friend relation in C++ is only granted, not taken.|||Output|||Here, ClassB is a friend class of ClassA. So, ClassB has access to the members of classA.|||In ClassB, we have created a function add() that returns the sum of numA and numB.|||Since ClassB is a friend class, we can create objects of ClassA inside of ClassB.",Introduction$$$friend Function in C++$$$Example: Working of friend Function$$$friend Class in C++$$$Example: C++ friend Class,,
https://www.programiz.com/cpp-programming/virtual-functions,C++ Virtual Functions,Example 1: C++ virtual Function$$$C++ override Identifier$$$Use of C++ Virtual Functions$$$Example 2: C++ virtual Function Demonstration$$$Use of C++ override$$$Table of Contents,,"In this tutorial, we will learn about C++ virtual function and its use with the help of examples.|||A virtual function is a member function in the base class that we expect to redefine in derived classes.|||Basically, a virtual function is used in the base class in order to ensure that the function is overridden. This especially applies to cases where a pointer of base class points to an object of a derived class.|||For example, consider the code below:|||Later, if we create a pointer of Base type to point to an object of Derived class and call the print() function, it calls the print() function of the Base class.|||In other words, the member function of Base is not overridden.|||In order to avoid this, we declare the print() function of the Base class as virtual by using the virtual keyword.|||Virtual functions are an integral part of polymorphism in C++. To learn more, check our tutorial on C++ Polymorphism.|||Output||||||Here, we have declared the print() function of Base as virtual.|||So, this function is overridden even when we use a pointer of Base type that points to the Derived object derived1.|||C++ 11 has given us a new identifier override that is very useful to avoid bugs while using virtual functions.|||This identifier specifies the member functions of the derived classes that override the member function of the base class.|||For example,|||If we use a function prototype in Derived class and define that function outside of the class, then we use the following code:|||When using virtual functions,Â it is possible to make mistakes while declaring the member functions of the derived classes.|||Using the override identifier prompts the compiler to display error messages when these mistakes are made.|||Otherwise, the program will simply compile but the virtual function will not be overridden.|||Some of these possible mistakes are:|||Suppose we have a base class Animal and derived classes Dog and Cat.|||Suppose each class has a data member named type. Suppose these variables are initialized through their respective constructors.|||Now, let us suppose that our program requires us to create two public functions for each class:|||We could create both these functions in each class separately and override them, which will be long and tedious.|||Or we could make getType() virtual in the Animal class, then create a single, separate print() function that accepts a pointer of Animal type as its argument. We can then use this single function to override the virtual function.|||This will make the code shorter, cleaner, and less repetitive.|||Output|||Here, we have used the virtual function getType() and an Animal pointer ani in order to avoid repeating the print() function in every class.|||In main(), we have created 3 Animal pointers to dynamically create objects of Animal, Dog and Cat classes.|||We then call the print() function using these pointers:","Functions with incorrect names: For example, if the virtual function in the base class is named print(), but we accidentally name the overriding function in the derived class as pint().$$$Functions with different return types: If the virtual function is, say, of void type but the function in the derived class is of int type.$$$Functions with different parameters: If the parameters of the virtual function and the functions in the derived classes don't match.$$$No virtual function is declared in the base class.$$$Introduction$$$Example: C++ virtual Function$$$override Identifier$$$Use of C++ override$$$Use of Virtual Functions$$$Example: virtual Function Demonstration","getType() to return the value of type$$$print() to print the value of type$$$When print(animal1) is called, the pointer points to an Animal object. So, the virtual function in Animal class is executed inside of print().$$$When print(dog1) is called, the pointer points to a Dog object. So, the virtual function is overridden and the function of Dog is executed inside of print().$$$When print(cat1) is called, the pointer points to a Cat object. So, the virtual function is overridden and the function of Cat is executed inside of print().",
https://www.programiz.com/cpp-programming/templates,C++ Class Templates,Class Template Declaration$$$Creating a Class Template Object$$$Example 1: C++ Class Templates$$$Defining a Class Member Outside the Class Template$$$Example 2: Simple Calculator Using Class Templates$$$C++ Class Templates With Multiple Parameters$$$Example 3: C++ Templates With Multiple Parameters$$$Table of Contents,,"In this tutorial, we will learn about class templates in C++ with the help of examples.|||Templates are powerful features of C++ which allows us to write generic programs. There are two ways we can implement templates:|||Similar to function templates, we can use class templates to create a single class to work with different data types. |||Class templates come in handy as they can make our code shorter and more manageable.|||A class template starts with the keyword template followed by template parameter(s) inside <> which is followed by the class declaration.|||In the above declaration, T is the template argument which is a placeholder for the data type used, and class is a keyword.|||Inside the class body, a member variable var and a member function functionName() are both of type T.|||Once we've declared and defined a class template, we can create its objects in other classes or functions (such as the main() function) with the following syntax|||For example,|||Output|||In this program. we have created a class template Number with the code|||Notice that the variable num, the constructor argument n, and the function getNum() are of type T, or have a return type T. That means that they can be of any type.||||||In main(), we have implemented the class template by creating its objects|||Notice the codes Number<int> and Number<double> in the code above.|||This creates a class definition each for int and float, which are then used accordingly.|||It is compulsory to specify the type when declaring objects of class templates. Otherwise, the compiler will produce an error.|||Suppose we need to define a function outside of the class template. We can do this with the following code:|||Notice that the code template <class T> is repeated while defining the function outside of the class. This is necessary and is part of the syntax.|||If we look at the code in Example 1, we have a function getNum() that is defined inside the class template Number. |||We can define getNum() outside of Number with the following code:|||This program uses a class template to perform addition, subtraction, multiplication and division of two variables num1 and num2.|||The variables can be of any type, though we have only used int and float types in this example.|||Output|||In the above program, we have declared a class template Calculator.|||The class contains two private members of type T: num1 & num2, and a constructor to initialize the members.|||We also have add(), subtract(), multiply(), and divide() functions that have the return type T. We also have a void function displayResult() that prints out the results of the other functions.|||In main(), we have created two objects of Calculator: one for int data type and another for float data type.|||This prompts the compiler to create two class definitions for the respective data types during compilation.|||In C++, we can use multiple template parameters and even use default arguments for those parameters. For example,|||Output|||In this program, we have created a class template, named ClassTemplate, with three parameters, with one of them being a default parameter.|||Notice the code class V = char. This means that V is a default parameter whose default type is char.|||Inside ClassTemplate, we declare 3 variables var1, var2 and var3, each corresponding to one of the template parameters.|||In main(), we create two objects of ClassTemplate with the code|||Here,|||For obj1, T = int, U = double and V = char.|||For obj2, T = double, U = char and V = bool.",Function Templates$$$Class Templates$$$Introduction$$$Class Template Declaration$$$Creating a Class Template Object$$$Example 1: C++ Class Templates$$$Defining a Class Member Outside the Class Template$$$Example 2: Simple Calculator Using Class Templates$$$C++ Class Templates With Multiple Parameters,,Object|||T|||U|||V$$$obj1|||int|||double|||char$$$obj2|||double|||char|||bool
https://www.programiz.com/cpp-programming/examples,C++ Examples | Programiz,,The best way to learn C++ is by practicing examples. The page contains examples on             basic concepts of C++. You are advised to take the references from these examples and try them on your own.          All the programs on this page are tested and should work on all platforms.,,,"C++ ""Hello, World!"" Program$$$C++ Program to Print Number Entered by User$$$C++ Program to Add Two Numbers$$$C++ Program to Find Quotient and Remainder$$$C++ Program to Find Size of int, float, double and char in Your System$$$C++ Program to Swap Two Numbers$$$C++ Program to Check Whether Number is Even or Odd$$$C++ Program to Check Whether a character is Vowel or Consonant.$$$C++ Program to Find Largest Number Among Three Numbers$$$C++ Program to Find All Roots of a Quadratic Equation$$$C++ Program to Calculate Sum of Natural Numbers$$$C++ Program to Check Leap Year$$$C++ Program to Find Factorial$$$C++ Program to Generate Multiplication Table$$$C++ Program to Display Fibonacci Series$$$C++ Program to Find GCD$$$C++ Program to Find LCM$$$C++ Program to Reverse a Number$$$C++ Program to Calculate Power of a Number$$$Increment ++ and Decrement -- Operator Overloading in C++ Programming$$$C++ Program to Subtract Complex Number Using Operator Overloading$$$C++ Program to Find ASCII Value of a Character$$$C++ Program to Multiply two Numbers$$$C++ Program to Check Whether a Number is Palindrome or Not$$$C++ Program to Check Whether a Number is Prime or Not$$$C++ Program to Display Prime Numbers Between Two Intervals$$$C++ Program to Check Armstrong Number$$$C++ Program to Display Armstrong Number Between Two Intervals$$$C++ Program to Display Factors of a Number$$$C++ Programs To Create Pyramid and Pattern$$$C++ Program to Make a Simple Calculator to Add, Subtract, Multiply or Divide Using switch...case$$$C++ Program to Display Prime Numbers Between Two Intervals Using Functions$$$C++ Program to Check Prime Number By Creating a Function$$$C++ Program to Check Whether a Number can be Express as Sum of Two Prime Numbers$$$C++ program to Find Sum of Natural Numbers using Recursion$$$C++ program to Calculate Factorial of a Number Using Recursion$$$C++ Program to Find G.C.D Using Recursion$$$C++ Program to Convert Binary Number to Decimal and vice-versa$$$C++ Program to Convert Octal Number to Decimal and vice-versa$$$C++ Program to Convert Binary Number to Octal and vice-versa$$$C++ program to Reverse a Sentence Using Recursion$$$C++ Program to Calculate Power Using Recursion$$$C++ Program to Calculate Average of Numbers Using Arrays$$$C++ Program to Find Largest Element of an Array$$$C++ Program to Calculate Standard Deviation$$$C++ Program to Add Two Matrix Using Multi-dimensional Arrays$$$C++ Program to Multiply Two Matrix Using Multi-dimensional Arrays$$$C++ Program to Find Transpose of a Matrix$$$C++ Program to Multiply two Matrices by Passing Matrix to Function$$$C++ Program to Access Elements of an Array Using Pointer$$$C++ Program to Swap Numbers in Cyclic Order Using Call by Reference$$$C++ Program to Find the Frequency of Characters in a String$$$C++ Program to Find the Number of Vowels, Consonants, Digits and White Spaces in a String$$$C++ Program to Remove all Characters in a String Except Alphabets.$$$C++ Program to Find the Length of a String$$$C++ Program to Concatenate Two Strings$$$C++ Program to Copy Strings$$$C++ Program to Sort Elements in Lexicographical Order (Dictionary Order)$$$C++ Program to Store Information of a Student in a Structure$$$C++ Program to Add Two Distances (in inch-feet) System Using Structures$$$C++ Program to Add Complex Numbers by Passing Structure to a Function$$$C++ Program to Calculate Difference Between Two Time Period$$$C++ Program to Store and Display Information Using Structure",
https://www.programiz.com/cpp-programming/library-function,C++ Standard Library | Programiz, C++ <cmath>$$$C++ cos()$$$C++ sin()$$$C++ asin()$$$C++ atan()$$$C++ tan()$$$C++ atan2()$$$C++ acos()$$$C++ ceil()$$$C++ sinh()$$$C++ acosh()$$$C++ asinh()$$$C++ floor()$$$C++ tanh()$$$C++ fmod()$$$C++ atanh()$$$C++ log()$$$C++ round()$$$C++ lround()$$$C++ trunc()$$$C++ llround()$$$C++ rint()$$$C++ log10()$$$C++ lrint()$$$C++ modf()$$$C++ exp()$$$C++ exp2()$$$C++ frexp()$$$C++ scalbn()$$$C++ ldexp()$$$C++ expm1() $$$C++ nearbyint()$$$C++ ilogb()$$$C++ logb()$$$C++ log2()$$$C++ scalbln()$$$C++ log1p()$$$C++ remquo()$$$C++ sqrt()$$$C++ cbrt()$$$C++ nexttoward()$$$C++ hypot()$$$C++ fmax()$$$C++ nextafter()$$$C++ fdim()$$$C++ cosh()$$$C++ fabs()$$$C++ nan()$$$C++ cmath abs()$$$C++ fma()$$$C++ fmin()$$$C++ copysign()$$$C++ remainder()$$$C++ llrint()$$$C++ pow(),,,,,
https://www.programiz.com/cpp-programming/guide,C++ Programming,Features of C++ Programming$$$Why should you learn C++ programming?$$$How to get better at C++?$$$Final Words$$$Speed$$$Statically typed$$$Multi-paradigm programming language$$$Object-oriented$$$Standard library (Standard template library - STL)$$$1. Irreplaceability$$$2. To learn the internal architecture of a computer$$$3. Active Community and Open Source Projects$$$4. Familiarity with programming$$$5. Job Opportunities$$$Learning by doing$$$Follow C++ standards$$$Read C++ code written by others$$$Join C++ communities$$$Table of Contents,,"C++ is a statically-typed, free-form, (usually) compiled, multi-paradigm, general-purpose middle-level programming language based on C. It was developed by Bjarne Stroustrup in 1979.|||Many of todayâs operating systems, system drivers, browsers and games use C++ as their core language, making it one of the most popular languages used.|||This is a comprehensive guide that explores the reasons you should consider learning C++ and the ways you can get started with C++.|||If you directly want to get started with learning C++, visit our C++ Tutorial page.|||Since, C++ is an extended version of C, the C part of it is very low level.|||This offers a huge boost in speed that high-level languages like Python and Java cannot provide.|||Since C++ is a statically typed programming language, it does not allow the compiler to make assumptions about the type of data. For example, 10 is different from ""10"" and it must be declared explicitly.|||Since these are determined at compile-time, it helps the compiler catch errors and bugs before the execution of the program.|||C++ supports at least 7 different styles of programming and gives developers the freedom to choose one at their will.|||Unlike Java, you donât need to use objects to solve every task unless necessary.|||C++ supports Object-Oriented programming, which provides a clear modular structure for programs.|||With its use in C++, you are able to divide these complex problems into smaller sets by creating objects.|||The use of C++ can be further extended using the standard library it contains.|||These libraries contain efficient algorithms that you can use extensively while coding your own projects.|||This saves an ample amount of programming effort, which otherwise would have been wasted reinventing the wheel.|||With the use of C++ in the development of modern games, operating systems, browsers, and much more, it is safe to say that C++ is irreplaceable. Many major companies like Adobe, Amazon, Facebook, and Autodesk use C++ in their products.|||Since C++ is a middle-level language, you will write code that interacts directly with the internal hardware of the computer. Due to this, you will understand how computer memory works and how information can be stored and retrieved.|||It is sure to expand your knowledge of the architecture of the computer.||||||C++ has a large supporting community. There are numerous active online forums that can come in handy if you are stuck anywhere in the learning process.|||If you know C++, you can contribute to large open-source projects that impact hundreds of millions of people. Some of the larger open source projects where C++ programming is used are TensorFlow, Electron, OpenCV, etc.|||A lot of popular programming languages are based on C (and C++, considered superset of C programming with OOP features). Hence, if you know C and C++, you will not have any problem switching to another language.|||C++ developers can expect an average of $100,000 salary with surplus job opportunities.|||The requirement of jobs comes mostly for game development, rendering engines, and creating Windows applications.|||Whatever medium you use to learn C++, it all comes down to practicing what you have done by writing programs. Only practice will make you a better programmer.|||Donât just copy others' code and run it. Take some time to think about what the code actually does. Replicate it on your system and see what errors occur and most importantly, learn from them.|||It is really important to follow a good C++ standard when you start programming. Even though they give you less freedom when you start out, they are helpful while are scaling your program and advancing in C++.|||Take a look at IsoCPPâs coding standard FAQ and also follow the C++ Core Guidelines.|||Join Githubâs open-source projects and read others' code. This can be overwhelming at first when you see all the code in the project. You can use Code Whittling to start small and only focus on one thing at a moment.|||Youâll not only learn others' styles of coding but youâll also understand how they think.|||Get help from others. There are tons of great C++ communities that will help you solve real-life problems and most importantly, become a better developer.|||Some of them are:|||We at Programiz think C++ is a terrific language to learn. Even for beginners, it helps to understand the working of programs and computers in general.|||Learning any language takes time and that holds even more true for C++. Since it is not a high-level language, learning C++ can get overwhelming when you start and you will need to be prepared to put in thoughtful hours to learn the basics.|||This experience will, however, take you a long way to become a great developer.",What is C++ programming?$$$Features of C++$$$Why learn C++?$$$How to learn C++?$$$How to get better at C++?$$$Final Words,"StackOverflow - Most Popular programming Q&A site on the web$$$Codechef - Practice questions, challenges and a large community of programmers$$$CodeProject - For those who code, with in-depth articles and a huge community of coders",
