Links,Main Heading,Chapter Headings,Description,Contents,Unordered Lists,Ordered Lists,Table Data
https://www.programiz.com/kotlin-programming,Learn Kotlin Programming,About Kotlin Programming$$$Why Learn Kotlin?$$$How to learn Kotlin?$$$Kotlin Resources,"Kotlin is a relatively new programming language developed by JetBrains for modern multiplatform applications. Nowadays, Kotlin is widely used for Android development instead of Java. It is because Kotlin is safe, concise, and fun to read and write. Our Kotlin tutorial will guide you to learn Kotlin one step at a time.",,"Open Source - The Kotlin compiler, Intellij IDEA plugin, and build tools are all open source.$$$Interoperable - Kotlin is 100 percent interoperable with Java. This means all your current Java/Android code works seamlessly with Kotlin.$$$Concise - Compared to Java, Kotlin code are much more concise. Also, Kotlin code is much more expressive (easier to understand and write).$$$Tool-friendly - Kotlin is developed by JetBrains, the company renowned for creating development tools. You can choose any Java IDE to write Koltin code.$$$Kotlin is 100 percent interoperable with Java. Hence your Java/Android code works with Kotlin.$$$Kotlin allows you to cut off the lines of code by approximately 40% (compared to Java).$$$Learning Kotlin is easy. It is particularly easy if you already know Java.$$$Kotlin is tool-friendly. You can use any Java IDE or command line to run Kotlin.$$$Kotlin tutorial from Programiz - We provide step by step Kotlin tutorials and examples. Get started with Kotlin.$$$Official Kotlin tutorial - Kotlin reference and Kotlin tutorial from the official site is the most reliable source to learn Kotlin.$$$Write a lot of Kotlin code- The only way you can learn programming is by writing a lot of code.$$$What is Kotlin?$$$Kotlin Examples",,
https://www.programiz.com/kotlin-programming/hello-world,Kotlin Hello World - You First Kotlin Program,"Kotlin ""Hello, World!"" Program$$$Comparison With Java ""Hello, World!"" program$$$How this program works?$$$Few Important Notes$$$Table of Contents",,"In this article, you will learn to write Hello World program in Kotlin.|||A ""Hello, World!"" is a simple program that outputs Hello, World! on the screen. Since it's a very simple program, it's often used to introduce a new programming language.|||Before you write the program, make sure your computer can run Kotlin. For that visit: How to Run Kotlin on Your Computer?|||Let's explore how ""Hello, World!"" program works in Kotlin.||||||When you run the program, the output will be:|||As you know, Kotlin is 100% interoperable with Java. Here's an equivalent Java ""Hello, World!"" program.","What is ""Hello, World!"" program?$$$Kotlin ""Hello, World!""$$$How this program works?$$$Comparison with Java Hello World Program$$$Few Important Notes","// Hello World ProgramAny line starting with // is a comment in Kotlin (similar to Java). Comments are ignored by the compiler. They are intended for person reading the code to better understand the intent and functionality of the program. To learn more, visit Kotlin comments.$$$fun main(args : Array<String>) { ... }This is the main function, which is mandatory in every Kotlin application. The Kotlin compiler starts executing the code from the main function.The function takes array of strings as a parameter and returns Unit. You will learn about functions and parameters in later chapters.For now, just remember that main function is a mandatory function which is the entry point of every Kotlin program. The signature of main function is:fun main(args : Array<String>) {    ... .. ...}$$$println(""Hello, World!"")The println() function prints the given message inside the quotation marks and newline to the standard output stream. In this program, it prints Hello, World! and new line.$$$Unlike Java, it is not mandatory to create a class in every Kotlin program. It's because the Kotlin compiler creates the class for us.If you are using IntelliJ IDEA, go to Run > Edit Configurations to view this class. If you named your Kotlin file HelloWorld.kt, the compiler creates HelloWorldKt class.$$$The println() function calls System.out.println() internally.If you are using IntelliJ IDEA, put your mouse cursor next to println and go to Navigate > Declaration ( Shortcut: Ctrl + B . For Mac: Cmd + B), this will open Console.kt (declaration file). You can see that println() function is internally calling System.out.println().",
https://www.programiz.com/kotlin-programming/variable-types,Kotlin Variables and Basic Types,Kotlin Basic Types$$$Kotlin Arrays$$$Kotlin Strings$$$How to declare a variable in Kotlin?$$$Difference Between var and val$$$Number Type$$$Recommended Readings$$$Table of Contents,,"In this tutorial, you will learn about variables, how to create them, and basic data types that Kotlin supports for creating variables.|||As you know, a variable is a location in memory (storage area) to hold data.|||To indicate the storage area, each variable should be given a unique name (identifier). Learn more about How to name a variable in Kotlin?|||To declare a variable in Kotlin, either var or val keyword is used. Here is an example:|||The difference in using var and val is discussed later in the article. For now, let's focus on variable declaration.|||Here, language is a variable of type String, and score is a variable of type Int. You don't have to specify the type of variables; Kotlin implicitly does that for you. The compiler knows this by initializer expression (""French"" is a String, and 95 is an integer value in the above program). This is called type inference in programming.|||However, you can explicitly specify the type if you want to:|||We have initialized variable during declaration in above examples. However, it's not necessary. You can declare variable and specify its type in one statement, and initialize the variable in another statement later in the program.|||Here are few examples that results into error.|||Here, the type of language variable is not explicitly specified, nor the variable is initialized during declaration.|||​​​​Here, we are trying to assign 14 (integer value) to variable of different type (String).|||Here are few examples:|||Here, language variable is reassigned to German. Since, the variable is declared using var, this code work perfectly.|||You cannot reassign language variable to German in the above example because the variable is declared using val.|||Now, you know what Kotlin variables are, it's time to learn different values a Kotlin variable can take.|||Kotlin is a statically typed language like Java. That is, the type of a variable is known during the compile time. For example,|||Here, the compiler knows that language is of type Int, and marks is of type Double before the compile time.|||The built-in types in Kotlin can be categorized as:|||Numbers in Kotlin are similar to Java. There are 6 built-in types representing numbers.|||When you run the program, the output will be:|||When you run the program, the output will be:|||When you run the program, the output will be:|||If you assign an integer between -231 to 231-1 to a variable without explicitly specifying its type, the variable will be of Int type. For example,||||||If you are using IntelliJ IDEA, you can place cursor inside the variable and press Ctrl + Shift + P to see its type.|||When you run the program, the output will be:|||If you assign an integer value greater than 231-1 or less than -231 to a variable (without explicitly specifying its type), the variable will be of Long type. For example,|||Similarly, you can use capital letter L to specify that the variable is of type Long. For example,|||When you run the program, the output will be:|||When you run the program, the output will be:|||Notice that, we have used 19.5F instead of 19.5 in the above program. It is because 19.5 is a Double literal, and you cannot assign Double value to a variable of type Float.|||To tell compiler to treat 19.5 as Float, you need to use F at the end.|||If you are not sure what number value a variable will be assigned in the program, you can specify it as Number type. This allows you to assign both integer and floating-point value to the variable (one at a time). For example:|||When you run the program, the output will be:|||To learn more, visit: Kotlin smart casts|||To represent a character in Kotlin, Char types are used.|||Unlike Java, Char types cannot be treated as numbers. Visit this page to learn more about Java char Type.|||When you run the program, the output will be:|||In Java, you can do something like:|||However, the following code gives error in Kotlin.|||Booleans are used in decision making statements (will be discussed in later chapter).|||An array is a container that holds data (values) of one single type. For example, you can create an array that can hold 100 values of Int type.|||In Kotlin, arrays are represented by the Array class. The class has get and set functions, size property, and a few other useful member functions.|||To learn in detail about arrays, visit: Kotlin Arrays|||In Kotlin, strings are represented by the String class. The string literals such as ""this is a string"" is implemented as an instance of this class.|||To learn in detail about strings, vist: Kotlin Strings","val (Immutable reference) - The variable declared using val keyword cannot be changed once the value is assigned. It is similar to final variable in Java.$$$var (Mutable reference) - The variable declared using var keyword can be changed later in the program. It corresponds to regular Java variable.$$$Numbers$$$Characters$$$Booleans$$$Arrays$$$Byte$$$Short$$$Int$$$Long$$$Float$$$Double$$$The Byte data type can have values from -128 to 127 (8-bit signed two's complement integer).$$$It is used instead of Int or other integer data types to save memory if it's certain that the value of a variable will be within [-128, 127]$$$Example:fun main(args : Array<String>) {    val range: Byte = 112    println(""$range"")    // The code below gives error. Why?    // val range1: Byte = 200}$$$The Short data type can have values from -32768 to 32767 (16-bit signed two's complement integer).$$$It is used instead of other integer data types to save memory if it's certain that the value of the variable will be within [-32768, 32767].$$$Example:$$$The Int data type can have values from -231 to 231-1 (32-bit signed two's complement integer).$$$Example:$$$The Long data type can have values from -263 to 263-1 (64-bit signed two's complement integer).$$$Example:$$$The Double type is a double-precision 64-bit floating point.$$$Example:$$$The Float data type is a single-precision 32-bit floating point. Learn more about single precision and double precision floating point if you are interested.$$$Example:$$$The Boolean data type has two possible values, either true or false.$$$Example:$$$Type conversion in Kotlin$$$Smart casts in Kotlin$$$Kotlin nullable types$$$How to declare a variable in Kotlin?$$$Difference Between var and val$$$Kotlin Basic Types$$$NumbersByteShortIntLongDoubleFloat$$$Char$$$Boolean$$$Byte$$$Short$$$Int$$$Long$$$Double$$$Float",,
https://www.programiz.com/kotlin-programming/operators,"Kotlin Operators: Arithmetic, Assignment Operator and More",1. Arithmetic Operators$$$2. Assignment Operators$$$3. Unary prefix and Increment / Decrement Operators$$$4. Comparison and Equality Operators$$$5. Logical Operators$$$6. in Operator$$$7. Index access Operator$$$8. Invoke Operator$$$Example: Arithmetic Operators$$$Example: Concatenation of Strings$$$How arithmetic operators actually work?$$$Example: Assignment Operators$$$Example: Unary Operators$$$Example: Comparison and Equality Operators$$$Example: Logical Operators$$$Example: in Operator$$$Example: Index access Operator$$$Bitwise Operation$$$Table of Contents,,"Kotlin has a set of operators to perform arithmetic, assignment, comparison operators and more. You will learn to use these operators in this article.|||Operators are special symbols (characters) that carry out operations on operands (variables and values). For example, + is an operator that performs addition.|||In Java variables article, you learned to declare variables and assign values to variables. Now, you will learn to use operators perform various operations on them.|||Here's a list of arithmetic operators in Kotlin:|||When you run the program, the output will be:|||The + operator is also used for the concatenation of String values.|||When you run the program, the output will be:|||Suppose, you are using + arithmetic operator to add two numbers a and b.|||Under the hood, the expression a + b calls a.plus(b) member function. The plus operator is overloaded to work with String values and other basic data types (except Char and Boolean).|||You can also use + operator to work with user-defined types (like objects) by overloading plus() function.|||Recommended Reading: Kotlin Operator Overloading|||Here's a table of arithmetic operators and their corresponding functions:|||Assignment operators are used to assign value to a variable. We have already used simple assignment operator = before.|||Here, 5 is assigned to variable age using = operator.|||Here's a list of all assignment operators and their corresponding functions:|||When you run the program, the output will be:|||Recommended Reading: Overloading assignment operators in Kotlin.|||Here's a table of unary operators, their meaning, and corresponding functions:|||When you run the program, the output will be:|||Recommended Reading: Overloading Unary Operators|||Here's a table of equality and comparison operators, their meaning, and corresponding functions:|||Comparison and equality operators are used in control flow such as if expression, when expression, and loops.||||||When you run the program, the output will be:|||Recommended Reading: Overloading of Comparison and Equality Operators in Kotlin|||There are two logical operators in Kotlin: || and &&|||Here's a table of logical operators, their meaning, and corresponding functions.|||Note that, or and and are functions that support infix notation.|||Logical operators are used in control flow such as if expression, when expression, and loops.|||When you run the program, the output will be:|||Recommended Reading: Overloading of Logical Operators in Kotlin|||The in operator is used to check whether an object belongs to a collection.|||When you run the program, the output will be:|||Recommended Reading: Kotlin in Operator Overloading|||Here are some expressions using index access operator with corresponding functions in Kotlin.|||When you run the program, the output will be:|||Recommended Reading: Kotlin Index access operator Overloading|||Here are some expressions using invoke operator with corresponding functions in Kotlin.|||In Kotlin, parenthesis are translated to call invoke member function.|||Recommended Reading: Invoke Operator Overloading in Kotlin|||Unlike Java, there are no bitwise and bitshift operators in Kotlin. To perform these task, various functions (supporting infix notation) are used:|||Visit this page to learn more about Bitwise Operations in Kotlin.|||Also, there is no ternary operator in Kotlin unlike Java.",shl - Signed shift left$$$shr - Signed shift right$$$ushr - Unsigned shift right$$$and - Bitwise and$$$or - Bitwise or$$$xor - Bitwise xor$$$inv - Bitwise inversion$$$What is an operator?$$$Arithmetic OperatorsExampleHow (arithmetic) operators work under the hood?$$$Assignment OperatorExample$$$Unary prefix and Increment/DecrementExample$$$Comparison and Equality OperatorsExample$$$Logical OperatorsExample$$$in OperatorExample$$$Index Access Operators$$$Invoke Operator$$$Example$$$How (arithmetic) operators work under the hood?$$$Example$$$Example$$$Example$$$Example$$$Example,,"Operator|||Meaning$$$+|||Addition (also used for string concatenation)$$$-|||Subtraction Operator$$$*|||Multiplication Operator$$$/|||Division Operator$$$%|||Modulus Operator$$$Expression|||Function name|||Translates to$$$a + b|||plus|||a.plus(b)$$$a - b|||minus|||a.minus(b)$$$a * b|||times|||a.times(b)$$$a / b|||div|||a.div(b)$$$a % b|||mod|||a.mod(b)$$$Expression|||Equivalent to|||Translates to$$$a +=b|||a = a + b|||a.plusAssign(b)$$$a -= b|||a = a - b|||a.minusAssign(b)$$$a *= b|||a = a * b|||a.timesAssign(b)$$$a /= b|||a = a / b|||a.divAssign(b)$$$a %= b|||a = a % b|||a.modAssign(b)$$$Operator|||Meaning|||Expression|||Translates to$$$+|||Unary plus|||+a|||a.unaryPlus()$$$-|||Unary minus (inverts sign)|||-a|||a.unaryMinus()$$$!|||not (inverts value)|||!a|||a.not()$$$++|||Increment: increases value by1|||++a|||a.inc()$$$--|||Decrement: decreases value by 1|||--a|||a.dec()$$$Operator|||Meaning|||Expression|||Translates to$$$>|||greater than|||a > b|||a.compareTo(b) > 0$$$<|||less than|||a < b|||a.compareTo(b) < 0$$$>=|||greater than or equals to|||a >= b|||a.compareTo(b) >= 0$$$<=|||less than or equals to|||a < = b|||a.compareTo(b) <= 0$$$==|||is equal to|||a == b|||a?.equals(b) ?: (b === null)$$$!=|||not equal to|||a != b|||!(a?.equals(b) ?: (b === null))$$$Operator|||Description|||Expression|||Corresponding Function$$$|||||true if either of the Boolean expression is true|||(a>b)||(a<c)|||(a>b)or(a<c)$$$&&|||true if all Boolean expressions are true|||(a>b)&&(a<c)|||(a>b)and(a<c)$$$Operator|||Expression|||Translates to$$$in|||a in b|||b.contains(a)$$$!in|||a !in b|||!b.contains(a)$$$Expression|||Translated to$$$a[i]|||a.get(i)$$$a[i, n]|||a.get(i, n)$$$a[i1, i2, ..., in]|||a.get(i1, i2, ..., in)$$$a[i] = b|||a.set(i, b)$$$a[i, n] = b|||a.set(i, n, b)$$$a[i1, i2, ..., in] = b|||a.set(i1, i2, ..., in, b)$$$Expression|||Translated to$$$a()|||a.invoke()$$$a(i)|||a.invoke(i)$$$a(i1, i2, ..., in)|||a.inkove(i1, i2, ..., in)$$$a[i] = b|||a.set(i, b)"
https://www.programiz.com/kotlin-programming/type-conversion,Kotlin Type Conversion,Conversion from Larger to Smaller Type$$$Table of Contents,,"In this article, you will learn about type conversion; how to convert a variable of one type to another with the help of example.|||In Kotlin, a numeric value of one type is not automatically converted to another type even when the other type is larger. This is different from how Java handles numeric conversions. For example;|||In Java,|||Here, value of number1 of type int is automatically converted to type long, and assigned to variable number2.|||In Kotlin,|||Though the size of Long is larger than Int, Kotlin doesn't automatically convert Int to Long. |||Instead, you need to use toLong() explicitly (to convert to type Long). Kotlin does it for type safety to avoid surprises.||||||Here's a list of functions in Kotlin used for type conversion:|||Note, there is no conversion for Boolean types.|||The functions mentioned above can be used in both directions (conversion from larger to smaller type and conversion from smaller to larger type).|||However, conversion from larger to smaller type may truncate the value. For example,|||When you run the program, the output will be:|||Also check out these articles related to type conversion:","toByte() $$$toShort()$$$toInt()$$$toLong()$$$toFloat()$$$toDouble()$$$toChar()$$$String to Int, and Int to String Conversion$$$Long to Int, and Int to Long Conversion$$$Double to Int, and Int to Double Conversion$$$Long to Double, and Double to Long Conversion$$$Char to Int, and Int to Char$$$String to Long, and Long to String Conversion$$$String to Array, and Array to String Conversion$$$String to Boolean, and Boolean to String Conversion$$$String to Byte, and Byte to String Conversion$$$Int to Byte, and Byte to Int Conversion$$$Introduction and Comparison With Java$$$List of Conversion Functions in Kotlin$$$Conversion from Larger to Smaller Type",,
https://www.programiz.com/kotlin-programming/statement-expression,"Kotlin Expression, Statements and Blocks",Kotlin Expressions$$$Kotlin Statements$$$Kotlin Blocks$$$Table of Contents,,"In this article, you will learn about Kotlin expressions, Kotlin statements, difference between expression and statement, and Kotlin blocks.|||Expressions consist of variables, operators etc that evaluates to a single value.|||Let's take an example,|||Here, 90 + 25 is an expression that returns Int value.|||In Kotlin, if is an expression unlike Java (In Java, if is a statement). For example,|||Here, if (a > b) a else b is an expression. Then value of the expression is assigned to max variable in the above program. Visit this page to learn more about Kotlin if expression.|||Statements are everything that make up a complete unit of execution. For example,||||||Here, 90 + 25 is an expression that returns 115, and val score = 9*5; is a statement.|||Expressions are part of statements.|||Some examples:|||A block is a group of statements (zero or more) that is enclosed in curly braces { }. For example,|||There are two statements print(""Hey "") and print("" jude!"") inside if branch block.|||Similarly, the main() function also has a block body.",Kotlin Expressions$$$Kotlin Statements$$$Kotlin Blocks,,
https://www.programiz.com/kotlin-programming/comments,Kotlin Comments,Traditional comment /* ... */$$$End of Line Comment //$$$Use Comments the Right Way$$$Table of Contents,,"In this article, you will learn about Kotlin comments, and why and how to use them.|||In programming, comments are portion of the program intended for you and your fellow programmers to understand the code. They are completely ignored by the Kotlin compiler (Kompiler).|||Similar like Java, there are two types of comments in Kotlin|||This is a multiline comment that can span over multiple lines. The Kotlin compiler ignores everything from /* to */. For example,|||The tradition comment is also used for documenting Kotlin code (KDoc) with a little variation. The KDoc comments starts with /** and ends with */.|||The compiler ignores everything from // to the end of the line. For example,||||||The program above contains two end of line comments:|||and|||Comments shouldn't be the substitute for a way to explain poorly written code in English. Write well structured and readable code, and then use comments.|||Some believe that code should be self-documenting and comments should be scarce. However, I have to disagree with it completely (It's my personal opinion). There is nothing wrong with using comments to explain complex algorithms, regex or scenarios where you have chosen one technique over other (for future reference) to solve the problem.|||In most cases, use comments to explain 'why' rather than 'how' and you are good to go.","/* ... */$$$// ....$$$What are comments in programming?$$$Kotlin Traditional comment$$$Kotlin End of Line Comment$$$Use comments, the right way",,
https://www.programiz.com/kotlin-programming/input-output,Kotlin Basic Input/Output (With Examples),Koltin Output$$$Kotlin Input$$$Difference Between println() and print()$$$Example 1: print() and println()$$$Example 2: Print Variables and Literals$$$Example 3: Print String Entered By the User$$$Example 4: Getting Integer Input from the User$$$Table of Contents,,"In this article, you will learn to display output to the screen, and take input from the user in Kotlin.|||You can use println() and print() functions to send output to the standard output (screen). Let's take an example:|||When you run the program, the output will be:|||Here, println() outputs the string (inside quotes).|||When you use println() function, it calls System.out.println() function internally. (System.out.println() is used to print output to the screen in Java).|||If you are using IntelliJ IDEA, put your mouse cursor next to println and go to Navigate > Declaration ( Shortcut: Ctrl + B . For Mac: Cmd + B), this will open Console.kt (declaration file). You can see that println() function is internally calling System.out.println().|||Similarly, when you use print() function, it calls System.out.print() function.|||When you run the program, the output will be:|||When you run the program, the output will be:|||In this section, you will learn to take input from the user..|||To read a line of string in Kotlin, you can use readline() function.||||||When you run the program, the output will be:|||It's possible to take input as a string using readLine() function, and convert it to values of other data type (like Int) explicitly.|||If you want input of other data types, you can use Scanner object.|||For that, you need to import Scanner class from Java standard library using:|||Then, you need to create Scanner object from this class.|||Now, the reader object is used to take input from the user.|||When you run the program, the output will be:|||Here, reader object of Scanner class is created. Then, the nextInt() method is called which takes integer input from the user which is stored in variable integer.|||To get Long, Float, double and Boolean input from the user, you can use nextLong(), nextFloat(), nextDouble() and nextBoolean() methods respectively.",print() - prints string inside the quotes.$$$println() - prints string inside the quotes similar like print() function. Then the cursor moves to the beginning of the next line.$$$Kotlin OutputExample: print() and println()Example: Print variables and literals$$$Kotlin InputExample: Print string entered by the userGetting Integer Input from the User$$$Example: print() and println()$$$Example: Print variables and literals$$$Example: Print string entered by the user$$$Getting Integer Input from the User,,
https://www.programiz.com/kotlin-programming/if-expression,Kotlin if...else Expression (With Examples),Traditional Usage of if...else$$$Kotlin if expression$$$Kotlin if..else..if Ladder$$$Kotlin Nested if Expression$$$Example: Traditional Usage of if...else$$$Example: Kotin if expression$$$Example: if block With Multiple Expressions$$$Example: if...else...if Ladder$$$Example: Nested if Expression$$$Table of Contents,,"In this article, you will learn to use if expression in Kotlin with the help of examples.|||The syntax of if...else is:|||if executes a certain section of code if the testExpression is evaluated to true. It can have optional else clause. Codes inside else clause are executed if the testExpression is false.|||When you run the program, the output will be:|||Unlike Java (and other many programming languages), if can be used an expression in Kotlin; it returns a value. Recommended Reading: Kotlin expression|||Here is an example:|||When you run the program, the output will be:|||The else branch is mandatory when using if as an expression.|||The curly braces are optional if the body of if has only one statement. For example,|||This is similar to ternary operator in Java. Hence, there is no ternary operator in Kotlin.||||||If the block of if branch contains more than one expression, the last expression is returned as the value of the block.|||When you run the program, the output will be:|||Recommended Reading: Kotlin when Statement|||You can return a block of code among many blocks in Kotlin using if..else...if ladder.|||This program checks whether number is positive number, negative number, or zero.|||An if expression can be inside the block of another if expression known as nested if expression.|||This program computes the largest number among three numbers.|||When you run the program, the output will be:",Traditional Usage of if...elseExample$$$Kotlin if expressionExample: if expressionExample: if block with multiple expressions$$$Kotlin if...else..if Ladder$$$Kotlin Nested if Expression$$$Example$$$Example: if expression$$$Example: if block with multiple expressions,,
https://www.programiz.com/kotlin-programming/when-expression,Kotlin when Expression (With Examples),Kotlin when Construct$$$Few possibilities$$$Example: Simple when Expression$$$Table of Contents,,"In this article, you will learn about when construct in Kotlin with the help of various examples.|||The when construct in Kotlin can be thought of as a replacement for Java switch Statement. It evaluates a section of code among many alternatives.|||When you run the program, the output will be something like:|||The program above takes an input string from the user (Recommended Reading: Get String Input from the User in Kotlin). Suppose, the user entered *. In this case, the expression a * b is evaluated, and the value is assigned to variable result.|||If none of the branch conditions are satisfied (user entered anything except +, -, *, or /) , else branch is evaluated.|||In the above example, we used when as an expression. However, it's not mandatory to use when as an expression. For example,|||When you run the program, the output will be something like:|||Here, when is not an expression (return value from when is not assigned to anything). In this case, the else branch is not mandatory.|||Combine two or more branch conditions with a comma. For example,||||||When you run the program, the output will be:|||Check value in the range. For example,|||When you run the program, the output will be:|||Check if a value is of a particular type.|||To check whether a value is of a particular type in runtime, we can use is and !is operator. For example,|||Use expressions as branch condition. For example,|||When you run the program, the output will be:",Kotlin when Expression$$$Example: Simple Example$$$Example: Combine two or more branch conditions$$$Example: Check value in the range$$$Example: Check if a value is of particular type$$$Example: Use expressions as branch condition,,
https://www.programiz.com/kotlin-programming/while-loop,Kotlin while and do...while Loop (With Examples),Kotlin while Loop$$$Kotlin do...while Loop$$$How while loop works?$$$Flowchart of while Loop$$$Example: Kotlin while Loop$$$Example: Compute sum of Natural Numbers$$$How do...while loop works?$$$Flowchart of do...while Loop$$$Example: Kotlin do...while Loop$$$Table of Contents,,"Loop is used in programming to repeat a specific block of code. In this article, you will learn to create while and do...while loops in Kotlin programming.|||Loop is used in programming to repeat a specific block of code until certain condition is met (test expression is false).|||Loops are what makes computers interesting machines. Imagine you need to print a sentence 50 times on your screen. Well, you can do it by using print statement 50 times (without using loops). How about you need to print a sentence one million times? You need to use loops.|||You will learn about two loops while and do..while in this article with the help of examples.|||If you are familiar with while and do...while loops in Java, you are already familiar with these loops in Kotlin as well.|||The syntax of while loop is:|||The test expression inside the parenthesis is a Boolean expression.|||If the test expression is evaluated to true,|||This process goes on until the test expression is evaluated to false.|||If the test expression is evaluated to false,||||||When you run the program, the output will be:|||Notice, ++i statement inside the while loop. After 5 iterations, variable i will be incremented to 6. Then, the test expression i <= 5 is evaluated to false and the loop terminates.|||If the body of loop has only one statement, it's not necessary to use curly braces { }. ||||||When you run the program, the output will be:|||Here, the variable sum is initialized to 0 and i is initialized to 100. In each iteration of while loop, variable sum is assigned sum + i, and the value of i is decreased by 1 until i is equal to 0. For better visualization,|||To learn more about test expression and how it is evaluated, visit comparison and logical operators.|||The do...while loop is similar to while loop with one key difference. The body of do...while loop is executed once before the test expression is checked.|||Its syntax is:|||The codes inside the body of do construct is executed once (without checking the testExpression). Then, the test expression is checked.|||If the test expression is evaluated to true, codes inside the body of the loop are executed, and test expression is evaluated again. This process goes on until the test expression is evaluated to false.|||When the test expression is evaluated to false, do..while loop terminates.||||||The program below calculates the sum of numbers entered by the user until user enters 0.|||To take input from the user, readline() function is used. Recommended Reading: Kotlin Basic Input|||When you run the program, the output will be something like:","statements inside the while loop are executed.$$$then, the test expression is evaluated again.$$$while loop is terminated.$$$Kotlin while LoopHow while loop works?Flowchart of while LoopExample$$$Kotlin do...while LoopHow do...while loop works?Flowchart of do...while LoopExample$$$How while loop works?$$$Flowchart of while Loop$$$Example$$$How do...while loop works?$$$Flowchart of do...while Loop$$$Example",,
https://www.programiz.com/kotlin-programming/for-loop,Kotlin for Loop (With Examples),Iterating Through an Array$$$Iterating Through a String$$$Example: Iterate Through a Range$$$Example: Different Ways to Iterate Through a Range$$$Table of Contents,,"The for loop in Kotlin iterates through anything that provides an iterator. In this article, you learn to create for loop (with the help of examples).|||There is no traditional for loop in Kotlin unlike Java and other languages.|||In Kotlin, for loop is used to iterate through ranges, arrays, maps and so on (anything that provides an iterator).|||The syntax of for loop in Kotlin is:|||Here, the loop iterates through the range and prints individual item.|||Output|||If the body of the loop contains only one statement (like above example), it's not necessary to use curly braces { }.|||It's possible to iterate through a range using for loop because ranges provides an iterator. To learn more, visit Kotlin iterators.|||Output|||Here's an example to iterate through a String array.||||||Output|||It's possible to iterate through an array with an index. For example,|||Output|||Note: Here, language.indices returns all all indices of each array elements.|||If you want to learn more about arrays, visit Kotlin arrays.|||Output|||Similar like arrays, you can iterate through a String with an index. For example,|||Output|||You will learn to iterate over a map using for loop in Kotin map article.",Kotlin for Loop (Introduction and Example)$$$Example: Different Ways to Iterate Through a Range$$$Iterating Through an Array$$$Iterating Through a String,,
https://www.programiz.com/kotlin-programming/break,Kotlin break (With Examples),How break works?$$$Kotlin Labeled break$$$Example: Kotlin break$$$Example: Calculate Sum Until User enters 0$$$How labeled break works?$$$Table of Contents,,"In this tutorial, you will learn to use break to terminate a loop. Also, you will also learn about break labels.|||Suppose you are working with loops. It is sometimes desirable to terminate the loop immediately without checking the test expression.|||In such case, break is used. It terminates the nearest enclosing loop when encountered (without checking the test expression). This is similar to how break statement works in Java.|||It is almost always used with if..else construct. For example,|||If testExpression is evaluated to true, break is executed which terminates the for loop.|||When you run the program, the output will be:|||When the value of i is equal to 5, expression i == 5 inside if is evaluated to true, and break is executed. This terminates the for loop.|||The program below calculates the sum of numbers entered by the user until user enters 0.|||Visit Kotlin Basic Input Output to learn more on how to take input from the user.|||When you run the program, the output will be:|||In the above program, the test expression of the while loop is always true.|||Here, the while loop runs until user enters 0. When user inputs 0, break is executed which terminates the while loop.||||||What you have learned till now is an unlabeled form of break, which terminates the nearest enclosing loop. There is another way break can be used (labeled form) to terminate the desired loop (can be an outer loop).|||Label in Kotlin starts with an identifier which is followed by @.|||Here, test@ is a label marked at the outer while loop. Now, by using break with a label (break@test in this case), you can break the specific loop.|||Here's an example:|||When you run the program, the output will be:|||Here, when i == 2 expression is evaluated to true, break@first is executed which terminates the loop marked with label first@.|||Here's a little variation of the above program.|||In the program below, break terminates the loop marked with label @second.|||When you run the program, the output will be:|||Note: Since, break is used to terminate the innermost loop in this program, it is not necessary to use labeled break in this case.|||There are 3 structural jump expressions in Kotlin: break, continue and return. To learn about continue and return expression, visit:",Kotlin continue$$$Kotlin function$$$Kotlin break$$$How break works in Kotlin?$$$Example: Kotlin break$$$Labeled break$$$How labeled break works?$$$Example: Labeled break,,
https://www.programiz.com/kotlin-programming/continue,Kotlin continue (With Examples),How continue works?$$$Kotlin Labeled continue$$$Example: Kotlin continue$$$Example: Calculate Sum of Positive Numbers Only$$$How labeled continue works?$$$Example: labeled continue$$$Table of Contents,,"In this tutorial, you will learn to use continue to skip the current iteration of a loop. Also, you will also learn about continue labels in this article.|||Suppose you are working with loops. It is sometimes desirable to skip the current iteration of the loop.|||In such case, continue is used. The continue construct skips the current iteration of the enclosing loop, and the control of the program jumps to the end of the loop body.|||It is almost always used with if...else construct. For example,|||If the testExpression2 is evaluated to true, continue is executed which skips all the codes inside while loop after it for that iteration.|||When you run the program, the output will be:|||When the value of i is greater than 1 and less than 5, continue is executed, which skips the execution of|||statement.|||However, the statement|||is executed in each iteration of the loop because this statement exists before the continue construct.||||||The program below calculates the sum of maximum of 6 positive numbers entered by the user. If the user enters negative number or zero, it is skipped from calculation.|||Visit Kotlin Basic Input Output to learn more on how to take input from the user.|||When you run the program, the output will be:|||What you have learned till now is unlabeled form of continue, which skips current iteration of the nearest enclosing loop. continue can also be used to skip the iteration of the desired loop (can be outer loop) by using continue labels.|||Label in Kotlin starts with an identifier which is followed by @.|||Here, outerloop@ is a label marked at outer while loop. Now, by using continue with the label (continue@outerloop in this case), you can skip the execution of codes of the specific loop for that iteration.|||When you run the program, the output will be:|||The use of labeled continue is often discouraged as it makes your code hard to understand. If you are in a situation where you have to use labeled continue, refactor your code and try to solve it in a different way to make it more readable.|||There are 3 structural jump expressions in Kotlin: break, continue and return. To learn about break and return expression, visit:",Kotlin break$$$Kotlin function$$$Kotlin continue$$$How continue works in Kotlin?$$$Example: Kotlin continue$$$Labeled continue$$$How labeled continue works?$$$Example: labeled continue,,
https://www.programiz.com/kotlin-programming/functions,Kotlin Function (With Example),Types of Functions$$$Kotlin Standard Library Function$$$User-defined Functions$$$How to create a user-defined function in Kotlin?$$$How to call a function?$$$Example: Simple Function Program$$$Example: Add Two Numbers Using Function$$$How functions with arguments and return value work?$$$Example: Display Name by Using Function$$$Table of Contents,,"In this article, you'll learn about functions; what functions are, its syntax and how to create a user-function in Kotlin.|||In programming, function is a group of related statements that perform a specific task.|||Functions are used to break a large program into smaller and modular chunks. For example, you need to create and color a circle based on input from the user. You can create two functions to solve this problem:|||Dividing a complex program into smaller components makes our program more organized and manageable.|||Furthermore, it avoids repetition and makes code reusable.|||Depending on whether a function is defined by the user, or available in standard library, there are two types of functions:|||The standard library functions are built-in functions in Kotlin that are readily available for use. For example,|||When you run the program, the output will be:|||Here is a link to the Kotlin Standard Library for you to explore.|||As mentioned, you can create functions yourself. Such functions are called user-defined functions.|||Before you can use (call) a function, you need to define it.|||Here's how you can define a function in Kotlin:|||To define a function in Kotlin, fun keyword is used. Then comes the name of the function (identifier). Here, the name of the function is callMe.|||In the above program, the parenthesis ( ) is empty. It means, this function doesn't accept any argument. You will learn about arguments later in this article.|||The codes inside curly braces { } is the body of the function.|||You have to call the function to run codes inside the body of the function. Here's how:|||This statement calls the callMe() function declared earlier.|||When you run the program, the output will be:|||The callMe() function in the above code doesn't accept any argument.||||||Also, the function doesn't return any value (return type is Unit).|||Let's take another function example. This function will accept arguments and also returns a value.|||When you run the program, the output will be:|||Here, two arguments number1 and number2 of type Double are passed to the addNumbers() function during function call. These arguments are called actual arguments.|||The parameters n1 and n2 accepts the passed arguments (in the function definition). These arguments are called formal arguments (or parameters).|||In Kotlin, arguments are separated using commas. Also, the type of the formal argument must be explicitly typed.|||Note that, the data type of actual and formal arguments should match, i.e., the data type of first actual argument should match the type of first formal argument. Similarly, the type of second actual argument must match the type of second formal argument and so on.|||Here,|||is the return statement. This code terminates the addNumbers() function, and control of the program jumps to the main() function.|||In the program, sumInteger is returned from addNumbers() function. This value is assigned to the variable result.|||Notice,|||If the function doesn't return any value, its return type is Unit. It is optional to specify the return type in the function definition if the return type is Unit.|||When you run the program, the output will be:|||Here, the getName() function takes two String arguments, and returns a String.|||You can omit the curly braces { } of the function body and specify the body after = symbol if the function returns a single expression (like above example).|||It is optional to explicitly declare the return type in such case because the return type can be inferred by the compiler. In the above example, you can replace|||with|||This is just the brief introduction to functions in Kotlin. Recommended articles related to functions:","createCircle() Function$$$colorCircle() Function$$$Kotlin Standard Library Function$$$User-defined functions$$$print() is a library function that prints message to the standard output stream (monitor).$$$sqrt() returns square root of a number (Double value)$$$both sumInteger and result are of type Int.$$$the return type of the function is specified in the function definition.// return type is Intfun addNumbers(n1: Double, n2: Double): Int {    ... .. ...}$$$Kotlin inline functions$$$Kotlin infix functions$$$Kotlin function scope$$$Kotlin Default and Named Arguments$$$Kotlin Recursion$$$Kotlin Tail Recursive function$$$Kotlin Extension Function$$$Kotlin High-Order Functions & Lambdas$$$Introduction to Function$$$Standard Library Function$$$User-defined FunctionHow to create a user-defined function?How to call a function?Example: Function With No Arguments and no Return ValueExample: Function With Arguments and a Return ValueHow functions with arguments and return value work?$$$Recommended Function Articles for you to Read$$$How to create a user-defined function?$$$How to call a function?$$$Example: Function With No Arguments and no Return Value$$$Example: Function With Arguments and a Return Value$$$How functions with arguments and return value work?",,
https://www.programiz.com/kotlin-programming/infix-notation,Kotlin Function Call Using Infix Notation,Example: Kotlin or & and function$$$How to create a function with infix notation?$$$Example: User-defined Function With Infix Notation$$$Table of Contents,,"In this article, you will learn to use infix notation to call a function in Kotlin (with the help of examples).|||Before you learn how to create a function having infix notation, let's explore two commonly used infix functions.|||When you use || and && operations, the compiler look up for or and and functions respectively, and calls them under the hood.|||These two functions support infix notation.|||When you run the program, the output will be:|||In the above program, a or b instead of a.or(b), and a and b instead of a.and(b) is used. It was possible because these two functions support infix notation.||||||You can make a function call in Kotlin using infix notation if the function|||When you run the program, the output will be:|||Here, createPyramid() is an infix function that creates a pyramid structure. It is a member function of class Structure, takes only one parameter of type Int, and starts with keyword infix.|||The number of rows of the pyramind depends on the argument passed to the function.",is a member function (or an extension function).$$$has only one single parameter.$$$is marked with infix keyword.$$$Introduction$$$Example: or & and Infix Functions$$$How to create a function with infix notation?$$$Example: User-defined Infix Function,,
https://www.programiz.com/kotlin-programming/default-named-arguments,Kotlin Default and Named Arguments (With Examples),Kotlin Default Argument$$$Kotlin named argument$$$How default arguments works?$$$Example: Kotlin Default Argument$$$Example: Kotlin named argument$$$Table of Contents,,"In this article, you will learn about default and named arguments with the help of examples.|||In Kotlin, you can provide default values to parameters in function definition.|||If the function is called with arguments passed, those arguments are used as parameters. However, if the function is called without passing argument(s), default arguments are used.|||Case I: All arguments passed|||The function foo() takes two arguments. The arguments are provided with default values. However, foo() is called by passing both arguments in the above program. Hence, the default arguments are not used.|||The value of letter and number will be 'x' and 2 respectively inside the foo() function.|||Case II: All arguments are not passed|||Here, only one (first) argument is passed to the foo() function. Hence, the first argument uses the value passed to the function. However, second argument number will take the default value since the second argument is not passed during function call.|||The value of letter and number will be 'y' and 15 respectively inside the foo() function.|||Case III: No argument is passed||||||Here, the foo() function is called without passing any argument. Hence, both arguments uses its default values.|||The value of letter and number will be 'a' and 15 respectively inside the foo() function.|||When you run the program, the output will be:|||Before talking about named argument, let us consider a little modification of the above code:|||Here, we are trying to pass second argument to the displayBorder() function, and use default argument for first argument. However, this code will give use an error. It's because the compiler thinks we are trying to provide 5 (Int value) to character (Char type).|||To solve this situation, named arguments can be used. Here' how:|||When you run the program, the output will be:|||In the above program, we are using named argument (length = 5) specifying that the length parameter in the function definition should take this value (doesn't matter the position of the argument).|||The first argument character uses the default value '=' in the program.",Kotlin default argument$$$How default argument works?Case I: All arguments passedCase II: All arguments are not passedCase III: No argument is not passed$$$Example: Default Argument$$$Kotlin named argument$$$Example: Kotlin named argument$$$Case I: All arguments passed$$$Case II: All arguments are not passed$$$Case III: No argument is not passed,,
https://www.programiz.com/kotlin-programming/recursion,Kotlin Recursion and Tail Recursive Function (With Examples),How does recursion work in programming?$$$Example: Find factorial of a Number using Recursion$$$How this program works?$$$Kotlin Tail Recursion$$$What is tail recursion?$$$Condition for tail recursion$$$Example: Tail Recursion$$$Example: Factorial Using Tail Recursion$$$Table of Contents,,"In this article, you will learn to create recursive functions; a function that calls itself. Also, you will learn about tail recursive function.|||A function that calls itself is known as recursive function. And, this technique is known as recursion.|||A physical world example would be to place two parallel mirrors facing each other. Any object in between them would be reflected recursively.|||Here, the recurse() function is called from the body of recurse() function itself. Here's how this program works:|||Here, the recursive call continues forever causing infinite recursion.|||To avoid infinite recursion, if...else (or similar approach) can be used where one branch makes the recursive call and other doesn't.|||When you run the program, the output will be:|||The recursive call of the factorial() function can be explained in the following figure:|||Here are the steps involved:|||Tail recursion is a generic concept rather than the feature of Kotlin language. Some programming languages including Kotlin use it to optimize recursive calls, whereas other languages (eg. Python) do not support them.|||In normal recursion, you perform all recursive calls first, and calculate the result from return values at last (as show in the above example). Hence, you don't get result until all recursive calls are made.|||In tail recursion, calculations are performed first, then recursive calls are executed (the recursive call passes the result of your current step to the next recursive call). This makes the recursive call equivalent to looping, and avoids the risk of stack overflow.||||||A recursive function is eligible for tail recursion if the function call to itself is the last operation it performs. For example,|||Example 1: Not eligible for tail recursion because the function call to itself n*factorial(n-1) is not the last operation.|||Example 2: Eligible for tail recursion because function call to itself fibonacci(n-1, a+b, a) is the last operation.|||To tell compiler to perform tail recursion in Kotlin, you need to mark the function with tailrec modifier.|||When you run the program, the output will be:|||This program computes the 100th term of the Fibonacci series. Since, the output can be a very large integer, we have imported BigInteger class from Java standard library.|||Here, the function fibonacci() is marked with tailrec modifier and the function is eligible for tail recursive call. Hence, the compiler optimizes the recursion in this case.|||If you try to find the 20000th term (or any other big integer) of the Fibonacci series without using tail recursion, the compiler will throw java.lang.StackOverflowError exception. However, our program above works just fine. It's because we have used tail recursion which uses efficient loop based version instead of traditional recursion.|||The example to compute factorial of a number in the above example (first example) cannot be optimized for tail recursion. Here's a different program to perform the same task.|||When you run the program, the output will be:|||The compiler can optimize the recursion in this program as the recursive function is eligible for tail recursion, and we have used tailrec modifier that tells compiler to optimize the recursion.",Recursion Introduction$$$How recursion works?$$$Example: Factorial of a Number Using Recursion$$$How factorial program works?$$$Kotlin Tail Recursion$$$Condition for Tail Recursion$$$Example: Fibonacci Term Using Tail Recursion$$$Example: Factorial Using Tail Recursion,,
https://www.programiz.com/kotlin-programming/class-objects,Kotlin Class and Objects (With Examples),Object-oriented Programming (OOP)$$$Kotlin Class$$$How to define a class in Kotlin?$$$Kotlin Objects$$$How to access members?$$$Example: Kotlin Class and Object$$$Table of Contents,,"In this article, you'll be introduced to Object-oriented programming in Kotlin. You'll learn what a class is, how to create objects and use it in your program.|||Kotlin supports both functional and object-oriented programming.|||Kotlin supports features such as higher-order functions, function types and lambdas which makes it a great choice for working in functional programming style. You will learn about these concept in later chapters. This article will focus on object-oriented style of programming in Kotlin.|||In object-oriented style of programming, you can divide a complex problem into smaller sets by creating objects.|||These objects share two characteristics:|||Let's take few examples:|||You will learn about detail features of an object-oriented programming like: data encapsulation, inheritance and polymorphism as we go on. This article will focus on the basics to keep things simple.|||Recommended reading: What is an object?|||Before you create objects in Kotlin, you need to define a class.|||A class is a blueprint for the object.|||We can think of class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows etc. Based on these descriptions we build the house. House is the object.|||Since, many houses can be made from the same description, we can create many objects from a class.|||To define a class in Kotlin, class keyword is used:|||Here's an example:|||Here, we defined a class named Lamp.|||The class has one property isOn (defined in same way as variable), and two member functions turnOn() and turnOff().|||Recommended Reading: Kotlin functions|||In Kotlin, either the property must be initialized or must be declared abstract (Visit: Kotlin Abstract Class to learn more). In the above example, isOn property is initialized to false.|||Classes, objects, properties, member function etc. can have visibility modifiers. For example, the isOn property is private. This means, the isOn property can be changed from only inside the Lamp class.||||||Other visibility modifiers are:|||You will learn about protected and internal modifiers later in Kotlin visibility modifiers article.|||If you do not specify the visibility modifier, it will be public by default.|||In the above program, turnOn() and turnOff() member functions are public whereas, isOn property is private.|||When class is defined, only the specification for the object is defined; no memory or storage is allocated.|||To access members defined within the class, you need to create objects. Let's create objects of Lamp class.|||This program creates two objects l1 and l2 of class Lamp. The isOn property for both lamps l1 and l2 will be false.|||You can access properties and member functions of a class by using . notation. For example,|||This statement calls turnOn() function for l1 object.|||Let's take another example:|||Here, we tried to assign true to isOn property of l2 object. Note that, isOn property is private, and if you try to access isOn from outside the class, an exception is thrown.|||When you run the program, the output will be:|||In the above program,|||Notice that, the isOn property is initialized to false inside the class. When an object of the class is created, isOn property for the object is initialized to false automatically. So, it's not necessary for l2 object to call turnOff() to set isOn property to false.|||For example:|||When you run the program, the output will be:|||This article is just an introduction to object-oriented programming in Kotlin. Check these chapters in sequence to learn more:","state$$$behavior$$$It can be in on or off state.$$$You can turn on and turn off lamp (behavior).$$$It has current gear, two wheels, number of gear etc. states.$$$It has braking, accelerating, changing gears etc. behavior.$$$private - visible (can be accessed) from inside the class only.$$$public - visible everywhere.$$$protected - visible to the class and its subclass.$$$internal - any client inside the module can access them.$$$Lamp class is created.$$$The class has a property isOn and three member functions turnOn(), turnOff() and displayLightStatus().$$$Two objects l1 and l2 of Lamp class are created in the main() function.$$$Here, turnOn() function is called using l1 object: l1.turnOn(). This method sets isOn instance variable of l1 object to true.$$$And, turnOff() function is called using l2 object: l1.turnOff(). This method sets isOff instance variable of l2 object to false.$$$Then, displayLightStatus() function is called for l1 and l2 objects which prints appropriate message depending on whether isOn property is true or false.$$$Kotlin Constructors and Initializers$$$Kotlin this Keyword$$$Kotlin Nested Class$$$Introduction to OOP$$$Kotlin Class$$$How to define a class in Kotlin?$$$Access Modifiers$$$Kotlin Objects$$$How to access members?$$$Example: Kotlin Class and Objects","Lamp is an objectIt can be in on or off state.You can turn on and turn off lamp (behavior).$$$Bicycle is an objectIt has current gear, two wheels, number of gear etc. states.It has braking, accelerating, changing gears etc. behavior.",
https://www.programiz.com/kotlin-programming/constructors,Kotlin Constructors and Initializers (With Examples),Primary Constructor$$$Kotlin Secondary Constructor$$$Example: Primary Constructor$$$Primary Constructor and Initializer Blocks$$$Default Value in Primary Constructor$$$Example: Kotlin Secondary Constructor$$$Table of Contents,,"In this article, you will learn about constructors in Kotlin (both primary and secondary constructors) as well as initializer blocks with the help of examples.|||A constructor is a concise way to initialize class properties.|||It is a special member function that is called when an object is instantiated (created). However, how they work in Kotlin is slightly different.|||In Kotlin, there are two constructors:|||The primary constructor is part of the class header. Here's an example:|||The block of code surrounded by parentheses is the primary constructor: (val firstName: String, var age: Int).|||The constructor declared two properties: firstName (read-only property as it's declared using keyword val) and age (read-write property as it is declared with keyword var).|||When you run the program, the output will be:|||When the object of Person class is created, ""Joe"" and 25 values are passed as if Person is a function.|||This initializes firstName and age properties of person1 object to ""Joe"" and 25 respectively.|||There are other ways of using primary constructors.|||The primary constructor has a constrained syntax, and cannot contain any code.|||To put the initilization code (not only code to initialize properties), initializer block is used. It is prefixed with init keyword. Let's modify the above example with initializer block:|||When you run the program, the output will be:|||Here, parameters fName and personAge inside the parenthesis accepts values ""Joe"" and 25 respectively when person1 object is created. However, fName and personAge are used without using var or val, and are not properties of the Person class.|||The Person class has two properties firstName, and age are declared.||||||When person1 object is created, code inside initializer block is executed. The initializer block not only initializes its properties but also prints them.|||Here is another way to perform the same task:|||To distinguish the constructor parameter and property, different names are used (fName and firstName, and personAge and age). It's more common to use _firstName and _age instead of completely different name for constructor parameters. For example:|||You can provide default value to constructor parameters (similar to providing default arguments to functions). For example:|||When you run the program, the output will be:|||In Kotlin, a class can also contain one or more secondary constructors. They are created using constructor keyword.|||Secondary constructors are not that common in Kotlin. The most common use of secondary constructor comes up when you need to extend a class that provides multiple constructors that initialize the class in different ways. Be sure to check Kotlin Inheritance before you learn it.|||Here's how you can create a secondary constructor in Kotlin:|||Here, the Log class has two secondary constructors, but no primary constructor.|||You can extend the class as:|||Here, constructors of the derived class AuthLog calls the corresponding constructor of the base class Log. For that, super() is used.|||In Kotlin, you can also call a constructor from another constructor of the same class (like in Java) using this().|||When you run the program, the output will be:|||Note: The secondary constructor must initialize the base class or delegate to another constructor (like in above example) if the class has no primary constructor.",Primary constructor - concise way to initialize a class$$$Secondary constructor - allows you to put additional initialization logic$$$Kotlin Primary ConstructorExample: Primary ConstructorInitializer Blocks Using initDefault Value in Primary Constructor$$$Kotlin Secondary ConstructorExample: Secondary Constructor$$$Example: Primary Constructor$$$Initializer Blocks Using init$$$Default Value in Primary Constructor$$$Example: Secondary Constructor,,
https://www.programiz.com/kotlin-programming/getters-setters,Kotlin Getters and Setters (With Example),How getters and setters work?$$$Example: Changing value of the property$$$Table of Contents,,"In this article, you will learn to use getters and setters in Kotlin with the help of an example.|||Before you learn about getters and setter, be sure to check Kotlin class and objects.|||In programming, getters are used for getting value of the property. Similarly, setters are used for setting value of the property.|||In Kotlin, getters and setters are optional and are auto-generated if you do not create them in your program.|||The following code in Kotlin|||is equivalent to|||When you instantiate object of the Person class and initialize the name property, it is passed to the setters parameter value and sets field to value.|||Now, when you access name property of the object, you will get field because of the code get() = field.||||||Here's an working example:|||When you run the program, the output will be:|||This is how getters and setters work by default. However, you can change value of the property (modify value) using getters and setters.|||When you run the program, the output will be:|||Here, the actualAge property works as expected.|||However, there is additional logic is setters to modify value of the age property.",Kotlin getters and setters Introduction$$$How getters and setters work in Kotlin?$$$Changing value of the property using getters and setters,,
https://www.programiz.com/kotlin-programming/inheritance,Kotlin Inheritance (With Examples),Why inheritance?$$$Kotlin inheritance$$$Example: Kotlin Inheritance$$$Important Notes: Kotlin Inheritance$$$Overriding Member Functions and Properties$$$Example: Overriding Member Function$$$Calling Members of Base Class from Derived Class$$$Table of Contents,,"In this article, you'll learn about inheritance. More specifically, what is inheritance and how to implement it in Kotlin (with the help of examples).|||Inheritance is one of the key features of object-oriented programming. It allows user to create a new class (derived class) from an existing class (base class).|||The derived class inherits all the features from the base class and can have additional features of its own.|||Before going into details about Kotlin inheritance, we recommend you to check these two articles:|||Suppose, in your application, you want three characters - a math teacher, a footballer and a businessman.|||Since, all of the characters are persons, they can walk and talk. However, they also have some special skills. A math teacher can teach math, a footballer can play football and a businessman can run a business.|||You can individually create three classes who can walk, talk and perform their special skill.|||In each of the classes, you would be copying the same code to walk and talk for each character.|||If you want to add a new feature - eat, you need to implement the same code for each character. This can easily become error-prone (when copying) and duplicate codes.|||It would be a lot easier if we had a Person class with basic features like talk, walk, eat, sleep, and add special skills to those features as per our characters. This is done using inheritance.|||Using inheritance, now you don't implement the same code for walk(), talk() and eat() for each class. You just need to inherit them.|||So, for MathTeacher (derived class), you inherit all features of a Person (base class) and add a new feature teachMath(). Likewise, for the Footballer class, you inherit all the features of the Person class and add a new feature playFootball() and so on.|||This makes your code cleaner, understandable and extendable.|||It is important to remember: When working with inheritance, each derived class should satisfy the condition whether it ""is a"" base class or not. In the example above, MathTeacher is a Person, Footballer is a Person. You cannot have something like, Businessman is a Business.|||Let's try to implement the above discussion in code:|||Here, Person is a base class, and classes MathTeacher, Footballer, and Businessman are derived from the Person class.|||Notice, the keyword open before the base class, Person. It's important.|||By default, classes in Kotlin are final. If you are familiar with Java, you know that a final class cannot be subclassed. By using the open annotation on a class, compiler allows you to derive new classes from it.||||||When you run the program, the output will be:|||Here, two classes MathTeacher and Footballer are derived from the Person class.|||The primary constructor of the Person class declared two properties: age and name, and it has an initializer block. The initilizer block (and member functions) of the base class Person can be accessed by the objects of derived classes (MathTeacher and Footballer).|||Derived classes MathTeacher and Footballer have their own member functions teachMaths() and playFootball() respectively. These functions are accessible only from the objects of their respective class.|||When the object t1 of MathTeacher class is created,|||The parameters are passed to the primary constructor. In Kotlin, init block is called when the object is created. Since, MathTeacher is derived from Person class, it looks for initializer block in the base class (Person) and executes it. If the MathTeacher had init block, the compiler would have also executed the init block of the derived class.|||Next, the teachMaths() function for object t1 is called using t1.teachMaths() statement.|||The program works similarly when object f1 of Footballer class is created. It executes the init block of the base class. Then, the playFootball() method of Footballer class is called using statement f1.playFootball().|||If the base class and the derived class contains a member function (or property) with the same name, you can need to override the member function of the derived class using override keyword, and use open keyword for the member function of the base class.|||When you run the program, the output will be:|||Here, girl.displayAge(31) calls the displayAge() method of the derived class Girl.|||You can override property of the base class in similar way.|||Visit how Kotlin getters and setters work in Kotlin before you check the example below.|||When you run the program, the output will be:|||As you can see, we have used override and open keywords for age property in derived class and base class respectively.|||You can call functions (and access properties) of the base class from a derived class using super keyword. Here's how:|||When you run the program, the output will be:","Kotlin Class and Objects$$$Kotlin Primary Constructor$$$If the class has a primary constructor, the base must be initialized using the parameters of the primary constructor. In the above program, both derived classes have two parameters age and name, and both these parameters are initialized in primary constructor in the base class.Here's another example:open class Person(age: Int, name: String) {    // some code}class Footballer(age: Int, name: String, club: String): Person(age, name) {    init {        println(""Football player $name of age $age and plays for $club."")    }    fun playFootball() {        println(""I am playing football."")    }}fun main(args: Array<String>) {    val f1 = Footballer(29, ""Cristiano"", ""LA Galaxy"")}Here the primary constructor of the derived class has 3 parameters, and the base class has 2 parameters. Note that, both parameters of the base class are initialized. $$$In case of no primary constructor, each base class has to initialize the base (using super keyword), or delegate to another constructor which does that. For example,fun main(args: Array<String>) {    val p1 = AuthLog(""Bad Password"")}open class Log {    var data: String = """"    var numberOfData = 0    constructor(_data: String) {    }    constructor(_data: String, _numberOfData: Int) {        data = _data        numberOfData = _numberOfData        println(""$data: $numberOfData times"")    }}class AuthLog: Log {    constructor(_data: String): this(""From AuthLog -> + $_data"", 10) {    }    constructor(_data: String, _numberOfData: Int): super(_data, _numberOfData) {    }}To learn more on how this program works, visit Kotlin Secondary Constructor.$$$Inheritance Definition$$$Why Inheritance?$$$Kotlin Inheritance$$$Example: Kotlin Inheritance$$$Important Notes$$$Overriding Member Function and Properties$$$Calling Members of Base from Derived Class",,
https://www.programiz.com/kotlin-programming/visibility-modifiers,Kotlin Visibility Modifiers,Visibility Modifiers Inside Package$$$Visibility Modifiers Inside Classes and Interfaces$$$Changing Visibility of a Constructor$$$Table of Contents,,"In this article, you will learn about all 4 visibility modifiers in Kotlin and how they work in different scenarios.|||Visibility modifiers are keywords that set the visibility (accessibility) of classes, objects, interface, constructors, functions, properties and their setters. (You cannot set visibility modifier of getters as they always take the same visibility as that of the property.)|||In Kotlin Class and Objects article, you learned about visibility modifiers public and private in brief. You will learn about two more visibility modifiers protected and internal (as well as public and private) in detail.|||A package organizes a set of related functions, properties and classes, objects, and interfaces. Recommended reading: Kotlin Packages|||Note: If visibility modifier is not specified, it is public by default.|||Let's take an example:|||Here's how visibility modifiers works for members (functions, properties) declared inside a class:|||Note: If you override a protected member in the derived class without specifying its visibility, its visibility will also be protected.||||||Let's take an example:|||By default, the visibility of a constructor is public. However, you can change it. For that, you need to explicitly add constructor keyword.|||The constructor is public by default in the example below:|||Here's how you can change its visibility.|||Here the constructor is private.|||Note: In Kotlin, local functions, variables and classes cannot have visibility modifiers.",What is a visibility modifier?$$$Visibility Modifiers Inside a Package$$$Visibility Modifiers Inside Class and Interfaces$$$Changing Visibility of a Constructor,,Modifier|||Description$$$public|||declarations are visible everywhere$$$private|||visible inside the file containing the declaration$$$internal|||visible inside the same module (a set of Kotlin files compiled together)$$$protected|||not available for packages (used for subclasses)$$$Modifier|||Description$$$public|||visible to any client who can see the declaring class$$$private|||visible inside the class only$$$protected|||visible inside the class and its subclasses$$$internal|||visible to any client inside the module that can see the declaring class
https://www.programiz.com/kotlin-programming/abstract-class,Kotlin Abstract Class and Abstract Members,Example: Kotlin Abstract Class and Method$$$Table of Contents,,"In this article, you will learn about abstract class and how to implement it in Kotlin (with the help of examples).|||Like Java, abstract keyword is used to declare abstract classes in Kotlin. An abstract class cannot be instantiated (you cannot create objects of an abstract class). However, you can inherit subclasses from can them.|||The members (properties and methods) of an abstract class are non-abstract unless you explictly use abstract keyword to make them abstract. Let's take an example:|||Here,|||Note: Abstract classes are always open. You do not need to explicitly use open keyword to inherit subclasses from them.|||When you run the program, the output will be:|||Here, a class Teacher is derived from an abstract class Person.||||||An object jack of Teacher class is instantiated. We have passed ""Jack Smith"" as a parameter to the primary constructor while creating it. This executes the initializer block of the Person class.|||Then, displayJob() method is called using jack object. Note, that the displayJob() method is declared abstract in the base class, and overridden in the derived class.|||Finally, displaySSN() method is called using jack object. The method is non-abstract and declared in Person class (and not declared in Teacher class).|||Recommended Reading: Kotlin Interfaces|||Kotlin interfaces are similar to abstract classes. However, interfaces cannot store state whereas abstract classes can.|||Meaning, interface may have property but it needs to be abstract or has to provide accessor implementations. Whereas, it's not mandatory for property of an abstract class to be abstract.","an abstract class Person is created. You cannot create objects of the class.$$$the class has a non-abstract property age and a non-abstract method displaySSN(). If you need to override these members in the subclass, they should be marked with open keyword.$$$The class has an abstract method displayJob(). It doesn't have any implementation and must be overridden in its subclasses.$$$What is an abstract class?$$$Example: Kotlin Abstract Class and Method",,
https://www.programiz.com/kotlin-programming/interfaces,Kotlin Interfaces (With Examples),How to define an interface?$$$How to implement interface?$$$Example: How interface works?$$$Implementing Two or More Interfaces in a Class$$$Resolving overriding conflicts (Multiple Interface)$$$Table of Contents,,"In this article, you will learn about interfaces and how to implement it in Kotlin with the help of examples.|||Kotlin interfaces are similar to interfaces in Java 8. They can contain definitions of abstract methods as well as implementations of non-abstract methods. However, they cannot contain any state.|||Meaning, interface may have property but it needs to be abstract or has to provide accessor implementations.|||Recommended Reading: Kotlin Abstract Class|||Abstract classes in Kotlin are similar to interface with one important difference. It's not mandatory for properties of an abstract class to be abstract or provide accessor implementations.|||Keyword interface is used to define interfaces in Kotlin. For example,|||Here,|||Here's how a class or object can implement the interface:|||Here, a class InterfaceImp implements the MyInterface interface.|||The class overrides abstract members (test property and foo() method) of the interface.|||When you run the program, the output will be:|||As mentioned above, an interface may also have a property that provide accessor implementation. For example,||||||When you run the program, the output will be:|||Here, prop is not abstract. However, it's valid inside the interface because it provides implementation for accessor.|||However, you cannot do something like val prop: Int = 23 inside the interface.|||Kotlin does not allow true multiple inheritance. However, it's possible to implement two or more interfaces in a single class. For example,|||When you run the program, the output will be:|||Suppose, two interfaces(A and B) have a non-abstract method with the same name (let's say callMe() method). You implemented these two interfaces in a class (let's say C). Now, if you call the callMe() method using the object of class C, compiler will throw error. For example,|||Here's the error:|||To solve this issue, you need to provide your own implementation. Here's how:|||Now when you run the program, the output will be:|||Here, explicit implementation of callMe() method is provided in class C.|||The statement super<A>.callMe() calls the callMe() method of class A. Similarly, super<B>.callMe() calls the callMe() method of class B.",an interface MyInterface is created.$$$the interface has an abstract property test and an abstract method foo().$$$the interface also has a non-abstract method hello().$$$Kotlin Interfaces Introduction$$$How to define an interface?$$$How to implement interface?$$$Example: How interfaces work?$$$Properties Providing Accessor Implementation$$$Implementing Two or More Interfaces in a Class$$$Resolving overriding conflicts (in Multiple Interface),,
https://www.programiz.com/kotlin-programming/inner-nested-class,Kotlin Nested and Inner Class,Kotlin Nested Class$$$Kotlin Inner Class$$$Example: Kotlin Nested Class$$$Example: Kotlin Inner Class$$$Table of Contents,,"In this article, you will learn to work with nested and inner classes with the help of examples.|||Similar like Java, Kotlin allows you to define a class within another class known as nested class.|||Since Nested class is a member of its enclosing class Outer, you can use . notation to access Nested class and its members.|||When you run the program, the output will be:|||For Java Users|||The nested class in Kotlin is similar to static nested class in Java.|||In Java, when you declare a class inside another class, it becomes an inner class by default. However in Kotlin, you need to use inner modifier to create an inner class which we will discuss next.||||||The nested classes in Kotlin do not have access to the outer class instance. For example,|||The above code won't compile because we tried to access foo property of Outer class from inside Nested class.|||In order to solve this issue, you need to mark the nested class with inner to create an inner class. Inner classes carry a reference to an outer class, and can access outer class members.|||When you run the program, the output will be:|||Recommended Reading: Anonymous Inner Class",Kotlin Nested Class$$$Example: Nested Class$$$Kotlin Inner Class$$$Example: Inner Class,,
https://www.programiz.com/kotlin-programming/data-class,Kotlin Data Class,Kotlin Data Class Requirements$$$Example: Kotlin Data Class$$$Copying$$$toString() method$$$hashCode() and equals()$$$Destructuring Declarations$$$Table of Contents,,"In this article, you will learn to create data classes in Kotlin. You will also learn about requirements that data class must fulfill, and their standard functionalities.|||There may arise a situation where you need to create a class solely to hold data. In such cases, you can mark the class as data to create a data class. For example,|||For this class, the compiler automatically generates:|||Before talking about these features in detail, let's talk about requirements that a data class must fulfill.|||Here are the requirements:|||When you run the program, the output will be:|||When you declare a data class, the compiler automatically generates several functions such as toString(), equals(), hashcode() etc behind the scenes. This helps to keep you code concise. Had you used Java, you would need to write a lot of boilerplate code.|||Let's use these functions:|||For a data class, you can create a copy of an object with some of its properties different using copy() function. Here's how it works:|||When you run the program, the output will be:||||||The toString() function returns a string representation of the object.|||When you run the program, the output will be:|||The hasCode() method returns hash code for the object. If two objects are equal, hashCode() produces the same integer result. Recommended Reading: hashCode()|||The equals() returns true if two objects are equal (has same hashCode()). If objects are not equal, equals() returns false. Recommended Reading: equals()|||When you run the program, the output will be:|||You can destructure an object into a number of variables using destructing declaration. For example:|||When you run the program, the output will be:|||This was possible because the compiler generates componentN() functions all properties for a data class. For example:|||When you run the program, the output will be:","copy() function, equals() and hashCode() pair, and toString() form of the primary constructor$$$componentN() functions$$$The primary constructor must have at least one parameter.$$$The parameters of the primary constructor must be marked as either val (read-only) or var (read-write).$$$The class cannot be open, abstract, inner or sealed.$$$The class may extend other classes or implement interfaces. If you are using Kotlin version before 1.1, the class can only implement interfaces.$$$Kotlin Data Class$$$Data Class Requirements$$$Example: Kotlin Data Class$$$Default Functionalities of a Data Classcopy() MethodtoString() Methodequals() and hashCode() MethodDestructuring Declarations $$$copy() Method$$$toString() Method$$$equals() and hashCode() Method$$$Destructuring Declarations ",,
https://www.programiz.com/kotlin-programming/sealed-class,Kotlin Sealed Classes,Example: Sealed Class$$$Few Important Notes$$$Difference Between Enum and Sealed Class$$$Table of Contents,,"In this article, you will learn about Sealed class, how they are created, and when to use them with the help of examples.|||Sealed classes are used when a value can have only one of the types from a limited set (restricted hierarchies).|||Before going into details about sealed classes, let's explore what problem they solve. Let's take an example (taken from official Kotlin website - Sealed classes article):|||In the above program, the base class Expr has two derived classes Const (represents a number) and Sum (represents sum of two expressions). Here, it's mandatory to use else branch for default condition in when expression.|||Now, if you derive a new subclass from Expr class, the compiler won't detect anything as else branch handles it which can lead to bugs. It would have been better if the compiler issued an error when we added a new subclass.|||To solve this problem, you can use sealed class. As mentioned, sealed class restricts the possibility of creating subclasses. And, when you handle all subclasses of a sealed class in an when expression, it's not necessary to use else branch.||||||To create a sealed class, sealed modifier is used. For example,|||Here's how you can solve the above problem using sealed class:|||As you can see, there is no else branch. If you derive a new subclass from Expr class, the compiler will complain unless the subclass is handled in the when expression.|||Enum class and sealed class are pretty similar. The set of values for an enum type is also restricted like a sealed class.|||The only difference is that, enum can have just a single instance, whereas a subclass of a sealed class can have multiple instances.","All subclasses of a sealed class must be declared in the same file where sealed class is declared.$$$A sealed class is abstract by itself, and you cannot instantiate objects from it.$$$You cannot create non-private constructors of a sealed class; their constructors are private by default.$$$Sealed Class (Definition)$$$Why Sealed Class?$$$Example: Sealed Class$$$Important Notes$$$Difference Between Enum and Sealed Class",,
https://www.programiz.com/kotlin-programming/object-singleton,Kotlin Object Declarations and Expressions,Object Declarations$$$Kotlin object Expressions$$$Example: Object Declaration$$$Singletons and Dependency Injection$$$Example: Kotlin Object Expression$$$Table of Contents,,"In this article, you will learn about object declarations (singletons) and object expressions with the help of examples.|||Singleton is an object-oriented pattern where a class can have only one instance (object).|||For example, you are working an application having SQL database backend. You want to create a connection pool to access the database while reusing the same connection for all clients. For this, you can create the connection through singleton class so that every client get the same connection.|||Kotlin provides an easy way to create singletons using the object declaration feature. For that, object keyword is used.|||The above code combines a class declaration and a declaration of a single instance SingletonExample of the class.|||An object declaration can contain properties, methods and so on. However, they are not allowed to have constructors (which makes sense). Why?|||Similar to objects of a normal class, you can call methods and access properties by using the . notation.|||When you run the program, the output will be:|||Object declaration can inherit from classes and interfaces in a similar way like normal classes.|||Object declarations can be useful sometimes. However, they are not ideal in large software systems that interact with many other parts of the system.||||||Recommended Reading: Dependency Injection & Singleton Design pattern|||The object keyword can also be used to create objects of an anonymous class known as anonymous objects. They are used if you need to create an object of a slight modification of some class or interface without declaring a subclass for it. For example ,|||(The example is taken from official Kotlin docs page.)|||Here, an anonymous object is declared extending MouseAdapter class.The program overrides two MouseAdapter methods: mouseClicked() and mouseEntered().|||If necessary, you can assign a name to the anonymous object and store it in a variable. For example,|||When you run the program, the output will be:|||Here, anonymous object is stored in variable atheist which implements Person class with pray() method is overridden.|||If you are implementing a class that has a constructor to declare an anonymous object, you need to pass appropriate constructor parameters. For example,|||When you run the program, the output will be:",Object Declarations$$$Example: Object Declaration$$$Singletons and Dependency Injection$$$Object Expressions$$$Example: Object Expressions,,
https://www.programiz.com/kotlin-programming/companion-objects,Kotlin Companion Objects,Example: Companion objects$$$Table of Contents,,"In this article, you will learn to create and use companion objects in your Kotlin program with the help of examples.|||Before taking about companion objects, let's take an example to access members of a class.|||Here, we created an object p1 of the Person class to call callMe() method. That's how things normally work.|||However, in Kotlin, you can also call callMe() method by using the class name, i.e, Person in this case. For that, you need to create a companion object by marking object declaration with companion keyword.|||When you run the program, the output will be:||||||In the program, Test object declaration is marked with keyword companion to create a companion object. Hence, it is possible to call callMe() method by using the name of the class as:|||The name of the companion object is optional and can be omitted.|||If you are familiar with Java, you may relate companion objects with static methods (even though how they work internally is totally different).|||The companion objects can access private members of the class. Hence, they can be used to implement the factory method patterns.",Companion Objects Introduction$$$Example: Companion Objects,,
https://www.programiz.com/kotlin-programming/extension-functions,Kotlin Extension Function (With Examples),Example: Remove First and Last Character of String$$$Table of Contents,,"In this article, you will learn to extend a class with new functionality using extension functions.|||Suppose, you need to extend a class with new functionalities. In most programming languages, you either derive a new class or use some kind of design pattern to do this.|||However, in Koltin, you can also use extension function to extend a class with new functionalities. Basically, an extension function is a member function of a class that is defined outside the class.|||For example, you need to use a method to the String class that returns a new string with first and last character removed; this method is not already available in String class. You can use extension function to accomplish this task.|||When you run the program, the output will be:||||||Here, an extension function removeFirstLastChar() is added to the String class.|||The class name is the receiver type (String class in our example). The this keyword inside the extension function refers the receiver object.|||If you need to integrate Kotlin on the top of Java project, you do not need to modify the whole code to Koltin. Just use extension functions to add functionalities.|||That being said, it is quite easy to abuse power of extension functions. We recommend you to check these resources to learn on when to use extensions and when not to:",Are extension methods and extension properties bad?$$$How to abuse Kotlin extension functions?$$$Kotlin Extension Function (Introduction)$$$Example: Remove first and last character of string$$$It's easy to abuse extension function,,
https://www.programiz.com/kotlin-programming/operator-overloading,Kotlin Operator Overloading (With Examples),Example: Overloading + Operator$$$Example: -- Operator Overloading$$$Few Important Points$$$Table of Contents,,"In this article, you will learn about operator overloading (define how operator works for user defined types like objects) with the help of examples.|||When you use operator in Kotlin, it's corresponding member function is called. For example, expression a+b transforms to a.plus(b) under the hood.|||When you run the program, the output will be:|||In fact, plus() function is overloaded to work with various Kotlin basic types and String.|||You can also define how operator works for objects by overloading its corresponding function. For example, you need define how + operator works for objects by overloading plus() function.|||When you run the program, the output will be:|||Here, the plus() function is marked with operator keyword to tell compiler that + operator is being overloaded.|||The expression p1 + p2 is transformed to p1.plus(p2) under the hood.|||In this example, you will learn to overload -- operator. The expression --a is transformed to a.dec() under the hood.||||||The dec() member function doesn't take any arguments.|||When you run the program, the ouput will be:|||Remember that,|||is equivalent to|||1. When you overload operators, you should try to maintain the original spirit of the operator. For example,|||Although the program above is technically correct, we have used + operator to subtract corresponding properties of two objects which made the program confusing.|||2. Unlike languages like Scala, only a specific set of operators can be overloaded in Kotlin. Visit the page to learn about operators that can be overloaded in Kotlin and their corresponding member functions.",How operator works in Kotlin?$$$Example: + Operator Overloading$$$Example: -- Operator Overloading$$$Few Important Points,,
https://www.programiz.com/kotlin-programming/guide,Kotlin Programming,Features of Kotlin Programming$$$Present and Future of Kotlin$$$How you can learn to code in Kotlin?$$$Final Words$$$Open Source$$$Interoperable with Java and Android$$$Concise and Expressive$$$Easy to Learn$$$Tool-Friendly$$$Safe$$$Present$$$Future$$$Learn Kotlin from Programiz$$$The Kotlin Website (Official Site)$$$Other useful Resources$$$Table of Contents,,"Kotlin is a relatively new programming language developed by JetBrains for modern multiplatform applications. Nowadays, Kotlin is widely used for Android development instead of Java. It is because Kotlin is safe, concise, and fun to read and write.|||To get started with Kotlin programming, visit our Kotlin Tutorials.|||Kotlin is distributed under Apache License, Version 2.0. The Kompiler (Kotlin compiler), IntelliJ IDEA plugin, enhancements to basic Java libraries and build tools all are open source.|||It is 100% interoperable with Java and Android. This means all your current Java/Android code works seamlessly with Kotlin. For more information, visit Mixing Java and Kotlin in One Project.|||Rough estimation indicates that using Kotlin allows you to cut off the lines of code by approximately 40% (compared to Java).|||Expressive means, it's easy to write code that both humans and compilers can understand easily.|||Learning Kotlin is easy if you know other programming languages like Java, Scala, Groovy, C#, Javascript and Gosu.|||Kotlin is developed by JetBrains, a company renowned for creating development tools for professionals. No wonder, it is tool-friendly.||||||Kotlin is a statically types language. Hence, the type checking occurs at compile-time as opposed to run-time and trivial bugs are caught at an early stage.|||Possible future projects in Kotlin are:|||Programiz offers a complete series of easy to follow Kotlin tutorials along with suitable examples. These tutorials are targeted at absolute beginners with no prior knowledge of the Kotlin programming language.|||Kotlin Reference and Kotlin Tutorial from the official site is one of the most reliable sources to learn Kotlin. When in doubt, always follow the official resources.|||Here are a few resources to expand your Kotlin knowledge and seek help when you stuck.|||Kotlin has already gained a reputation for being concise, expressive and safe. And, with Google's announcement (an official language for Android development), it's safe to say that Kotlin is here for the big run.|||If you are a Java/Android developer, we recommend you to learn Kotlin when possible. It not only makes your CV better but also helps to increase productivity.","Many companies like Netflix, Uber, Trello, Pinterest, Corda, etc are using Kotlin (along with other programming languages) to create applications.$$$Google's Android team announced Kotlin as an official language for Android app development.$$$You can replace Java code with Kotlin seamlessly. It is 100% interoperable with Java and Android.$$$Cross-platform game development$$$Cross-platform mobile application development$$$Server-side and microservices$$$Data analysis and machine learning$$$Embedded system: Arduino/Raspberry Pi to professional controllers directly$$$Official Kotlin Forum$$$StackOverflow$$$Kotlin SubReddit$$$What is Kotlin Programming?$$$Features$$$Present and Future of Kotlin$$$How to learn Kotlin?$$$Final Words",,
https://www.programiz.com/kotlin-programming/examples,Kotlin Examples | Programiz,,The best way to learn Kotlin is by practicing examples. The page       contains examples on basic concepts of Kotlin. You are advised to take the       references from these examples and try them on your own.             All the programs on this page are tested and should work on all platforms.,,,Kotlin Program to Print an Integer (Entered by the User)$$$Kotlin Program to Add Two Integers$$$Kotlin Program to Multiply two Floating Point Numbers$$$Kotlin Program to Find ASCII value of a character$$$Kotlin Program to Compute Quotient and Remainder$$$Kotlin Program to Swap Two Numbers$$$Kotlin Program to Check Whether a Number is Even or Odd$$$Kotlin Program to Check Whether an Alphabet is Vowel or Consonant$$$Kotlin Program to Find the Largest Among Three Numbers$$$Kotlin Program to Find all Roots of a Quadratic Equation$$$Kotlin Program to Check Leap Year$$$Kotlin Program to Check Whether a Number is Positive or Negative$$$Kotlin Program to Check Whether a Character is Alphabet or Not$$$Kotlin Program to Calculate the Sum of Natural Numbers$$$Kotlin Program to Find Factorial of a Number$$$Kotlin Program to Generate Multiplication Table$$$Kotlin Program to Display Fibonacci Series$$$Kotlin Program to Find GCD of two Numbers$$$Kotlin Program to Find LCM of two Numbers$$$Kotlin Program to Display Characters from A to Z using loop$$$Kotlin Program to Count Number of Digits in an Integer$$$Kotlin Program to Reverse a Number$$$Kotlin Program to Calculate the Power of a Number$$$Kotlin Program to Check Whether a Number is Palindrome or Not$$$Kotlin Program to Check Whether a Number is Prime or Not$$$Kotlin Program to Display Prime Numbers Between Two Intervals$$$Kotlin Program to Check Armstrong Number$$$Kotlin Program to Display Armstrong Number Between Two Intervals$$$Kotlin Program to Display Prime Numbers Between Intervals Using Function$$$Kotlin Program to Display Armstrong Numbers Between Intervals Using Function$$$Kotlin Program to Display Factors of a Number$$$Kotlin Program to Make a Simple Calculator Using switch...case$$$Kotlin Program to Check Whether a Number can be Expressed as Sum of Two Prime Numbers$$$Kotlin Program to Find the Sum of Natural Numbers using Recursion$$$Kotlin Program to Find Factorial of a Number Using Recursion$$$Kotlin Program to Find G.C.D Using Recursion$$$Kotlin Program to Convert Binary Number to Decimal and vice-versa$$$Kotlin Program to Convert Octal Number to Decimal and vice-versa$$$Kotlin Program to Convert Binary Number to Octal and vice-versa$$$Kotlin Program to Reverse a Sentence Using Recursion$$$Kotlin Program to calculate the power using recursion$$$Kotlin Program to Calculate Average Using Arrays$$$Kotlin Program to Find Largest Element in an Array$$$Kotlin Program to Calculate Standard Deviation$$$Kotlin Program to Add Two Matrix Using Multi-dimensional Arrays$$$Kotlin Program to Multiply to Matrix Using Multi-dimensional Arrays$$$Kotlin Program to Multiply two Matrices by Passing Matrix to a Function$$$Kotlin Program to Find Transpose of a Matrix$$$Kotlin Program to Find the Frequency of Character in a String$$$Kotlin Program to Count the Number of Vowels and Consonants in a Sentence$$$Kotlin Program to Sort Elements in Lexicographical Order (Dictionary Order)$$$Kotlin Program to Add Two Complex Numbers by Passing Class to a Function$$$Kotlin Program to Calculate Difference Between Two Time Periods$$$Kotlin Code To Create Pyramid and Pattern$$$Kotlin Program to Remove All Whitespaces from a String$$$Kotlin Program to Print an Array$$$Kotlin Program to Convert String to Date$$$Kotlin Program to Round a Number to n Decimal Places$$$Kotlin Program to Concatenate Two Arrays$$$Kotlin Program to Convert Character to String and Vice-Versa$$$Kotlin Program to Check if An Array Contains a Given Value$$$Kotlin Program to Get Current Date/TIme$$$Kotlin Program to Convert Milliseconds to Minutes and Seconds$$$Kotlin Program to Add Two Dates$$$Kotlin Program to Join Two Lists$$$Kotlin Program to Convert List (ArrayList) to Array and Vice-Versa$$$Kotlin Program to Get Current Working Directory$$$Kotlin Program to Convert Map (HashMap) to List$$$Kotlin Program to Convert Array to Set (HashSet) and Vice-Versa$$$Kotlin Program to Convert Byte Array to Hexadecimal$$$Kotlin Program to Create String from Contents of a File$$$Kotlin Program to Append Text to an Existing File$$$Kotlin Program to Convert a Stack Trace to a String$$$Kotlin Program to Convert File to byte array and Vice-Versa$$$Kotlin Program to Convert InputStream to String$$$Kotlin Program to Convert OutputStream to String$$$Kotlin Program to Lookup enum by String value$$$Kotlin Program to Compare Strings$$$Kotlin Program to Sort a Map By Values$$$Kotlin Program to Sort ArrayList of Custom Objects By Property$$$Kotlin Program to Check if a String is Numeric,
