Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
PHP Tutorial,PHP HOME,https://www.w3schools.com/php/default.asp,"PHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages.|||PHP is a widely-used, free, and efficient alternative to competitors such as Microsoft's ASP.|||With our online ""PHP Tryit"" editor, you can edit the PHP code, and click on a button to view the result.|||Click on the ""Try it Yourself"" button to see how it works.|||Insert the missing part of the code below to output ""Hello World"".|||Learn by examples! This tutorial supplements all explanations with clarifying examples.|||See All PHP Examples|||Learn by taking a quiz! This quiz will give you a signal of how much you know, or do not know, about PHP.|||Start PHP Quiz!|||W3Schools' PHP reference contains different categories of all PHP functions, keywords and constants, along with examples.|||Get certified by completing the  course",Learn PHP,,,,"[['\n <!DOCTYPE html>', '\n <html>', '\n    <body>', '\n', <span class=""marked"">&lt;?php<br/>
 echo ""My first PHP script!"";<br/>
 ?&gt;</span>, '\n', '\n    </body>', '\n    </html>\n']]"
PHP Tutorial,PHP Intro,https://www.w3schools.com/php/php_intro.asp,"PHP code is executed on the server.|||Before you continue you should have a basic understanding of the following:|||If you want to study these subjects first, find the tutorials on ourHome page.|||PHP is an amazing and popular language!|||It is powerful enough to be at the core of the biggest blogging system on the web (WordPress)!It is deep enough to run large social networks!It is also easy enough to be a beginner's first server side language!|||With PHP you are not limited to output HTML. You can output images, PDF files, and even Flash movies. You can also output any text, such as XHTML and XML.",What You Should Already Know|||What is PHP?|||What is a PHP File?|||What Can PHP Do?|||Why PHP?|||What's new in PHP 7,"HTML@@@CSS@@@JavaScript|||PHP is an acronym for ""PHP: Hypertext Preprocessor""@@@PHP is a widely-used, open source scripting language@@@PHP scripts are executed on the server@@@PHP is free to download and use|||PHP files can contain text, HTML, CSS, JavaScript, and PHP code@@@PHP code is executed on the server, and the result is returned to the browser as plain HTML@@@PHP files have extension "".php""|||PHP can generate dynamic page content@@@PHP can create, open, read, write, delete, and close files on the server@@@PHP can collect form data@@@PHP can send and receive cookies@@@PHP can add, delete, modify data in your database@@@PHP can be used to control user-access@@@PHP can encrypt data|||PHP runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)@@@PHP is compatible with almost all servers used today (Apache, IIS, etc.)@@@PHP supports a wide range of databases@@@PHP is free. Download it from the official PHP resource: www.php.net@@@PHP is easy to learn and runs efficiently on the server side|||PHP 7 is much faster than the previous popular stable release (PHP 5.6)@@@PHP 7 has improved Error Handling@@@PHP 7 supports stricter Type Declarations for function arguments@@@PHP 7 supports new operators (like the spaceship operator: <=>)",,,[]
PHP Tutorial,PHP Install,https://www.w3schools.com/php/php_install.asp,"To start using PHP, you can:|||If your server has activated support for PHP you do not need to do anything.|||Just create some .php files, place them in your web directory, and the server will automatically parse them for you.|||You do not need to compile anything or install any extra tools.|||Because PHP is free, most web hosts offer PHP support.|||However, if your server does not support PHP, you must:|||The official PHP website (PHP.net) has installation instructions for PHP:http://php.net/manual/en/install.php|||With w3schools' online PHP compiler, you can edit PHP code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.",PHP Online Compiler / Editor,"Find a web host with PHP and MySQL support@@@Install a web server on your own PC, and then install PHP and MySQL|||install a web server@@@install PHP@@@install a database, such as MySQL",,,[]
PHP Tutorial,PHP Syntax,https://www.w3schools.com/php/php_syntax.asp,"A PHP script is executed on the server, and the plain HTML result is sent back to the browser.|||A PHP script can be placed anywhere in the document.|||A PHP script starts with <?php and ends with ?>:|||The default file extension for PHP files is "".php"".|||A PHP file normally contains HTML tags, and some PHP scripting code.|||Below, we have an example of a simple PHP file, with a PHP script that uses a built-in PHP function ""echo"" to output the text""Hello World!"" on a web page:|||Note: PHP statements end with a semicolon (;).|||In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive.|||In the example below, all three echo statements below are equal and legal:|||Note: However; all variable names are case-sensitive!|||Look at the example below; only the first statement will display the value of the $color variable! This is because $color, $COLOR, and $coLOR are treated as three different variables:|||Insert the missing part of the code below to output ""Hello World"".",,,,,[]
PHP Tutorial,PHP Comments,https://www.w3schools.com/php/php_comments.asp,A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.|||Comments can be used to:|||PHP supports several ways of commenting:|||Syntax for single-line comments:|||Syntax for multiple-line comments:|||Using comments to leave out parts of the code:,Example,Let others understand your code@@@Remind yourself of what you did - Most programmers have experienced coming back to their own work a year or two later and having to re-figure out what they did. Comments can remind you of what you were thinking when you wrote the code,,,[]
PHP Tutorial,PHP Variables,https://www.w3schools.com/php/php_variables.asp,"Variables are ""containers"" for storing information.|||In PHP, a variable starts with the $ sign, followed by the name of the variable:|||After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5.|||Note: When you assign a text value to a variable, put quotes around the value.|||Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.|||Think of variables as containers for storing data.|||A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).|||Rules for PHP variables:|||Remember that PHP variable names are case-sensitive!|||The PHP echo statement is often used to output data to the screen.|||The following example will show how to output text and a variable:|||The following example will produce the same output as the example above:|||The following example will output the sum of two variables:|||Note: You will learn more about the echo statement and how to output data to the screen in the next chapter.|||In the example above, notice that we did not have to tell PHP which data type the variable is.|||PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.|||In PHP 7, type declarations were added. This gives an option to specify the data type expected when declaring a function, and by enabling the strict requirement, it will throw a ""Fatal Error"" on a type mismatch.|||You will learn more about strict and non-strict requirements, and  data type declarations in the PHP Functions chapter.",,"A variable starts with the $ sign, followed by the name of the variable@@@A variable name must start with a letter or the underscore character@@@A variable name cannot start with a number@@@A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )@@@Variable names are case-sensitive ($age and   $AGE are two different variables)",,,"[['\n<?php', '\n$txt = ""Hello world!"";', '\n$x = 5;', '$y = 10.5;', '\n?>\n'], ['\n<?php', '\n$txt = ""W3Schools.com"";', '\n echo ""I love $txt!"";', '?>\n']]"
PHP Tutorial,PHP Echo / Print,https://www.w3schools.com/php/php_echo_print.asp,"With PHP, there are two basic ways to get output: echo and print.|||In this tutorial we use echo or print in almost every example. So, this chapter contains a little more info about those two output statements.|||echo and print are more or less the same. They are both used to output data to the screen. |||The differences are small: echo has no return value while print has a return value of 1 so it can be used in expressions. echo can take multiple parameters (although such usage is rare) while print can take one argument. echo is marginally faster than print.|||The echo statement can be used with or without parentheses: echo or echo().|||Display Text|||The following example shows how to output text with the echo command (notice that the text can contain HTML markup):|||Display Variables|||The following example shows how to output text and variables with the echo statement:|||The print statement can be used with or without parentheses: print or print().|||Display Text|||The following example shows how to output text with the print command (notice that the text can contain HTML markup):|||Display Variables|||The following example shows how to output text and variables with the print statement:",,,,,[]
PHP Tutorial,PHP Data Types,https://www.w3schools.com/php/php_datatypes.asp,"Variables can store data of different types, and different data types can do different things.|||PHP supports the following data types:|||A string is a sequence of characters, like ""Hello world!"".|||A string can be any text inside quotes. You can use single or double quotes:|||An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647.|||Rules for integers:|||In the following example $x is an integer. The PHP var_dump() function returns the data type and value:|||A float (floating point number) is a number with a decimal point or a number in exponential form.|||In the following example $x is a float. The PHP var_dump() function returns the data type and value:|||A Boolean represents two possible states: TRUE or FALSE.|||Booleans are often used in conditional testing. You will learn more about conditional testing in a later chapter of this tutorial.|||An array stores multiple values in one single variable.|||In the following example $cars is an array. The PHP var_dump() function returns the data type and value:|||You will learn a lot more about arrays in later chapters of this tutorial.|||Classes and objects are the two main aspects of object-oriented programming.|||A class is a template for objects, and an object is an instance of a class.|||When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.|||Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties.|||When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.|||If you create a __construct() function, PHP will automatically call this function when you create an object from a class.|||Null is a special data type which can have only one value: NULL.|||A variable of data type NULL is a variable that has no value assigned to it.|||Tip: If a variable is created without a value, it is automatically assigned a value of NULL.|||Variables can also be emptied by setting the value to NULL:|||The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP.|||A common example of using the resource data type is a database call.|||We will not talk about the resource type here, since it is an advanced topic.",PHP Array|||PHP NULL Value,"String@@@Integer@@@Float (floating point numbers - also called double)@@@Boolean@@@Array@@@Object@@@NULL@@@Resource|||An integer must have at least one digit@@@An integer must not have a decimal point@@@An integer can be either positive or negative@@@Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base   8), or binary (base 2) notation",,,[]
PHP Tutorial,PHP Strings,https://www.w3schools.com/php/php_string.asp,"A string is a sequence of characters, like ""Hello world!"".|||In this chapter we will look at some commonly used functions to manipulate strings.|||The PHP strlen() function returns the length of a string.|||Return the length of the string ""Hello world!"":|||The PHP str_word_count() function counts the number of words in a string.|||Count the number of word in the string ""Hello world!"":|||The PHP strrev() function reverses a string.|||Reverse the string ""Hello world!"":|||The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE.|||Search for the text ""world"" in the string ""Hello world!"":|||Tip:  The first character position in a string is 0 (not 1).|||The PHP str_replace() function replaces some characters with some other characters in a string.|||Replace the text ""world"" with ""Dolly"":|||For a complete reference of all string functions, go to our complete PHP String Reference.|||The PHP string reference contains description and example of use, for each function!|||Get the length of the string ""Hello World!"".",PHP String Functions,,,,[]
PHP Tutorial,PHP Numbers,https://www.w3schools.com/php/php_numbers.asp,"In this chapter we will look in depth into Integers, Floats, and Number Strings.|||One thing to notice about PHP is that it provides automatic data type conversion.|||So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string.|||This automatic conversion can sometimes break your code.|||2, 256, -256, 10358, -179567 are all integers.|||An integer is a number without any decimal part.|||An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer.|||Note: Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5).|||Here are some rules for integers:|||PHP has the following predefined constants for integers:|||PHP has the following functions to check if the type of a variable is integer:|||Check if the type of a variable is integer:|||A float is a number with a decimal point or a number in exponential form.|||2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 are all floats.|||The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.|||PHP has the following predefined constants for floats (from PHP 7.2):|||PHP has the following functions to check if the type of a variable is float:|||Check if the type of a variable is float:|||A numeric value that is larger than PHP_FLOAT_MAX is considered infinite.|||PHP has the following functions to check if a numeric value is finite or infinite:|||However, the PHP var_dump() function returns the data type and value:|||Check if a numeric value is finite or infinite:|||NaN stands for Not a Number.|||NaN is used for impossible mathematical operations.|||PHP has the following functions to check if a value is not a number:|||However, the PHP var_dump() function returns the data type and value:|||Invalid calculation will return a NaN value:|||The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise.|||Check if the variable is numeric:|||Note: From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings.|||Sometimes you need to cast a numerical value into another data type.|||The (int), (integer), or intval() function are often used to convert a value to an integer.|||Cast float and string to integer:",Example,"An integer must have at least one digit@@@An integer must NOT have a decimal point@@@An integer can be either positive or negative@@@Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)|||PHP_INT_MAX - The largest integer supported@@@PHP_INT_MIN - The smallest integer supported@@@PHP_INT_SIZE -  The size of an integer in bytes|||is_int()@@@is_integer() - alias of is_int()@@@is_long() - alias of is_int()|||PHP_FLOAT_MAX - The largest representable floating point number@@@PHP_FLOAT_MIN - The smallest representable positive floating point number@@@- PHP_FLOAT_MAX - The smallest representable negative floating point   number@@@PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a   float and back without precision loss@@@PHP_FLOAT_EPSILON - The smallest representable positive number x, so that   x + 1.0 != 1.0|||is_float()@@@is_double() - alias of is_float()|||is_finite()@@@is_infinite()|||is_nan()",,,[]
PHP Tutorial,PHP Math,https://www.w3schools.com/php/php_math.asp,"PHP has a set of math functions that allows you to perform mathematical tasks on numbers.|||The pi() function returns the value of PI:|||The min() and max() functions can be used to find the lowest or highest value in a list of arguments:|||The abs() function returns the absolute (positive) value of a number:|||The sqrt() function returns the square root of a number:|||The round() function rounds a floating-point number to its nearest integer:|||The rand() function generates a random number:|||To get more control over the random number, you can add the optional min and max parameters to specify the lowest integer and the highest integer to be returned.|||For example, if you want a random integer between 10 and 100 (inclusive), use rand(10, 100):|||For a complete reference of all math functions, go to our complete PHP Math Reference.|||The PHP math reference contains description and example of use, for each function.",,,,,[]
PHP Tutorial,PHP Constants,https://www.w3schools.com/php/php_constants.asp,"Constants are like variables except that once they are defined they cannot be changed or undefined.|||A constant is an identifier (name) for a simple value. The value cannot be changed during the script.|||A valid constant name starts with a letter or underscore (no $ sign before the constant name).|||Note: Unlike variables, constants are automatically global across the entire script.|||To create a constant, use the define() function.|||Parameters:|||Create a constant with a case-sensitive name:|||Create a constant with a case-insensitive name:|||In PHP7, you can create an Array constant using the define() function.|||Create an Array constant:|||Constants are automatically global and can be used across the entire script.|||This example uses a constant inside a function, even if it is defined outside the function:",,name: Specifies the name of the constant@@@value: Specifies the value of the constant@@@case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false,,,[]
PHP Tutorial,PHP Operators,https://www.w3schools.com/php/php_operators.asp,"Operators are used to perform operations on variables and values.|||PHP divides the operators in the following groups:|||The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc.|||The PHP assignment operators are used with numeric values to write a value to a variable.|||The basic assignment operator in PHP is ""="". It means that the left operand gets set to the value of the assignment expression on the right.|||The PHP comparison operators are used to compare two values (number or string):|||The PHP increment operators are used to increment a variable's value.|||The PHP decrement operators are used to decrement a variable's value.|||The PHP logical operators are used to combine conditional statements.|||PHP has two operators that are specially designed for strings.|||The PHP array operators are used to compare arrays.|||The PHP conditional assignment operators are used to set a value depending on conditions:|||Multiply 10 with 5, and output the result.",Exercise:,Arithmetic operators@@@Assignment operators@@@Comparison operators@@@Increment/Decrement operators@@@Logical operators@@@String operators@@@Array operators@@@Conditional assignment operators,,"+|||Addition|||$x + $y|||Sum of $x and $y|||Try it »&&&-|||Subtraction|||$x - $y|||Difference of $x and $y|||Try it »&&&*|||Multiplication|||$x * $y|||Product of $x and $y|||Try it »&&&/|||Division|||$x / $y|||Quotient of $x and $y|||Try it »&&&%|||Modulus|||$x % $y|||Remainder of $x divided by $y|||Try it »&&&**|||Exponentiation|||$x ** $y|||Result of raising $x to the $y'th power|||Try it »$$$&&&x = y|||x = y|||The left operand gets set to the value of the expression on the right|||Try it »&&&x += y|||x = x + y|||Addition|||Try it »&&&x -= y|||x = x - y|||Subtraction|||Try it »&&&x *= y|||x = x * y|||Multiplication|||Try it »&&&x /= y|||x = x / y|||Division|||Try it »&&&x %= y|||x = x % y|||Modulus|||Try it »$$$&&&==|||Equal|||$x == $y|||Returns true if $x is equal to $y|||Try it »&&&===|||Identical|||$x === $y|||Returns true if $x is equal to $y, and they are of the same type|||Try it »&&&!=|||Not equal|||$x != $y|||Returns true if $x is not equal to $y|||Try it »&&&<>|||Not equal|||$x <> $y|||Returns true if $x is not equal to $y|||Try it »&&&!==|||Not identical|||$x !== $y|||Returns true if $x is not equal to $y, or they are not of the same type|||Try it »&&&>|||Greater than|||$x > $y|||Returns true if $x is greater than $y|||Try it »&&&<|||Less than|||$x < $y|||Returns true if $x is less than $y|||Try it »&&&>=|||Greater than or equal to|||$x >= $y|||Returns true if $x is greater than or equal to $y|||Try it »&&&<=|||Less than or equal to|||$x <= $y|||Returns true if $x is less than or equal to $y|||Try it »&&&<=>|||Spaceship|||$x <=> $y|||Returns an integer less than, equal to, or greater than zero, depending on 
if $x is less than, equal to, or greater than $y. Introduced in PHP 7.|||Try it »$$$&&&++$x|||Pre-increment|||Increments $x by one, then returns $x|||Try it »&&&$x++|||Post-increment|||Returns $x, then increments $x by one|||Try it »&&&--$x|||Pre-decrement|||Decrements $x by one, then returns $x|||Try it »&&&$x--|||Post-decrement|||Returns $x, then decrements $x by one|||Try it »$$$&&&and|||And|||$x and $y|||True if both $x and $y are true|||Try it »&&&or|||Or|||$x or $y|||True if either $x or $y is true|||Try it »&&&xor|||Xor|||$x xor $y|||True if either $x or $y is true, but not both|||Try it »&&&&&|||And|||$x && $y|||True if both $x and $y are true|||Try it »&&&|||||Or|||$x || $y|||True if either $x or $y is true|||Try it »&&&!|||Not|||!$x|||True if $x is not true|||Try it »$$$&&&.|||Concatenation|||$txt1 . $txt2|||Concatenation of $txt1 and $txt2|||Try it »&&&.=|||Concatenation assignment|||$txt1 .= $txt2|||Appends $txt2 to $txt1|||Try it »$$$&&&+|||Union|||$x + $y|||Union of $x and $y|||Try it »&&&==|||Equality|||$x == $y|||Returns true if $x and $y have the same key/value pairs|||Try it »&&&===|||Identity|||$x === $y|||Returns true if $x and $y have the same key/value pairs in the same order and of the same types|||Try it »&&&!=|||Inequality|||$x != $y|||Returns true if $x is not equal to $y|||Try it »&&&<>|||Inequality|||$x <> $y|||Returns true if $x is not equal to $y|||Try it »&&&!==|||Non-identity|||$x !== $y|||Returns true if $x is not identical to $y|||Try it »$$$?:|||Ternary|||$x = expr1 ? expr2 : expr3|||Returns the value of $x.The value of $x is expr2 if expr1 
= TRUE.The value of $x is expr3 if expr1 = FALSE|||Try it »&&&??|||Null coalescing|||$x = expr1 ?? expr2|||Returns the value of $x.The value of $x is expr1 if expr1 
exists, and is not NULL.If expr1 does not exist, or is NULL, the value of $x is
expr2.Introduced in PHP 7|||Try it »",[]
PHP Tutorial,PHP If...Else...Elseif,https://www.w3schools.com/php/php_if_else.asp,"Conditional statements are used to perform different actions based on different conditions.|||Very often when you write code, you want to perform different actions for different conditions. You can use conditional statements in your code to do this.|||In PHP we have the following conditional statements:|||The if statement executes some code if one condition is true.|||Output ""Have a good day!"" if the current time (HOUR) is less than 20:|||The if...else statement executes some code if a condition is true and another code if that condition is false.|||Output ""Have a good day!"" if the current time is less than 20, and ""Have a   good night!"" otherwise:|||The if...elseif...else statement executes different codes for more than two conditions.|||Output ""Have a good morning!"" if the current time is less than 10, and   ""Have a good day!"" if the current time is less than 20. Otherwise it will   output ""Have a good night!"":|||The switch statement will be explained in the next chapter.|||Output ""Hello World"" if $a is greater than $b.",,if statement - executes some code if one condition is true@@@if...else statement - executes some code if a condition is true and another code if that condition is false@@@if...elseif...else statement  - executes different codes for more than two conditions@@@switch statement - selects one of many blocks of code to be executed,,,[]
PHP Tutorial,PHP Switch,https://www.w3schools.com/php/php_switch.asp,"The switch statement is used to perform different actions based on different conditions.|||Use the switch statement to select one of many blocks of code to be executed.|||This is how it works: First we have a single expression n (most often avariable), that is evaluated once. The value of the expression is then comparedwith the values for each case in the structure. If there is a match, the blockof code associated with that case is executed. Use break to prevent thecode from running into the next case automatically. The default statement is used if no match is found.|||Create a switch statement that will output ""Hello""if $color is ""red"", and ""welcome""if $color is ""green"".",,,,,[]
PHP Tutorial,PHP Loops,https://www.w3schools.com/php/php_looping.asp,"In the following chapters you will learn how to repeat code by using loops in PHP.|||Often when you write code, you want the same block of code to run over and over again a certain number of times. So, instead of adding several almost equal code-lines in a script, we can use loops.|||Loops are used to execute the same block of code again and again, as long as a certain condition is true.|||In PHP, we have the following loop types:|||The following chapters will explain and give examples of each loop type.",,"while - loops through a block of code as long as the specified condition is true@@@do...while - loops through a block of code once, and then repeats the loop   as long as the specified condition is true@@@for - loops through a block of code a specified number of times@@@foreach - loops through a block of code for each element in an   array",,,[]
PHP Tutorial,PHP Functions,https://www.w3schools.com/php/php_functions.asp,"The real power of PHP comes from its functions.|||PHP has more than 1000 built-in functions, and in addition you can create your own custom functions.|||PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.|||Please check out our PHP reference for a complete overview of thePHP built-in functions.|||Besides the built-in PHP functions, it is possible to create your own functions.|||A user-defined function declaration starts with the word function:|||Note: A function name must start with a letter or an underscore. Function names are NOT case-sensitive.|||Tip: Give the function a name that reflects what the function does!|||In the example below, we create a function named ""writeMsg()"". The opening curly brace ( { ) indicates the beginning of the function code, and the closing curly brace ( } ) indicates the end of the function. The function outputs ""Hello world!"". To call the function, just write its name followed by brackets ():|||Information can be passed to functions through arguments. An argument is just like a variable.|||Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. |||The following example has a function with one argument ($fname). When the familyName() function is called, we also pass along a name (e.g. Jani), and the name is used inside the function, which outputs several different first names, but an equal last name:|||The following example has a function with two arguments ($fname and $year):|||In the example above, notice that we did not have to tell PHP which data type the variable is.|||PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.|||In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a ""Fatal Error"" if the data type mismatches.|||In the following example we try to send both a number and a string to the function without using strict:|||To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file.|||In the following example we try to send both a number and a string to the function, but here we have added the strict declaration:|||The strict declaration forces things to be used in the intended way.|||The following example shows how to use a default parameter. If we call the function setHeight() without arguments it takes the default value as argument:|||To let a function return a value, use the return statement:|||PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a ""Fatal Error"" on a type mismatch.|||To declare a type for the function return, add a colon (: ) and the type right before the opening curly ( { )bracket when declaring the function.|||In the following example we specify the return type for the function:|||You can specify a different return type, than the argument types, but make sure the return is the correct type:|||In PHP, arguments are usually passed by value, which means that a copy of the value isused in the function and the variable that was passed into the function cannot be changed.|||When a function argument is passed by reference, changes to the argument also changethe variable that was passed in. To turn a function argument into a reference, the &operator is used:|||Use a pass-by-reference argument to update a variable:|||Create a function named myFunction.",PHP Default Argument Value,A function is a block of statements that can be used repeatedly in a program.@@@A function will not execute automatically when a page loads.@@@A function will be executed by a call to the function.,,,[]
PHP Tutorial,PHP Arrays,https://www.w3schools.com/php/php_arrays.asp,"An array stores multiple values in one single variable:|||An array is a special variable, which can hold more than one value at a time.|||If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:|||However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?|||The solution is to create an array!|||An array can hold many values under a single name, and you can access the values by referring to an index number.|||In PHP, the array() function is used to create an array:|||In PHP, there are three types of arrays:|||The count() function is used to return the length (the number of elements) of an array:|||For a complete reference of all array functions, go to our complete PHP Array Reference.|||The reference contains a brief description, and examples of use, for each function!|||Use the correct function to output the number of items in an array.",,Indexed arrays - Arrays with a numeric index@@@Associative arrays - Arrays with named keys@@@Multidimensional arrays - Arrays containing one or more arrays,,,[]
PHP Tutorial,PHP Superglobals,https://www.w3schools.com/php/php_superglobals.asp,"Superglobals were introduced in PHP 4.1.0, and are built-in variables that are always available in all scopes.|||Some predefined variables in PHP are ""superglobals"", which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.|||The PHP superglobal variables are:|||The next chapters will explain some of the superglobals, and the rest will be explained in later chapters.",,$GLOBALS@@@$_SERVER@@@$_REQUEST@@@$_POST@@@$_GET@@@$_FILES@@@$_ENV@@@$_COOKIE@@@$_SESSION,,,[]
PHP Tutorial,PHP RegEx,https://www.w3schools.com/php/php_regex.asp,"A regular expression is a sequence of characters that forms a search pattern.When you search for data in a text, you can use this search pattern to describe what youare searching for.|||A regular expression can be a single character, or a more complicated pattern.|||Regular expressions can be used to perform all types of text search and text replaceoperations.|||In PHP, regular expressions are strings composed of delimiters, a pattern and optionalmodifiers.|||In the example above, / is the delimiter, w3schools is the pattern that is being searched for,and i is a modifier that makes the search case-insensitive.|||The delimiter can be any character that is not a letter, number, backslash or space. Themost common delimiter is the forward slash (/), but when your pattern contains forwardslashes it is convenient to choose other delimiters such as # or ~.|||PHP provides a variety of functions that allow you to use regular expressions. Thepreg_match(), preg_match_all() and preg_replace() functions are some of themost commonly used ones:|||The preg_match() function will tell you whether a string contains matches of a pattern.|||Use a regular expression to do a case-insensitive search for ""w3schools"" in a string:|||The preg_match_all() function will tell you how many matches were found for a pattern in astring.|||Use a regular expression to do a case-insensitive count of the number ofoccurrences of ""ain"" in a string:|||The preg_replace() function will replace all of the matches of the pattern in a string withanother string.|||Use a case-insensitive regular expression to replace Microsoft withW3Schools in a string:|||Modifiers can change how a search is performed.|||Brackets are used to find a range of characters:|||Metacharacters are characters with a special meaning:|||Quantifiers define quantities:|||Note: If your expression needs to search for one of the special characters you can use abackslash ( \ ) to escape them.For example, to search for one or more question marks you can use the followingexpression: $pattern = '/\?+/';|||You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be usedto select parts of the pattern to be used as a match.|||Use grouping to search for the word ""banana"" by looking for ba followed bytwo instances of na:|||For a complete reference, go to our Complete PHP Regular Expression Reference.|||The reference contains descriptions and examples of all Regular Expression functions.",What is a Regular Expression?|||Syntax|||Regular Expression Functions|||Example|||Example|||Example|||Complete RegExp Reference,,,"preg_match()|||Returns 1 if the pattern was found in the string and 0 if not&&&preg_match_all()|||Returns the number of times the pattern was found in the string, which may also be 0&&&preg_replace()|||Returns a new string where matched patterns have been replaced with another string$$$&&&i|||Performs a case-insensitive search&&&m|||Performs a multiline search (patterns that search for the
beginning or end of a string will match the beginning or end
of each line)&&&u|||Enables correct matching of UTF-8 encoded patterns$$$&&&[abc]|||Find one character from the options between the brackets&&&[^abc]|||Find any character NOT between the brackets&&&[0-9]|||Find one character from the range 0 to 9$$$&&&||||Find a match for any one of the patterns separated by | as in: cat|dog|fish&&&.|||Find just one instance of any character&&&^|||Finds a match as the beginning of a string as in: ^Hello&&&$|||Finds a match at the end of the string as in: World$&&&\d|||Find a digit&&&\s|||Find a whitespace character&&&\b|||Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b&&&\uxxxx|||Find the Unicode character specified by the hexadecimal number xxxx$$$n+|||Matches any string that contains at least one n&&&n*|||Matches any string that contains zero or more occurrences of n&&&n?|||Matches any string that contains zero or one occurrences of n&&&n{x}|||Matches any string that contains a sequence of X n's&&&n{x,y}|||Matches any string that contains a sequence of X to Y n's&&&n{x,}|||Matches any string that contains a sequence of at least X n's",[]
PHP Forms,PHP Form Handling,https://www.w3schools.com/php/php_forms.asp,"The PHP superglobals $_GET and $_POST are used to collect form-data.|||The example below displays a simple HTML form with two input fields and a submit button:|||When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named ""welcome.php"". The form data is sent with the HTTP POST method.|||To display the submitted data you could simply echo all the variables. The ""welcome.php"" looks like this:|||The output could be something like this:|||The same result could also be achieved using the HTTP GET method:|||and ""welcome_get.php"" looks like this:|||The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code.|||Think SECURITY when processing PHP forms!|||This page does not contain any form validation, it just shows how you can send and retrieve form data.|||However, the next pages will show how to process PHP forms with security in mind! Proper validation of form data is important to protect your form from hackers and spammers!|||Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user.|||Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function,class or file without having to do anything special.|||$_GET is an array of variables passed to the current script via the URL parameters.|||$_POST is an array of variables passed to the current script via the HTTP POST method.|||Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases.|||GET may be used for sending non-sensitive data.|||Note: GET should NEVER be used for sending passwords or other sensitive information!|||Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send.|||Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.|||However, because the variables are not displayed in the URL, it is not possible to bookmark the page.|||Developers prefer POST for sending form data.|||Next, lets see how we can process PHP forms the secure way!|||If the form in the white section below gets submitted, how can you, in welcome.php, output the value from the ""first name"" field?",,,,,[]
PHP Forms,PHP Form Validation,https://www.w3schools.com/php/php_form_validation.asp,"This and the next chapters show how to use PHP to validate form data.|||Think SECURITY when processing PHP forms!These pages will show how to process PHP forms with security in mind. Proper validation of form data is important to protect your form from hackers and spammers!|||Think SECURITY when processing PHP forms!|||These pages will show how to process PHP forms with security in mind. Proper validation of form data is important to protect your form from hackers and spammers!|||The HTML form we will be working at in these chapters, contains various input fields: required and optional text fields, radio buttons, and a submit button:|||The validation rules for the form above are as follows:|||First we will look at the plain HTML code for the form:|||The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this:|||The gender fields are radio buttons and the HTML code looks like this:|||The HTML code of the form looks like this:|||When the form is submitted, the form data is sent with method=""post"".|||What is the $_SERVER[""PHP_SELF""] variable?The $_SERVER[""PHP_SELF""] is a super global variable that returns the filename of the currently executing script.|||So, the $_SERVER[""PHP_SELF""] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form.|||What is the htmlspecialchars() function?The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with &lt; and &gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code(Cross-site Scripting attacks) in forms.|||The $_SERVER[""PHP_SELF""] variable can be used by hackers!|||If PHP_SELF is used in your page then a user can enter a slash (/) and thensome Cross Site Scripting (XSS) commands to execute.|||Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users.|||Assume we have the following form in a page named ""test_form.php"":|||Now, if a user enters the normal URL in the address bar like ""http://www.example.com/test_form.php"", the above code will be translated to:|||So far, so good.|||However, consider that a user enters the following URL in the address bar:|||In this case, the above code will be translated to:|||This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited.|||Be aware of that any JavaScript code can be added inside the  <script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example.|||$_SERVER[""PHP_SELF""] exploits can be avoided by using the htmlspecialchars() function.|||The form code should look like this:|||The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output:|||The exploit attempt fails, and no harm is done!|||The first thing we will do is to pass all variables through PHP's htmlspecialchars() function.|||When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field:|||<script>location.href('http://www.hacked.com')</script>|||- this would not be executed, because it would be saved as HTML escaped code, like this:|||&lt;script&gt;location.href('http://www.hacked.com')&lt;/script&gt;|||The code is now safe to be displayed on a page or inside an e-mail.|||We will also do two more things when the user submits the form:|||The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again).|||We will name the function test_input().|||Now, we can check each $_POST variable with the test_input() function, and the script looks like this:|||Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[""REQUEST_METHOD""]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form.|||However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data.|||The next step is to make input fields required and create error messages if needed.",,,"Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function)@@@Remove backslashes (\) from the user input data (with the PHP stripslashes() function)","Name|||Required. + Must only contain letters and whitespace&&&E-mail|||Required. + Must contain a valid email address (with @ and .)&&&Website|||Optional. If present, it must contain a valid URL&&&Comment|||Optional. Multi-line input field (textarea)&&&Gender|||Required. Must select one",[]
PHP Forms,PHP Form Required,https://www.w3schools.com/php/php_form_required.asp,"This chapter shows how to make input fields required and create error messages if needed.|||From the validation rules table on the previous page, we see that the ""Name"", ""E-mail"", and ""Gender"" fields are required. These fields cannot be empty and must be filled out in the HTML form.|||In the previous chapter, all input fields were optional. |||In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function:|||Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields):|||The next step is to validate the input data, that is ""Does the Name field contain only letters and whitespace?"", and ""Does the E-mail field contain a valid e-mail address syntax?"", and if filled out, ""Does the Website field contain a valid URL?"".",PHP - Required Fields,,,"Name|||Required. + Must only contain letters and whitespace&&&E-mail|||Required. + Must contain a valid email address (with @ and .)&&&Website|||Optional. If present, it must contain a valid URL&&&Comment|||Optional. Multi-line input field (textarea)&&&Gender|||Required. Must select one",[]
PHP Forms,PHP Form URL/E-mail,https://www.w3schools.com/php/php_form_url_email.asp,"This chapter shows how to validate names, e-mails, and URLs.|||The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message:|||The preg_match() function searches a string for pattern, returning true if the pattern exists, and false otherwise.|||The preg_match() function searches a string for pattern, returning true if the pattern exists, and false otherwise.|||The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function.|||In the code below, if the e-mail address is not well-formed, then store an error message:|||The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message:|||Now, the script looks like this:|||The next step is to show how to prevent the form from emptying all the input fields when the user submits the form.",,,,,[]
PHP Forms,PHP Form Complete,https://www.w3schools.com/php/php_form_complete.asp,"This chapter shows how to keep the values in the input fields when the user hits the submit button.|||To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <textarea> and </textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. |||Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons):|||Here is the complete code for the PHP Form Validation Example:",,,,,[]
PHP Advanced,PHP Date and Time,https://www.w3schools.com/php/php_date.asp,"The PHP date() function is used to format a date and/or a time.|||The PHP date() function formats a timestamp to a more readable date and time.|||A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred.|||A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred.|||The required format parameter of the date() function specifies how to format the date (or time).|||Here are some characters that are commonly used for dates:|||Other characters, like""/"", ""."", or ""-"" can also be inserted between the characters to add additional formatting.|||The example below formats today's date in three different ways:|||Use the date() function to automatically update the copyright year on your website:|||Here are some characters that are commonly used for times:|||The example below outputs the current time in the specified format:|||Note that the PHP date() function will return the current date/time of the server!|||Note that the PHP date() function will return the current date/time of the server!|||If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone.|||So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. |||The example below sets the timezone to ""America/New_York"", then outputs the current time in the specified format:|||The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above).|||The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.|||The example below creates a date and time with the date() function from a number of parameters in the mktime() function:|||The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT).|||The example below creates a date and time from the strtotime() function:|||PHP is quite clever about converting a string to a date, so you can put in various values:|||However, strtotime() is not perfect, so remember to check the strings you put in there.|||The example below outputs the dates for the next six Saturdays:|||The example below outputs the number of days until 4th of July:|||For a complete reference of all date functions, go to our completePHP Date Reference.|||The reference contains a brief description, and examples of use, for each function!|||Use the correct date function to output the weekday name of today (monday, tuesday etc.).",,d - Represents the day of the month (01 to 31) @@@m - Represents a month (01 to 12)@@@Y - Represents a year (in four digits)@@@l (lowercase 'L') - Represents the day of the week|||H - 24-hour format of an hour (00 to 23)@@@h - 12-hour format of an hour with leading zeros (01 to 12) @@@i - Minutes with leading zeros (00 to 59)@@@s - Seconds with leading zeros (00 to 59)@@@a - Lowercase Ante meridiem and Post meridiem (am or pm),,format|||Required. Specifies the format of the timestamp&&&timestamp|||Optional. Specifies a timestamp. Default is the current date and time,[]
PHP Advanced,PHP Include,https://www.w3schools.com/php/php_includes.asp,"The include (or require) statement takes all the text/code/markup that exists in the specified file and copies it intothe file that uses the include statement.|||Including files is very useful when you want to include the same PHP,HTML, or text on multiple pages of a website.|||It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement.|||The include and require statements are identical, except upon failure:|||So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing.|||Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.|||Assume we have a standard footer file called ""footer.php"", that looks like this:|||To include the footer file in a page, use the include statement:|||Assume we have a standard menu file called ""menu.php"":|||All pages in the Web site should use this menu file. Here is how it can be done (we are using a <div> element so that the menu easily can be styled with CSS later):|||Assume we have a file called ""vars.php"", with some variables defined:|||Then, if we include the ""vars.php"" file, the variables can be used in the calling file:|||The require statement is also used to include a file into the PHP code.|||However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute:|||If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error:|||Use require when the file is required by the application.|||Use include when the file is not required and application should continue when file is not found.|||Write a correct syntax to include a file named ""footer.php"".",,require will produce a fatal error (E_COMPILE_ERROR) and stop the script@@@include will only produce a warning (E_WARNING) and the script will continue,,,[]
PHP Advanced,PHP File Handling,https://www.w3schools.com/php/php_file.asp,"File handling is an important part of any web application. You often need to open and process a file for different tasks.|||PHP has several functions for creating, reading, uploading, and editing files.|||Be careful when manipulating files!When you are manipulating files you must be very careful. You can do a lot of damage if you do something wrong. Common errors are: editing the wrong file, filling a hard-drive with garbage data, and deleting the content of a file by accident.|||Be careful when manipulating files!|||You can do a lot of damage if you do something wrong. Common errors are: editing the wrong file, filling a hard-drive with garbage data, and deleting the content of a file by accident.|||The readfile() function reads a file and writes it to the output buffer.|||Assume we have a text file called ""webdictionary.txt"", stored on the server, that looks like this:|||The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success):|||The readfile() function is useful if all you want to do is open up a file and read its contents.|||The next chapters will teach you more about file handling.|||Assume we have a file named ""webdict.txt"", write the correct syntax to open and read the file content.",,,,,[]
PHP Advanced,PHP File Open/Read,https://www.w3schools.com/php/php_file_open.asp,"In this chapter we will teach you how to open, read, and close a file on the server.|||A better method to open files is with the fopen() function. This function gives you more options than the readfile() function.|||We will use the text file, ""webdictionary.txt"", during the lessons:|||The first parameter of fopen() contains the name of the file to be opened and the second parameter specifies in which mode the file should be opened. The following example also generates a message if the fopen() function is unable to open the specified file:|||Tip: The fread() and the fclose() functions will be explained below.|||The file may be opened in one of the following modes:|||The fread() function reads from an open file.|||The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read.|||The following PHP code reads the ""webdictionary.txt"" file to the end:|||The fclose() function is used to close an open file.|||It's a good programming practice to close all files after you have finished with them. You don't want an open file running around on your server taking up resources!|||The fclose() requires the name of the file (or a variable that holds the filename) we want to close:|||The fgets() function is used to read a single line from a file.|||The example below outputs the first line of the ""webdictionary.txt"" file:|||Note: After a call to the fgets() function, the file pointer has moved to the next line.|||The feof() function checks if the ""end-of-file"" (EOF) has been reached.|||The feof() function is useful for looping through data of unknown length.|||The example below reads the ""webdictionary.txt"" file line by line, until end-of-file is reached:|||The fgetc() function is used to read a single character from a file.|||The example below reads the ""webdictionary.txt"" file character by character, until end-of-file is reached:|||Note: After a call to the fgetc() function, the file pointer moves to the next character.|||For a complete reference of filesystem functions, go to our completePHP Filesystem Reference.|||Open a file, and write the correct syntax to output one character at the time, until end-of-file.",,,,r|||Open a file for read only. File pointer starts at the beginning of the file&&&w|||Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file&&&a|||Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist&&&x|||Creates a new file for write only. Returns FALSE and an error if file already exists&&&r+|||Open a file for read/write. File pointer starts at the beginning of the file&&&w+|||Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file&&&a+|||Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist&&&x+|||Creates a new file for read/write. Returns FALSE and an error if file already exists,[]
PHP Advanced,PHP File Create/Write,https://www.w3schools.com/php/php_file_create.asp,"In this chapter we will teach you how to create and write to a file on the server.|||The fopen() function is also used to create a file. Maybe a little confusing, but in PHP, a file is created using the same function used to open files.|||If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a).|||The example below creates a new file called ""testfile.txt"". The file will be created in the same directory where the PHP code resides:|||If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive.|||The fwrite() function is used to write to a file.|||The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written.|||The example below writes a couple of names into a new file called ""newfile.txt"":|||Notice that we wrote to the file ""newfile.txt"" twice. Each time we wrote to the file we sent the string $txt that first contained ""John Doe"" and second contained ""Jane Doe"". After we finished writing, we closed the file using the fclose() function.|||If we open the ""newfile.txt"" file it would look like this:|||Now that ""newfile.txt"" contains some data we can show what happens when we open an existing file for writing. All the existing data will be ERASED and we start with an empty file.|||In the example below we open our existing file ""newfile.txt"", and write some new data into it:|||If we now open the ""newfile.txt"" file, both John and Jane have vanished, and only the data we just wrote is present:|||For a complete reference of filesystem functions, go to our completePHP Filesystem Reference.",,,,,[]
PHP Advanced,PHP File Upload,https://www.w3schools.com/php/php_file_upload.asp,"With PHP, it is easy to upload files to the server.|||However, with ease comes danger, so always be careful when allowing file uploads!|||First, ensure that PHP is configured to allow file uploads.|||In your ""php.ini"" file, search for the file_uploads directive, and set it to On:|||Next, create an HTML form that allow users to choose the image file they want to upload:|||Some rules to follow for the HTML form above:|||Without the requirements above, the file upload will not work.|||Other things to notice:|||The form above sends data to a file called ""upload.php"", which we will create next.|||The ""upload.php"" file contains the code for uploading a file:|||PHP script explained:|||Note: You will need to create a new directory called ""uploads"" in the directory where ""upload.php"" file resides. The uploaded files will be saved there.|||Note: You will need to create a new directory called ""uploads"" in the directory where ""upload.php"" file resides. The uploaded files will be saved there.|||Now we can add some restrictions.|||First, we will check if the file already exists in the ""uploads"" folder. If it does, an error message is displayed, and $uploadOk is set to 0:|||The file input field in our HTML form above is named ""fileToUpload"".|||Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0:|||The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0:|||The complete ""upload.php"" file now looks like this:|||For a complete reference of filesystem functions, go to our completePHP Filesystem Reference.",,"Make sure that the form uses method=""post""@@@The form also needs the following attribute: enctype=""multipart/form-data"". It specifies which content-type to use when submitting the form|||The type=""file"" attribute of the <input> tag shows the input field as a file-select control, with a ""Browse"" button next to the input control |||$target_dir = ""uploads/"" - specifies the directory where the file is going to be placed@@@$target_file specifies the path of the file to be uploaded@@@$uploadOk=1 is not used yet (will be used later)@@@$imageFileType holds the file extension of the file (in lower case)@@@Next, check if the image file is an actual image or a fake image",,,[]
PHP Advanced,PHP Cookies,https://www.w3schools.com/php/php_cookies.asp,"A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.|||A cookie is created with the setcookie() function.|||Only the name parameter is required. All other parameters are optional.|||The following example creates a cookie named ""user"" with the value ""John Doe"". The cookie will expire after 30 days (86400 * 30). The ""/"" means that the cookie is available in entire website (otherwise, select the directory you prefer).|||We then retrieve the value of the cookie ""user"" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set:|||Note: The setcookie() function must appear BEFORE the <html> tag.|||Note: The setcookie() function must appear BEFORE the <html> tag.|||Note: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).|||To modify a cookie, just set (again) the cookie using the setcookie() function:|||To delete a cookie, use the setcookie() function with an expiration date in the past:|||The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable:|||For a complete reference of Network functions, go to our completePHP Network Reference.|||Create a cookie named ""username"".",,,,,[]
PHP Advanced,PHP Sessions,https://www.w3schools.com/php/php_sessions.asp,"A session is a way to store information (in variables) to be used across multiple pages.|||Unlike a cookie, the information is not stored on the users computer.|||When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state.|||Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser.|||So; Session variables hold information about one single user, and are available to all pages in one application.|||Tip: If you need a permanent storage, you may want to store the data in a database.|||A session is started with the session_start() function.|||Session variables are set with the PHP global variable: $_SESSION.|||Now, let's create a new page called ""demo_session1.php"". In this page, we start a new PHP session and set some session variables:|||Note: The session_start() function must be the very first thing in your document. Before any HTML tags.|||Next, we create another page called ""demo_session2.php"". From this page, we will access the session information we set on the first page (""demo_session1.php"").|||Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()).|||Also notice that all session variable values are stored in the global $_SESSION variable:|||Another way to show all the session variable values for a user session is to run the following code:|||How does it work? How does it know it's me?Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.|||To change a session variable, just overwrite it:|||To remove all global session variables and destroy the session, use session_unset()and session_destroy():|||Create a session variable named ""favcolor"".",,,,,[]
PHP Advanced,PHP Filters,https://www.w3schools.com/php/php_filter.asp,"Validating data = Determine if the data is in proper form.|||Sanitizing data = Remove any illegal character from the data.|||PHP filters are used to validate and sanitize external input.|||The PHP filter extension has many of the functions needed for checking user input,and is designed to make data validation easier and quicker.|||The filter_list() function can be used to list what the PHP filter extension offers: |||Many web applications receive external input. External input/data can be:|||You should always validate external data!Invalid submitted data can lead to security problems and break your webpage!By using PHP filters you can be sure your application gets the correct input!|||You should always validate external data!Invalid submitted data can lead to security problems and break your webpage!By using PHP filters you can be sure your application gets the correct input!|||The filter_var() function both validate and sanitize data.|||The filter_var() function filters a single variable with a specified filter. It takes two pieces of data:|||The following example uses the filter_var() function to remove all HTML tags from a string:|||The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer,the output of the code below will be: ""Integer is valid"". If $int is not an integer, the output will be: ""Integer is not valid"":|||In the example above, if $int was set to 0, the function above will return ""Integer is not valid"". To solve this problem, use the code below:|||The following example uses the filter_var() function to check if the variable $ip is a valid IP address:|||The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address:|||The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL:|||For a complete reference of all filter functions, go to our completePHP Filter Reference. Check each filter to see what options and flags are available.|||The reference contains a brief description, and examples of use, for each function!",,User input from a form@@@Cookies@@@Web services data@@@Server variables@@@Database query results|||The variable you want to check@@@The type of check to use,,,[]
PHP Advanced,PHP Filters Advanced,https://www.w3schools.com/php/php_filter_advanced.asp,"The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200:|||The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address:|||The following example uses the filter_var() function to check if the variable $url is a URL with a querystring:|||The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string:|||For a complete reference of all filter functions, go to our completePHP Filter Reference. Check each filter to see what options and flags are available.|||The reference contains a brief description, and examples of use, for each function!",,,,,[]
PHP Advanced,PHP Callback Functions,https://www.w3schools.com/php/php_callback_functions.asp,"A callback function (often referred to as just ""callback"") is a function which is passed as anargument into another function.|||Any existing function can be used as a callback function. To use a function as a callbackfunction, pass a string containing the name of the function as the argument of anotherfunction:|||Pass a callback to PHP's array_map() function to calculate the length ofevery string in an array:|||Starting with version 7, PHP can pass anonymous functions as callback functions:|||Use an anonymous function as a callback for PHP's array_map() function:|||User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions:|||Run a callback from a user-defined function:",Example,,,,[]
PHP Advanced,PHP JSON,https://www.w3schools.com/php/php_json.asp,"JSON stands for JavaScript Object Notation, and is a syntax for storing and exchanging data.|||Since the JSON format is a text-based format, it can easily be sent to and from a server, and used as a data format by any programming language.|||PHP has some built-in functions to handle JSON.|||First, we will look at the following two functions:|||The json_encode() function is used to encode a value to JSON format.|||This example shows how to encode an associative array into a JSON object:|||This example shows how to encode an indexed array into a JSON array:|||The json_decode() function is used to decode a JSON object into a PHP object or an associative array.|||This example decodes JSON data into a PHP object:|||The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays.|||This example decodes JSON data into a PHP associative array:|||Here are two examples of how to access the decoded values from an object and from an associative array:|||This example shows how to access the values from a PHP object:|||This example shows how to access the values from a PHP associative array:|||You can also loop through the values with a foreach() loop:|||This example shows how to loop through the values of a PHP object:|||This example shows how to loop through the values of a PHP associative array:",,json_encode()@@@json_decode() ,,,"[['\n  <?php', '$age = array(""Peter""=>35, ""Ben""=>37, ""Joe""=>43);', '\n', 'echo json_encode($age);', '?>'], ['\n  <?php', '$cars = array(""Volvo"", ""BMW"", ""Toyota"");', 'echo json_encode($cars);', '?>'], ['\n  <?php', '$jsonobj = \'{""Peter"":35,""Ben"":37,""Joe"":43}\';', 'var_dump(json_decode($jsonobj));', '?>'], ['\n  <?php', '$jsonobj = \'{""Peter"":35,""Ben"":37,""Joe"":43}\';', 'var_dump(json_decode($jsonobj, \n  true));', '?>'], ['\n  <?php', '$jsonobj = \'{""Peter"":35,""Ben"":37,""Joe"":43}\';', '\n  $obj = json_decode($jsonobj);', 'echo $obj->Peter;', 'echo $obj->Ben;', '\n  echo $obj->Joe;', '?>'], ['\n  <?php', '$jsonobj = \'{""Peter"":35,""Ben"":37,""Joe"":43}\';', '\n  $arr = json_decode($jsonobj, true);', 'echo $arr[""Peter""];', 'echo $arr[""Ben""];', '\n  echo $arr[""Joe""];', '?>'], ['\n  <?php', '$jsonobj = \'{""Peter"":35,""Ben"":37,""Joe"":43}\';', '\n  $obj = json_decode($jsonobj);', 'foreach($obj \n  as $key => $value) {', '\xa0 echo $key . "" => "" . $value . ""<br>"";', '}', '?>'], ['\n  <?php', '$jsonobj = \'{""Peter"":35,""Ben"":37,""Joe"":43}\';', '\n  $arr = json_decode($jsonobj, true);', 'foreach($arr as $key => $value) {', '\xa0 echo $key . "" => "" . $value \n  . ""<br>"";', '}', '?>']]"
PHP Advanced,PHP Exceptions,https://www.w3schools.com/php/php_exceptions.asp,"An exception is an object that describes an error or unexpected behaviour of a PHP script.Exceptions are thrown by many PHP functions and classes.User defined functions and classes can also throw exceptions.Exceptions are a good way to stop a function when it comes across data that it cannotuse.Throwing an ExceptionThe throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed.If an exception is not caught, a fatal error will occur with an ""Uncaught Exception"" message.Lets try to throw an exception without catching it:Example <?phpfunction divide($dividend, $divisor) {  if($divisor == 0)   {    throw new Exception(""Division by zero"");  }    return $dividend / $divisor;}echo divide(5, 0);?>Try it Yourself »The result will look something like this:Fatal error: Uncaught Exception: Division by zero in   C:\webfolder\test.php:4Stack trace: #0 C:\webfolder\test.php(9):   divide(5, 0) #1 {main} thrown in C:\webfolder\test.php on line 4The try...catch StatementTo avoid the error from the example above, we can use thetry...catch statement to catch exceptions and continue the process.Syntax  try {  code that can throw exceptions} catch(Exception $e) {    code that runs when an exception is caught}ExampleShow a message when an exception is thrown: <?phpfunction divide($dividend, $divisor) {  if($divisor ==   0) {    throw new Exception(""Division by zero"");    }  return $dividend / $divisor;}try {  echo   divide(5, 0);} catch(Exception $e) {  echo ""Unable to divide."";  }?>Try it Yourself »The catch block indicates what type of exception should be caught and the name of thevariable which can be used to access the exception. In the example above, the type ofexception is Exception and the variable name is $e.The try...catch...finally StatementThe try...catch...finally statement can be used to catch exceptions. Code in thefinally block will always run regardless of whether an exception was caught. Iffinally is present, the catch block is optional.Syntax  try {  code that can throw exceptions} catch(Exception $e) {    code that runs when an exception is caught} finally {  code that   always runs regardless of whether an exception was caught}ExampleShow a message when an exception is thrown and then indicate that the process has ended: <?phpfunction divide($dividend, $divisor) {  if($divisor   == 0) {    throw new Exception(""Division by zero"");    }  return $dividend / $divisor;}try {  echo   divide(5, 0);} catch(Exception $e) {  echo ""Unable to   divide. "";} finally {  echo ""Process complete."";}?>Try it Yourself »ExampleOutput a string even if an exception was not caught: <?phpfunction divide($dividend, $divisor) {  if($divisor == 0)   {    throw new Exception(""Division by zero"");  }    return $dividend / $divisor;}try {  echo divide(5, 0);} finally {  echo   ""Process complete."";}?>Try it Yourself »The Exception ObjectThe Exception Object contains information about the error or unexpected behaviour thatthe function encountered.Syntax  new Exception(message, code, previous)Parameter ValuesParameterDescriptionmessageOptional. A string describing why the exception was throwncodeOptional. An integer that can be used used to easily distinguish this exception from others of the same typepreviousOptional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameterMethodsWhen catching an exception, the following table shows some of the methods that can be used toget information about the exception:MethodDescriptiongetMessage()Returns a string describing why the exception was throwngetPrevious()If this exception was triggered by another one, this method returns the previous exception. If not, then it returns nullgetCode()Returns the exception codegetFile()Returns the full path of the file in which the exception was throwngetLine()Returns the line number of the line of code which threw the exceptionExampleOutput information about an exception that was thrown: <?phpfunction divide($dividend, $divisor) {  if($divisor == 0)   {    throw new Exception(""Division by zero"", 1);    }  return $dividend / $divisor;}try {  echo   divide(5, 0);} catch(Exception $ex) {  $code = $ex->getCode();    $message = $ex->getMessage();  $file = $ex->getFile();    $line = $ex->getLine();  echo ""Exception thrown in $file on line   $line: [Code $code]  $message"";}?>Try it Yourself »Complete Exception ReferenceFor a complete reference, go to our Complete PHP Exception Reference.The reference contains descriptions and examples of all Exception methods.❮ PreviousNext ❯|||Exceptions are thrown by many PHP functions and classes.|||User defined functions and classes can also throw exceptions.|||Exceptions are a good way to stop a function when it comes across data that it cannotuse.|||The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed.|||If an exception is not caught, a fatal error will occur with an ""Uncaught Exception"" message.|||Lets try to throw an exception without catching it:|||The result will look something like this:|||To avoid the error from the example above, we can use thetry...catch statement to catch exceptions and continue the process.|||Show a message when an exception is thrown:|||The catch block indicates what type of exception should be caught and the name of thevariable which can be used to access the exception. In the example above, the type ofexception is Exception and the variable name is $e.|||The try...catch...finally statement can be used to catch exceptions. Code in thefinally block will always run regardless of whether an exception was caught. Iffinally is present, the catch block is optional.|||Show a message when an exception is thrown and then indicate that the process has ended:|||Output a string even if an exception was not caught:|||The Exception Object contains information about the error or unexpected behaviour thatthe function encountered.|||When catching an exception, the following table shows some of the methods that can be used toget information about the exception:|||Output information about an exception that was thrown:|||For a complete reference, go to our Complete PHP Exception Reference.|||The reference contains descriptions and examples of all Exception methods.",,,,"message|||Optional. A string describing why the exception was thrown&&&code|||Optional. An integer that can be used used to easily distinguish this exception from others of the same type&&&previous|||Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter$$$getMessage()|||Returns a string describing why the exception was thrown&&&getPrevious()|||If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null&&&getCode()|||Returns the exception code&&&getFile()|||Returns the full path of the file in which the exception was thrown&&&getLine()|||Returns the line number of the line of code which threw the exception",[]
PHP OOP,PHP What is OOP,https://www.w3schools.com/php/php_oop_what_is.asp,"From PHP5, you can also write PHP code in an object-oriented style.|||Object-Oriented programming is faster and easier to execute.|||OOP stands for Object-Oriented Programming.|||Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.|||Object-oriented programming has several advantages over procedural programming:|||Tip: The ""Don't Repeat Yourself"" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.|||Classes and objects are the two main aspects of object-oriented programming.|||Look at the following illustration to see the difference between class and objects:|||Fruit|||Apple|||Banana|||Mango|||Another example:|||Car|||Volvo|||Audi|||Toyota|||So, a class is a template for objects, and an object is an instance of a class.|||When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.|||Look at the next chapters to learn more about OOP.",,"OOP is faster and easier to execute@@@OOP provides a clear structure for the programs@@@OOP helps to keep the PHP code DRY ""Don't Repeat Yourself"", and makes   the   code easier to maintain, modify and debug@@@OOP makes it possible to create full reusable   applications with less code and shorter development time",,,[]
PHP OOP,PHP Classes/Objects,https://www.w3schools.com/php/php_oop_classes_objects.asp,"A class is a template for objects, and an object is an instance of class.|||Let's assume we have a class named Fruit. A Fruit can have properties like name, color, weight, etc. We can define variables like $name, $color, and $weight to hold the values of these properties.|||When the individual objects (apple, banana, etc.) are created, they inherit all the  properties and behaviors from the class, but each object will have different values for the properties.|||A class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces:|||Below we declare a class named Fruit consisting of two properties ($name and $color) and two methods set_name() and get_name() for setting and getting the $name property:|||Note: In a class, variables are called properties and functions are called methods!|||Classes are nothing without objects! We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values.|||Objects of a class is created using the new keyword.|||In the example below, $apple and $banana are instances of the class Fruit:|||In the example below, we add two more methods to class Fruit, for setting and getting the $color property:|||The $this keyword refers to the current object, and is only available inside methods.|||Look at the following example:|||So, where can we change the value of the $name property? There are two ways:|||1. Inside the class (by adding a set_name() method and use $this):|||2. Outside the class (by directly changing the property value):|||You can use the instanceof keyword to check if an object belongs to a specific class:",Define Objects,,,,[]
PHP OOP,PHP Constructor,https://www.w3schools.com/php/php_oop_constructor.asp,"A constructor allows you to initialize an object's properties upon creation of the object.|||If you create a __construct() function, PHP will automatically call this function when you create an object from a class.|||Notice that the construct function starts with two underscores (__)!|||We see in the example below, that using a constructor saves us from  calling the set_name() method which reduces the amount of code:|||Another example:",,,,,[]
PHP OOP,PHP Destructor,https://www.w3schools.com/php/php_oop_destructor.asp,"A destructor is called when the object is destructed or the script is stopped or exited.|||If you create a __destruct() function, PHP will automatically call this function at the end of the script.|||Notice that the destruct function starts with two underscores (__)!|||The example below has a __construct() function that is automatically called when you create an object from a class, and a __destruct() function that is automatically called at the end of the script:|||Another example:|||Tip: As constructors and destructors helps reducing the amount of code, they are very useful!",,,,,[]
PHP OOP,PHP Access Modifiers,https://www.w3schools.com/php/php_oop_access_modifiers.asp,"Properties and methods can have access modifiers which control where they can be accessed.|||There are three access modifiers:|||In the following example we have added three different access modifiers to three properties (name, color, and weight). Here, if you try to set the name property it will work fine (because the name property is public, and can be accessed from everywhere). However, if you try to set the color or weight property it will result in a fatal error (because the color and weight property are protected and private):|||In the next example we have added access modifiers to two functions. Here, if you try to call the set_color() or the set_weight() function it will result in a fatal error (because the two functions are considered protected and private), even if all the properties are public:",, public - the property or   method can be accessed from everywhere. This is default@@@ protected - the property or method can   be accessed within the   class and by classes derived from that class@@@ private - the property or method can   ONLY be accessed within the class,,,[]
PHP OOP,PHP Inheritance,https://www.w3schools.com/php/php_oop_inheritance.asp,"Inheritance in OOP = When a class derives from another class.|||The child class will inherit all the public and protected properties and methods from the parent class. In addition, it can have its own properties and methods.|||An inherited class is defined by using the extends keyword.|||Let's look at an example:|||The Strawberry class is inherited from the Fruit class. |||This means that the Strawberry class can use the public $name and $color properties as well as the public __construct() and intro() methods from the Fruit class because of inheritance.|||The Strawberry class also has its own method: message().|||In the previous chapter we learned that protected properties or methods can   be accessed within the   class and by classes derived from that class. What does that mean?|||Let's look at an example:|||In the example above we see that if we try to call a protected method (intro()) from outside the class, we will receive an error. public methods will work fine!|||Let's look at another example:|||In the example above we see that all works fine! It is because we call theprotected method (intro()) from inside the derived class.|||Inherited methods can be overridden by redefining the methods (use the same name) in the child class.|||Look at the example below. The __construct() and intro() methods in the child class (Strawberry) will override the __construct() and intro() methods in the parent class (Fruit):|||The final keyword can be used to prevent class inheritance or to prevent method overriding.|||The following example shows how to prevent class inheritance:|||The following example shows how to prevent method overriding:",,,,,[]
PHP OOP,PHP Constants,https://www.w3schools.com/php/php_oop_constants.asp,"Constants cannot be changed once it is declared.|||Class constants can be useful if you need to define some constant data within a class.|||A class constant is declared inside a class with the const keyword.|||Class constants are case-sensitive. However, it is recommended to name the constants in all uppercase letters.|||We can access a constant from outside the class by using the class name followed by the scope resolution operator (::) followed by the constant name, like here:|||Or, we can access a constant from inside the class by using the self keyword followed by the scope resolution operator (::) followed by the constant name, like here:",,,,,[]
PHP OOP,PHP Abstract Classes,https://www.w3schools.com/php/php_oop_classes_abstract.asp,"Abstract classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks.|||An abstract class is a class that contains at least one abstract method. An abstract method is a method that is declared, but not implemented in the code.|||An abstract class or method is defined with the abstract keyword:|||When inheriting from an abstract class, the child class method must be defined with the same name, and the same or a less restricted access modifier. So, if the abstract method is defined as protected, the child class method must be defined as either protected or public, but not private. Also, the type and number of required arguments must be the same. However, the child classes may have optional arguments in addition.|||So, when a child class is inherited from an abstract class, we have the following rules:|||Let's look at an example:|||The Audi, Volvo, and Citroen classes are inherited from the Car class. This means that the Audi, Volvo, and Citroen classes can use the public $name property as well as the public __construct() method from the Car class because of inheritance.|||But, intro() is an abstract method that should be defined in all the child classes and they should return a string.|||Let's look at another example where the abstract method has an argument:|||Let's look at another example where the abstract method has an argument, and the child class has two optional arguments that are not defined in the parent's     abstract method:",,"The child class method must be defined with the same name and it redeclares the parent abstract method@@@The child class method must be defined with the same or a less restricted   access modifier@@@The number of required arguments must be the same. However, the child class   may have optional arguments in addition",,,[]
PHP OOP,PHP Interfaces,https://www.w3schools.com/php/php_oop_interfaces.asp,"Interfaces allow you to specify what methods a class should implement.|||Interfaces make it easy to use a variety of different classes in the same way. When one or more classes use the same interface, it is referred to as ""polymorphism"".|||Interfaces are declared with the interface keyword:|||Interface are similar to abstract classes. The difference between interfaces and abstract classes are:|||To implement an interface, a class must use the  implements keyword.|||A class that implements an interface must implement all of the interface's methods.|||From the example above, let's say that we would like to write software which manages a group of animals. There are actionsthat all of the animals can do, but each animal does it in its own way.|||Using interfaces, we can write some code which can work for all of the animals even if each animal behaves differently:|||Cat, Dog and Mouse are all classes that implement the Animal interface, which means thatall of them are able to make a sound using the makeSound() method. Because of this,we can loop through all of the animals and tell them to make a sound even if we don'tknow what type of animal each one is.|||Since the interface does not tell the classes how to implement the method, each animalcan make a sound in its own way.",PHP - What are Interfaces?,"Interfaces cannot have properties, while abstract classes can@@@All interface methods must be public, while abstract class methods is public or protected@@@All methods in an interface are abstract, so they cannot be implemented in codeand the abstract keyword is not necessary@@@Classes can implement an interface while inheriting from another class at the sametime",,,[]
PHP OOP,PHP Traits,https://www.w3schools.com/php/php_oop_traits.asp,"PHP only supports single inheritance: a child class can inherit only from one single parent.|||So, what if a class needs to inherit multiple behaviors? OOP traits solve this problem.|||Traits are used to declare methods that can be used in multiple classes. Traits can have methods and abstract methods that can be used in multiple classes, and the methods can have any access modifier (public, private, or protected).|||Traits are declared with the trait keyword:|||To use a trait in a class, use the use keyword:|||Let's look at an example:|||Here, we declare one trait: message1. Then, we create a class: Welcome. The class uses the trait, and all the methods in the trait will be available in the class.|||If other classes need to use the msg1() function, simply use the message1 trait in those classes. This reduces code duplication, because there is no need to redeclare the same method over and over again.|||Let's look at another example:|||Here, we declare two traits: message1 and message2. Then, we create two classes: Welcome and Welcome2. The first class (Welcome) uses the message1 trait, and the second class (Welcome2) uses both message1 and message2 traits (multiple traits are separated by comma).",,,,,[]
PHP OOP,PHP Static Methods,https://www.w3schools.com/php/php_oop_static_methods.asp,"Static methods can be called directly - without creating an instance of the class first.|||Static methods are declared with the static keyword:|||To access a static method use the class name, double colon (::), and the method name:|||Let's look at an example:|||Here, we declare a static method: welcome(). Then, we call the static method by using the class name, double colon (::), and the method name (without creating an instance of the class first).|||A class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::):|||Static methods can also be called from methods in other classes. To do this, the static method should be public:|||To call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected.",,,,,[]
PHP OOP,PHP Static Properties,https://www.w3schools.com/php/php_oop_static_properties.asp,"Static properties can be called directly - without creating an instance of a class.|||Static properties are declared with the static keyword:|||To access a static property use the class name, double colon (::), and the property name:|||Let's look at an example:|||Here, we declare a static property: $value. Then, we echo the value of the static property by using the class name, double colon (::), and the property name (without creating a class first).|||A class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::):|||To call a static property from a child class, use the parent keyword inside the child class:",,,,,[]
PHP OOP,PHP Namespaces,https://www.w3schools.com/php/php_namespaces.asp,"Namespaces are qualifiers that solve two different problems:|||For example, you may have a set of classes which describe an HTML table, such as Table, Row andCell while also having another set of classes to describe furniture, such as Table,Chair and Bed. Namespaces can be used to organize the classes into two differentgroups while also preventing the two classes Table and Table from being mixed up.|||Namespaces are declared at the beginning of a file using the namespace keyword:|||Declare a namespace called Html:|||Note: A namespace declaration must be the first thing in the PHP file. The following codewould be invalid:|||Constants, classes and functions declared in this file will belong to the Html namespace:|||Create a Table class in the Html namespace:|||For further organization, it is possible to have nested namespaces:|||Declare a namespace called Html inside a namespace called Code:|||Any code that follows a namespace declaration is operating inside the namespace, soclasses that belong to the namespace can be instantiated without any qualifiers. To accessclasses from outside a namespace, the class needs to have the namespace attachedto it.|||Use classes from the Html namespace:|||When many classes from the same namespace are being used at the same time, it iseasier to use the namespace keyword:|||Use classes from the Html namespace without the need for the Html\qualifier:|||It can be useful to give a namespace or class an alias to make it easier to write. This isdone with the use keyword:|||Give a namespace an alias:|||Give a class an alias:",Namespace Alias,,They allow for better organization by grouping classes that work together to performa task@@@They allow the same name to be used for more than one class,,[]
PHP OOP,PHP Iterables,https://www.w3schools.com/php/php_iterables.asp,"An iterable is any value which can be looped through with a foreach() loop.|||The iterable pseudo-type was introduced in PHP 7.1, and it can be used as a data type for function arguments and functionreturn values.|||The iterable keyword can be used as a data type of a function argument or as the returntype of a function:|||Use an iterable function argument:|||Return an iterable:|||Arrays|||All arrays are iterables, so any array can be used as an argument of a function that requires an iterable.|||Iterators|||Any object that implements the Iterator interface can be used as an argument of a functionthat requires an iterable.|||An iterator contains a list of items and provides methods to loop through them. It keeps apointer to one of the elements in the list. Each item in the list should have a key which canbe used to find the item.|||An iterator must have these methods:|||Implement the Iterator interface and use it as an iterable:",,"current() - Returns the element that the pointer is currently pointing to. It can be anydata type@@@key() Returns the key associated with the current element in the list. It can only bean integer, float, boolean or string@@@next() Moves the pointer to the next element in the list@@@rewind() Moves the pointer to the first element in the list@@@valid() If the internal pointer is not pointing to any element (for example, if next()was called at the end of the list), this should return false. It returns true in anyother case",,,[]
MySQL Database,MySQL Database,https://www.w3schools.com/php/php_mysql_intro.asp,"With PHP, you can connect to and manipulate databases.|||MySQL is the most popular database system used with PHP.|||The data in a MySQL database are stored in tables. A table is a collection of related data, and it consists of columns and rows.|||Databases are useful for storing information categorically. A company may have a database with the following tables:||| A query is a question or a request.|||We can query a database for specific information and have a recordset returned.|||Look at the following query (using standard SQL):|||The query above selects all the data in the ""LastName"" column from the ""Employees"" table.|||To learn more about SQL, please visit our SQL tutorial.|||If you don't have a PHP server with a MySQL Database, you can download it for free here: http://www.mysql.com|||MySQL is the de-facto standard database system for web sites with HUGE volumes of both data and end-users (like Facebook, Twitter, and Wikipedia).|||Another great thing about MySQL is that it can be scaled down to support embedded database applications.|||Look at http://www.mysql.com/customers/ for an overview of companies using MySQL.",What is MySQL?|||PHP + MySQL Database System,"MySQL is a database system used on the web@@@MySQL is a database system that runs on a server@@@MySQL is ideal for both small and large applications@@@MySQL is very fast, reliable, and easy to use@@@MySQL uses standard SQL@@@MySQL compiles on a number of platforms@@@MySQL is free to download and use@@@MySQL is developed, distributed, and supported by Oracle Corporation@@@MySQL is named after co-founder Monty Widenius's daughter: My|||Employees@@@Products@@@Customers@@@Orders|||PHP combined with MySQL are cross-platform (you can develop in   Windows and serve on a Unix platform)",,,[]
MySQL Database,MySQL Connect,https://www.w3schools.com/php/php_mysql_connect.asp,"PHP 5 and later can work with a MySQL database using:|||Earlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012.|||If you need a short answer, it would be ""Whatever you like"".|||Both MySQLi and PDO have their advantages:|||PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases.|||So, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included.|||Both are object-oriented, but MySQLi also offers a procedural API.|||Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security.|||In this, and in the following chapters we demonstrate three ways of working with PHP and MySQL:|||For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed.|||For installation details, go to:http://php.net/manual/en/mysqli.installation.php|||For installation details, go to:http://php.net/manual/en/pdo.installation.php|||Before we can access data in the MySQL database, we need to be able to connect to the server:|||Note on the object-oriented example above: |||$connect_error was broken until PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead:// Check connectionif (mysqli_connect_error()) {  die(""Database connection failed: "" . mysqli_connect_error());}|||Note: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown.|||Tip: A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block.|||The connection will be closed automatically when the script ends. To close the connection before, use the following:",Should I Use MySQLi or PDO?,"MySQLi extension (the ""i"" stands for improved)@@@PDO (PHP Data Objects)|||MySQLi (object-oriented)@@@MySQLi (procedural)@@@PDO",,,[]
MySQL Database,MySQL Create DB,https://www.w3schools.com/php/php_mysql_create.asp,"A database consists of one or more tables. |||You will need special CREATE privileges to create or to delete a MySQL database.|||The CREATE DATABASE statement is used to create a database in MySQL.|||The following examples create a database named ""myDB"":|||Note: When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password).Tip: If you have to use a specific port,add an empty string for the database-name argument, like this: new mysqli(""localhost"", ""username"", ""password"", """", port)|||Note: The following PDO example create a database named ""myDBPDO"":|||Tip: A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message. ",,,,,[]
MySQL Database,MySQL Create Table,https://www.w3schools.com/php/php_mysql_create_table.asp,"A database table has its own unique name and consists of columns and rows.|||The CREATE TABLE statement is used to create a table in MySQL.|||We will create a table named ""MyGuests"", with five columns: ""id"", ""firstname"", ""lastname"", ""email"" and ""reg_date"":|||Notes on the table above:|||The data type specifies what type of data the column can hold. For a complete reference of all the available data types, go to ourData Types reference.|||After the data type, you can specify other optional attributes for each column:|||Each table should have a primary key column (in this case: the ""id"" column). Its value must be unique for each record in the table.|||The following examples shows how to create the table in PHP:",,"NOT NULL - Each row must contain a value for that column, null values are not allowed@@@DEFAULT value - Set a default value that is added when no other value is passed@@@UNSIGNED - Used for number types, limits the stored data to positive numbers and zero@@@AUTO INCREMENT - MySQL automatically increases the value of the field by 1 each time a new record is added@@@PRIMARY KEY - Used to uniquely identify the rows in a table. The column with PRIMARY KEY setting is often an ID number, and is often used with AUTO_INCREMENT",,,[]
MySQL Database,MySQL Insert Data,https://www.w3schools.com/php/php_mysql_insert.asp,"After a database and a table have been created, we can start adding data in them.|||Here are some syntax rules to follow:|||The INSERT INTO statement is used to add new records to a MySQL table:|||To learn more about SQL, please visit our SQL tutorial.|||In the previous chapter we created an empty table named ""MyGuests"" with five columns: ""id"", ""firstname"", ""lastname"", ""email"" and ""reg_date"". Now, let us fill the table with data.|||Note: If a column is AUTO_INCREMENT (like the ""id"" column) or TIMESTAMP with default update of current_timesamp (like the ""reg_date"" column), it is no need to be specified in the SQL query; MySQL will automatically add the value.|||The following examples add a new record to the ""MyGuests"" table:",,The SQL query must be quoted in PHP@@@String values inside the SQL query must be quoted@@@Numeric values must not be quoted@@@The word NULL must not be quoted,,,[]
MySQL Database,MySQL Get Last ID,https://www.w3schools.com/php/php_mysql_insert_lastid.asp,"If we perform an INSERT or UPDATE on a table with an AUTO_INCREMENT field, we can get the ID of the last inserted/updated record immediately.|||In the table ""MyGuests"", the ""id"" column is an AUTO_INCREMENT field:|||The following examples are equal to the examples from the previous page (PHP Insert Data Into MySQL), except that we have added one single line of code to retrieve the ID of the last inserted record. We also echo the last inserted ID:",,,,,[]
MySQL Database,MySQL Insert Multiple,https://www.w3schools.com/php/php_mysql_insert_multiple.asp,"Multiple SQL statements must be executed with the mysqli_multi_query() function.|||The following examples add three new records to the ""MyGuests"" table:|||Note that each SQL statement must be separated by a semicolon.|||The PDO way is a little bit different:",Insert Multiple Records Into MySQL Using MySQLi and PDO,,,,[]
MySQL Database,MySQL Prepared,https://www.w3schools.com/php/php_mysql_prepared_statements.asp,"Prepared statements are very useful against SQL injections.|||A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency.|||Prepared statements basically work like this:|||Compared to executing SQL statements directly, prepared statements have three main advantages:|||The following example uses prepared statements and bound parameters in MySQLi:|||Code lines to explain from the example above:|||In our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or blob value.|||Then, have a look at the bind_param() function:|||This function binds the parameters to the SQL query and tells the database what the parameters are. The ""sss"" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string.|||The argument may be one of four types:|||We must have one of these for each parameter.|||By telling mysql what type of data to expect, we minimize the risk of SQL injections.|||Note: If we want to insert any data from external sources (like user input), it is very important that the data is sanitized and validated.|||The following example uses prepared statements and bound parameters in PDO:",,"Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times)@@@Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query@@@Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.|||i - integer@@@d - double@@@s - string@@@b - BLOB","Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled ""?""). Example: INSERT INTO MyGuests VALUES(?, ?, ?)@@@The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it@@@Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values",,[]
MySQL Database,MySQL Select Data,https://www.w3schools.com/php/php_mysql_select.asp,"The SELECT statement is used to select data from one or more tables:|||or we can use the * character to select ALL columns from a table:|||To learn more about SQL, please visit our SQL tutorial.|||The following example selects the id, firstname and lastname columns from the MyGuests table and displays it on the page:|||Code lines to explain from the example above:|||First, we set up an SQL query that selects the id, firstname and lastname columns from the MyGuests table. The next line of code runs the query and puts the resulting data into a variable called $result.|||Then, the function num_rows() checks if there are more than zero rows returned.|||If there are more than zero rows returned, the function fetch_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.|||The following example shows the same as the example above, in the MySQLi procedural way:|||You can also put the result in an HTML table:|||The following example uses prepared statements.|||It selects the id, firstname and lastname columns from the MyGuests table and displays it in an HTML table:",,,,,[]
MySQL Database,MySQL Where,https://www.w3schools.com/php/php_mysql_select_where.asp,"The WHERE clause is used to filter records.|||The WHERE clause is used to extract only those records that fulfill a specified condition.|||To learn more about SQL, please visit our SQL tutorial.|||The following example selects the id, firstname and lastname columns from the MyGuests table where the lastname is ""Doe"", and displays it on the page:|||Code lines to explain from the example above:|||First, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table where the lastname is ""Doe"". The next line of code runs the query and puts the resulting data into a variable called $result.|||Then, the function num_rows() checks if there are more than zero rows returned.|||If there are more than zero rows returned, the function fetch_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.|||The following example shows the same as the example above, in the MySQLi procedural way:|||You can also put the result in an HTML table:|||The following example uses prepared statements.|||It selects the id, firstname and lastname columns from the MyGuests table where the lastname is ""Doe"", and displays it in an HTML table:",,,,,[]
MySQL Database,MySQL Order By,https://www.w3schools.com/php/php_mysql_select_orderby.asp,"The ORDER BY clause is used to sort the result-set in ascending or descending order.|||The ORDER BY clause sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.|||To learn more about SQL, please visit our SQL tutorial.|||The following example selects the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column:|||Code lines to explain from the example above:|||First, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column. The next line of code runs the query and puts the resulting data into a variable called $result.|||Then, the function num_rows() checks if there are more than zero rows returned.|||If there are more than zero rows returned, the function fetch_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.|||The following example shows the same as the example above, in the MySQLi procedural way:|||You can also put the result in an HTML table:|||The following example uses prepared statements.|||Here we select the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column, and it will be displayed in an HTML table:",Select and Order Data From a MySQL Database,,,,[]
MySQL Database,MySQL Delete Data,https://www.w3schools.com/php/php_mysql_delete.asp,"The DELETE statement is used to delete records from a table:|||Notice the WHERE clause in the DELETE syntax: The WHERE clause specifies which record or records that should be deleted. If you omit the WHERE clause, all records will be deleted!|||To learn more about SQL, please visit our SQL tutorial.|||Let's look at the ""MyGuests"" table:|||The following examples delete the record with id=3 in the ""MyGuests"" table:|||After the record is deleted, the table will look like this:",,,,1|||John|||Doe|||john@example.com|||2014-10-22 14:26:15&&&2|||Mary|||Moe|||mary@example.com|||2014-10-23 10:22:30&&&3|||Julie|||Dooley|||julie@example.com|||2014-10-26 10:48:23$$$1|||John|||Doe|||john@example.com|||2014-10-22 14:26:15&&&2|||Mary|||Moe|||mary@example.com|||2014-10-23 10:22:30,"[['\n<?php', '$servername = ""localhost"";', '$username = ""username"";', '$password = ""password"";', '$dbname = ""myDB"";', '// Create connection', '$conn = new mysqli($servername, $username, $password, $dbname);', '\n // Check connection', '\n if ($conn->connect_error)\xa0{', '\n\xa0\xa0die(""Connection failed: "" . $conn->connect_error);', '}\n', '\n', '// sql to delete a record', '\n $sql = ""DELETE FROM MyGuests WHERE id=3"";', '\n', 'if ($conn->query($sql) === TRUE) {', '\xa0 echo ""Record deleted successfully"";', '} else {', '\n  \xa0 echo ""Error deleting record: "" . $conn->error;', '}', '$conn->close();', '\n?>\n'], ['\n<?php', '$servername = ""localhost"";', '$username = ""username"";', '$password = ""password"";', '$dbname = ""myDB"";', '// Create connection', '\n$conn = mysqli_connect($servername, $username, $password, $dbname);', '\n // Check connection', '\n if (!$conn)\xa0{', '\n\xa0\xa0die(""Connection failed: "" . mysqli_connect_error());', '}', '// sql to delete a record', '\n $sql = ""DELETE FROM MyGuests WHERE id=3"";', '\n', 'if (mysqli_query($conn, $sql)) {', '\xa0 echo ""Record deleted successfully"";', '} else {', '\n  \xa0 echo ""Error deleting record: "" . mysqli_error($conn);', '}', 'mysqli_close($conn);', '\n?>\n'], ['\n<?php', '$servername = ""localhost"";', '$username = ""username"";', '\n $password = ""password"";', '$dbname = ""myDBPDO"";', 'try {', '\xa0\xa0$conn = new PDO(""mysql:host=$servername;dbname=$dbname"", $username, $password);', '\n  \xa0 // set the PDO error mode to exception', '\xa0 $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);', '\n  \xa0 // sql to delete a record', '\n  \xa0\n $sql = ""DELETE FROM MyGuests WHERE id=3"";', '\n', '\xa0 // use exec() because no results are returned', '\xa0 $conn->exec($sql);', '\n  \xa0 echo ""Record deleted successfully"";', '} catch(PDOException $e) {', '\xa0\xa0echo $sql . ""<br>"" . $e->getMessage();', '\n  }', '\n', '$conn = null;', '\n?>\n']]"
MySQL Database,MySQL Update Data,https://www.w3schools.com/php/php_mysql_update.asp,"The UPDATE statement is used to update existing records in a table:|||Notice the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated!|||To learn more about SQL, please visit our SQL tutorial.|||Let's look at the ""MyGuests"" table:|||The following examples update the record with id=2 in the ""MyGuests"" table:|||After the record is updated, the table will look like this:",,,,1|||John|||Doe|||john@example.com|||2014-10-22 14:26:15&&&2|||Mary|||Moe|||mary@example.com|||2014-10-23 10:22:30$$$1|||John|||Doe|||john@example.com|||2014-10-22 14:26:15&&&2|||Mary|||Doe|||mary@example.com|||2014-10-23 10:22:30,"[['\n<?php', '$servername = ""localhost"";', '$username = ""username"";', '$password = ""password"";', '$dbname = ""myDB"";', '// Create connection', '$conn = new mysqli($servername, $username, $password, $dbname);', '\n // Check connection', '\n if ($conn->connect_error)\xa0{', '\n\xa0\xa0die(""Connection failed: "" . $conn->connect_error);', '}\n', '\n', '$sql = ""UPDATE MyGuests SET lastname=\'Doe\' WHERE id=2"";', '\n', 'if ($conn->query($sql) === TRUE) {', '\xa0\xa0echo ""Record updated successfully"";', '} else {', '\xa0\xa0echo ""Error updating record: "" . $conn->error;', '}', '$conn->close();', '\n?>\n'], ['\n<?php', '$servername = ""localhost"";', '$username = ""username"";', '$password = ""password"";', '$dbname = ""myDB"";', '// Create connection', '\n$conn = mysqli_connect($servername, $username, $password, $dbname);', '\n // Check connection', '\n if (!$conn)\xa0{', '\n  \xa0 die(""Connection failed: "" . mysqli_connect_error());', '}', '$sql = ""UPDATE MyGuests SET lastname=\'Doe\' WHERE id=2"";', '\n', 'if (mysqli_query($conn, $sql)) {', '\xa0 echo ""Record updated successfully"";', '} else {', '\n  \xa0 echo ""Error updating record: "" . mysqli_error($conn);', '}', 'mysqli_close($conn);', '\n?>\n'], ['\n<?php', '$servername = ""localhost"";', '$username = ""username"";', '\n $password = ""password"";', '$dbname = ""myDBPDO"";', 'try {', '\n  \xa0 $conn = new PDO(""mysql:host=$servername;dbname=$dbname"", $username, $password);', '\n  \xa0 // set the PDO error mode to exception', '\xa0 $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);', '\n  \xa0\n $sql = ""UPDATE MyGuests SET lastname=\'Doe\' WHERE id=2"";', '\n', '\xa0 // Prepare statement', '\xa0\xa0$stmt = $conn->prepare($sql);', '\xa0\xa0// execute the query', '\n  \xa0 $stmt->execute();', '\xa0\xa0// echo a message to say the UPDATE succeeded', '\n  \xa0 echo $stmt->rowCount() . "" records UPDATED successfully"";', '} catch(PDOException $e) \n  {', '\xa0 echo $sql . ""<br>"" . $e->getMessage();', '}', '\n', '$conn = null;', '\n?>\n']]"
MySQL Database,MySQL Limit Data,https://www.w3schools.com/php/php_mysql_select_limit.asp,"MySQL provides a LIMIT clause that is used to specify the number of records to return.|||The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance.|||Assume we wish to select all records from 1 - 30 (inclusive) from a table called ""Orders"". The SQL query would then look like this:|||When the SQL query above is run, it will return the first 30 records.|||What if we want to select records 16 - 25 (inclusive)?|||Mysql also provides a way to handle this: by using OFFSET.|||The SQL query below says ""return only 10 records, start on record 16 (OFFSET 15)"":|||You could also use a shorter syntax to achieve the same result:|||Notice that the numbers are reversed when you use a comma.",,,,,[]
PHP XML,PHP XML Parsers,https://www.w3schools.com/php/php_xml_parsers.asp,"The XML language is a way to structure data for sharing across websites.|||Several web technologies like RSS Feeds and Podcasts are written in XML.|||XML is easy to create. It looks a lot like HTML, except that you make up your own tags.|||If you want to learn more about XML, please visit our XML tutorial.|||To read and update, create and manipulate an XML document, you will need an XML parser.|||In PHP there are two major types of XML parsers:|||Tree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM).|||This type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues.|||Example of tree-based parsers:|||Event-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away.|||This type of parser is well suited for large XML documents. It parses faster and consumes less memory. |||Example of event-based parsers:",What is an XML Parser?,Tree-Based Parsers@@@Event-Based Parsers|||SimpleXML@@@DOM|||XMLReader@@@XML Expat Parser,,,[]
PHP XML,PHP SimpleXML Parser,https://www.w3schools.com/php/php_xml_simplexml_read.asp,"SimpleXML is a PHP extension that allows us to easily manipulate and get XML data.|||SimpleXML is a tree-based parser.|||SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.|||SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.|||Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element.|||From PHP 5, the SimpleXML functions are part of the PHP core. No installation is required to use these functions.|||The PHP simplexml_load_string() function is used to read XML data from a string.|||Assume we have a variable that contains XML data, like this:|||The example below shows how to use the simplexml_load_string() function to read XML data from a string:|||The output of the code above will be:|||Error Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string:|||The output of the code above will be:|||The PHP simplexml_load_file() function is used to read XML data from a file.|||Assume we have an XML file called ""note.xml"", that looks like this:|||The example below shows how to use the simplexml_load_file() function to read XML data from a file:|||The output of the code above will be:|||Tip: The next chapter shows how to get/retrieve node values from an XML file with SimpleXML!|||For more information about the PHP SimpleXML functions, visit ourPHP SimpleXML Reference.",,,,,"[['\n<?php', '\n$xml=simplexml_load_file(""note.xml"") or die(""Error: Cannot create object"");', '\n print_r($xml);', '\n?>\n']]"
PHP XML,PHP SimpleXML - Get,https://www.w3schools.com/php/php_xml_simplexml_get.asp,"SimpleXML is a PHP extension that allows us to easily manipulate and get XML data.|||Get the node values from the ""note.xml"" file:|||The output of the code above will be:|||Assume we have an XML file called ""books.xml"", that looks like this: |||The following example gets the node value of the <title> element in the first and second <book> elements in the ""books.xml"" file: |||The output of the code above will be:|||The following example loops through all the <book> elements in the ""books.xml"" file, and gets the node values of the <title>, <author>, <year>, and <price> elements:|||The output of the code above will be:|||The following example gets the attribute value of the ""category"" attribute of the first <book> element and the attribute value of the ""lang"" attribute of the <title> element in the second <book> element:|||The output of the code above will be:|||The following example gets the attribute values of the <title> elements in the ""books.xml"" file:|||The output of the code above will be:|||For more information about the PHP SimpleXML functions, visit ourPHP SimpleXML Reference.",,,,,"[['\n <?php', '$xml=simplexml_load_file(""note.xml"") or die(""Error: Cannot create object"");', 'echo $xml->to . ""<br>"";', '\n echo $xml->from . ""<br>"";', 'echo $xml->heading . ""<br>"";', 'echo $xml->body;', '?>\n'], ['\n <?php', '$xml=simplexml_load_file(""books.xml"") or die(""Error: Cannot create object"");', 'echo $xml->book[0]->title . ""<br>"";', 'echo $xml->book[1]->title; ', '?>\n'], ['\n <?php', '$xml=simplexml_load_file(""books.xml"") or die(""Error: Cannot create object"");', 'foreach($xml->children() as $books) { ', '\xa0\xa0echo $books->title . "", ""; ', '\n  \xa0 echo $books->author . "", ""; ', '\xa0 echo $books->year . "", "";', '\n  \xa0 echo $books->price . ""<br>""; ', '} ', '?>\n'], ['\n <?php', '$xml=simplexml_load_file(""books.xml"") or die(""Error: Cannot create object"");', 'echo $xml->book[0][\'category\'] . ""<br>"";', ""echo $xml->book[1]->title['lang']; "", '?>\n'], ['\n <?php', '$xml=simplexml_load_file(""books.xml"") or die(""Error: Cannot create object"");', 'foreach($xml->children() as $books) { ', ""\xa0 echo $books->title['lang'];"", '\n  \xa0 echo ""<br>""; ', '} ', '?>\n']]"
PHP XML,PHP XML Expat,https://www.w3schools.com/php/php_xml_parser_expat.asp,"The built-in XML Expat Parser makes it possible to process XML documents in PHP.|||The Expat parser is an event-based parser.|||Look at the following XML fraction:|||An event-based parser reports the XML above as a series of three events: |||The XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions.|||The XML file ""note.xml"" will be used in the example below:|||We want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file.|||Example explained:|||For more information about the PHP Expat functions, visit our PHP XML Parser Reference.",,"Start element: from@@@Start CDATA section, value: Jani@@@Close element: from","Initialize the XML parser with the xml_parser_create() function@@@Create functions to use with the different event handlers@@@Add the xml_set_element_handler() function to specify which function will be executed when the parser encounters the opening and closing tags@@@Add the xml_set_character_data_handler() function to specify which function will execute when the parser encounters character data@@@Parse the file ""note.xml"" with the xml_parse() function@@@In case of an error, add xml_error_string() function to convert an XML error to a textual description@@@Call the xml_parser_free() function to release the memory allocated with the xml_parser_create() function",,"[['\n<?php', '\n// Initialize the XML parser', '\n$parser=xml_parser_create();', '\n', '\n// Function to use at the start of an element', '\nfunction start($parser,$element_name,$element_attrs)\xa0{', '\n\xa0\xa0switch($element_name)\xa0{', '\n\xa0\xa0\xa0\xa0case ""NOTE"":', '\n\xa0\xa0\xa0\xa0echo ""-- Note --<br>"";', '\n\xa0\xa0\xa0\xa0break;', '\n\xa0\xa0\xa0\xa0case ""TO"":', '\n\xa0\xa0\xa0\xa0echo ""To: "";', '\n\xa0\xa0\xa0\xa0break;', '\n\xa0\xa0\xa0\xa0case ""FROM"":', '\n\xa0\xa0\xa0\xa0echo ""From: "";', '\n\xa0\xa0\xa0\xa0break;', '\n\xa0\xa0\xa0\xa0case ""HEADING"":', '\n\xa0\xa0\xa0\xa0echo ""Heading: "";', '\n\xa0\xa0\xa0\xa0break;', '\n\xa0\xa0\xa0\xa0case ""BODY"":', '\n\xa0\xa0\xa0\xa0echo ""Message: "";', '\n \xa0\xa0}', '\n }', '\n', '\n// Function to use at the end of an element', '\nfunction stop($parser,$element_name)\xa0{', '\n\xa0\xa0echo ""<br>"";', '\n }', '\n', '\n// Function to use when finding character data', '\nfunction char($parser,$data)\xa0{', '\n\xa0\xa0echo $data;', '\n }', '\n', '\n// Specify element handler', '\nxml_set_element_handler($parser,""start"",""stop"");', '\n', '\n// Specify data handler', '\nxml_set_character_data_handler($parser,""char"");', '\n', '\n// Open XML file', '\n$fp=fopen(""note.xml"",""r"");', '\n', '\n// Read data', '\nwhile ($data=fread($fp,4096))\xa0{', '\n\xa0\xa0xml_parse($parser,$data,feof($fp)) or ', '\n\xa0\xa0die (sprintf(""XML Error: %s at line %d"", ', '\n\xa0\xa0xml_error_string(xml_get_error_code($parser)),', '\n\xa0\xa0xml_get_current_line_number($parser)));', '\n }', '\n', '\n// Free the XML parser', '\nxml_parser_free($parser);', '\n?>\n']]"
PHP XML,PHP XML DOM,https://www.w3schools.com/php/php_xml_dom.asp,"The built-in DOM parser makes it possible to process XML documents in PHP.|||The DOM parser is a tree-based parser.|||Look at the following XML document fraction:|||The DOM sees the XML above as a tree structure: |||The DOM parser functions are part of the PHP core. There is no installation needed to use these functions.|||The XML file below (""note.xml"") will be used in our example:|||We want to initialize the XML parser, load the xml, and output it:|||The output of the code above will be:|||If you select ""View source"" in the browser window, you will see the following HTML:|||The example above creates a DOMDocument-Object and loads the XML from ""note.xml"" into it.|||Then the saveXML() function puts the internal XML document into a string, so we can output it. |||We want to initialize the XML parser, load the XML, and loop through all elements of the <note> element:|||The output of the code above will be:|||In the example above you see that there are empty text nodes between each element.|||When XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems.|||If you want to learn more about the XML DOM, please visit ourXML tutorial.",,"Level 1: XML Document@@@Level 2: Root element: <from>@@@Level 3: Text element: ""Jani""",,,[]
PHP - AJAX,AJAX Intro,https://www.w3schools.com/php/php_ajax_intro.asp,"AJAX is about updating parts of a web page, without reloading the whole page.|||AJAX = Asynchronous JavaScript and XML.|||AJAX is a technique for creating fast and dynamic web pages.|||AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.|||Classic web pages, (which do not use AJAX) must reload the entire page if the content should change.|||Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs.||||||AJAX is based on internet standards, and uses a combination of:|||AJAX applications are browser- and platform-independent!|||AJAX was made popular in 2005 by Google, with Google Suggest.|||Google Suggest is using AJAX to create a very dynamic web interface: When you start typing in Google's search box, a JavaScript sends the letters off to a server and the server returns a list of suggestions.|||In our PHP tutorial, we will demonstrate how AJAX can update parts of a web page, without reloading the whole page. The server script will be written in PHP.|||If you want to learn more about AJAX, visit our AJAX tutorial.",Google Suggest,XMLHttpRequest object (to exchange data asynchronously with a server)@@@JavaScript/DOM (to display/interact with the information)@@@CSS (to style the data)@@@XML (often used as the format for transferring data),,,[]
PHP - AJAX,AJAX PHP,https://www.w3schools.com/php/php_ajax_php.asp,"AJAX is used to create more interactive applications.|||The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:|||Start typing a name in the input field below:|||Suggestions: |||In the example above, when a user types a character in the input field, a function called ""showHint()"" is executed.|||The function is triggered by the onkeyup event.|||Here is the HTML code:|||Code explanation:|||First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.|||However, if the input field is not empty, do the following:|||The PHP file checks an array of names, and returns the corresponding name(s) to the browser:",,"Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a PHP file (gethint.php) on the server@@@Notice that q parameter is added to the url (gethint.php?q=""+str)@@@And the str variable holds the content of the input field",,,"[['\n <html>', '<head>', '<script>', 'function showHint(str) {', '\xa0 if (str.length == 0) { ', '\n  \xa0\xa0\xa0\xa0document.getElementById(""txtHint"").innerHTML = """";', '\xa0\xa0\xa0\xa0return;', '\xa0\xa0} else {', '\xa0\xa0\xa0 var xmlhttp = new XMLHttpRequest();', '\xa0\xa0\xa0 xmlhttp.onreadystatechange = function() {', '\xa0\xa0\xa0 \xa0 if (this.readyState == 4 && this.status == 200) {', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = this.responseText;', '\xa0\xa0\xa0 \xa0\xa0}', '\xa0\xa0\xa0\xa0};', '\xa0\xa0\xa0 xmlhttp.open(""GET"", ""gethint.php?q="" + str, true);', '\xa0\xa0\xa0\xa0xmlhttp.send();', '\n  \xa0\xa0}', '}', '</script>', '</head>', '<body>', '<p><b>Start typing a name in the input field below:</b></p>', '\n  <form action="""">', '\xa0 <label for=""fname"">First name:</label>', '\xa0 \n  <input type=""text"" id=""fname"" name=""fname"" onkeyup=""showHint(this.value)"">', '\n  </form>', '<p>Suggestions: <span id=""txtHint""></span></p>', '\n </body>', '</html>']]"
PHP - AJAX,AJAX Database,https://www.w3schools.com/php/php_ajax_database.asp,"AJAX can be used for interactive communication with a database.|||The following example will demonstrate how a web page can fetch information from a database with AJAX:|||The database table we use in the example above looks like this:||||||In the example above, when a user selects a person in the dropdown list above, a function called ""showUser()"" is executed.|||The function is triggered by the onchange event.|||Here is the HTML code:|||Code explanation:|||First, check if person is selected. If no person is selected (str == """"), clear the content of txtHint and exit the function. If a person is selected, do the following:|||The page on the server called by the JavaScript above is a PHP file called ""getuser.php"".|||The source code in ""getuser.php"" runs a query against a MySQL database, and returns the result in an HTML table:|||Explanation: When the query is sent from the JavaScript to the PHP file, the following happens:",,Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a file on the server@@@Notice that a parameter (q) is added to the URL (with the content of the dropdown list),"PHP opens a connection to a MySQL server@@@The correct person is found@@@An HTML table is created, filled with data, and sent back to the ""txtHint"" placeholder",1|||Peter|||Griffin|||41|||Quahog|||Brewery&&&2|||Lois|||Griffin|||40|||Newport|||Piano Teacher&&&3|||Joseph|||Swanson|||39|||Quahog|||Police Officer&&&4|||Glenn|||Quagmire|||41|||Quahog|||Pilot,"[['\n <html>', '<head>', '<script>', 'function showUser(str) {', '\xa0 if (str == """") {', '\n  \xa0\xa0\xa0\xa0document.getElementById(""txtHint"").innerHTML = """";', '\xa0\xa0\xa0\xa0return;', '\n  \xa0 } else { ', '\xa0\xa0\xa0\xa0var xmlhttp = new XMLHttpRequest();', '\xa0\xa0\xa0 xmlhttp.onreadystatechange = function() {', '\xa0\xa0\xa0\xa0\xa0 if (this.readyState == 4 && this.status == 200) {', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = this.responseText;', '\n  \xa0\xa0\xa0\xa0\xa0\xa0}', '\xa0\xa0\xa0\xa0};', '\xa0\xa0\xa0\xa0xmlhttp.open(""GET"",""getuser.php?q=""+str,true);', '\n  \xa0\xa0\xa0 xmlhttp.send();', '\xa0 }', '}', '</script>', '</head>', '<body>', '<form>', '\n <select name=""users"" onchange=""showUser(this.value)"">', '\xa0 <option value="""">Select a person:</option>', '\xa0 <option value=""1"">Peter Griffin</option>', '\xa0 <option value=""2"">Lois Griffin</option>', '\xa0 <option value=""3"">Joseph Swanson</option>', '\xa0 <option value=""4"">Glenn Quagmire</option>', '\xa0 </select>', '</form>', '<br>', '<div id=""txtHint""><b>Person info will be listed here...</b></div>', '</body>', '</html>']]"
PHP - AJAX,AJAX XML,https://www.w3schools.com/php/php_ajax_xml.asp,"AJAX can be used for interactive communication with an XML file.|||The following example will demonstrate how a web page can fetch information from an XML file with AJAX:|||When a user selects a CD in the dropdown list above, a function called ""showCD()"" is executed. The function is triggered by the ""onchange"" event:|||The showCD() function does the following:|||The page on the server called by the JavaScript above is a PHP file called ""getcd.php"".|||The PHP script loads an XML document, ""cd_catalog.xml"", runs a query against the XML file, and returns the result as HTML:|||When the CD query is sent from the JavaScript to the PHP page, the following happens:",,Check if a CD is selected@@@Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a file on the server@@@Notice that a parameter (q) is added to the URL (with the content of the dropdown list),"PHP creates an XML DOM object@@@Find all <artist> elements that matches the name sent from the JavaScript@@@Output the album information (send to the ""txtHint"" placeholder)",,[]
PHP - AJAX,AJAX Live Search,https://www.w3schools.com/php/php_ajax_livesearch.asp,"AJAX can be used to create more user-friendly and interactive searches.|||The following example will demonstrate a live search, where you get search results while you type.|||Live search has many benefits compared to traditional searching:|||Search for a W3Schools page in the input field below:|||The results in the example above are found in an XML file(links.xml). To make this example small and simple, only six results are available.|||When a user types a character in the input field above, the function ""showResult()"" is executed. The function is triggered by the ""onkeyup"" event:|||Source code explanation:|||If the input field is empty (str.length==0), the function clears the content of the livesearch placeholder and exits the function.|||If the input field is not empty, the showResult() function executes the following:|||The page on the server called by the JavaScript above is a PHP file called ""livesearch.php"".|||The source code in ""livesearch.php"" searches an XML file for titles matching the search string and returns the result:|||If there is any text sent from the JavaScript (strlen($q) > 0), the following happens:",AJAX Live Search|||Example Explained - The HTML Page,"Results are shown as you type@@@Results narrow as you continue typing@@@If results become too narrow, remove characters to see a broader result|||Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a file on the server@@@Notice that a parameter (q) is added to the URL (with the content of the input field)|||Load an XML file into a new XML DOM object@@@Loop through all <title> elements to find matches from the text sent from the JavaScript@@@Sets the correct url and title in the ""$response"" variable. If more than one match is found, all matches are added to the variable@@@If no matches are found, the $response variable is set to ""no suggestion""",,,[]
PHP - AJAX,AJAX Poll,https://www.w3schools.com/php/php_ajax_poll.asp,"The following example will demonstrate a poll where the result is shown without reloading.|||When a user chooses an option above, a function called ""getVote()"" is executed. The function is triggered by the ""onclick"" event:|||The getVote() function does the following:|||The page on the server called by the JavaScript above is a PHP file called ""poll_vote.php"":|||The value is sent from the JavaScript, and the following happens:|||The text file (poll_result.txt) is where we store the data from the poll. |||It is stored like this:|||The first number represents the ""Yes"" votes, the second number represents the ""No"" votes.|||Note: Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP).",AJAX Poll|||The Text File,Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a file on the server@@@Notice that a parameter (vote) is added to the URL (with the value of the yes or no option),"Get the content of the ""poll_result.txt"" file@@@Put the content of the file in variables and add one to the selected variable@@@Write the result to the ""poll_result.txt"" file@@@Output a graphical representation of the poll result",,[]
PHP Examples,PHP Examples,https://www.w3schools.com/php/php_examples.asp,Syntax explained|||Comments explained|||Variables explained|||Echo and Print explained|||Data Types explained|||Strings explained|||Numbers explained|||Math explained|||Constants explained|||Operators explained|||Conditions explained|||Loops explained|||Functions explained|||Arrays explained|||Multidimensional Arrays explained|||Sorting Arrays explained|||Superglobals explained|||Regular Expressions explained|||Form Validation explained|||Date and Time explained|||Include Files explained|||File Handling explained|||File Open/Read/Close explained|||Cookies explained|||Sessions explained|||Filters explained|||PHP JSON explained|||PHP Exceptions explained|||PHP OOP (Classes/Objects) explained|||Select Data From MySQL explained|||SimpleXML Parser explained|||XML Expat Parser explained,,,,,[]
PHP Examples,PHP Compiler,https://www.w3schools.com/php/php_compiler.asp,"With our online PHP compiler, you can edit PHP code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you don't know PHP, we suggest that you read our PHP Tutorial from scratch.",PHP Compiler (Editor)|||PHP Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
PHP Examples,PHP Quiz,https://www.w3schools.com/php/php_quiz.asp,"You can test your PHP skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about PHP.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the PHP Quiz ❯|||If you don't know PHP, we suggest that you read our PHP Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
PHP Examples,PHP Exercises,https://www.w3schools.com/php/php_exercises.asp,"You can test your PHP skills with W3Schools' Exercises.|||We have gathered a variety of PHP exercises (with answers) for each PHP Chapter.|||Try to solve an exercise by filling in the missing parts of a code. If you're stuck, hit the ""Show Answer"" button to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start PHP Exercises ❯|||If you don't know PHP, we suggest that you read our PHP Tutorial from scratch.",,,,,[]
PHP Examples,PHP Certificate,https://www.w3schools.com/php/php_exam.asp,"W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.|||Getting a certificate proves your commitment to upgrade your skills,gives you the credibility needed for more responsibilities, larger projects, and a higher salary.|||Get Your Certificate »",How Does It Work?,"Study for free at W3Schools.com@@@Study at your own speed@@@Test your skills with W3Schools online quizzes@@@Apply for your certificate by paying an exam fee@@@Take your exam online, at any time, and from any location",,"
Document Your Skills
Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.
Get a Certificate
Getting a certificate proves your commitment to upgrade your skills,
gives you the credibility needed for more responsibilities, larger projects, and a higher salary.

Get Your Certificate »

|||

",[]
PHP Reference,PHP Overview,https://www.w3schools.com/php/php_ref_overview.asp,"This section contains a complete PHP reference documentation.|||The PHP reference contains different categories of all PHP functions, keywords and constants, along with examples.",,,,,[]
PHP Reference,PHP Array,https://www.w3schools.com/php/php_ref_array.asp,The array functions allow you to access and manipulate arrays.|||Simple and multi-dimensional arrays are supported.|||The array functions are part of the PHP core. There is no installation needed to use these functions.,PHP Array Introduction,,,"array()|||Creates an array&&&array_change_key_case()|||Changes all keys in an array to lowercase or uppercase&&&array_chunk()|||Splits an array into chunks of arrays&&&array_column()|||Returns the values from a single column in the input array&&&array_combine()|||Creates an array by using the elements from one ""keys"" array and one ""values"" array&&&array_count_values()|||Counts all the values of an array&&&array_diff()|||Compare arrays, and returns the differences (compare values only)&&&array_diff_assoc()|||Compare arrays, and returns the differences (compare keys and values)&&&array_diff_key()|||Compare arrays, and returns the differences (compare keys only)&&&array_diff_uassoc()|||Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function)&&&array_diff_ukey()|||Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function)&&&array_fill()|||Fills an array with values&&&array_fill_keys()|||Fills an array with values, specifying keys&&&array_filter()|||Filters the values of an array using a callback function&&&array_flip()|||Flips/Exchanges all keys with their associated values in an array&&&array_intersect()|||Compare arrays, and returns the matches (compare values only)&&&array_intersect_assoc()|||Compare arrays and returns the matches (compare keys and values)&&&array_intersect_key()|||Compare arrays, and returns the matches (compare keys only)&&&array_intersect_uassoc()|||Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function)&&&array_intersect_ukey()|||Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function)&&&array_key_exists()|||Checks if the specified key exists in the array&&&array_keys()|||Returns all the keys of an array&&&array_map()|||Sends each value of an array to a user-made function, which returns new values&&&array_merge()|||Merges one or more arrays into one array&&&array_merge_recursive()|||Merges one or more arrays into one array recursively&&&array_multisort()|||Sorts multiple or multi-dimensional arrays&&&array_pad()|||Inserts a specified number of items, with a specified value, to an array&&&array_pop()|||Deletes the last element of an array&&&array_product()|||Calculates the product of the values in an array&&&array_push()|||Inserts one or more elements to the end of an array&&&array_rand()|||Returns one or more random keys from an array&&&array_reduce()|||Returns an array as a string, using a user-defined function&&&array_replace()|||Replaces the values of the first array with the values from following arrays&&&array_replace_recursive()|||Replaces the values of the first array with the values from following arrays recursively&&&array_reverse()|||Returns an array in the reverse order&&&array_search()|||Searches an array for a given value and returns the key&&&array_shift()|||Removes the first element from an array, and returns the value of the removed element&&&array_slice()|||Returns selected parts of an array&&&array_splice()|||Removes and replaces specified elements of an array&&&array_sum()|||Returns the sum of the values in an array&&&array_udiff()|||Compare arrays, and returns the differences (compare values only, using a user-defined key comparison function)&&&array_udiff_assoc()|||Compare arrays, and returns the differences (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values)&&&array_udiff_uassoc()|||Compare arrays, and returns the differences (compare keys and values, using two user-defined key comparison functions)&&&array_uintersect()|||Compare arrays, and returns the matches (compare values only, using a user-defined key comparison function)&&&array_uintersect_assoc()|||Compare arrays, and returns the matches (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values)&&&array_uintersect_uassoc()|||Compare arrays, and returns the matches (compare keys and values, using two user-defined key comparison functions)&&&array_unique()|||Removes duplicate values from an array&&&array_unshift()|||Adds one or more elements to the beginning of an array&&&array_values()|||Returns all the values of an array&&&array_walk()|||Applies a user function to every member of an array&&&array_walk_recursive()|||Applies a user function recursively to every member of an array&&&arsort()|||Sorts an associative array in descending order, according to the value&&&asort()|||Sorts an associative array in ascending order, according to the value&&&compact()|||Create array containing variables and their values&&&count()|||Returns the number of elements in an array&&&current()|||Returns the current element in an array&&&each()|||Deprecated from PHP 7.2. Returns the current key and value pair from an array&&&end()|||Sets the internal pointer of an array to its last element&&&extract()|||Imports variables into the current symbol table from an array&&&in_array()|||Checks if a specified value exists in an array&&&key()|||Fetches a key from an array&&&krsort()|||Sorts an associative array in descending order, according to the key&&&ksort()|||Sorts an associative array in ascending order, according to the key&&&list()|||Assigns variables as if they were an array&&&natcasesort()|||Sorts an array using a case insensitive ""natural order"" algorithm&&&natsort()|||Sorts an array using a ""natural order"" algorithm&&&next()|||Advance the internal array pointer of an array&&&pos()|||Alias of current()&&&prev()|||Rewinds the internal array pointer&&&range()|||Creates an array containing a range of elements&&&reset()|||Sets the internal pointer of an array to its first element&&&rsort()|||Sorts an indexed array in descending order&&&shuffle()|||Shuffles an array&&&sizeof()|||Alias of count()&&&sort()|||Sorts an indexed array in ascending order&&&uasort()|||Sorts an array by values using a user-defined comparison function&&&uksort()|||Sorts an array by keys using a user-defined comparison function&&&usort()|||Sorts an array using a user-defined comparison function",[]
PHP Reference,"
array()
array_change_key_case()
array_chunk()
array_column()
array_combine()
array_count_values()
array_diff()
array_diff_assoc()
array_diff_key()
array_diff_uassoc()
array_diff_ukey()
array_fill()
array_fill_keys()
array_filter()
array_flip()
array_intersect()
array_intersect_assoc()
array_intersect_key()
array_intersect_uassoc()
array_intersect_ukey()
array_key_exists()
array_keys()
array_map()
array_merge()
array_merge_recursive()
array_multisort()
array_pad()
array_pop()
array_product()
array_push()
array_rand()
array_reduce()
array_replace()
array_replace_recursive()
array_reverse()
array_search()
array_shift()
array_slice()
array_splice()
array_sum()
array_udiff()
array_udiff_assoc()
    array_udiff_uassoc()
array_uintersect()
array_uintersect_assoc()
array_uintersect_uassoc()
array_unique()
array_unshift()
array_values()
array_walk()
array_walk_recursive()
arsort()
asort()
compact()
count()
current()
each()
end()
extract()
in_array()
key()
krsort()
ksort()
list()
natcasesort()
natsort()
next()
pos()
prev()
range()
reset()
rsort()
shuffle()
sizeof()
sort()
uasort()
uksort()
usort()
",https://www.w3schools.com/php/php_ref_calendar.asp,"The calendar extension contains functions that simplifies converting between different calendar formats.|||It is based on the Julian Day Count, which is a count of days starting from January 1st, 4713 B.C.|||Note: To convert between calendar formats, you must first convert to Julian Day Count, then to the calendar of your choice.|||Note: The Julian Day Count is not the same as the Julian Calendar!|||For these functions to work, you have to compile PHP with --enable-calendar.|||The Windows version of PHP has built-in support for this extension.",,,,"cal_days_in_month()|||Returns the number of days in a month for a specified year and calendar&&&cal_from_jd()|||Converts a Julian Day Count into a date of a specified calendar&&&cal_info()|||Returns information about a specified calendar&&&cal_to_jd()|||Converts a date in a specified calendar to Julian Day Count&&&easter_date()|||Returns the Unix timestamp for midnight on Easter of a specified year&&&easter_days()|||Returns the number of days after March 21, that the Easter Day is in a specified year&&&frenchtojd()|||Converts a French Republican date to a Julian Day Count&&&gregoriantojd()|||Converts a Gregorian date to a Julian Day Count&&&jddayofweek()|||Returns the day of the week&&&jdmonthname()|||Returns a month name&&&jdtofrench()|||Converts a Julian Day Count to a French Republican date&&&jdtogregorian()|||Converts a Julian Day Count to a Gregorian date&&&jdtojewish()|||Converts a Julian Day Count to a Jewish date&&&jdtojulian()|||Converts a Julian Day Count to a Julian date&&&jdtounix()|||Converts Julian Day Count to Unix timestamp&&&jewishtojd()|||Converts a Jewish date to a Julian Day Count&&&juliantojd()|||Converts a Julian date to a Julian Day Count&&&unixtojd()|||Converts Unix timestamp to Julian Day Count$$$CAL_GREGORIAN|||Integer|||PHP 4&&&CAL_JULIAN|||Integer|||PHP 4&&&CAL_JEWISH|||Integer|||PHP 4&&&CAL_FRENCH|||Integer|||PHP 4&&&CAL_NUM_CALS|||Integer|||PHP 4&&&CAL_DOW_DAYNO|||Integer|||PHP 4&&&CAL_DOW_SHORT|||Integer|||PHP 4&&&CAL_DOW_LONG|||Integer|||PHP 4&&&CAL_MONTH_GREGORIAN_SHORT|||Integer|||PHP 4&&&CAL_MONTH_GREGORIAN_LONG|||Integer|||PHP 4&&&CAL_MONTH_JULIAN_SHORT|||Integer|||PHP 4&&&CAL_MONTH_JULIAN_LONG|||Integer|||PHP 4&&&CAL_MONTH_JEWISH|||Integer|||PHP 4&&&CAL_MONTH_FRENCH|||Integer|||PHP 4&&&CAL_EASTER_DEFAULT|||Integer|||PHP 4.3&&&CAL_EASTER_ROMAN|||Integer|||PHP 4.3&&&CAL_EASTER_ALWAYS_GREGORIAN|||Integer|||PHP 4.3&&&CAL_EASTER_ALWAYS_JULIAN|||Integer|||PHP 4.3&&&CAL_JEWISH_ADD_ALAFIM_GERESH|||Integer|||PHP 5.0&&&CAL_JEWISH_ADD_ALAFIM|||Integer|||PHP 5.0&&&CAL_JEWISH_ADD_GERESHAYIM|||Integer|||PHP 5.0",[]
PHP Reference,PHP Calendar,https://www.w3schools.com/php/php_ref_date.asp,The date/time functions allow you to get the date and time from the server where your PHP script runs. You can then use the date/time functions to format the date and time in several ways.|||Note: These functions depend on the locale settings of your server. Remember to take daylight saving time and leap years into consideration when working with these functions.|||The PHP date/time functions are part of the PHP core. No installation is required to use these functions.|||The behavior of these functions is affected by settings in php.ini:,,,,"date.timezone|||The default timezone (used by all date/time functions)|||""""|||PHP 5.1&&&date.default_latitude|||The default latitude (used by date_sunrise() and date_sunset())||| ""31.7667""|||PHP 5.0&&&date.default_longitude|||The default longitude (used by date_sunrise() and date_sunset())|||""35.2333""|||PHP 5.0&&&date.sunrise_zenith|||The default sunrise zenith (used by date_sunrise() and date_sunset())|||""90.83""|||PHP 5.0&&&date.sunset_zenith|||The default sunset zenith (used by date_sunrise() and date_sunset())|||""90.83""|||PHP 5.0$$$&&&checkdate()|||Validates a Gregorian date&&&date_add()|||Adds days, months, years, hours, minutes, and seconds to a date&&&date_create_from_format()|||Returns a new DateTime object formatted according to a specified format&&&date_create()|||Returns a new DateTime object&&&date_date_set()|||Sets a new date&&&date_default_timezone_get()|||Returns the default timezone used by all date/time functions&&&date_default_timezone_set()|||Sets the default timezone used by all date/time functions&&&date_diff()|||Returns the difference between two dates&&&date_format()|||Returns a date formatted according to a specified format&&&date_get_last_errors()|||Returns the warnings/errors found in a date string&&&date_interval_create_from_date_string()|||Sets up a DateInterval from the relative parts of the string&&&date_interval_format()|||Formats the interval&&&date_isodate_set()|||Sets the ISO date&&&date_modify()|||Modifies the timestamp&&&date_offset_get()|||Returns the timezone offset&&&date_parse_from_format()|||Returns an associative array with detailed info about a specified date, according to a specified format&&&date_parse()|||Returns an associative array with detailed info about a specified date&&&date_sub()|||Subtracts days, months, years, hours, minutes, and seconds from a date&&&date_sun_info()|||Returns an array containing info about sunset/sunrise and twilight begin/end, for a specified day and location&&&date_sunrise()|||Returns the sunrise time for a specified day and location&&&date_sunset()|||Returns the sunset time for a specified day and location&&&date_time_set()|||Sets the time&&&date_timestamp_get()|||Returns the Unix timestamp&&&date_timestamp_set()|||Sets the date and time based on a Unix timestamp&&&date_timezone_get()|||Returns the time zone of the given DateTime object&&&date_timezone_set()|||Sets the time zone for the DateTime object&&&date()|||Formats a local date and time&&&getdate()|||Returns date/time information of a timestamp or the current local date/time&&&gettimeofday()|||Returns the current time&&&gmdate()|||Formats a GMT/UTC date and time&&&gmmktime()|||Returns the Unix timestamp for a GMT date&&&gmstrftime()|||Formats a GMT/UTC date and time according to locale settings&&&idate()|||Formats a local time/date as integer&&&localtime()|||Returns the local time&&&microtime()|||Returns the current Unix timestamp with microseconds&&&mktime()|||Returns the Unix timestamp for a date&&&strftime()|||Formats a local time and/or date according to locale settings&&&strptime()|||Parses a time/date generated with strftime()&&&strtotime()|||Parses an English textual datetime into a Unix timestamp&&&time()|||Returns the current time as a Unix timestamp&&&timezone_abbreviations_list()|||Returns an associative array containing dst, offset, and the timezone name&&&timezone_identifiers_list()|||Returns an indexed array with all timezone identifiers&&&timezone_location_get()|||Returns location information for a specified timezone&&&timezone_name_from_ abbr()|||Returns the timezone name from abbreviation&&&timezone_name_get()|||Returns the name of the timezone&&&timezone_offset_get()|||Returns the timezone offset from GMT&&&timezone_open()|||Creates new DateTimeZone object&&&timezone_transitions_get()|||Returns all transitions for the timezone&&&timezone_version_get()|||Returns the version of the timezonedb$$$DATE_ATOM|||Atom (example: 2019-01-18T14:13:03+00:00)&&&DATE_COOKIE|||HTTP Cookies (example: Fri, 18 Jan 2019 14:13:03 UTC)&&&DATE_ISO8601|||ISO-8601 (example: 2019-01-18T14:13:03+0000)&&&DATE_RFC822|||RFC 822 (example: Fri, 18 Jan 2019 14:13:03 +0000)&&&DATE_RFC850|||RFC 850 (example: Friday, 18-Jan-19 14:13:03 UTC)&&&DATE_RFC1036|||RFC 1036 (example: Friday, 18-Jan-19 14:13:03 +0000)&&&DATE_RFC1123|||RFC 1123 (example: Fri, 18 Jan 2019 14:13:03 +0000)&&&DATE_RFC2822|||RFC 2822 (example: Fri, 18 Jan 2019 14:13:03 +0000)&&&DATE_RFC3339|||Same as DATE_ATOM (since PHP 5.1.3)&&&DATE_RFC3339_EXTENDED|||RFC3339 Extended format (since PHP 7.0.0) (example: 
    2019-01-18T16:34:01.000+00:00)&&&DATE_RSS|||RSS (Fri, 18 Jan 2019 14:13:03 +0000)&&&DATE_W3C|||World Wide Web Consortium (example: 2019-01-18T14:13:03+00:00)&&&SUNFUNCS_RET_TIMESTAMP|||Timestamp (since PHP 5.1.2)&&&SUNFUNCS_RET_STRING|||Hours:minutes (example: 09:41) (since PHP 5.1.2)&&&SUNFUNCS_RET_DOUBLE|||Hours as a floating point number (example: 9.75) (since PHP 5.1.2)",[]
PHP Reference,"
cal_days_in_month()
cal_from_jd()
cal_info()
cal_to_jd()
easter_date()
easter_days()
frenchtojd()
gregoriantojd()
jddayofweek()
jdmonthname()
jdtofrench()
jdtogregorian()
jdtojewish()
jdtojulian()
jdtounix()
jewishtojd()
juliantojd()
unixtojd()
",https://www.w3schools.com/php/php_ref_directory.asp,The directory functions allow you to retrieve information about directories and their contents.|||The PHP directory functions are part of the PHP core. No installation is required to use these functions.,,,,chdir()|||Changes the current directory&&&chroot()|||Changes the root directory&&&closedir()|||Closes a directory handle&&&dir()|||Returns an instance of the Directory class&&&getcwd()|||Returns the current working directory&&&opendir()|||Opens a directory handle&&&readdir()|||Returns an entry from a directory handle&&&rewinddir()|||Resets a directory handle&&&scandir()|||Returns an array of files and directories of a specified directory,[]
PHP Reference,PHP Date,https://www.w3schools.com/php/php_ref_error.asp,"The error functions are used to deal with error handling and logging.|||The error functions allow us to define own error handling rules, and modify the way the errors can be logged.|||The logging functions allow us to send messages directly to other machines, emails, or system logs.|||The error reporting functions allow us to customize what level and kind of error feedback is given. |||The PHP error functions are part of the PHP core. No installation is required to use these functions.|||The behavior of the error functions is affected by settings in php.ini.|||Errors and logging configuration options:",,,,"error_reporting|||NULL|||Sets the error reporting level (either an integer or  named constants)|||PHP_INI_ALL&&&display_errors|||""1""|||Specifies whether errors should be printed to the screen, or if they should be hidden from the user.Note: This feature should never be used on production systems (only to support your development)|||PHP_INI_ALL&&&display_startup_errors|||""0""|||Even when display_errors is on, errors that occur during PHP's startup sequence are not displayedNote: It is strongly recommended to keep display_startup_errors off, except for debugging|||PHP_INI_ALL&&&log_errors|||""0""|||Defines whether script error messages should be logged to the server's error log or error_log. Note: It is strongly advised to use error logging instead of error displaying on production web sites|||PHP_INI_ALL&&&log_errors_max_len|||""1024""|||Sets the maximum length of log_errors in bytes. The value ""0"" can be used to not apply any maximum length at all. This length is applied to logged errors, displayed errors, and also to $php_errormsg (available since PHP 4.3)|||PHP_INI_ALL&&&ignore_repeated_errors|||""0""|||Specifies whether to log repeated error messages. When set to ""1"" it will not log errors with repeated errors from the same file on the same line (available since PHP 4.3)|||PHP_INI_ALL&&&ignore_repeated_source|||""0""|||Specifies whether to log repeated error messages. When set to ""1"" it will not log errors with repeated errors from different files or source lines (available since PHP 4.3)|||PHP_INI_ALL&&&report_memleaks|||""1""|||If set to ""1"" (the default), this parameter will show a report of memory leaks detected by the Zend memory manager (available since PHP 4.3)|||PHP_INI_ALL&&&track_errors|||""0""|||If set to ""1"", the last error message will always be present in the variable $php_errormsg|||PHP_INI_ALL&&&html_errors|||""1""|||Turns off HTML tags in error messages|||PHP_INI_ALLPHP_INI_SYSTEM in PHP <= 4.2.3.&&&xmlrpc_errors|||""0""|||Turns off normal error reporting and formats errors as XML-RPC error message (available since PHP 4.1)|||PHP_INI_SYSTEM&&&xmlrpc_error_number|||""0""|||Used as the value of the XML-RPC faultCode element (available since PHP 4.1)|||PHP_INI_ALL&&&docref_root|||""""|||(available since PHP 4.3)|||PHP_INI_ALL&&&docref_ext|||""""|||(available since PHP 4.3.2)|||PHP_INI_ALL&&&error_prepend_string|||NULL|||Specifies a string to output before an error message|||PHP_INI_ALL&&&error_append_string|||NULL|||Specifies a string to output after an error message|||PHP_INI_ALL&&&error_log|||NULL|||Specifies the name of the file where script errors should be logged. The file should be writable by the web server's user. If the special value syslog is used, the errors are sent to the system logger instead|||PHP_INI_ALL$$$&&&debug_backtrace()|||Generates a backtrace&&&debug_print_backtrace()|||Prints a backtrace&&&error_clear_last()|||Clears the last error&&&error_get_last()|||Returns the last error that occurred&&&error_log()|||Sends an error message to a log, 
to a file, or to a mail account&&&error_reporting()|||Specifies which errors are reported&&&restore_error_handler()|||Restores the previous error handler&&&restore_exception_handler()|||Restores the previous exception handler&&&set_error_handler()|||Sets a user-defined error handler function&&&set_exception_handler()|||Sets a user-defined exception handler function&&&trigger_error()|||Creates a user-level error message&&&user_error()|||Alias of trigger_error()$$$1|||E_ERROR|||Fatal run-time errors. Errors that cannot be recovered from. Execution of the script is halted&&&2|||E_WARNING|||Run-time warnings (non-fatal errors). Execution of the script is not halted&&&4|||E_PARSE|||Compile-time parse errors. Parse errors should only be generated by the parser&&&8|||E_NOTICE|||Run-time notices. The script found something that might be an error, but could also happen when running a script normally&&&16|||E_CORE_ERROR|||Fatal errors at PHP startup. This is like E_ERROR, except it is generated by the core of PHP&&&32|||E_CORE_WARNING|||Non-fatal errors at PHP startup. This is like E_WARNING, except it is generated by the core of PHP&&&64|||E_COMPILE_ERROR|||Fatal compile-time errors. This is like E_ERROR, except it is generated by the Zend Scripting Engine&&&128|||E_COMPILE_WARNING|||Non-fatal compile-time errors. This is like E_WARNING, except it is generated by the Zend Scripting Engine&&&256|||E_USER_ERROR|||Fatal user-generated error. This is like E_ERROR, except it is generated in PHP code by using the PHP function trigger_error()&&&512|||E_USER_WARNING|||Non-fatal user-generated warning. This is like E_WARNING, except it is generated in PHP code by using the PHP function trigger_error()&&&1024|||E_USER_NOTICE|||User-generated notice. This is like E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error()&&&2048|||E_STRICT|||Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code (Since PHP 5 but not included in E_ALL until PHP 5.4)&&&4096|||E_RECOVERABLE_ERROR|||Catchable fatal error. Indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an E_ERROR (Since PHP 5.2)&&&8192|||E_DEPRECATED|||Run-time notices. Enable this to receive warnings about code that will not work in future versions (Since PHP 5.3)&&&16384|||E_USER_DEPRECATED|||User-generated warning message. This is like E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error() (Since PHP 5.3)&&&32767|||E_ALL|||Enable all PHP errors and warnings (except E_STRICT in versions < 5.4)",[]
PHP Reference,"
checkdate()
date_add()
date_create_from_format()
date_create()
date_date_set()
date_default_timezone_get()
date_default_timezone_set()
date_diff()
date_format()
date_get_last_errors()
date_interval_create_from_date_string()
date_interval_format()
date_isodate_set()
date_modify()
date_offset_get()
date_parse_from_format()
date_parse()
date_sub()
date_sun_info()
date_sunrise()
date_sunset()
date_time_set()
date_timestamp_get()
date_timestamp_set()
date_timezone_get()
date_timezone_set()
date()
getdate()
gettimeofday()
gmdate()
gmmktime()
gmstrftime()
idate()
localtime()
microtime()
mktime()
strftime()
strptime()
strtotime()
time()
timezone_abbreviations_list()
timezone_identifiers_list()
timezone_location_get()
timezone_name_from_abbr()
timezone_name_get()
timezone_offset_get()
timezone_open()
timezone_transitions_get()
timezone_version_get()
",https://www.w3schools.com/php/php_ref_exception.asp,"Exceptions are used by functions and methods to send information about errors andunexpected behaviour.|||The Exception object has no public properties, but it has private and protected propertieswhich can be written to or read from using the constructor and methods.|||The Exception object has the following methods:",,,,"Exception()|||The contructor of the Exception object&&&getCode()|||Returns the exception code&&&getFile()|||Returns the full path of the file in which the exception was thrown&&&getMessage()|||Returns a string describing why the exception was thrown&&&getLine()|||Returns the line number of the line of code which threw the exception&&&getPrevious()|||If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null&&&getTrace()|||Returns an array with information about all of the functions that were running at the time the exception was thrown&&&getTraceAsString()|||Returns the same information as getTrace(), but in a string",[]
PHP Reference,PHP Directory,https://www.w3schools.com/php/php_ref_filesystem.asp,"The filesystem functions allow you to access and manipulate the filesystem.|||The filesystem functions are part of the PHP core. There is no installation needed to use these functions.|||When specifying a path on Unix platforms, a forward slash (/) is used as directory separator.|||On Windows platforms, both forward slash (/) and backslash (\) can be used.|||The behavior of the filesystem functions is affected by settings in php.ini.",PHP Filesystem Introduction,,,"allow_url_fopen|||""1""|||Allows fopen()-type functions to work with URLs|||PHP_INI_SYSTEM &&&allow_url_include|||""0""|||(available since PHP 5.2)|||PHP_INI_SYSTEM&&&user_agent|||NULL|||Defines the user agent for PHP to send (available since PHP 4.3)|||PHP_INI_ALL&&&default_socket_timeout|||""60""|||Sets the default timeout, in seconds, for socket based streams (available since PHP 4.3) |||PHP_INI_ALL&&&from|||""""|||Defines the email address to be used on unauthenticated FTP connections 
    and in the From header for HTTP connections when using ftp and http wrappers|||PHP_INI_ALL&&&auto_detect_line_endings|||""0""|||When set to ""1"", PHP will examine the data read by fgets() and file() to see if it is using Unix, MS-Dos or Mac line-ending characters (available since PHP 4.3)|||PHP_INI_ALL&&&sys_temp_dir|||""""|||(available since PHP 5.5)|||PHP_INI_SYSTEM$$$basename()|||Returns the filename component of a path&&&chgrp()|||Changes the file group&&&chmod()|||Changes the file mode&&&chown()|||Changes the file owner&&&clearstatcache()|||Clears the file status cache&&&copy()|||Copies a file&&&delete()|||See unlink()&&&dirname()|||Returns the directory name component of a path&&&disk_free_space()|||Returns the free space of a filesystem or disk&&&disk_total_space()|||Returns the total size of a filesystem or disk&&&diskfreespace()|||Alias of disk_free_space()&&&fclose()|||Closes an open file&&&feof()|||Checks if the ""end-of-file"" (EOF) has been reached for an open file&&&fflush()|||Flushes buffered output to an open file&&&fgetc()|||Returns a single character from an open file&&&fgetcsv()|||Returns a line from an open CSV file&&&fgets()|||Returns a line from an open file&&&fgetss()|||Deprecated from PHP 7.3. Returns a line from an open file - stripped 
    from HTML and PHP tags&&&file()|||Reads a file into an array&&&file_exists()|||Checks whether or not a file or directory exists&&&file_get_contents()|||Reads a file into a string&&&file_put_contents()|||Writes data to a file&&&fileatime()|||Returns the last access time of a file&&&filectime()|||Returns the last change time of a file&&&filegroup()|||Returns the group ID of a file&&&fileinode()|||Returns the inode number of a file&&&filemtime()|||Returns the last modification time of a file&&&fileowner()|||Returns the user ID (owner) of a file&&&fileperms()|||Returns the file's permissions&&&filesize()|||Returns the file size&&&filetype()|||Returns the file type&&&flock()|||Locks or releases a file&&&fnmatch()|||Matches a filename or string against a specified pattern&&&fopen()|||Opens a file or URL&&&fpassthru()|||Reads from the current position in a file - until EOF, and writes the result 
    to the output buffer&&&fputcsv()|||Formats a line as CSV and writes it to an open file&&&fputs()|||Alias of fwrite()&&&fread()|||Reads from an open file (binary-safe)&&&fscanf()|||Parses input from an open file according to a specified format&&&fseek()|||Seeks in an open file&&&fstat()|||Returns information about an open file&&&ftell()|||Returns the current position in an open file&&&ftruncate()|||Truncates an open file to a specified length&&&fwrite()|||Writes to an open file (binary-safe)&&&glob()|||Returns an array of filenames / directories matching a specified pattern&&&is_dir()|||Checks whether a file is a directory&&&is_executable()|||Checks whether a file is executable&&&is_file()|||Checks whether a file is a regular file&&&is_link()|||Checks whether a file is a link&&&is_readable()|||Checks whether a file is readable&&&is_uploaded_file()|||Checks whether a file was uploaded via HTTP POST&&&is_writable()|||Checks whether a file is writable&&&is_writeable()|||Alias of is_writable()&&&lchgrp()|||Changes the group ownership of a symbolic link&&&lchown()|||Changes the user ownership of a symbolic link&&&link()|||Creates a hard link&&&linkinfo()|||Returns information about a hard link&&&lstat()|||Returns information about a file or symbolic link&&&mkdir()|||Creates a directory&&&move_uploaded_file()|||Moves an uploaded file to a new location&&&parse_ini_file()|||Parses a configuration file&&&parse_ini_string()|||Parses a configuration string&&&pathinfo()|||Returns information about a file path&&&pclose()|||Closes a pipe opened by popen()&&&popen()|||Opens a pipe&&&readfile()|||Reads a file and writes it to the output buffer&&&readlink()|||Returns the target of a symbolic link&&&realpath()|||Returns the absolute pathname&&&realpath_cache_get()|||Returns realpath cache entries&&&realpath_cache_size()|||Returns realpath cache size&&&rename()|||Renames a file or directory&&&rewind()|||Rewinds a file pointer&&&rmdir()|||Removes an empty directory&&&set_file_buffer()|||Alias of stream_set_write_buffer(). Sets the buffer size for write 
    operations on the given file&&&stat()|||Returns information about a file&&&symlink()|||Creates a symbolic link&&&tempnam()|||Creates a unique temporary file&&&tmpfile()|||Creates a unique temporary file&&&touch()|||Sets access and modification time of a file&&&umask()|||Changes file permissions for files&&&unlink()|||Deletes a file",[]
PHP Reference,"
chdir()
chroot()
closedir()
dir()
getcwd()
opendir()
readdir()
rewinddir()
scandir()
",https://www.w3schools.com/php/php_ref_filter.asp,"This PHP filters is used to validate and filter data coming from insecure sources, like user input.|||From PHP 5.2.0, the filter functions are enabled by default. There is no installation needed to use these functions.|||The behavior of these functions is affected by settings in php.ini:",Installation,,,"filter.default|||Filter all $_GET, $_POST, $_COOKIE, $_REQUEST and $_SERVER data by this filter. Accepts the name of the filter you like to use by default. See the filter list for the list of the filter names|||""unsafe_raw""|||PHP_INI_PERDIR&&&filter.default_flags|||Default flags to apply when the default filter is set. This is set to FILTER_FLAG_NO_ENCODE_QUOTES by default for backwards compatibility reasons|||NULL|||PHP_INI_PERDIR$$$&&&filter_has_var()|||Checks whether a variable of a specified input type exist&&&filter_id()|||Returns the filter ID of a specified filter name&&&filter_input()|||Gets an external variable (e.g. from form input) and optionally filters it&&&filter_input_array()|||Gets external variables (e.g. from form input) and optionally filters them&&&filter_list()|||Returns a list of all supported filter names&&&filter_var()|||Filters a variable with a specified filter&&&filter_var_array()|||Gets multiple variables and filter them$$$INPUT_POST|||POST variables&&&INPUT_GET|||GET variables&&&INPUT_COOKIE|||COOKIE variables&&&INPUT_ENV|||ENV variables&&&INPUT_SERVER|||SERVER variables&&&FILTER_DEFAULT|||Do nothing, optionally strip/encode special characters. Equivalent to 
  FILTER_UNSAFE_RAW&&&FILTER_FLAG_NONE|||Allows no flags&&&FILTER_FLAG_ALLOW_OCTAL|||Only for inputs that starts with a zero (0) as octal numbers. This only 
  allows the succeeding digits to be 0-7&&&FILTER_FLAG_ALLOW_HEX|||Only for inputs that starts with 0x/0X as hexadecimal numbers. This only 
  allows succeeding characters to be a-fA-F0-9 &&&FILTER_FLAG_STRIP_LOW|||Strip characters with ASCII value lower than 32&&&FILTER_FLAG_STRIP_HIGH|||Strip characters with ASCII value greater than 127&&&FILTER_FLAG_ENCODE_LOW|||Encode characters with ASCII value lower than 32&&&FILTER_FLAG_ENCODE_HIGH|||Encode characters with ASCII value greater than 127&&&FILTER_FLAG_ENCODE_AMP|||Encode &&&&FILTER_FLAG_NO_ENCODE_QUOTES|||Do not encode ' and ""&&&FILTER_FLAG_EMPTY_STRING_NULL|||Not in use&&&FILTER_FLAG_ALLOW_FRACTION|||Allows a period (.) as a fractional separator in numbers&&&FILTER_FLAG_ALLOW_THOUSAND|||Allows a comma (,) as a thousands separator in numbers&&&FILTER_FLAG_ALLOW_SCIENTIFIC|||Allows an e or E for scientific notation in numbers&&&FILTER_FLAG_PATH_REQUIRED|||The URL must contain a path part&&&FILTER_FLAG_QUERY_REQUIRED|||The URL must contain a query string&&&FILTER_FLAG_IPV4|||Allows the IP address to be in IPv4 format&&&FILTER_FLAG_IPV6|||Allows the IP address to be in IPv6 format&&&FILTER_FLAG_NO_RES_RANGE|||Fails validation for the reserved IPv4 ranges: 0.0.0.0/8, 169.254.0.0/16, 
  127.0.0.0/8 and 240.0.0.0/4, and for the reserved IPv6 ranges: ::1/128, 
  ::/128, ::ffff:0:0/96 and fe80::/10&&&FILTER_FLAG_NO_PRIV_RANGE|||Fails validation for the private IPv4 ranges: 10.0.0.0/8, 172.16.0.0/12 
  and 192.168.0.0/16, and for the IPv6 addresses starting with FD or FC&&&FILTER_FLAG_EMAIL_UNICODE|||Allows the local part of the email address to contain Unicode characters&&&FILTER_REQUIRE_SCALAR|||The value must be a scalar&&&FILTER_REQUIRE_ARRAY|||The value must be an array&&&FILTER_FORCE_ARRAY|||Treats a scalar value as array with the scalar value as only element&&&FILTER_NULL_ON_FAILURE|||Return NULL on failure for unrecognized boolean values&&&FILTER_VALIDATE_BOOLEAN|||Validates a boolean&&&FILTER_VALIDATE_EMAIL|||Validates value as a valid e-mail address&&&FILTER_VALIDATE_FLOAT|||Validates value as float&&&FILTER_VALIDATE_INT|||Validates value as integer&&&FILTER_VALIDATE_IP|||Validates value as IP address&&&FILTER_VALIDATE_MAC|||Validates value as MAC address&&&FILTER_VALIDATE_REGEXP|||Validates value against a regular expression&&&FILTER_VALIDATE_URL|||Validates value as URL&&&FILTER_SANITIZE_EMAIL|||Removes all illegal characters from an e-mail address&&&FILTER_SANITIZE_ENCODED|||Removes/Encodes special characters&&&FILTER_SANITIZE_MAGIC_QUOTES|||Apply addslashes()&&&FILTER_SANITIZE_NUMBER_FLOAT|||Remove all characters, except digits, +- signs, and optionally .,eE&&&FILTER_SANITIZE_NUMBER_INT|||Removes all characters except digits and + - signs&&&FILTER_SANITIZE_SPECIAL_CHARS|||Removes special characters&&&FILTER_SANITIZE_STRING|||Removes tags/special characters from a string&&&FILTER_SANITIZE_STRIPPED|||Alias of FILTER_SANITIZE_STRING&&&FILTER_SANITIZE_URL|||Removes all illegal character from a URL&&&FILTER_UNSAFE_RAW|||Do nothing, optionally strip/encode special characters&&&FILTER_CALLBACK|||Call a user-defined function to filter data",[]
PHP Reference,PHP Error,https://www.w3schools.com/php/php_ref_ftp.asp,"The FTP functions give client access to file servers through the File Transfer Protocol (FTP).|||The FTP functions are used to open, login and close connections, as well as upload, download, rename, delete, and get information on files from file servers. Not all of the FTP functions will work with every server or return the same results. The FTP functions became available with PHP 3.|||If you only wish to read from or write to a file on an FTP server, consider using the ftp:// wrapper with the Filesystem functions which provide a simpler and more intuitive interface.|||For these functions to work, you have to compile PHP with --enable-ftp.|||The Windows version of PHP has built-in support for this extension.",,,,ftp_alloc()|||Allocates space for a file to be uploaded to the FTP server&&&ftp_cdup()|||Changes to the parent directory on the FTP server&&&ftp_chdir()|||Changes the current directory on the FTP server&&&ftp_chmod()|||Sets permissions on a file via FTP&&&ftp_close()|||Closes an FTP connection&&&ftp_connect()|||Opens an FTP connection&&&ftp_delete()|||Deletes a file on the FTP server&&&ftp_exec()|||Executes a command on the FTP server&&&ftp_fget()|||Downloads a file from the FTP server and saves it into an open local file&&&ftp_fput()|||Uploads from an open file and saves it to a file on the FTP server&&&ftp_get()|||Downloads a file from the FTP server&&&ftp_get_option()|||Returns runtime options of the FTP connection&&&ftp_login()|||Logs in to the FTP connection&&&ftp_mdtm()|||Returns the last modified time of a specified file&&&ftp_mkdir()|||Creates a new directory on the FTP server&&&ftp_mlsd()|||Returns the list of files in the specified directory&&&ftp_nb_continue()|||Continues retrieving/sending a file (non-blocking)&&&ftp_nb_fget()|||Downloads a file from the FTP server and saves it into an open file (non-blocking)&&&ftp_nb_fput()|||Uploads from an open file and saves it to a file on the FTP server (non-blocking)&&&ftp_nb_get()|||Downloads a file from the FTP server (non-blocking)&&&ftp_nb_put()|||Uploads a file to the FTP server (non-blocking)&&&ftp_nlist()|||Returns a list of files in the specified directory on the FTP server&&&ftp_pasv()|||Turns passive mode on or off&&&ftp_put()|||Uploads a file to the FTP server&&&ftp_pwd()|||Returns the current directory name&&&ftp_quit()|||Alias of ftp_close()&&&ftp_raw()|||Sends a raw command to the FTP server&&&ftp_rawlist()|||Returns a list of files with file information from a specified directory&&&ftp_rename()|||Renames a file or directory on the FTP server&&&ftp_rmdir()|||Deletes an empty directory on the FTP server&&&ftp_set_option()|||Sets runtime options for the FTP connection&&&ftp_site()|||Sends an FTP SITE command to the FTP server&&&ftp_size()|||Returns the size of the specified file&&&ftp_ssl_connect()|||Opens a secure SSL-FTP connection&&&ftp_systype()|||Returns the system type identifier of the FTP server$$$FTP_ASCII|||Integer||| &&&FTP_AUTOSEEK|||Integer||| &&&FTP_AUTORESUME|||Integer||| &&&FTP_BINARY|||Integer||| &&&FTP_FAILED|||Integer|||Asynchronous transfer has failed&&&FTP_FINISHED|||Integer|||Asynchronous transfer is completed&&&FTP_IMAGE|||Integer|||Alias of FTP_BINARY&&&FTP_MOREDATA|||Integer|||Asynchronous transfer is in progress&&&FTP_TEXT|||Integer|||Alias of FTP_ASCII&&&FTP_TIMEOUT_SEC|||Integer|||The timeout used for network operations&&&FTP_USEPASVADDRESS|||Boolean||| ,[]
PHP Reference,"
debug_backtrace()
debug_print_backtrace()
error_get_last()
error_log()
error_reporting()
restore_error_handler()
restore_exception_handler()
set_error_handler()
set_exception_handler()
trigger_error()
",https://www.w3schools.com/php/php_ref_json.asp,"The JSON extension implements the JavaScript Object Notation data-interchange format.|||In PHP 5, the decoding is handled by a parser based on the JSON_checker by Douglas Crockford.|||PHP 7 has a new and improved parser specifically written for PHP and licensed under the PHP license.|||From PHP 5.2.0, the JSON functions are enabled by default. There is no installation needed to use these functions.",Installation,,,json_decode()|||Decodes a JSON string&&&json_encode()|||Encode a value to JSON format&&&json_last_error()|||Returns the last error occurred&&&json_last_error_msg()|||Returns the error string of the last json_encode() or json_decode() call$$$JSON_ERROR_NONE|||Integer|||No error has occurred&&&JSON_ERROR_DEPTH|||Integer|||Maximum stack depth has been exceeded&&&JSON_ERROR_STATE_MISMATCH|||Integer|||Invalid/Malformed JSON&&&JSON_ERROR_CTRL_CHAR|||Integer|||Control character error&&&JSON_ERROR_SYNTAX|||Integer|||Syntax error&&&JSON_ERROR_UTF8|||Integer|||Malformed UTF-8 characters. PHP 5.3&&&JSON_ERROR_RECURSION|||Integer|||Invalid recursive reference values. PHP 5.5&&&JSON_ERROR_INF_OR_NAN|||Integer|||Invalid NAN or INF values. PHP 5.5&&&JSON_ERROR_UNSUPPORTED_TYPE|||Integer|||Invalid type. PHP 5.5&&&JSON_ERROR_INVALID_PROPERTY_NAME|||Integer|||Invalid property name. PHP 7.0&&&JSON_ERROR_UTF16|||Integer|||Malformed UTF-16 characters. PHP 7.0&&&JSON_BIGINT_AS_STRING|||Integer||| &&&JSON_OBJECT_AS_ARRAY|||Integer||| &&&JSON_HEX_TAG|||Integer||| &&&JSON_HEX_AMP|||Integer||| &&&JSON_HEX_APOS|||Integer||| &&&JSON_HEX_QUOT|||Integer||| &&&JSON_FORCE_OBJECT|||Integer||| &&&JSON_NUMERIC_CHECK|||Integer||| &&&JSON_PRETTY_PRINT|||Integer||| &&&JSON_UNESCAPED_SLASHES|||Integer||| &&&JSON_PARTIAL_OUTPUT_ON_ERROR|||Integer||| &&&JSON_PRESERVE_ZERO_FRACTION|||Integer||| &&&JSON_UNESCAPED_LINE_TERMINATORS|||Integer||| &&&JSON_INVALID_UTF8_IGNORE|||Integer||| &&&JSON_INVALID_UTF8_SUBSTITUTE|||Integer||| &&&JSON_THROWN_ON_ERROR|||Integer||| ,[]
PHP Reference,PHP Exception,https://www.w3schools.com/php/php_ref_keywords.asp,"PHP has a set of keywords that are reserved words which cannot be used as functionnames, class names or method names. Prior to PHP 7, these keywords could not be used asclass property names either:",,,,"abstract|||Declare a class as abstract&&&and|||A logical operator&&&as|||Used in the foreach loop&&&break|||Break out of loops and switch statements&&&callable|||A data type which can be executed as a function&&&case|||Used in the switch conditional&&&catch|||Used in the try..catch statement&&&class|||Declare a class&&&clone|||Create a copy of an object&&&const|||Define a class constant&&&continue|||Jump to the next iteration of a loop&&&declare|||Set directives for a block of code&&&default|||Used in the switch statement&&&do|||Create a do...while loop&&&echo|||Output text&&&else|||Used in conditional statements&&&elseif|||Used in conditional statements&&&empty|||Check if an expression is empty&&&enddeclare|||End a declare block&&&endfor|||End a for block&&&endforeach|||End a foreach block&&&endif|||End an if or elseif block&&&endswitch|||End a switch block&&&endwhile|||End a while block&&&extends|||Extends a class or interface&&&final|||Declare a class, property or method as final&&&finally|||Used in the try...catch statement&&&fn|||Declare an arrow function&&&for|||Create a for loop&&&foreach|||Create a foreach loop&&&function|||Create a function&&&global|||Import variables from the global scope&&&goto|||Jump to a line of code&&&if|||Create a conditional statement&&&implements|||Implement an interface&&&include|||Embed code from another file&&&include_once|||Embed code from another file&&&instanceof|||Test an object's class&&&insteadof|||Resolve conflicts with traits&&&interface|||Declare an interface&&&isset|||Check if a variable exists and is not null&&&list|||Assigns array elements into variables&&&namespace|||Declares a namespace&&&new|||Creates an object&&&or|||A logical operator&&&print|||Output text&&&private|||Declare a property, method or constant as private&&&protected|||Declare a property, method or constant as protected&&&public|||Declare a property, method or constant as public&&&require|||Embed code from another file&&&require_once|||Embed code from another file&&&return|||Exit a function and return a value&&&static|||Declare a property or method as static&&&switch|||Create a switch block&&&throw|||Throw an exception&&&trait|||Declare a trait&&&try|||Create a try...catch structure&&&unset|||Delete a variable or array element&&&use|||Use a namespace&&&var|||Declare a variable&&&while|||Create a while loop or end a do...while loop&&&xor|||A logical operator&&&yield|||Used in generator functions&&&yield from|||Used in generator functions",[]
PHP Reference,"
Exception()
getCode()
getFile()
getMessage()
getLine()
getPrevious()
getTrace()
getTraceAsString()
",https://www.w3schools.com/php/php_ref_libxml.asp,"The libxml functions and constants are used together with SimpleXML, XSLT and DOM functions.|||These functions require the libxml package. Download at xmlsoft.org|||PHP: indicates the earliest version of PHP that supports the   function.",,,,"libxml_clear_errors()|||Clears the libxml error buffer&&&libxml_disable_entity_loader()|||Enables the ability to load external entities&&&libxml_get_errors()|||Gets the errors from the the libxml error buffer&&&libxml_get_last_error()|||Gets the last error from the the libxml error buffer&&&libxml_set_external_entity_loader()|||Changes the default external entity loader&&&libxml_set_streams_context()|||Sets the streams context for the next libxml document load or write&&&libxml_use_internal_errors()|||Disables the standard libxml errors and enables user error handling$$$LIBXML_BIGLINES|||Make line numbers greater than 65535 to be reported correctly&&&LIBXML_COMPACT|||Set small nodes allocation optimization. This may improve the application performance&&&LIBXML_DTDATTR|||Set default DTD attributes&&&LIBXML_DTDLOAD|||Load external subset&&&LIBXML_DTDVALID|||Validate with the DTD&&&LIBXML_HTML_NOIMPLIED|||Set HTML_PARSE_NOIMPLIED flag. This turns off automatic adding of 
    implied html/body elements &&&LIBXML_HTML_NODEFDTD|||Set HTML_PARSE_NODEFDTD flag. This prevents a default doctype to be 
    added, if no doctype is found&&&LIBXML_NOBLANKS|||Remove blank nodes&&&LIBXML_NOCDATA|||Set CDATA as text nodes&&&LIBXML_NOEMPTYTAG|||Change empty tags (e.g. <br/> to <br></br>),  only available in the DOMDocument->save() and DOMDocument->saveXML()  functions&&&LIBXML_NOENT|||Substitute entities&&&LIBXML_NOERROR|||Do not show error reports&&&LIBXML_NONET|||Stop network access while loading documents&&&LIBXML_NOWARNING|||Do not show warning reports&&&LIBXML_NOXMLDECL|||Drop the XML declaration when saving a document&&&LIBXML_NSCLEAN|||Remove excess namespace declarations&&&LIBXML_PARSEHUGE|||Set XML_PARSE_HUGE flag. This relaxes any hardcoded limit from the 
    parser, such as maximum depth of a document or the size of text nodes&&&LIBXML_PEDANTIC|||Set XML_PARSE_PEDANTIC flag. This enables pedantic error reporting&&&LIBXML_XINCLUDE|||Use XInclude substitution&&&LIBXML_ERR_ERROR|||Get recoverable errors&&&LIBXML_ERR_FATAL|||Get fatal errors&&&LIBXML_ERR_NONE|||Get no errors&&&LIBXML_ERR_WARNING|||Get simple warnings&&&LIBXML_VERSION|||Get libxml version (e.g. 20605 or 20617)&&&LIBXML_DOTTED_VERSION|||Get dotted libxml version (e.g. 2.6.5 or 2.6.17)&&&LIBXML_SCHEMA_CREATE|||Create default or fixed value nodes during XSD schema validation ",[]
PHP Reference,PHP Filesystem,https://www.w3schools.com/php/php_ref_mail.asp,"The mail() function allows you to send emails directly from a script.|||For the mail functions to be available, PHP requires an installed and working email system. The program to be used is defined by the configuration settings in the php.ini file.|||The mail functions are part of the PHP core. There is no installation needed to use these functions.|||The behavior of the mail functions is affected by settings in php.ini:",,,,"mail.add_x_header|||""0""|||Add X-PHP-Originating-Script that will include UID of the script followed by the filename. For PHP 5.3.0 and above|||PHP_INI_PERDIR&&&mail.log|||NULL|||The path to a log file that will log all mail() calls. Log  include full path of script, line number, To address and headers. For PHP 5.3.0 and above |||PHP_INI_PERDIR&&&SMTP|||""localhost""|||Windows only: The DNS name or IP address of the SMTP server|||PHP_INI_ALL&&&smtp_port|||""25""|||Windows only: The SMTP port number. For PHP 4.3.0 and above|||PHP_INI_ALL&&&sendmail_from|||NULL|||Windows only: Specifies the ""from"" address to be used when sending mail from mail()|||PHP_INI_ALL&&&sendmail_path|||""/usr/sbin/sendmail -t -i""|||Specifies where the sendmail program can be found. This directive works also under Windows. If set, SMTP, smtp_port and sendmail_from are ignored |||PHP_INI_SYSTEM$$$ezmlm_hash()|||Calculates the hash value needed by EZMLM&&&mail()|||Allows you to send emails directly from a script",[]
PHP Reference,"
basename()
chgrp()
chmod()
chown()
clearstatcache()
copy()
delete()
dirname()
disk_free_space()
disk_total_space()
diskfreespace()
fclose()
feof()
fflush()
fgetc()
fgetcsv()
fgets()
fgetss()
file()
file_exists()
file_get_contents()
file_put_contents()
fileatime()
filectime()
filegroup()
fileinode()
filemtime()
fileowner()
fileperms()
filesize()
filetype()
flock()
fnmatch()
fopen()
fpassthru()
fputcsv()
fputs()
fread()
fscanf()
fseek()
fstat()
ftell()
ftruncate()
fwrite()
glob()
is_dir()
is_executable()
is_file()
is_link()
is_readable()
is_uploaded_file()
is_writable()
is_writeable()
lchgrp()
lchown()
link()
linkinfo()
lstat()
mkdir()
move_uploaded_file()
parse_ini_file()
parse_ini_string()
pathinfo()
pclose()
popen()
readfile()
readlink()
realpath()
realpath_cache_get()
realpath_cache_size()
rename()
rewind()
rmdir()
set_file_buffer()
stat()
symlink()
tempnam()
tmpfile()
touch()
umask()
unlink()
",https://www.w3schools.com/php/php_ref_math.asp,The math functions can handle values within the range of integer and float types.|||The PHP math functions are part of the PHP core. No installation is required to use these functions.,,,,"abs()|||Returns the absolute (positive) value of a number&&&acos()|||Returns the arc cosine of a number&&&acosh()|||Returns the inverse hyperbolic cosine of a number &&&asin()|||Returns the arc sine of a number&&&asinh()|||Returns the inverse hyperbolic sine of a number&&&atan()|||Returns the arc tangent of a number in radians&&&atan2()|||Returns the arc tangent of two variables x and y&&&atanh()|||Returns the inverse hyperbolic tangent of a number&&&base_convert()|||Converts a number from one number base to another&&&bindec()|||Converts a binary number to a decimal number&&&ceil()|||Rounds a number up to the nearest integer&&&cos()|||Returns the cosine of a number&&&cosh()|||Returns the hyperbolic cosine of a number&&&decbin()|||Converts a decimal number to a binary number&&&dechex()|||Converts a decimal number to a hexadecimal number&&&decoct()|||Converts a decimal number to an octal number&&&deg2rad()|||Converts a degree value to a radian value&&&exp()|||Calculates the exponent of e&&&expm1()|||Returns exp(x) - 1&&&floor()|||Rounds a number down to the nearest integer&&&fmod()|||Returns the remainder of x/y&&&getrandmax()|||Returns the largest possible value returned by rand()&&&hexdec()|||Converts a hexadecimal number to a decimal number&&&hypot()|||Calculates the hypotenuse of a right-angle triangle&&&intdiv()|||Performs integer division&&&is_finite()|||Checks whether a value is finite or not&&&is_infinite()|||Checks whether a value is infinite or not&&&is_nan()|||Checks whether a value is 'not-a-number'&&&lcg_value()|||Returns a pseudo random number in a range between 0 and 1&&&log()|||Returns the natural logarithm of a number&&&log10()|||Returns the base-10 logarithm of a number&&&log1p()|||Returns log(1+number)&&&max()|||Returns the highest value in an array, or the highest value of several specified values&&&min()|||Returns the lowest value in an array, or the lowest value of several specified values&&&mt_getrandmax()|||Returns the largest possible value returned by mt_rand()&&&mt_rand()|||Generates a random integer using Mersenne Twister algorithm&&&mt_srand()|||Seeds the Mersenne Twister random number generator&&&octdec()|||Converts an octal number to a decimal number&&&pi()|||Returns the value of PI&&&pow()|||Returns x raised to the power of y&&&rad2deg()|||Converts a radian value to a degree value&&&rand()|||Generates a random integer&&&round()|||Rounds a floating-point number&&&sin()|||Returns the sine of a number&&&sinh()|||Returns the hyperbolic sine of a number&&&sqrt()|||Returns the square root of a number&&&srand()|||Seeds the random number generator&&&tan()|||Returns the tangent of a number&&&tanh()|||Returns the hyperbolic tangent of a number$$$INF|||INF|||The infinite&&&M_E|||2.7182818284590452354|||Returns e&&&M_EULER|||0.57721566490153286061|||Returns Euler constant&&&M_LNPI|||1.14472988584940017414|||Returns the natural logarithm of PI: log_e(pi)&&&M_LN2|||0.69314718055994530942|||Returns the natural logarithm of 2: log_e 2&&&M_LN10|||2.30258509299404568402|||Returns the natural logarithm of 10: log_e 10&&&M_LOG2E|||1.4426950408889634074|||Returns the base-2 logarithm of E: log_2 e&&&M_LOG10E|||0.43429448190325182765|||Returns the base-10 logarithm of E: log_10 e&&&M_PI|||3.14159265358979323846|||Returns Pi&&&M_PI_2|||1.57079632679489661923|||Returns Pi/2&&&M_PI_4|||0.78539816339744830962|||Returns Pi/4&&&M_1_PI|||0.31830988618379067154|||Returns 1/Pi&&&M_2_PI|||0.63661977236758134308|||Returns 2/Pi&&&M_SQRTPI|||1.77245385090551602729|||Returns the square root of PI: sqrt(pi)&&&M_2_SQRTPI|||1.12837916709551257390|||Returns 2/square root of PI: 2/sqrt(pi)&&&M_SQRT1_2|||0.70710678118654752440|||Returns the square root of 1/2: 1/sqrt(2)&&&M_SQRT2|||1.41421356237309504880|||Returns the square root of 2: sqrt(2)&&&M_SQRT3|||1.73205080756887729352|||Returns the square root of 3: sqrt(3)&&&NAN|||NAN|||Not A Number&&&PHP_ROUND_HALF_UP|||1|||Round halves up&&&PHP_ROUND_HALF_DOWN|||2|||Round halves down&&&PHP_ROUND_HALF_EVEN|||3|||Round halves to even numbers&&&PHP_ROUND_HALF_ODD|||4|||Round halves to odd numbers",[]
PHP Reference,PHP Filter,https://www.w3schools.com/php/php_ref_misc.asp,The misc. functions were only placed here because none of the other categories seemed to fit.|||The misc. functions are part of the PHP core. No installation is required to use these functions.|||The behavior of the misc. functions is affected by settings in the php.ini file.|||Misc. configuration options:,,,,"ignore_user_abort|||FALSE indicates that scripts will be terminated as soon as they try to output something after a client has aborted their connection|||""0""|||PHP_INI_ALL&&&highlight.string|||Color for highlighting a string in PHP syntax|||""#DD0000""|||PHP_INI_ALL&&&highlight.comment|||Color for highlighting PHP comments|||""#FF8000""|||PHP_INI_ALL&&&highlight.keyword|||Color for syntax highlighting PHP keywords (e.g. parenthesis and semicolon) |||""#007700""|||PHP_INI_ALL&&&highlight.default|||Default color for PHP syntax|||""#0000BB""|||PHP_INI_ALL&&&highlight.html|||Color for HTML code|||""#000000""|||PHP_INI_ALL&&&browscap|||Name and location of browser-capabilities file (e.g. browscap.ini) |||NULL|||PHP_INI_SYSTEM$$$&&&
 connection_aborted()|||Checks whether the client has disconnected&&&
 connection_status()|||Returns the current connection status&&&connection_timeout()|||Deprecated from PHP 4.0.5. Checks whether the script has timed out&&&constant()|||Returns the value of a constant&&&define()|||Defines a constant&&&defined()|||Checks whether a constant exists&&&die()|||Alias of exit()&&&eval()|||Evaluates a string as PHP code&&&exit()|||Prints a message and exits the current script&&&get_browser()|||Returns the capabilities of the user's browser&&&__halt_compiler()|||Halts the compiler execution&&&highlight_file()|||Outputs a file with the PHP syntax highlighted&&&highlight_string()|||Outputs a string with the PHP syntax highlighted&&&hrtime()|||Returns the system's high resolution time&&&
 ignore_user_abort()|||Sets whether a remote client can abort the running of a script&&&pack()|||Packs data into a binary string&&&
 php_strip_whitespace()|||Returns the source code of a file with PHP comments and whitespace removed&&&show_source()|||Alias of highlight_file()&&&sleep()|||Delays code execution for a number of seconds&&&sys_getloadavg()|||Returns the system load average&&&time_nanosleep()|||Delays code execution for a number of seconds and nanoseconds&&&time_sleep_until()|||Makes a script sleep until the specified time&&&uniqid()|||Generates a unique ID&&&unpack()|||Unpacks data from a binary string&&&usleep()|||Delays code execution for a number of microseconds$$$CONNECTION_ABORTED|||Connection is aborted by user or network error&&&CONNECTION_NORMAL|||Connection is running normally&&&CONNECTION_TIMEOUT|||Connection timed out&&&__COMPILER_HALT_OFFSET__||| ",[]
PHP Reference,"
filter_has_var()
filter_id()
filter_input()
filter_input_array()
filter_list()
filter_var()
filter_var_array()
",https://www.w3schools.com/php/php_ref_mysqli.asp,"The MySQLi functions allows you to access MySQL database servers.|||Note: The MySQLi extension is designed to work with MySQL version 4.1.13 or newer.|||For the MySQLi functions to be available, you must compile PHP with support for the MySQLi extension.|||The MySQLi extension was introduced with PHP version 5.0.0. The MySQL Native Driver was included in PHP version 5.3.0.|||For installation details, go to:http://php.net/manual/en/mysqli.installation.php|||For runtime configuration details, go to:http://php.net/manual/en/mysqli.configuration.php",,,,"affected_rows()|||Returns the number of affected rows in the previous MySQL operation&&&autocommit()|||Turns on or off auto-committing database modifications&&&begin_transaction()|||Starts a transaction&&&change_user()|||Changes the user of the specified database connection&&&character_set_name()|||Returns the default character set for the database connection&&&close()|||Closes a previously opened database connection&&&commit()|||Commits the current transaction&&&connect()|||Opens a new connection to the MySQL server&&&connect_errno()|||Returns the error code from the last connection error&&&connect_error()|||Returns the error description from the last connection error&&&data_seek()|||Adjusts the result pointer to an arbitrary row in the result-set&&&debug()|||Performs debugging operations&&&dump_debug_info()|||Dumps debugging info into the log&&&errno()|||Returns the last error code for the most recent function call&&&error()|||Returns the last error description for the most recent function call&&&error_list()|||Returns a list of errors for the most recent function call&&&fetch_all()|||Fetches all result rows as an associative array, a numeric array, or both&&&fetch_array()|||Fetches a result row as an associative, a numeric array, or both&&&fetch_assoc()|||Fetches a result row as an associative array&&&fetch_field()|||Returns the next field in the result-set, as an object&&&fetch_field_direct()|||Returns meta-data for a single field in the result-set, as an object&&&fetch_fields()|||Returns an array of objects that represent the fields in a 
result-set&&&fetch_lengths()|||Returns the lengths of the columns of the current row in the result-set&&&fetch_object()|||Returns the current row of a result-set, as an object&&&fetch_row()|||Fetches one row from a result-set and returns it as an enumerated array&&&field_count()|||Returns the number of columns for the most recent query&&&field_seek()|||Sets the field cursor to the given field offset&&&get_charset()|||Returns a character set object&&&get_client_info()|||Returns the MySQL client library version&&&get_client_stats()|||Returns statistics about client per-process&&&get_client_version()|||Returns the MySQL client library version as an integer&&&get_connection_stats()|||Returns statistics about the client connection&&&get_host_info()|||Returns the MySQL server hostname and the connection type&&&get_proto_info()|||Returns the MySQL protocol version&&&get_server_info()|||Returns the MySQL server version&&&get_server_version()|||Returns the MySQL server version as an integer&&&info()|||Returns information about the last executed query&&&init()|||Initializes MySQLi and returns a resource for use with real_connect()&&&insert_id()|||Returns the auto-generated id from the last query&&&kill()|||Asks the server to kill a MySQL thread&&&more_results()|||Checks if there are more results from a multi query&&&multi_query()|||Performs one or more queries on the database&&&next_result()|||Prepares the next result-set from multi_query()&&&options()|||Sets extra connect options and affect behavior for a connection&&&ping()|||Pings a server connection, or tries to reconnect if the connection has gone down&&&poll()|||Polls connections&&&prepare()|||Prepares an SQL statement for execution&&&query()|||Performs a query against a database&&&real_connect()|||Opens a new connection to the MySQL server&&&real_escape_string()|||Escapes special characters in a string for use in an SQL statement&&&real_query()|||Executes a single SQL query&&&reap_async_query()|||Returns result from an async SQL query&&&refresh()|||Refreshes/flushes tables or caches, or resets the replication server information&&&rollback()|||Rolls back the current transaction for the database&&&select_db()|||Select the default database for database queries&&&set_charset()|||Sets the default client character set&&&set_local_infile_default()|||Unsets user defined handler for load local infile command&&&set_local_infile_handler()|||Set callback function for LOAD DATA LOCAL INFILE command&&&sqlstate()|||Returns the SQLSTATE error code for the error&&&ssl_set()|||Used to establish secure connections using SSL&&&stat()|||Returns the current system status&&&stmt_init()|||Initializes a statement and returns an object for use with stmt_prepare()&&&store_result()|||Transfers a result-set from the last query&&&thread_id()|||Returns the thread ID for the current connection&&&thread_safe()|||Returns whether the client library is compiled as thread-safe&&&use_result()|||Initiates the retrieval of a result-set from the last query executed&&&warning_count()|||Returns the number of warnings from the last query in the connection",[]
PHP Reference,PHP FTP,https://www.w3schools.com/php/php_ref_network.asp,"The Network functions contains various network function and let you manipulate information sent to the browser by the Web server, before any other output has been sent.|||The Network functions are part of the PHP core. There is no installation needed to use these functions.",PHP Network Introduction,,,"checkdnsrr()|||Checks DNS records for type corresponding to 
host&&&closelog()|||Closes the connection of system logger&&&define_syslog_variables()|||Deprecated and removed in PHP 5.4. 
    Initializes the variables used in syslog functions&&&dns_check_record()|||Alias of checkdnsrr()&&&dns_get_mx()|||Alias of getmxrr()&&&dns_get_record()|||Gets the DNS resource records associated with the specified hostname&&&fsockopen()|||Opens an Internet or Unix domain socket connection&&&gethostbyaddr()|||Returns the domain name for a given IP address&&&gethostbyname()|||Returns the IPv4 address for a given domain/host name&&&gethostbynamel()|||Returns a list of IPv4 address for a given domain/host name&&&gethostname()|||Returns the host name&&&getmxrr()|||Returns the MX records for the specified internet host name&&&getprotobyname()|||Returns the protocol number for a given protocol name&&&getprotobynumber()      |||Returns the protocol name for a given protocol number&&&getservbyname()|||Returns the port number for a given Internet service and protocol&&&getservbyport()|||Returns the Internet service for a given port and protocol&&&header_register_callback()|||Calls a header function&&&header_remove()|||Removes an HTTP header previously set with the
    header() function&&&header()|||Sends a raw HTTP header to a client&&&headers_list()|||Returns a list of response headers to be sent to the browser&&&headers_sent()|||Checks if/where headers have been sent&&&http_response_code()|||Sets or returns the HTTP response status code&&&inet_ntop()|||Converts a 32bit IPv4 or 128bit IPv6 address into a readable format&&&inet_pton()|||Converts a readable IP address into a packed 32bit IPv4 or 128bit IPv6 
    format&&&ip2long()|||Converts an IPv4 address into a long integer&&&long2ip()|||Converts a long integer address into a string in IPv4 format&&&openlog()|||Opens the connection of system logger&&&pfsockopen()|||Opens a persistent Internet or Unix domain socket connection&&&setcookie()|||Defines a cookie to be sent along with the rest of the HTTP headers&&&setrawcookie()|||Defines a cookie (without URL encoding) to be sent along with the rest of the HTTP headers&&&socket_get_status()|||Alias of stream_get_meta_data()&&&socket_set_blocking()|||Alias of stream_set_blocking()&&&socket_set_timeout()|||Alias of stream_set_timeout()&&&syslog()|||Generates a system log message",[]
PHP Reference,"
ftp_alloc()
ftp_cdup()
ftp_chdir()
ftp_chmod()
ftp_close()
ftp_connect()
ftp_delete()
ftp_exec()
ftp_fget()
ftp_fput()
ftp_get()
ftp_get_option()
ftp_login()
ftp_mdtm()
ftp_mkdir()
ftp_mlsd()
ftp_nb_continue()
ftp_nb_fget()
ftp_nb_fput()
ftp_nb_get()
ftp_nb_put()
ftp_nlist()
ftp_pasv()
ftp_put()
ftp_pwd()
ftp_quit()
ftp_raw()
ftp_rawlist()
ftp_rename()
ftp_rmdir()
ftp_set_option()
ftp_site()
ftp_size()
ftp_ssl_connect()
ftp_systype()
",https://www.w3schools.com/php/php_ref_output_control.asp,"PHP provides a set of functions that control what content is sent to the browser and when.This is referred to as output control.|||Output can come from any of the following sources:|||PHP and the backend on which it is running may hold the output in a buffer before sendingit to the user.|||Note: The output control functions can create any number of output buffers. Output buffers catchoutput given by the program. Each new output buffer is placed on the top of a stack ofoutput buffers, and any output it provides will be caught by the buffer below it. The outputcontrol functions handle only the topmost buffer, so the topmost buffer must be removed inorder to control the buffers below it.|||The PHP output control functions are part of the PHP core. No installation is required to use these functions.|||The behavior of output control functions is affected by settings in php.ini:",,"echo, print, printf, print_r... and other similar functions and statements@@@Notices, warnings and errors from PHP@@@Any content outside of the <?php ?> tags",,"output_buffering|||""0""|||Enables output buffering for all PHP files by default|||4&&&output_handler|||NULL|||Set the name of the default function which handles the output of all output buffers|||4&&&implicit_flush|||""0""|||Enables implicit flush, which causes output to be sent directly to the browser on each output statement|||4&&&url_rewriter.tags|||""a=href,area=href,
    frame=src,form=,fieldset=""|||Indicates which HTML tags and attributes can be modified by the URL rewriter (the output_add_rewrite_var() function.)|||4.3&&&url_rewriter.hosts|||The current value of 
    $_SERVER['HTTP_HOST']|||URL rewriting is only done on the server's own URLs by default. To allow for rewriting URLs of other websites, set the hostnames of the other websites here.|||7.1$$$flush()|||Attempts to send content from the system's output buffer to the browser&&&ob_clean()|||Deletes all of the content from the topmost output buffer&&&ob_end_clean()|||Deletes the topmost output buffer and all of its contents&&&ob_end_flush()|||Deletes the topmost output buffer and outputs its contents&&&ob_flush()|||Outputs the contents of the topmost output buffer and clears the buffer&&&ob_get_clean()|||Returns all of the contents of the topmost output buffer and clears the buffer&&&ob_get_contents()|||Returns the contents of the topmost output buffer&&&ob_get_flush()|||Outputs and returns the contents of the topmost output buffer and then deletes the buffer&&&ob_get_length()|||Returns the number of bytes of data that are in the topmost output buffer&&&ob_get_level()|||Returns a number indicating how many output buffers are on the stack&&&ob_get_status()|||Returns information about the output buffers&&&ob_gzhandler()|||Used as a callback function for ob_start() to compress the contents of the buffer when sending it to the browser&&&ob_implicit_flush()|||Turns implicit flushing on or off&&&ob_list_handlers()|||Returns an array of callback function names that are being used by the topmost output buffer&&&ob_start()|||Creates a new output buffer and adds it to the top of the stack&&&output_add_rewrite_var()|||Used to append query string parameters to any URL in the output&&&output_reset_rewrite_vars()|||Removes all variables added by output_add_rewrite_var()",[]
PHP Reference,PHP JSON,https://www.w3schools.com/php/php_ref_regex.asp,"Regular expressions allow you to search for and replace patterns in strings.|||The PHP regular expression functions are part of the PHP core. No installation is required to use these functions.|||These settings in php.ini can be used to limit the amount time or resources used whenevaluating regular expressions.|||Modifiers can change how a search is performed.|||Brackets are used to find a range of characters:|||Metacharacters are characters with a special meaning:|||Quantifiers define quantities:|||Note: If your expression needs to search for one of the special characters you can use abackslash ( \ ) to escape them.For example, to search for one or more question marks you can use the followingexpression: $pattern = '/\?+/';",PHP Regular Expression Introduction|||Installation,,,"pcre.backtrack_limit|||""1000000""|||The maximum number of backtracks that the regular expression engine is allowed to do while evaluating an expression. (available since PHP 5.2)|||PHP_INI_ALL&&&pcre.recursion_limit|||""100000""|||The maximum recursion depth that the regular expression engine is permitted to reach while evaluating an expression. (available since PHP 5.2)|||PHP_INI_ALL&&&pcre.jit|||""1""|||When set to ""1"" this enables PCRE's (Perl-Compatible Regular Expressions) just-in-time compilation. (available since PHP 7.0)|||PHP_INI_ALL$$$&&&preg_filter()|||Returns a string or an array with pattern matches replaced, but only if matches were found&&&preg_grep()|||Returns an array consisting only of elements from the input array which matched the pattern&&&preg_last_error()|||Returns an error code indicating the reason that the most recent regular expression call failed&&&preg_match()|||Finds the first match of a pattern in a string&&&preg_match_all()|||Finds all matches of a pattern in a string&&&preg_replace()|||Returns a string where matches of a pattern (or an array of patterns) are replaced with a substring (or an array of substrings) in a given string&&&preg_replace_callback()|||Given an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback&&&preg_replace_callback_array()|||Given an array associating expressions with callbacks, returns a string where all matches of each expression are replaced with the substring returned by the callback&&&preg_split()|||Breaks a string into an array using matches of a regular expression as separators&&&preg_quote()|||Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them$$$&&&i|||Performs a case-insensitive search&&&m|||Performs a multiline search (patterns that search for the
beginning or end of a string will match the beginning or end
of each line)&&&u|||Enables correct matching of UTF-8 encoded patterns$$$&&&[abc]|||Find one character from the options between the brackets&&&[^abc]|||Find any character NOT between the brackets&&&[0-9]|||Find one character from the range 0 to 9$$$&&&||||Find a match for any one of the patterns separated by | as in: cat|dog|fish&&&.|||Find just one instance of any character&&&^|||Finds a match as the beginning of a string as in: ^Hello&&&$|||Finds a match at the end of the string as in: World$&&&\d|||Find a digit&&&\s|||Find a whitespace character&&&\b|||Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b&&&\uxxxx|||Find the Unicode character specified by the hexadecimal number xxxx$$$n+|||Matches any string that contains at least one n&&&n*|||Matches any string that contains zero or more occurrences of n&&&n?|||Matches any string that contains zero or one occurrences of n&&&n{x}|||Matches any string that contains a sequence of X n's&&&n{x,y}|||Matches any string that contains a sequence of X to Y n's&&&n{x,}|||Matches any string that contains a sequence of at least X n's",[]
PHP Reference,"
json_decode()
json_encode()

",https://www.w3schools.com/php/php_ref_simplexml.asp,"SimpleXML is an extension that allows us to easily manipulate and get XML data.|||SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.|||SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.|||From PHP 5, the SimpleXML functions are part of the PHP core. No installation is required to use these functions.",PHP SimpleXML Introduction,,,__construct()|||Creates a new SimpleXMLElement object&&&__toString()|||Returns the string content of an element&&&addAttribute()|||Appends an attribute to the SimpleXML element&&&addChild()|||Appends a child element the SimpleXML element&&&asXML()|||Returns a well-formed XML string (XML version 1.0) from a SimpleXML object&&&attributes()|||Returns the attributes/values of an element&&&children()|||Returns the children of a specified node&&&count()|||Counts the children of a specified node&&&getDocNamespaces()|||Returns the namespaces declared in document&&&getName()|||Returns the name of an element&&&getNamespaces()|||Returns the namespaces used in document&&&registerXPathNamespace()|||Creates a namespace context for the next XPath query&&&saveXML()|||Alias of asXML()&&&simplexml_import_dom()|||Returns a SimpleXMLElement object from a DOM node&&&simplexml_load_file()|||Converts an XML document to an object&&&simplexml_load_string()|||Converts an XML string to an object&&&xpath()|||Runs an XPath query on XML data$$$current()|||Returns the current element&&&getChildren()|||Returns the child elements of the current element&&&hasChildren()|||Checks whether the current element has children&&&key()|||Returns the XML tag name of the current element&&&next()|||Moves to the next element&&&rewind()|||Rewinds to the first element&&&valid()|||Checks whether the current element is valid,[]
PHP Reference,PHP Keywords,https://www.w3schools.com/php/php_ref_stream.asp,"Streams are the way of generalizing file, network, data compression, and other operations which share a common set of functions and uses. In its simplest definition, a stream is a resource object which exhibits streamable behavior. That is, it can be read from or written to in a linear fashion, and may be able to fseek() to an arbitrary location within the stream. A wrapper is additional code which tells the stream how to handle specific protocols/encodings.|||The Stream functions are part of the PHP core. There is no installation needed to use these functions.",,,,"set_socket_blocking()|||Deprecated in PHP 5.4, and removed in PHP 7.0. 
    Alias of stream_set_blocking()&&&stream_bucket_prepend()||| &&&stream_context_create()||| &&&stream_context_get_default()||| &&&stream_context_get_options()||| &&&stream_context_get_params()||| &&&stream_context_set_default()||| &&&stream_context_set_options()||| &&&stream_context_set_params()||| &&&stream_copy_to_stream()|||Copies data from one stream to another&&&stream_filter_append()|||Appends a filter to a stream&&&stream_filter_prepend()||| &&&stream_filter_register()||| &&&stream_filter_remove()||| &&&stream_get_contents()||| &&&stream_get_filters()||| &&&stream_get_line()||| &&&stream_get_meta_data()||| &&&stream_get_transports()||| &&&stream_get_wrappers()||| &&&stream_is_local()||| &&&stream_isatty()||| &&&stream_notification_callback()||| &&&stream_register_wrapper()|||Alias of stream_wrapper_register()&&&stream_resolve_include_path()||| &&&stream_select()||| &&&stream_set_blocking()||| &&&stream_set_chunk_size()||| &&&stream_set_read_buffer()||| &&&stream_set_timeout()||| &&&stream_set_write_buffer()||| &&&stream_socket_accept()||| &&&stream_socket_client()||| &&&stream_socket_enable_crypto()||| &&&stream_socket_get_name()||| &&&stream_socket_pair()||| &&&stream_socket_recvfrom()||| &&&stream_socket_sendto()||| &&&stream_socket_server()||| &&&stream_socket_shutdown()||| &&&stream_supports_lock()||| &&&stream_wrapper_register()||| &&&stream_wrapper_restore()||| &&&stream_wrapper_unregister()||| ",[]
PHP Reference,"
abstract
and
as
break
callable
case
catch
class
clone
const
continue
declare
default
do
echo
else
elseif
empty
enddeclare
endfor
endforeach
endif
endswitch
extends
final
finally
fn
for
foreach
function
global
if
implements
include
include_once
instanceof
insteadof
interface
isset
list
namespace
new
or
print
private
protected
public
require
require_once
return
static
switch
throw
trait
try
use
var
while
xor
yield
yield from
",https://www.w3schools.com/php/php_ref_string.asp,The PHP string functions are part of the PHP core. No installation is required to use these functions.,,,,"addcslashes()|||Returns a string with backslashes in front of the specified characters&&&addslashes()|||Returns a string with backslashes in front of predefined characters&&&bin2hex()|||Converts a string of ASCII characters to hexadecimal values&&&chop()|||Removes whitespace or other characters from the right end of a string&&&chr()|||Returns a character from a specified ASCII value&&&chunk_split()|||Splits a string into a series of smaller parts&&&convert_cyr_string()|||Converts a string from one Cyrillic character-set to another&&&convert_uudecode()|||Decodes a uuencoded string&&&convert_uuencode()|||Encodes a string using the uuencode algorithm&&&count_chars()|||Returns information about characters used in a string&&&crc32()|||Calculates a 32-bit CRC for a string&&&crypt()|||One-way string hashing&&&echo()|||Outputs one or more strings&&&explode()|||Breaks a string into an array&&&fprintf()|||Writes a formatted string to a specified output stream&&&get_html_translation_table()|||Returns the translation table used by htmlspecialchars() and htmlentities()&&&hebrev()|||Converts Hebrew text to visual text&&&hebrevc()|||Converts Hebrew text to visual text and new lines (\n) into <br>&&&hex2bin()|||Converts a string of hexadecimal values to ASCII characters&&&html_entity_decode()|||Converts HTML entities to characters&&&htmlentities()|||Converts characters to HTML entities&&&htmlspecialchars_decode()|||Converts some predefined HTML entities to characters&&&htmlspecialchars()|||Converts some predefined characters to HTML entities&&&implode()|||Returns a string from the elements of an array&&&join()|||Alias of implode()&&&lcfirst()|||Converts the first character of a string to lowercase&&&levenshtein()|||Returns the Levenshtein distance between two strings&&&localeconv()|||Returns locale numeric and monetary formatting information&&&ltrim()|||Removes whitespace or other characters from the left side of a string&&&md5()|||Calculates the MD5 hash of a string&&&md5_file()|||Calculates the MD5 hash of a file&&&metaphone()|||Calculates the metaphone key of a string&&&money_format()|||Returns a string formatted as a currency string&&&nl_langinfo()|||Returns specific local information&&&nl2br()|||Inserts HTML line breaks in front 
of each newline in a string&&&number_format()|||Formats a number with grouped thousands&&&ord()|||Returns the ASCII value of the first character of a string&&&parse_str()|||Parses a query string into variables&&&print()|||Outputs one or more strings&&&printf()|||Outputs a formatted string&&&quoted_printable_decode()|||Converts a quoted-printable string to an 8-bit string&&&quoted_printable_encode()|||Converts an 8-bit string to a quoted printable string&&&quotemeta()|||Quotes meta characters&&&rtrim()|||Removes whitespace or other characters from the right side of a string&&&setlocale()|||Sets locale information&&&sha1()|||Calculates the SHA-1 hash of a string&&&sha1_file()|||Calculates the SHA-1 hash of a file&&&similar_text()|||Calculates the similarity between two strings&&&soundex()|||Calculates the soundex key of a string&&&sprintf()|||Writes a formatted string to a variable&&&sscanf()|||Parses input from a string according to a format&&&str_getcsv()|||Parses a CSV string into an array&&&str_ireplace()|||Replaces some characters in a string (case-insensitive)&&&str_pad()|||Pads a string to a new length&&&str_repeat()|||Repeats a string a specified number of times&&&str_replace()|||Replaces some characters in a string (case-sensitive)&&&str_rot13()|||Performs the ROT13 encoding on a string&&&str_shuffle()|||Randomly shuffles all characters in a string&&&str_split()|||Splits a string into an array&&&str_word_count()|||Count the number of words in a string&&&strcasecmp()|||Compares two strings (case-insensitive)&&&strchr()|||Finds the first occurrence of a string inside another string (alias of strstr())&&&strcmp()|||Compares two strings (case-sensitive)&&&strcoll()|||Compares two strings (locale based string comparison)&&&strcspn()|||Returns the number of characters found in a string before any part of some specified characters are found&&&strip_tags()|||Strips HTML and PHP tags from a string&&&stripcslashes()|||Unquotes a string quoted with addcslashes()&&&stripslashes()|||Unquotes a string quoted with addslashes()&&&stripos()|||Returns the position of the first occurrence of a string inside another string (case-insensitive)&&&stristr()|||Finds the first occurrence of a string inside another string (case-insensitive)&&&strlen()|||Returns the length of a string&&&strnatcasecmp()|||Compares two strings using a ""natural order"" algorithm (case-insensitive)&&&strnatcmp()|||Compares two strings using a ""natural order"" algorithm (case-sensitive)&&&strncasecmp()|||String comparison of the first n characters (case-insensitive)&&&strncmp()|||String comparison of the first n characters (case-sensitive)&&&strpbrk()|||Searches a string for any of a set of characters&&&strpos()|||Returns the position of the first occurrence of a string inside another string (case-sensitive)&&&strrchr()|||Finds the last occurrence of a string inside another string&&&strrev()|||Reverses a string&&&strripos()|||Finds the position of the last occurrence of a string inside another string (case-insensitive)&&&strrpos()|||Finds the position of the last occurrence of a string inside another string (case-sensitive)&&&strspn()|||Returns the number of characters found in a string that contains only characters from a specified charlist&&&strstr()|||Finds the first occurrence of a string inside another string (case-sensitive)&&&strtok()|||Splits a string into smaller strings&&&strtolower()|||Converts a string to lowercase letters&&&strtoupper()|||Converts a string to uppercase letters&&&strtr()|||Translates certain characters in a string&&&substr()|||Returns a part of a string&&&substr_compare()|||Compares two strings from a specified start position (binary safe and optionally case-sensitive)&&&substr_count()|||Counts the number of times a substring occurs in a string&&&substr_replace()|||Replaces a part of a string with another string&&&trim()|||Removes whitespace or other characters from both sides of a string&&&ucfirst()|||Converts the first character of a string to uppercase&&&ucwords()|||Converts the first character of each word in a string to uppercase&&&vfprintf()|||Writes a formatted string to a specified output stream&&&vprintf()|||Outputs a formatted string&&&vsprintf()|||Writes a formatted string to a variable&&&wordwrap()|||Wraps a string to a given number of characters",[]
PHP Reference,PHP Libxml,https://www.w3schools.com/php/php_ref_variable_handling.asp,The PHP variable handling functions are part of the PHP core. No installation is required to use these functions.,,,,"boolval()|||Returns the boolean value of a variable&&&debug_zval_dump()|||Dumps a string representation of an internal zend value to output&&&doubleval()|||Alias of floatval()&&&empty()|||Checks whether a variable is empty&&&floatval()|||Returns the float value of a variable&&&get_defined_vars()|||Returns all defined variables, as an array&&&get_resource_type()|||Returns the type of a resource&&&gettype()|||Returns the type of a variable&&&intval()|||Returns the integer value of a variable&&&is_array()|||Checks whether a variable is an array&&&is_bool()|||Checks whether a variable is a boolean&&&is_callable()|||Checks whether the contents of a variable can be called as a function&&&is_countable()|||Checks whether the contents of a variable is a countable value&&&is_double()|||Alias of is_float()&&&is_float()|||Checks whether a variable is of type float&&&is_int()|||Checks whether a variable is of type integer&&&is_integer()|||Alias of is_int()&&&is_iterable()|||Checks whether the contents of a variable is an iterable value&&&is_long()|||Alias of is_int()&&&is_null()|||Checks whether a variable is NULL&&&is_numeric()|||Checks whether a variable is a number or a numeric string&&&is_object()|||Checks whether a variable is an object&&&is_real()|||Alias of is_float()&&&is_resource()|||Checks whether a variable is a resource&&&is_scalar()|||Checks whether a variable is a scalar&&&is_string()|||Checks whether a variable is of type string&&&isset()|||Checks whether a variable is set (declared and not NULL)&&&print_r()|||Prints the information about a variable in a human-readable way&&&serialize()|||Converts a storable representation of a value&&&settype()|||Converts a variable to a specific type&&&strval()|||Returns the string value of a variable&&&unserialize()|||Converts serialized data back into actual data&&&unset()|||Unsets a variable&&&var_dump()|||Dumps information about one or more variables&&&var_export()|||Returns structured information (valid PHP code) about a variable",[]
