Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
ASP Tutorials,ASP HOME,https://www.w3schools.com/asp/default.asp,"ASP stands for Active Server Pages|||ASP is a development framework for building web pages.|||ASP supports many different development models:|||ASP and ASP.NET are server side technologies.|||Both technologies enable computer code to be executed by an Internet server.|||When a browser requests an ASP or ASP.NET file, the ASP engine reads the file, executes any code in the file, and returns the result to the browser.|||ASP (aka Classic ASP) was introduced in 1998 as Microsoft's first server side scripting language.|||Classic ASP pages have the file extension .asp and are normally written in VBScript.|||ASP.NET was released in 2002 as a successor to Classic ASP.|||ASP.NET pages have the extension .aspx and are normally written in C# (C sharp).|||ASP.NET 4.6 is the latest official version of ASP.NET.|||ASP.NET 5 was expected to be an important redesign of ASP.NET.|||However, the development of ASP.NET 5 was stopped in favor of ASP.NET Core. |||ASP.NET Web Pages is an SPA application model (Single Page Application).|||The SPA model is quite similar to PHP and Classic ASP.|||ASP.NET Web Pages is being merged into the new ASP.NET Core.|||ASP.NET MVC is an MVC application model (Model-View-Controller).|||ASP.NET MVC is being merged into the new ASP.NET Core.|||ASP.NET MVC is not covered in this tutorial.ASP.NET Web APIASP.NET API is an API application model (Application Programming Interface).ASP.NET API is being merged into the new ASP.NET Core.ASP.NET API is not covered in this tutorial.ASP.NET Web FormsASP.NET Web Forms is an event driven application model.ASP.NET Web Forms is not a part of the new ASP.NET Core.ASP.NET Web Forms is not covered in this tutorial.ASP.NET CoreASP.NET Core was released in 2016.ASP.NET Core merges ASP.NET MVC, ASP.NET Web API, and ASP.NET Web Pages into one application framework.ASP.NET Core is not covered in this tutorial.❮ HomeNext ❯|||ASP.NET API is an API application model (Application Programming Interface).|||ASP.NET API is being merged into the new ASP.NET Core.|||ASP.NET API is not covered in this tutorial.|||ASP.NET Web Forms is an event driven application model.|||ASP.NET Web Forms is not a part of the new ASP.NET Core.|||ASP.NET Web Forms is not covered in this tutorial.|||ASP.NET Core was released in 2016.|||ASP.NET Core merges ASP.NET MVC, ASP.NET Web API, and ASP.NET Web Pages into one application framework.|||ASP.NET Core is not covered in this tutorial.",,Classic ASP@@@ASP.NET Web Forms@@@ASP.NET MVC@@@ASP.NET Web Pages@@@ASP.NET API@@@ASP.NET Core,,,[]
WP Tutorial,WebPages Intro,https://www.w3schools.com/asp/webpages_intro.asp,"Our ""Run Example"" tool displays the ASP.NET code and the HTML output simultaneously.|||Click on the ""Run Example"" button to see how it works:|||Web Pages is one of many programming models for creating ASP.NET web sites and web applications.|||Web Pages provides an easy way to combine HTML, CSS, and server code: |||In addition, Web Pages applications are easily extendable with programmable helpers for databases, videos, graphics, social networking and more.|||If you are new to ASP.NET, Web Pages is a perfect place to start. |||In this Web Pages tutorial you will learn how to combine HTML, CSS, JavaScript and server code, using server code written in VB or C# .|||You will also learn how to extend your web pages with programmable Web Helpers. |||Learn by examples!|||Because ASP.NET code is executed on the server, youcannot view the code in your browser. You will only see the output as plain HTML. |||At W3Schools every example displays the hidden ASP.NET code. Thismakes it easier for you to understand how it works.||| Web Pages Examples|||At the end of this tutorial you will find a complete set of ASP.NET references with objects, components, properties and methods.||| Web Pages References","Easy Learning with ""Run Example""","Easy to learn, understand, and use@@@Uses an SPA application model (Single Page Application)@@@Similar to PHP and Classic ASP@@@VB (Visual Basic) or C# (C sharp) scripting languages ",,,"[['\n<html>', '\n<body>', '\n\xa0\xa0\xa0\xa0\xa0<h1>Hello Web Pages</h1>', '\n\xa0\xa0\xa0\xa0\xa0<p>The time is ', <span class=""marked"">@DateTime.Now</span>, '</p>', '\n</body>', '\n</html>']]"
WP Tutorial,WebPages Razor,https://www.w3schools.com/asp/webpages_razor.asp,"ASP.NET Web Pages use Razor markup with C# or VB code|||Razor is a simple markup syntax for embedding server code (C# or VB) into ASP.NET web pages.|||The page above contains both ordinary HTML markup and Razor markup.|||If you want to learn more about Razor, and the C# and Visual Basic programming languages:|||Go to the Razor section of this tutorial. ",Razor Syntax for C#|||Razor Syntax for VB,"C# code blocks are enclosed in @{ ... }@@@Inline expressions (variables or functions) start with @@@@Code statements end with semicolon@@@Variables are declared with the var keyword, or the datatype (int, string,   etc.) @@@Strings are enclosed with quotation marks@@@C# code is case sensitive@@@C# files have the extension .cshtml|||VB code blocks are enclosed in @Code ... End Code@@@Inline expressions (variables or functions) start with @@@@Variables are declared with the Dim keyword@@@Strings are enclosed with quotation marks@@@VB code is not case sensitive@@@VB files have the extension .vbhtml",,,"[['\n<!DOCTYPE html>', '\n', '\n<html lang=""en"">', '\n<head>', '\n\xa0\xa0\xa0\xa0\xa0<meta charset=""utf-8"" />', '\n\xa0\xa0\xa0\xa0\xa0<title>Web Pages Demo</title>', '\n</head>', '\n<body>', '\n\xa0\xa0\xa0\xa0\xa0<h1>Hello Web Pages</h1> ', '\n\xa0\xa0\xa0\xa0\xa0<p>The time is ', <span class=""marked"">@DateTime.Now</span>, '</p>', '\n</body>', '\n</html>\n'], ['\n<!-- Single statement block -->', '\n', <span class=""marked"">@{ var myMessage =    ""Hello World""; }</span>, '\n<!-- Inline expression or variable -->', '\n<p>The value of myMessage is: ', <span class=""marked"">@myMessage</span>, '</p> ', '\n<!--    Multi-statement block -->', '\n', <span class=""marked"">@{<br/>
var greeting = ""Welcome to our site!"";<br/>
var weekDay = DateTime.Now.DayOfWeek;<br/>
var greetingMessage = greeting + "" Today is: "" + weekDay;<br/>
}</span>, '<p>The greeting is: ', <span class=""marked"">@greetingMessage</span>, '</p>\n'], ['\n<!-- Single statement block \xa0-->\xa0', '\n', <span class=""marked"">@Code dim myMessage = ""Hello World"" End Code</span>, '\n\xa0', '\n<!-- Inline expression or variable -->\xa0', '\n<p>The value of myMessage is: ', <span class=""marked"">@myMessage</span>, '</p>\xa0', '\n\xa0', '\n<!-- Multi-statement block -->\xa0', '\n', <span class=""marked"">@Code<br/>
dim greeting = ""Welcome to our site!"" <br/>
dim weekDay = DateTime.Now.DayOfWeek <br/>
dim greetingMessage = greeting &amp; "" Today is: "" &amp; weekDay<br/>
End Code</span>, '\n', '\n<p>The greeting is: ', <span class=""marked"">@greetingMessage</span>, '</p>']]"
WP Tutorial,WebPages Layout,https://www.w3schools.com/asp/webpages_layout.asp,"With Web Pages it is easy to create a web site with a consistent layout.|||On the Internet you will discover many web sites with a consistent look and feel:|||With Web Pages this can be done very efficiently. You can have reusable blocks of content (content blocks), like headers and footers, in separate files.|||You can also define a consistent layout for all your pages, using a layout template (layout file).|||Many websites have content that is displayed on every page (like headers and footers).|||With Web Pages you can use the @RenderPage() method to import content from separate files.|||Content block (from another file) can be imported anywhere in a web page, and can contain text, markup, and code, just like any regular web page. |||Using common headers and footers as an example, this saves you a lot of work. You don't have to write the same content in every page, and when you change the header or footer files, the content is updated in all your pages.|||This is how it looks in code:|||In the previous section, you saw that including the same content in many web pages is easy.|||Another approach to creating a consistent look is to use a layout page. A layout page contains the structure, but not the content, of a web page. When a web page (content page) is linked to a layout page, it will be displayed according to the layout page (template).|||The layout page is just like a normal web page, except from a call to the@RenderBody() method where the content page will be included.|||Each content page must start with a Layout directive.|||This is how it looks in code:|||With two ASP.NET tools, Content Blocks and Layout Pages, you can give your web applications a consistent look.|||These tools also save you a lot of work, since you don't have to repeat the same information on all pages. Centralizing markup, style, and code makes web applications much more manageable and easier to maintain.|||With ASP.NET, files with a name that starts with an underscore cannot be browsed from the web.|||If you want to prevent your content blocks or layout files from being viewed by your users, rename the files to:|||_header.cshtml|||_footer.cshtml|||_Layout.cshtml|||With ASP.NET, the common way to hide sensitive information (database passwords, email passwords, etc.) is to keep the information in a separate file named ""_AppStart"".",,Every page have the same header@@@Every page have the same footer@@@Every page have the same style and layout,,,"[['\n<html>', '\n<body>', '\n', <span class=""marked"">@RenderPage(""header.cshtml"")</span>, '\n<h1>Hello Web Pages</h1> ', '\n<p>This is a paragraph</p>', '\n', <span class=""marked"">@RenderPage(""footer.cshtml"")</span>, '\n</body>', '\n</html>'], ['\n<html>', '<body>', '<p>This is header text</p>', '\n', <span class=""marked"">@RenderBody()</span>, '\n<p>&copy; 2014 W3Schools. All rights reserved.</p>', '</body>', '</html>\n'], ['\n', <span class=""marked"">@{Layout=""Layout.cshtml"";}</span>, '\n', '<h1>Welcome to W3Schools</h1>', '\n', '<p>', 'Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor \nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \nnostrud exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat.', '</p>\n'], ['\n', <span class=""marked"">@{<br/>WebMail.SmtpServer = ""mailserver.example.com"";<br/>
WebMail.EnableSsl = true;<br/>WebMail.UserName = ""username@example.com"";<br/>
WebMail.Password = ""your-password"";<br/>WebMail.From = ""your-name-here@example.com"";<br/>
}</span>, '\n']]"
WP Tutorial,WebPages Folders,https://www.w3schools.com/asp/webpages_folders.asp,"This chapter is about folders and folder paths.|||In this chapter you will learn:|||Below is a typical folder structure for an ASP.NET web pages web site: |||The physical  structure for the ""Images"" folder at the website above might look like this on a computer:|||C:\Johnny\Documents\MyWebSites\Demo\Images  |||From the example above:|||The virtual name of a web picture might be ""Images/pic31.jpg"".|||But the physical name is ""C:\Johnny\Documents\MyWebSites\Demo\Images\pic31.jpg""|||URLs are used to access files from the web:https://www.w3schools.com/html/html5_intro.asp |||The URL corresponds to a physical file on a server: C:\MyWebSites\w3schools\html\html5_intro.asp |||A virtual path is shorthand to represent physical paths. If you use virtual paths, you can move your pages to a different domain (or server) without having to update the paths. |||The root on a disk drive is written like C:\, but the root on a web site is  / (forward slash).|||The virtual path of a web folder is (almost) never the same as the physical folder.|||In your code you will, reference both the physical path and the virtual path, depending on what you are coding. |||ASP.NET has 3 tools for working with folder paths: the ~ operator, the Server.MapPath method, and the Href method.|||To specify the virtual root in programming code, use the ~ operator.|||If you use the ~ operator, instead of a path, you can move your website to a different folder or location without changing any code:|||The Server.MapPath method converts a virtual path (/default.cshtml) to a physical path that the server can understand (C:\Johnny\MyWebSited\Demo\default.cshtml).|||You will use this method when you need to open data files located on the server (data files can only be accessed with a full physical path):|||You will learn more about reading from (and writing to) data files on the server in the next chapter of this tutorial.|||The Href method converts a path used in the code to a path that the browser can understand (the browser cannot understand the ~ operator).|||You use the Href method to create paths to resources like image files, and CSS files.|||You will often use this method in HTML <a>, <img>, and <link> elements:|||The Href method is a method of the WebPage Object.",er.MapPath Method,"About Logical and Physical folder structures@@@About Virtual and Physical names@@@About web URLs and Paths|||The ""Account"" folder contains logon and security files@@@The ""App_Data"" folder contains databases and data files@@@The ""Images"" folder contains images@@@The ""Scripts"" folder contains browser scripts@@@The ""Shared"" folder contains common files (like layout and style files)",,Server name|||w3schools&&&Virtual path|||/html/html5_intro.asp&&&Physical path|||C:\MyWebSites\w3schools\html\html5_intro.asp,[]
WP Tutorial,WebPages Global,https://www.w3schools.com/asp/webpages_global.asp,"This chapter is about the global pages AppStart and PageStart.|||Most server side code are written inside individual web pages. For example, if a web page contains an input form, the web page typically contains server code for reading the data.|||However, by creating a page named _AppStart in the root of your site, you can have startup code executed before the site starts. If this page exists, ASP.NET runs it the first time any page in the site is requested.|||Typical use for _AppStart is startup code and initialization of global values like counters and global names.|||Note 1: _AppStart should have the same file extension as your web pages, like: _AppStart.cshtml.  |||Note 2: _AppStart has an underscore prefix. Because of this, the files cannot be browsed directly.|||Just like _AppStart runs before your site starts, you can write code that runs before any page in each folder.|||For each folder in your web, you can add a file named _PageStart.|||Typical use for _PageStart is setting the layout page for all pages in a folder, or checking that a user is logged in before running a page.|||The following diagram shows how it works:||||||When a request comes in, ASP.NET checks whether _AppStart exists. If so, and this is the first request to the site, _AppStart runs.|||Then ASP.NET checks whether _PageStart exists. If so, _PageStart runs, before the requested page.|||If you include a call to RunPage() inside _PageStart you specify where you want the requested page to run. If not, the _PageStart runs before the requested page.",,,,,[]
WP Tutorial,WebPages Forms,https://www.w3schools.com/asp/webpages_forms.asp,"A form is a section of an HTML document where you put input controls (text boxes, check boxes, radio buttons, and pull-down lists).|||Suppose you have 3 images in your image folder, and you want to display images dynamically by the users choice.|||This is easily done by a little Razor code. |||If you have an image called ""Photo1.jpg"" in your images folder on your web site, you can display the image using an HTML <img> element like this:|||The example below shows how to display a selected picture which the user selects from a drop-down list:  |||The server creates a variable called imagePath.|||The HTML page has a drop-down list (a <select> element) named Choice. It lets the user select a friendly name (like Photo 1), and passes a file name (like Photo1.jpg) when the page is submitted to the web server.|||The Razor code reads the value of Choice by Request[""Choice""]. If it has a value the code constructs a path to the image images/Photo1.jpg, and stores it in the variable imagePath.|||In the HTML page there is an <img>element to display the image. The src attribute is set to the value of the imagePath variable when the page displays.|||The <img> element is in an if block to prevent trying to display an image with no name (like the first time the page is displayed).",,,,,"[['\n<html>', '\n<body>\xa0', '\n', <span class=""marked"">@{<br/>
if (IsPost) { <br/>
string companyname = Request[""CompanyName""]; <br/>
string contactname = Request[""ContactName""]; <br/>
</span>, '<p>You entered: <br />', '\nCompany Name: ', <span class=""marked"">@companyname</span>, ' <br />', '\nContact Name: ', <span class=""marked"">@contactname</span>, ' </p>', <span class=""marked""><br/>
}<br/>
else<br/>
{<br/>
</span>, '<form method=""post"" action="""">', '\n    Company Name:<br />', '\n<input type=""text"" name=""CompanyName"" value="""" /><br />', '\n    Contact Name:<br />', '\n<input type=""text"" name=""ContactName"" value="""" /><br /><br />', '\n    <input type=""submit"" value=""Submit"" class=""submit"" />', '\n</form>', '\n', <span class=""marked"">}</span>, '\n', <span class=""marked"">}</span>, '\xa0', '\n</body>\xa0', '\n</html>'], ['\n', <span class=""marked"">
@{<br/>
var imagePath=""""; <br/>
if (Request[""Choice""] != null)<br/>
   {imagePath=""images/"" + Request[""Choice""];} <br/>
} <br/>
</span>, '<!DOCTYPE html> ', '\n<html> ', '\n<body> ', '\n<h1>Display Images</h1> ', '\n<form method=""post"" action=""""> ', '\nI want to see: ', '\n<select name=""Choice""> ', '\n    \xa0\n<option value=""Photo1.jpg"">Photo 1</option> ', '\n    \xa0\n<option value=""Photo2.jpg"">Photo 2</option> ', '\n    \xa0\n<option value=""Photo3.jpg"">Photo 3</option> ', '\n</select> ', '\n<input type=""submit"" value=""Submit"" /> ', '\n', <span class=""marked"">
    @if (imagePath != """")<br/>
{<br/></span>, '<p>', '<img src=""', <span class=""marked"">@imagePath</span>, '"" alt=""Sample"" />', '</p>', <span class=""marked""><br/>}</span>, '\xa0 ', '\n</form> ', '\n</body> ', '\n</html>\n']]"
WP Tutorial,WebPages Objects,https://www.w3schools.com/asp/webpages_objects.asp," Web Pages is much often about Objects.|||You have already seen some Page Object methods in use:|||In the previous chapter you saw two Page Object properties being used (IsPost, and Request):|||The Page property of the Page Object, provides property-like access to data shared between pages and layout     pages.|||You can use (add) your own properties to the Page property:|||The pages property is very helpful. For instance, it makes it possible to set the page title in content files, and use it in the layout file:",&lt;h1&gt;Welcome to W3Schools&lt;/h1&gt; <br/><br/>&lt;h2&gt;Web Site Main Ingredients&lt;/h2&gt;,Page.Title@@@Page.Version@@@Page.anythingyoulike,,"href|||Builds a URL using the specified parameters&&&RenderBody()|||Renders the portion of a content page that is not within a named 
    section (In layout pages)&&&RenderPage(page)|||Renders the content of one page within another page&&&RenderSection(section)|||Renders the content of a named section (In layout pages)&&&Write(object)|||Writes the object as an HTML-encoded string&&&WriteLiteral|||Writes an object without HTML-encoding it first.$$$IsPost|||Returns true if the HTTP data transfer method used by the client is a 
    POST request&&&Layout|||Gets or sets the path of a layout page&&&Page|||Provides property-like access to data shared between pages and layout 
    pages &&&Request|||Gets the HttpRequest object for the current HTTP request&&&Server|||Gets the HttpServerUtility object that provides web-page processing 
    methods","[['\n', <span class=""marked"">@{<br/>Layout=""~/Shared/Layout.cshtml"";<br/>Page.Title=""Home Page""<br/>}</span>, '\n    <h1>Welcome to W3Schools</h1> ', '<h2>Web Site Main Ingredients</h2>', '\n', '<p>A Home Page (Default.cshtml)</p>', '<p>A Layout File (Layout.cshtml)</p>', '\n    <p>A Style Sheet (Site.css)</p>'], ['\n    <!DOCTYPE html>', '<html>', '<head>', '<title>', <span class=""marked"">@Page.Title</span>, '</title>', '</head>', '<body>', '\n', <span class=""marked"">@RenderBody()</span>, '\n    </body>', '\n    </html>']]"
WP Tutorial,WebPages Files,https://www.w3schools.com/asp/webpages_files.asp,"This chapter is about working with text files.|||Sometimes you will want to access data stored in text files.|||Text files used to store data is often called flat files.|||Common flat file formats are .txt, .xml, and .csv (comma-delimited values). |||In this chapter you will learn:|||In the example to follow, you will need a text file to work with.|||On your web site, if you don't have an App_Data folder, create one.|||In the App_Data folder, create a new file named Persons.txt.|||Add the following content to the file: |||The example below shows how to display data from a text file:  |||Server.MapPath finds the exact text file path.|||File.ReadAllLines opens the text file and reads all lines from the file into an array.|||For each dataItem in each dataline of the array the data is displayed.|||With Microsoft Excel, you can save a spreadsheet as a comma separated text file (.csv file). When you do so, each row in the spreadsheet is saved as a text line, and each data column is separated by a comma. |||You can use the example above to read an Excel .csv file (just change the file name to the name of the Excel file).",,How to read and display data from a text file,,,"[['\nGeorge,Lucas', '\nSteven,Spielberg', '\nAlfred,Hitchcock'], ['\n', <span class=""marked"">@{<br/>var dataFile = Server.MapPath(""~/App_Data/Persons.txt"");<br/>
    Array userData = File.ReadAllLines(dataFile);<br/>}<br/><br/></span>, '<!DOCTYPE \n    html>', '<html>', '<body>', '<h1>Reading Data from a File</h1>', '\n', <span class=""marked"">@foreach (string dataLine in userData) <br/>{<br/>  foreach 
    (string dataItem in dataLine.Split(',')) <br/>  {@dataItem &lt;text&gt;&amp;nbsp;&lt;/text&gt;}</span>, '\xa0 \n    <br />', <span class=""marked"">}</span>, '</body>', '</html>\n']]"
WP Tutorial,WebPages Databases,https://www.w3schools.com/asp/webpages_database.asp,"This chapter is about working with databases.|||In this chapter we will:|||With Web Pages, you can easily display data from a database.|||You can connect to an existing database, or create a new database from scratch.|||In this example we will connect to an existing SQL Server Compact database.|||In the ""DemoWebPages"" folder, create a new CSHTML file named ""Products.cshtml"".|||Replace the code in the file with the code from the example below:|||The Database.Open(name) method will connect to a database in two steps:|||First, it searches the application's App_Data folder for a database that matches the name parameter without the file-name extension.|||If no file is found, it looks for a ""connection string"" in the application's Web.config file.|||(A connection string contains information about how to connect to a database. It can include a file path, or the name of an SQL database, with full user name and password)|||This two-step search makes it possible to test the application with a local database, and run the application on a web host using a connection string. ",,Create a web page to list data from a database,,"Database.Execute(SQLstatement [,
parameters])|||Executes 
SQLstatement (with optional parameters) such as 
INSERT, DELETE, or UPDATE and returns a count of 
affected records.&&&Database.GetLastInsertId()|||
Returns the identity column from the most recently 
inserted row.&&&Database.Open(filename) 
Database.Open(connectionStringName)|||
Opens either the specified database file or the 
database specified using a named connection string 
from the Web.config file.&&&Database.OpenConnectionString(connectionString)|||
Opens a database using the connection string. (This 
contrasts with Database.Open, which 
uses a connection string name.)&&&Database.Query(SQLstatement[, 
parameters])|||Queries the database 
using SQLstatement (optionally passing 
parameters) and returns the results as a collection.
&&&Database.QuerySingle(SQLstatement
[, parameters])|||Executes 
SQLstatement (with optional parameters) and 
returns a single record.&&&Database.QueryValue(SQLstatement
[, parameters])|||Executes 
SQLstatement (with optional parameters) and 
returns a single value.","[['\n', <span class=""marked"">@{<br/>
var db = Database.Open(""SmallBakery""); <br/>
var selectQueryString = ""SELECT * FROM Product ORDER BY Name""; <br/>
}</span>, '\n<html>\xa0', '\n<body>\xa0', '\n<h1>Small Bakery Products</h1>\xa0', '\n<table>\xa0', '\n<tr>', '\n<th>Id</th>\xa0', '\n<th>Product</th>\xa0', '\n<th>Description</th>\xa0', '\n<th>Price</th>\xa0', '\n</tr>', '\n', <span class=""marked"">@foreach(var row in db.Query(selectQueryString))<br/>
{</span>, '\n<tr>\xa0', '\n<td>', <span class=""marked"">@row.Id</span>, '</td>\xa0', '\n<td>', <span class=""marked"">@row.Name</span>, '</td>\xa0', '\n<td>', <span class=""marked"">@row.Description</span>, '</td>\xa0', '\n<td align=""right"">', <span class=""marked"">@row.Price</span>, '</td>\xa0', '\n</tr>\xa0', '\n', <span class=""marked"">}</span>, '\n</table>\xa0', '\n</body>\xa0', '\n    </html>']]"
WP Tutorial,WebPages Helpers,https://www.w3schools.com/asp/webpages_helpers.asp,"Web Helpers greatly simplifies web development and common programming tasks.|||ASP.NET helpers are components that can be accessed by single lines of Razor code.|||You can build your own helpers using Razor syntax stored as .cshtml files, or use built-in ASP.NET helpers.|||You will learn how to use Razor helpers in the next chapters of this tutorial.|||Below is a short description of some useful Razor helpers:|||The WebGrid helper simplifies the way to display data:|||The ""Chart Helper"" can display chart images of different types with many formatting options and labels.||||||The Chart helper can display data from arrays , from databases, or from files.|||The WebMail helper provides functions for sending email messages using SMTP (Simple Mail Transfer Protocol).|||The WebImage helper provides functionality to manage images in a web page.|||Keywords: flip, rotate, resize, watermark.|||With Razor you can take advantage of built-in or third party helpers to simplify the use of email, databases, multimedia, and social networks as well as many other issues like navigation and web security.",,"Automatically sets up an HTML table to display data@@@Supports different options for formatting@@@Supports paging (First, next, previous, last) through data@@@Supports sorting by clicking on column headings",,"Analytics.GetGoogleHtml(webPropertyId)|||
Renders the Google Analytics JavaScript code for the 
specified ID.&&&Analytics.GetStatCounterHtml(project,
security)|||Renders the StatCounter 
Analytics JavaScript code for the specified project.&&&Analytics.GetYahooHtml(account)|||
Renders the Yahoo Analytics JavaScript code for the 
specified account.$$$&&&Bing.SearchBox([boxWidth])|||
Passes a search to Bing. To specify the site to 
search and a title for the search box, you can set 
the Bing.SiteUrl and Bing.SiteTitle properties. Normally you set 
these properties in the _AppStart page. 
&&&Bing.AdvancedSearchBox([, boxWidth] [, 
resultWidth] [, resultHeight] 
  [, themeColor] [, locale])|||Displays 
Bing search results in the page with optional 
formatting. To specify the site to search and a 
title for the search box, you can set the Bing.SiteUrl and Bing.SiteTitle 
properties. Normally you set these properties in the
_AppStart page. 
$$$&&&Crypto.Hash(string [, algorithm])

Crypto.Hash(bytes [, algorithm])|||
Returns a hash for the specified data. The default 
algorithm is sha256.$$$&&&Facebook.LikeButton(href [, 
buttonLayout] [, showFaces] [, width] [, height] 
[, action] [, font] [, colorScheme] [, refLabel])|||
Lets Facebook users make a connection to pages.$$$&&&FileUpload.GetHtml([initialNumberOfFiles] 
[, allowMoreFilesToBeAdded] 
  [, includeFormTag] [, addText] [,
uploadText])|||Renders UI for 
uploading files.$$$&&&GamerCard.GetHtml(gamerTag)|||
Renders the specified Xbox gamer tag.$$$&&&Gravatar.GetHtml(email [, imageSize] 
[, defaultImage] [, rating] 
  [, imageExtension] [, attributes])|||
Renders the Gravatar image for the specified email 
address.$$$&&&Json.Encode(object)|||
Converts a data object to a string in the JavaScript 
Object Notation (JSON) format. 
&&&Json.Decode(string)|||
Converts a JSON-encoded input string to a data 
object that you can iterate over or insert into a 
database.$$$&&&LinkShare.GetHtml(pageTitle [, 
pageLinkBack] [, twitterUserName] 
  [, additionalTweetText] [, linkSites])|||
Renders social networking links using the specified 
title and optional URL.$$$&&&ModelStateDictionary.AddError(key,
errorMessage)|||Associates an error 
message with a form field. Use the ModelState 
helper to access this member. 
&&&ModelStateDictionary.AddFormError(errorMessage)|||
Associates an error message with a form. Use the ModelState helper to access this 
member. 
&&&ModelStateDictionary.IsValid|||
Returns true if there are no validation errors. Use 
the ModelState helper to access this 
member. 
$$$&&&ObjectInfo.Print(value [, depth] [, 
enumerationLength])|||Renders the 
properties and values of an object and any child 
objects. 
$$$&&&Recaptcha.GetHtml([, publicKey] [, 
theme] [, language] [, tabIndex])|||
Renders the reCAPTCHA verification test.&&&ReCaptcha.PublicKey 
ReCaptcha.PrivateKey|||Sets public and 
private keys for the reCAPTCHA service. Normally you 
set these properties in the _AppStart page.&&&ReCaptcha.Validate([, privateKey])|||
Returns the result of the reCAPTCHA test.$$$$$$&&&ServerInfo.GetHtml()|||Renders 
status information about ASP.NET Web Pages.$$$&&&Twitter.Profile(twitterUserName)|||
Renders a Twitter stream for the specified user.&&&Twitter.Search(searchQuery)|||
Renders a Twitter stream for the specified search 
text.$$$&&&Video.Flash(filename [, width, height])|||
Renders a Flash video player for the specified file 
with optional width and height.&&&Video.MediaPlayer(filename [, width, 
height])|||Renders a Windows Media 
player for the specified file with optional width 
and height.&&&Video.Silverlight(filename, 
width, height)|||Renders a 
Silverlight player for the specified .xap 
file with required width and height.$$$&&&WebCache.Get(key)|||
Returns the object specified by key, or 
null if the object is not found.&&&WebCache.Remove(key)|||
Removes the object specified by key from 
the cache.&&&WebCache.Set(key, value [, 
minutesToCache] [, slidingExpiration])|||
Puts value into the cache under the name 
specified by key.$$$WebImage(path)|||Loads an 
image from the specified path.&&&WebImage.AddImagesWatermark(image)|||
Adds the specified image as a watermark.&&&WebImage.AddTextWatermark(text)|||
Adds the specified text to the image.&&&WebImage.FlipHorizontal() 
WebImage.FlipVertical()|||Flips the image 
horizontally or vertically.&&&WebImage.GetImageFromRequest()|||
Loads an image when an image is posted to a page 
during a file upload.&&&WebImage.Resize(width, height)|||
Resizes the image.&&&WebImage.RotateLeft() 
WebImage.RotateRight()|||Rotates the image to 
the left or the right.&&&WebImage.Save(path [, imageFormat])|||
Saves the image to the specified path.",[]
WP Tutorial,WebPages WebGrid,https://www.w3schools.com/asp/webpages_webgrid.asp,"WebGrid - One of many useful ASP.NET Web Helpers.|||In a previous chapter, you displayed database data by using razor code,  and doing the HTML markup yourself: |||Using the WebGrid helper is an easier way to display data.|||The WebGrid helper:",,Automatically sets up an HTML table to display data@@@Supports different options for formatting@@@Supports paging through data@@@Supports Sorting by clicking on column headings,,"WebGrid(data)|||Creates a 
new WebGrid object using data from a 
query.&&&WebGrid.GetHtml()|||Renders markup 
to display data in an HTML table.&&&WebGrid.Pager()|||Renders a pager 
for the WebGrid object.","[['\n', <span class=""marked"">@{<br/>
var db = Database.Open(""SmallBakery""); <br/>
var selectQueryString = ""SELECT * FROM Product ORDER BY Name""; <br/>
}</span>, '\n<html>\xa0', '\n<body>\xa0', '\n<h1>Small Bakery Products</h1>\xa0', '\n<table>\xa0', '\n<tr>', '\n<th>Id</th>\xa0', '\n<th>Product</th>\xa0', '\n<th>Description</th>\xa0', '\n<th>Price</th>\xa0', '\n</tr>', '\n', <span class=""marked"">@foreach(var row in db.Query(selectQueryString))<br/>
{</span>, '\n<tr>\xa0', '\n<td>', <span class=""marked"">@row.Id</span>, '</td>\xa0', '\n<td>', <span class=""marked"">@row.Name</span>, '</td>\xa0', '\n<td>', <span class=""marked"">@row.Description</span>, '</td>\xa0', '\n<td style=""text-align:right"">', <span class=""marked"">@row.Price</span>, '</td>\xa0', '\n</tr>\xa0', '\n', <span class=""marked"">}</span>, '\n</table>\xa0', '\n</body>\xa0', '\n</html>'], ['\n', <span class=""marked"">@{ <br/>
var db = Database.Open(""SmallBakery"") ; <br/>
var selectQueryString = ""SELECT * FROM Product ORDER BY Name""; <br/>
var data = db.Query(selectQueryString); <br/>
var grid = new WebGrid(data); <br/>
}</span>, '\n<html>\xa0', '\n<head>\xa0', '\n<title>Displaying Data Using the WebGrid Helper</title>\xa0', '\n</head>\xa0', '\n<body>\xa0', '\n<h1>Small Bakery Products</h1>\xa0', '\n<div id=""grid"">\xa0', '\n', <span class=""marked"">@grid.GetHtml()</span>, '\n</div>\xa0', '\n</body>\xa0', '\n</html>']]"
WP Tutorial,WebPages Charts,https://www.w3schools.com/asp/webpages_chart.asp,"The Chart Helper - One of many useful ASP.NET Web Helpers.|||In the previous chapters, you learned how to use an ASP.NET ""Helper"".|||You learned how to display data in a grid using the ""WebGrid Helper"". |||This chapter explains how to display data in graphical form, using the ""Chart Helper"".|||The ""Chart Helper"" can create chart images of different types with many formatting options and labels. It can create standard charts like area charts, bar charts, column charts, line charts, and pie charts, along with more specialized charts like stock charts.||||||The data you display in a chart can be from an array, from a database, or from data in a file.|||The example below shows the code needed to display a chart from an array of values:|||- new Chart creates a new chart object and sets its width and height|||- the AddTitle method specifies the chart title|||- the AddSeries method adds data to the chart|||- the chartType parameter defines the type of chart|||- the xValue parameter defines x-axis names|||- the yValues parameter defines the y-axis values|||- the Write() method displays the chart |||You can run a database query and then use data from the results to create a chart:|||- var db = Database.Open opens the database (and assigns the database object to the variable db)|||- var dbdata = db.Query runs a database query and stores the result in dbdata|||- new Chart creates a chart new object and sets its width and height|||- the AddTitle method specifies the chart title|||- the DataBindTable method binds the data source to the chart|||- the Write() method displays the chart |||An alternative to using the DataBindTable method is to use AddSeries (See previous example). DataBindTable is easier to use, but AddSeries is more flexible because you can specify the chart and data more explicitly:|||The third option for charting is to use an XML file as the data for the chart:",Chart From Database Data,,,"Chart(width, height [, 
template] [, templatePath])|||
Initializes a chart.&&&Chart.AddLegend([title] [, name])|||
Adds a legend to a chart.&&&Chart.AddSeries([name] [, chartType] 
[, chartArea] 
  [, axisLabel] [, legend] [, markerStep] [, xValue]

  [, xField] [, yValues] [, yFields] [, options])|||
Adds a series of values to the chart.","[['\n', <span class=""marked"">@{ <br/>
var myChart = new Chart(width: 600, height: 400) <br/>
  
.AddTitle(""Employees"") <br/>
  
.AddSeries(chartType: ""column"",<br/>
      xValue: new[] {  ""Peter"", ""Andrew"", ""Julie"", ""Mary"", ""Dave"" }, <br/>
      yValues: new[] { ""2"", ""6"", ""4"", ""5"", ""3"" }) <br/>
  
.Write();<br/>
}</span>], ['\n', <span class=""marked"">@{ <br/>
var db = Database.Open(""SmallBakery""); <br/>
var dbdata = db.Query(""SELECT Name, Price FROM Product""); <br/>
var myChart = new Chart(width: 600, height: 400) <br/>
   .AddTitle(""Product Sales"") <br/>
   .DataBindTable(dataSource: dbdata, xField: ""Name"")<br/>
   .Write();<br/>
}</span>], ['\n', <span class=""marked"">@{ <br/>
var db = Database.Open(""SmallBakery""); <br/>
var dbdata = db.Query(""SELECT Name, Price FROM Product""); <br/>
var myChart = new Chart(width: 600, height: 400) <br/>
   .AddTitle(""Product Sales"") <br/>
   .AddSeries(chartType:""Pie"",<br/>
      xValue: dbdata, xField: ""Name"",<br/>
      yValues: dbdata, yFields: ""Price"")<br/>
   .Write();<br/>
}</span>], ['\n', <span class=""marked"">
@using System.Data;<br/>
<br/>
@{<br/>
var dataSet = new DataSet();<br/>
dataSet.ReadXmlSchema(Server.MapPath(""data.xsd""));<br/>
dataSet.ReadXml(Server.MapPath(""data.xml""));<br/>
var dataView = new DataView(dataSet.Tables[0]);<br/>
var myChart = new Chart(width: 600, height: 400)<br/>
  
.AddTitle(""Sales Per Employee"")<br/>
  
.AddSeries(""Default"", chartType: ""Pie"",<br/>
     
xValue: dataView, xField: ""Name"",<br/>
     
yValues: dataView, yFields: ""Sales"")<br/>
  
.Write();}<br/>
}</span>]]"
WP Tutorial,WebPages Email,https://www.w3schools.com/asp/webpages_email.asp,"The WebMail Helper - One of many useful ASP.NET Web Helpers.|||With the WebMail object you can easily send emails from a web page.|||The WebMail Helper makes it easy to send an email from a web application using SMTP (Simple Mail transfer Protocol).|||To demonstrate the use of email, we will create an input page for support, let the user submit the page to another page, and send an email about the support problem.|||If you have built the Demo application in this tutorial, you already have a page called _AppStart.cshtml with the following content:|||To initiate the WebMail helper, add the the following WebMail properties to your AppStart page:|||Properties explained:|||SmtpServer: The name the SMTP server that will be used to send the emails.|||SmtpPort: The port the server will use to send SMTP transactions (emails).|||EnableSsl: True, if the server should use SSL (Secure Socket Layer) encryption.|||UserName: The name of the SMTP email account used to send the email.|||Password: The password of the SMTP email account.|||From: The email to appear in the from address (often the same as UserName).|||Then create an input page, and name it Email_Input:|||The purpose of the input page is to collect information, then submit the data to a new page that can send the information as an email.|||Then create the page that will be used to send the email, and name it Email_Send:|||The Send() method has the following parameters:|||And the following optional parameters:|||To use the WebMail helper, you need access to an SMTP server. SMTP is the ""output"" part of email. If you use a web host, you probably already know the name of the SMTP server. If you work in a corporate network, your IT department can give you the name. If you are working at home, you might be able to use your ordinary email provider.||| In order to send an email you will need:|||In the root of your web, create a page (or edit the page ) named _AppStart.cshtml. |||Put the following code inside the file:|||The code above will run each time the web site (application) starts. It feeds your WebMail Object with initial values.|||Please substitute:|||smtp.example.com with the name the SMTP server that will be used to send the emails.|||25 with the port number the server will use to send SMTP transactions (emails).|||false with true, if the server should use SSL (Secure Socket Layer) encryption.|||support@example.com with the name of the SMTP email account used to send emails.|||password with the password of the SMTP email account.|||john@example with the email to appear in the from address.|||You don't have to initiate the WebMail object in your AppStart file, but you must set these properties before you call the WebMail.Send() method.",,The name of the SMTP server @@@The port number (most often 25) @@@An email user name@@@An email password,,"SmtpServer|||The name the SMTP server that will send the emails&&&SmtpPort|||The port the server will use to send SMTP emails&&&EnableSsl|||True, if the server should use SSL encryption&&&UserName|||The name of the SMTP account used to send the email&&&Password|||The password of the SMTP account&&&From|||The email to appear in the from address$$$&&&Send()|||Sends an email message to an SMTP server for delivery$$$&&&to|||String|||The Email recipients (separated by semicolon)&&&subject|||String|||The subject line&&&body|||String|||The body of the message$$$&&&from|||String|||The email of the sender &&&cc|||String|||The cc emails (separated by semicolon)&&&filesToAttach|||Collection|||Filenames&&&isBodyHtml|||Boolean|||True if the email body is in HTML&&&additionalHeaders|||Collection|||Additional headers$$$Class|||System.Web.Helpers.WebMail&&&Namespace|||System.Web.Helpers&&&Assembly|||System.Web.Helpers.dll","[['\n@{', 'WebSecurity.InitializeDatabaseConnection(""Users"", ""UserProfile"", ""UserId"", \n""Email"", true);', '}'], ['\n@{', 'WebSecurity.InitializeDatabaseConnection(""Users"", ""UserProfile"", ""UserId"", \n""Email"", true);', <span class=""marked"">WebMail.SmtpServer = ""smtp.example.com"";<br/>WebMail.SmtpPort = 25;<br/>
WebMail.EnableSsl = false;<br/>WebMail.UserName = ""support@example.com"";<br/>
WebMail.Password = ""password-goes-here"";<br/>WebMail.From = ""john@example.com"";</span>, '}'], ['\n<!DOCTYPE html> ', '<html> ', '<body> ', '<h1>Request for \nAssistance</h1> ', '<form method=""post"" action=""EmailSend.cshtml""> ', '\n<label>Username:</label>', '<input type=""text"" name=""customerEmail"" />', '\n<label>Details about the problem:</label> ', '<textarea name=""customerRequest"" \ncols=""45"" rows=""4""></textarea> ', '<p><input type=""submit"" value=""Submit"" \n/></p> ', '</form> ', '</body> ', '</html>'], ['\n@{ // Read input', '\nvar customerEmail = Request[""customerEmail""];', '\nvar customerRequest = Request[""customerRequest""];', '\ntry', '\n{', '\n// Send email ', '\nWebMail.Send(to:""someone@example.com"", subject: ""Help request from - "" + customerEmail, body: \ncustomerRequest ); ', '\n}', '\ncatch (Exception ex )', '\n{', '\n<text>@ex</text>\n', '\n}', '}\n'], ['\n    @{', 'WebMail.SmtpServer = ""smtp.example.com"";', 'WebMail.SmtpPort = 25;', '\nWebMail.EnableSsl = false;', 'WebMail.UserName = ""support@example.com"";', '\nWebMail.Password = ""password"";', 'WebMail.From = ""john@example.com""', '}\n']]"
WP Tutorial,WebPages Security,https://www.w3schools.com/asp/webpages_security.asp,"The WebSecurity Object provides security and authentication for ASP.NET Web Pages applications.|||With the WebSecurity object you can create user accounts, login and logout users, reset or change passwords, and more.|||You must create or initialize an WebSecurity database before you can use the WebSecurity object in your code.|||In the root of your web, create a page (or edit the page ) named _AppStart.cshtml. |||Put the following code inside the file:|||The code above will run each time the web site (application) starts. It initializes the WebSecurity database.|||""Users"" is the name of the WebSecurity database (Users.sdf).|||""UserProfile"" is the name of the database table that contains the user profile information.|||""UserId"" is the name of the column that contains the user IDs (primary key). |||""Email"" is the name of the column that contains user names.|||The last parameter true is a boolean value indicating that the user profile and membership tables should be created automatically if they don't exist, otherwisefalse.|||Although true indicates automatic creation of the database tables, the database itself will not be created automatically. It must exist.|||The UserProfile table contains one record for each user, with a user ID (primary key) and the user's name (email):|||The Membership table will contain membership information about when the user was created and if (and when) the membership was confirmed.|||Much like this (some columns are not shown):|||You might get errors using the WebSecurity object, if your site is not configured to use the ASP.NET Web Pages membership system SimpleMembership.|||This can occur if a hosting provider's server is configured differently than your local server. To fix this, add the following element to the site's Web.config file:",,,,"CurrentUserId|||
    Gets the ID for the current user&&&CurrentUserName|||Gets the name of the current user|||HasUserId|||
Returns true if the current has a user ID|||IsAuthenticated|||
Returns true if the current user is logged in&&&HasUserId|||
Returns true if the current has a user ID&&&IsAuthenticated|||
Returns true if the current user is logged in$$$&&&ChangePassword()|||Changes the password for a user&&&ConfirmAccount()|||Confirms an account using a confirmation token&&&CreateAccount()|||Creates a new user account&&&CreateUserAndAccount()|||Creates a new user account&&&GeneratePasswordResetToken()|||Generates a token that can be sent to as user by email&&&GetCreateDate()|||Gets the time the specified membership was created&&&GetPasswordChangeDate()|||Gets the date and time when password was changed&&&GetUserId()|||Gets a user ID from a user name&&&InitializeDatabaseConnection()|||Initializes the WebSecurity system (database)&&&IsConfirmed()|||Checks if a user is confirmed&&&IsCurrentUser()|||Checks if the current user matches a user name&&&Login()|||Logs the user in by setting a token in the cookie&&&Logout()|||Logs the user out by removing the token cookie&&&RequireAuthenticatedUser()|||Exits the page if the user is not an authenticated user&&&RequireRoles()|||Exits the page if the user is not a part of the specified roles&&&RequireUser()|||Exits the page if the user is not the specified user&&&ResetPassword()|||Changes a user's password using a token&&&UserExists()|||Checks if a given user exists$$$&&&1|||john@johnson.net&&&2 |||peter@peterson.com&&&3|||lars@larson.eut$$$1|||12.04.2012 16:12:17|||NULL|||True|||NULL|||AFNQhWfy....|||12.04.2012 16:12:17","[['\n@{', 'WebSecurity.InitializeDatabaseConnection(""Users"", ""UserProfile"", \n""UserId"", ""Email"", true);', '}\n']]"
WP Tutorial,WebPages Publish,https://www.w3schools.com/asp/webpages_publish.asp,"Before you continue, make sure your hosting computer runs the latest version of ASP.NET (4.0 or 4.5).|||Copy your website (all folders and content) from your development computer to an application folder on your remote hosting computer (server).|||If your application contains data, don't copy the data (see point 4 below).|||Make sure the bin folder, on your remote hosting computer, contains the same dll files as on your development computer.|||After copying the bin folder, it should contain files like this:|||Microsoft.Web.Infrastructure.dll    NuGet.Core.dll    System.Web.Helpers.dll    System.Web.Razor.dll    System.Web.WebPages.Administration.dll    System.Web.WebPages.Deployment.dll    System.Web.WebPages.dll    System.Web.WebPages.Razor.dll    WebMatrix.Data.dll    WebMatrix.WebData|||If your application contains data or a database. For instance an SQL Server Compact database (a .sdf file in App_Data folder), consider the following:|||Do you want to publish your test data to the remote server?|||Most likely not.|||If you have test data on your development computer, it may overwrite production data on your remote hosting computer.|||If you have to copy an SQL database (.sdf file), perhaps you should delete everything in the database, and then copy the empty .sdf file from your development computer to the server. |||THAT'S IT. GOOD LUCK !",,,,,[]
WP Tutorial,WebPages Examples,https://www.w3schools.com/asp/webpages_examples.asp,Learn ASP.NET Web Pages by C# and Visual Basic examples.|||Display Date and TimeReusable Header and FooterBasic HTML Form|||Examples Explained|||Display Date and TimeReusable Header and FooterBasic HTML Form|||Examples Explained|||For LoopFor Each LoopWhile LoopArrayIf ConditionIf Else ConditionElse If ConditionSwitch Condition|||Examples Explained|||For LoopFor Each LoopWhile LoopArrayIf ConditionIf Else ConditionElse If ConditionSelect Condition|||Examples Explained|||Display Database DataDisplay Data with WebGrid|||Examples Explained|||Display Database DataDisplay Data with WebGrid|||Examples Explained|||Display a Bar Chart from an ArrayDisplay a Bar Chart from a DatabaseDisplay a Pie Chart from a DatabaseDisplay a Pie Chart from an XML File|||Examples Explained|||Display a Bar Chart from an ArrayDisplay a Bar Chart from a DatabaseDisplay a Pie Chart from a DatabaseDisplay a Pie Chart from an XML File|||Examples Explained,,,,"
Basic Web Pages

Display Date and Time
Reusable Header and Footer
Basic HTML Form

Examples Explained
|||
Basic Web Pages
Display Date and Time
Reusable Header and Footer
Basic HTML Form

Examples Explained
&&&
Basic C#

For Loop
For Each Loop
While Loop
Array
If Condition
If Else Condition
Else If Condition
Switch Condition

Examples Explained
|||
Basic VB

For Loop
For Each Loop
While Loop
Array
If Condition
If Else Condition
Else If Condition
Select Condition

Examples Explained
&&&
Working with Databases

Display Database Data
Display Data with WebGrid

Examples Explained
|||
Working with Databases

Display Database Data
Display Data with WebGrid

Examples Explained
&&&
Using the Chart Helper

Display a Bar Chart from an Array
Display a Bar Chart from a Database
Display a Pie Chart from a Database
Display a Pie Chart from an XML File

Examples Explained
|||
Using the Chart Helper

Display a Bar Chart from an Array
Display a Bar Chart from a Database
Display a Pie Chart from a Database
Display a Pie Chart from an XML File

Examples Explained
",[]
WP Tutorial,WebPages Classes,https://www.w3schools.com/asp/webpages_classes.asp,,,,,"AsBool(), AsBool(true|false)|||
Converts a string value to a Boolean value 
(true/false). Returns false or the specified value 
if the string does not represent true/false.
&&&AsDateTime(), AsDateTime(value)|||
Converts a string value to date/time. Returns DateTime. MinValue or the specified value if 
the string does not represent a date/time.&&&AsDecimal(), AsDecimal(value)|||
Converts a string value to a decimal value. Returns 
0.0 or the specified value if the string does not 
represent a decimal value.&&&AsFloat(), AsFloat(value)|||
Converts a string value to a float. Returns 0.0 or 
the specified value if the string does not represent 
a decimal value.&&&AsInt(), AsInt(value)|||
Converts a string value to an integer. Returns 0 or 
the specified value if the string does not represent 
an integer.&&&Href(path [, param1 [, 
param2]])|||Creates a browser-compatible 
URL from a local file path, with optional additional 
path parts.&&&Html.Raw(value)|||Renders
value as HTML markup instead of rendering 
it as HTML-encoded output.&&&IsBool(), IsDateTime(), IsDecimal(), 
IsFloat(), IsInt()|||Returns true if the 
value can be converted from a string to the 
specified type.&&&IsEmpty()|||Returns true if the 
object or variable has no value.&&&IsPost|||Returns true if the 
request is a POST. (Initial requests are usually a 
GET.)&&&Layout|||Specifies the path of a 
layout page to apply to this page.&&&PageData[key], PageData[index], 
Page|||Contains data shared between the page, 
layout pages, and partial pages in the current 
request. You can use the dynamic Page 
property to access the same data, as in the 
following example:&&&RenderBody()|||(Layout pages) 
Renders the content of a content page that is not in 
any named sections.&&&RenderPage(path, values)

RenderPage(path[, param1 [, param2]])|||
Renders a content page using the specified path and 
optional extra data. You can get the values of the 
extra parameters from PageData by 
position (example 1) or key (example 2).&&&RenderSection(sectionName [, required 
= true|false])|||(Layout pages) 
Renders a content section that has a name. Set 
required to false to make a section optional.&&&Request.Cookies[key]|||
Gets or sets the value of an HTTP cookie.&&&Request.Files[key]|||Gets 
the files that were uploaded in the current request.&&&Request.Form[key]|||Gets 
data that was posted in a form (as strings). 
Request[key] checks both the Request.Form and the Request.QueryString collections.&&&Request.QueryString[key]|||
Gets data that was specified in the URL query 
string. Request[key] checks 
both the Request.Form and the Request.QueryString collections. 
&&&Request.Unvalidated(key) 
Request.Unvalidated().QueryString|Form|Cookies|Headers[key]|||
Selectively disables request validation for a 
form element, query-string value, cookie, or header 
value. Request validation is enabled by default and 
prevents users from posting markup or other 
potentially dangerous content.&&&Response.AddHeader(name, 
value)|||Adds an HTTP server header to 
the response. 
&&&Response.OutputCache(seconds 
[, sliding] [, varyByParams])|||Caches 
the page output for a specified time. Optionally set
sliding to reset the timeout on each page 
access and varyByParams to cache different 
versions of the page for each different query string 
in the page request.&&&Response.Redirect(path)|||
Redirects the browser request to a new location.&&&Response.SetStatus(httpStatusCode)|||
Sets the HTTP status code sent to the browser.&&&Response.WriteBinary(data [, 
mimetype])|||Writes the contents of 
data to the response with an optional MIME 
type.&&&Response.WriteFile(file)|||
Writes the contents of a file to the response.&&&@section(sectionName) { 
content }|||(Layout pages) Defines a 
content section that has a name.&&&Server.HtmlDecode(htmlText)|||
Decodes a string that is HTML encoded.&&&Server.HtmlEncode(text)|||
Encodes a string for rendering in HTML markup.&&&Server.MapPath(virtualPath)|||
Returns the server physical path for the specified 
virtual path.&&&Server.UrlDecode(urlText)|||
Decodes text from a URL.&&&Server.UrlEncode(text)|||
Encodes text to put in a URL.&&&Session[key]|||Gets or 
sets a value that exists until the user closes the 
browser.&&&ToString()|||Displays a string 
representation of the object's value.&&&UrlData[index]|||Gets 
additional data from the URL (for example, 
/MyPage/ExtraData).",[]
ASP.NET Razor,Razor Intro,https://www.w3schools.com/asp/razor_intro.asp,"Razor is not a programming language. It's a server side markup language. |||Razor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.|||Server-based code can create dynamic web content on the fly, while a web page is written to the browser. When a web page is called, the server executes the server-based code inside the page before it returns the page to the browser. By running on the server, the code can perform complex tasks, like accessing databases. |||Razor is based on ASP.NET, and designed for creating web applications. It has the power of traditional ASP.NET markup, but it is easier to use, and easier to learn.|||Razor uses a syntax very similar to PHP and Classic ASP.|||Razor:|||PHP:|||Classic ASP:|||ASP.NET helpers are components that can be accessed by single lines of Razor code.|||You can build your own helpers using Razor syntax, or use built-in ASP.NET helpers.|||Below is a short description of some useful Razor helpers:|||Razor supports both C# (C sharp) and VB (Visual Basic).",,Web Grid@@@Web Graphics@@@Google Analytics@@@Facebook Integration@@@Twitter Integration@@@Sending Email@@@Validation,,,[]
ASP.NET Razor,Razor Syntax,https://www.w3schools.com/asp/razor_syntax.asp,"Razor supports both C# (C sharp) and VB (Visual Basic).|||Razor is a simple programming syntax for embedding server code in web pages. |||Razor syntax is based on the ASP.NET framework, the part of the Microsoft.NET Framework that's specifically designed for creating web applications.  |||The Razor syntax gives you all the power of ASP.NET, but is using a simplified syntax that's easier to learn if you're a beginner, and makes you more productive if you're an expert. |||Razor web pages can be described as HTML pages with two kinds of content: HTML content and Razor code. |||When the server reads the page, it runs the Razor code first, before it sends the HTML page to the browser. The code that is executed on the server can perform tasks that cannot be done in the browser, for example accessing a server database. Server code can create dynamic HTML content on the fly, before it is sent to the browser. Seen from the browser, the HTML generated by server code is no different than static HTML content.|||ASP.NET web pages with Razor syntax have the special file extension cshtml (Razor using C#) or vbhtml (Razor using VB). |||Server coding often involves objects.The ""DateTime"" object is a typical built-in ASP.NET object, but objects can also be self-defined, a web page, a text box, a file, a database record, etc.Objects may have methods they can perform. A database record might have a ""Save"" method, an image object might have a ""Rotate"" method, an email object might have a ""Send"" method, and so on.Objects also have properties that describe their characteristics. A database record might have a FirstName and a LastName property (among others). |||The ASP.NET DateTime object has a Now property (written as DateTime.Now), and the Now property has a Day property (written as DateTime.Now.Day). The example below shows how to access some properties of the DateTime object:|||An important feature of dynamic web pages is that you can determine what to do based on conditions.|||The common way to do this is with the if ... else statements:|||Another important feature of dynamic web pages is that you can read user input.|||Input is read by the Request[] function, and posting (input) is tested by the IsPost condition:",Main Razor Syntax Rules for C#|||Main Razor Syntax Rules for VB,Razor code blocks are enclosed in @{ ... }@@@Inline expressions (variables and functions) start with @@@@Code statements end with semicolon@@@Variables are declared with the var keyword@@@Strings are enclosed with quotation marks@@@C# code is case sensitive@@@C# files have the extension .cshtml|||Razor code blocks are enclosed in @Code ... End Code@@@Inline expressions (variables and functions) start with @@@@Variables are declared with the Dim keyword@@@Strings are enclosed with quotation marks@@@VB code is not case sensitive@@@VB files have the extension .vbhtml,,,"[['\n<!-- Single statement block -->', '\n', <span class=""marked"">@{ var myMessage =    ""Hello World""; }</span>, '\n<!-- Inline expression or variable -->', '\n<p>The value of myMessage is: ', <span class=""marked"">@myMessage</span>, '</p> ', '\n<!--    Multi-statement block -->', '\n', <span class=""marked"">@{<br/>
var greeting = ""Welcome to our site!"";<br/>
var weekDay = DateTime.Now.DayOfWeek;<br/>
var greetingMessage = greeting + "" Here in Huston it is: "" + weekDay;<br/>
}</span>, '<p>The greeting is: ', <span class=""marked"">@greetingMessage</span>, '</p>\n'], ['\n<!-- Single statement block \xa0-->\xa0', '\n', <span class=""marked"">@Code dim myMessage = ""Hello World"" End Code</span>, '\n\xa0', '\n<!-- Inline expression or variable -->\xa0', '\n<p>The value of myMessage is: ', <span class=""marked"">@myMessage</span>, '</p>\xa0', '\n\xa0', '\n<!-- Multi-statement block -->\xa0', '\n', <span class=""marked"">@Code<br/>
dim greeting = ""Welcome to our site!"" <br/>
dim weekDay = DateTime.Now.DayOfWeek <br/>
dim greetingMessage = greeting &amp; "" Here in Huston it is: "" &amp; weekDay<br/>
End Code</span>, '\n', '\n<p>The greeting is: ', <span class=""marked"">@greetingMessage</span>, '</p>'], ['\n<table border=""1"">', '<tr>', '<th \nwidth=""100px"">Name</th>', '<td width=""100px"">Value</td>', '\n</tr>', '<tr>', '<td>Day</td><td>', <span class=""marked"">@DateTime.Now.Day</span>, '</td>', '\n</tr>', '<tr>', '<td>Hour</td><td>', <span class=""marked"">@DateTime.Now.Hour</span>, '</td>', '\n</tr>', '<tr>', '<td>Minute</td><td>', <span class=""marked"">@DateTime.Now.Minute</span>, '</td>', '\n</tr>', '<tr>', '<td>Second</td><td>', <span class=""marked"">@DateTime.Now.Second</span>, '</td>', '\n</tr>', '</td>', '</table>'], ['\n', <span class=""marked"">@{<br/>var txt = """";<br/>if(DateTime.Now.Hour &gt; 12)<br/>  
{txt = ""Good Evening"";}<br/>else<br/>  {txt = ""Good Morning"";}<br/>}<br/></span>, '\n<html>', '<body>', '<p>The message is ', <span class=""marked"">@txt</span>, '</p>', '\n</body>', '</html>', '\n'], ['\n', <span class=""marked"">@{<br/>var totalMessage = """";<br/>if(IsPost)<br/>
   
{<br/>    var num1 = Request[""text1""];<br/>
   
var num2 = Request[""text2""];<br/>    var total = num1.AsInt() + num2.AsInt();<br/>    totalMessage = 
""Total = "" + total;<br/>    }<br/>}</span>, '<html>', '<body \nstyle=""background-color: beige; font-family: Verdana, Arial;"">', '<form \naction="""" method=""post"">', '<p><label for=""text1"">First Number:</label><br>', '\n<input type=""text"" name=""text1"" /></p>', '<p><label for=""text2"">Second \nNumber:</label><br>', '<input type=""text"" name=""text2"" /></p>', '<p><input \ntype=""submit"" value="" Add "" /></p>', '</form>', '<p>', <span class=""marked"">@totalMessage</span>, '</p>', '\n</body>', '</html>']]"
ASP.NET Razor,Razor C# Variables,https://www.w3schools.com/asp/razor_cs_variables.asp,"Variables are named entities used to store data.|||Variables are used to store data.|||The name of a variable must begin with an alphabetic character and cannot contain whitespace or reserved characters. A variable can be of a specific type, indicating the kind of data it stores. String variables store string values (""Welcome to W3Schools""), integer variables store number values (103), date variables store date values, etc.Variables are declared using the var keyword, or by using the type (if you want to declare the type), but ASP.NET can usually determine data types automatically.|||Below is a list of  common data types:|||An operator tells ASP.NET what kind of command to perform in an expression.||| The C# language supports many operators. Below is a list of common operators:|||Converting from one data type to another is sometimes useful.The most common example is to convert string input to another type, such as an integer or a date.|||As a rule, user input comes as strings, even if the user entered a number. Therefore, numeric input values must be converted to numbers before they can be used in calculations.|||Below is a list of common conversion methods:",Converting Data Types,,,"int|||Integer (whole numbers)|||103, 12, 5168&&&float|||Floating-point number|||3.14, 3.4e38&&&decimal|||Decimal number (higher precision)|||1037.196543&&&bool|||Boolean|||true, false&&&string|||String|||""Hello W3Schools"", ""John""$$$&&&=|||Assigns a value to a variable.|||i=6&&&+-*/|||Adds a value or variable.Subtracts a value or variable.Multiplies a 
value or variable.Divides a value or variable.|||i=5+5i=5-5i=5*5i=5/5&&&+=-=|||Increments a variable.Decrements a variable.|||i += 1i -= 1&&&==|||Equality. Returns true if values are equal.|||if (i==10)&&&!=|||Inequality. Returns true if values are not equal.|||if (i!=10) &&&<><=>=|||Less than.Greater than.Less than or equal.Greater than or equal.|||if (i<10)if (i>10)if (i<=10)if (i>=10)&&&+|||Adding strings (concatenation).|||""w3"" + ""schools""&&&.|||Dot. Separate objects and methods.|||DateTime.Hour&&&()|||Parenthesis. Groups values.|||(i+5)&&&()|||Parenthesis. Passes parameters.|||x=Add(i,5)&&&[]|||Brackets. Accesses values in arrays or collections.|||name[3]&&&!|||Not. Reverses true or false.|||if (!ready)&&&&&|||||Logical AND.Logical OR.|||if (ready && clear)if (ready || clear)$$$AsInt()IsInt()|||Converts a string to an integer.|||if (myString.IsInt())  {myInt=myString.AsInt();}&&&AsFloat()IsFloat()|||Converts a string to a floating-point number.|||if (myString.IsFloat())  {myFloat=myString.AsFloat();}&&&AsDecimal()IsDecimal()|||Converts a string to a decimal number.|||if (myString.IsDecimal())  {myDec=myString.AsDecimal();}&&&AsDateTime()IsDateTime()|||Converts a string to an ASP.NET DateTime type.|||myString=""10/10/2012"";myDate=myString.AsDateTime();&&&AsBool()IsBool()|||Converts a string to a Boolean.|||myString=""True"";myBool=myString.AsBool();&&&ToString()|||Converts any data type to a string.|||myInt=1234;myString=myInt.ToString();","[['\n    // \n    Using the var keyword:', 'var greeting = ""Welcome to W3Schools"";', 'var \n    counter = 103;', 'var today = DateTime.Today;', '// Using data types:', '\n    string greeting = ""Welcome to W3Schools"";', 'int counter = 103;', 'DateTime \n    today = DateTime.Today;\n']]"
ASP.NET Razor,Razor C# Loops,https://www.w3schools.com/asp/razor_cs_loops.asp,"Statements can be executed repeatedly in loops.|||If you need to run the same statements repeatedly, you can program a loop.|||If you know how many times you want to loop, you can use a for loop. This kind of loop is especially useful for counting up or counting down:|||If you work with a collection or an array, you often use a for each loop.|||A collection is a group of similar objects, and the for each loop lets you carry out a task on each item. The for each loop walks through a collection until it is finished.|||The example below walks through the ASP.NET Request.ServerVariables collection.|||The while loop is a general purpose loop. |||A while loop begins with the while keyword, followed by parentheses, where you specify how long the loop continues, then a block to repeat.|||While loops typically add to, or subtract from, a variable used for counting.|||In the example below, the += operator adds 1 to the variable i, each time the loop runs.|||An array is useful when you want to store similar variables but don't want to create a separate variable for each of them:",Arrays,,,,"[['\n<html>', '<body>', <span class=""marked"">@for(var i = 10; i &lt; 21; i++)<br/>    {&lt;p&gt;Line @i&lt;/p&gt;}<br/></span>, '</body>', '</html>\n'], ['\n<html>', '<body>', '<ul>', <span class=""marked"">@foreach (var x in 
Request.ServerVariables)<br/>    {&lt;li&gt;@x&lt;/li&gt;}<br/></span>, '</ul>', '\n</body>', '</html>'], ['\n<html>', '<body>', <span class=""marked"">@{<br/>var i = 0;<br/>while (i &lt; 5)<br/>    
{<br/>    i += 1;<br/>    &lt;p&gt;Line @i&lt;/p&gt;<br/>    
}<br/>}</span>, '</body>', '</html>'], ['\n', <span class=""marked"">@{<br/>string[] members = {""Jani"", ""Hege"", ""Kai"", 
    ""Jim""};<br/>int i = Array.IndexOf(members, ""Kai"")+1;<br/>int len = 
    members.Length;<br/>string x = members[2-1];<br/>}<br/></span>, '<html>', '<body>', '<h3>Members</h3>', '\n', <span class=""marked"">@foreach (var person in 
    members)<br/>{<br/>&lt;p&gt;@person&lt;/p&gt;<br/>}</span>, '<p>The number of names \n    in Members are ', <span class=""marked"">@len</span>, '</p>', '<p>The person at \n    position 2 is ', <span class=""marked"">@x</span>, '</p>', '<p>Kai is now in \n    position ', <span class=""marked"">@i</span>, '</p>', '</body>', '</html>']]"
ASP.NET Razor,Razor C# Logic,https://www.w3schools.com/asp/razor_cs_logic.asp,"Programming Logic: Execute code based on conditions.|||C# lets you execute code based on conditions.|||To test a condition you use an if statement. The if statement returns true or false, based on your test:|||An if statement can include an else condition.|||The else condition defines the code to be executed if the condition is false.|||Note: In the example above, if the first condition is true, it will be executed. The else condition covers ""everything else"".|||Multiple conditions can be tested with an else if condition: |||In the example above, if the first condition is true, it will be executed.|||If not, then if the next condition is true, this condition will be executed.|||You can have any number of else if conditions.|||If none of the if and else if conditions are true, the last else block (without a condition) covers ""everything else"".|||A switch block can be used to test a number of individual conditions:|||The test value (day) is in parentheses. Each individual test condition has a case value that ends with a colon, and any number of code lines ending with a break statement. If the test value matches the case value, the code lines are executed. |||A switch block can have a default case (default:) for  ""everything else"" that runs if none of the cases are true.",The Else If Condition,The if statement starts a code block@@@The condition is written inside parenthesis@@@The code inside the braces is executed if the test is true,,,"[['\n', <span class=""marked"">@{var 
    price=50;}<br/></span>, '<html>', '<body>', <span class=""marked"">@if (price&gt;30)<br/>    {<br/>    &lt;p&gt;The price is too high.&lt;/p&gt;<br/>    
    }<br/></span>, '</body>', '</html>\n'], ['\n', <span class=""marked"">@{var 
    price=20;}<br/></span>, '<html>', '<body>', '\n', <span class=""marked"">@if (price&gt;30)<br/>  {<br/>
      &lt;p&gt;The price is too high.&lt;/p&gt;<br/>
      }<br/>else<br/>  {<br/>  &lt;p&gt;The price is OK.&lt;/p&gt;<br/>  } <br/></span>, '</body>', '</html>'], ['\n', <span class=""marked"">@{var 
    price=25;}<br/></span>, '<html>', '<body>', '\n', <span class=""marked"">@if (price&gt;=30)<br/>
  {<br/>  &lt;p&gt;The price is 
    high.&lt;/p&gt;<br/>
      
    }<br/>else if (price&gt;20 &amp;&amp; price&lt;30) <br/>
      {<br/>  &lt;p&gt;The price is OK.&lt;/p&gt;<br/>  }<br/>
    else<br/>
      {<br/>  &lt;p&gt;The price is low.&lt;/p&gt;<br/>  }    <br/></span>, '</body>', '</html>'], ['\n', <span class=""marked"">
    @{<br/>var weekday=DateTime.Now.DayOfWeek;<br/>var day=weekday.ToString();<br/>var message="""";<br/>}<br/></span>, '<html>', '<body>', '\n', <span class=""marked"">
    @switch(day)<br/>{<br/>case ""Monday"":<br/>    
    message=""This is the first weekday."";<br/>    break;<br/>case 
    ""Thursday"":<br/>    message=""Only one day before weekend."";<br/>    
    break;<br/>case ""Friday"":<br/>    message=""Tomorrow is 
    weekend!"";<br/>    break;<br/>default:<br/>    
    message=""Today is "" + day;<br/>    break;<br/>}<br/></span>, '<p>', <span class=""marked"">@message</span>, '</p>', '</body>', '</html>']]"
ASP.NET Razor,Razor VB Variables,https://www.w3schools.com/asp/razor_vb_variables.asp,"Variables are named entities used to store data.|||Variables are used to store data.|||The name of a variable must begin with an alphabetic character and cannot contain whitespace or reserved characters. A variable can be of a specific type, indicating the kind of data it stores. String variables store string values (""Welcome to W3Schools""), integer variables store number values (103), date variables store date values, etc.Variables are declared using the Dim keyword, or by using the type (if you want to declare the type), but ASP.NET can usually determine data types automatically.|||Below is a list of  common data types:|||An operator tells ASP.NET what kind of command to perform in an expression.||| The VB language supports many operators. Below is a list of common operators:|||Converting from one data type to another is sometimes useful.The most common example is to convert string input to another type, such as an integer or a date.|||As a rule, user input comes as strings, even if the user entered a number. Therefore, numeric input values must be converted to numbers before they can be used in calculations.|||Below is a list of common conversion methods:",Converting Data Types,,,"integer|||Integer (whole numbers)|||103, 12, 5168&&&double|||64 bit floating-point number|||3.14, 3.4e38&&&decimal|||Decimal number (higher precision)|||1037.196543&&&boolean|||Boolean|||true, false&&&string|||String|||""Hello W3Schools"", ""John""$$$&&&=|||Assigns a value to a variable.|||i=6&&&+-*/|||Adds a value or variable.Subtracts a value or variable.Multiplies a 
value or variable.Divides a value or variable.|||i=5+5i=5-5i=5*5i=5/5&&&+=-=|||Increments a variable.Decrements a variable.|||i += 1i -= 1&&&=|||Equality. Returns true if values are equal.|||if i=10&&&<>|||Inequality. Returns true if values are not equal.|||if <>10 &&&<><=>=|||Less than.Greater than.Less than or equal.Greater than or equal.|||if i<10if i>10if i<=10if i>=10&&&&|||Adding strings (concatenation).|||""w3"" & ""schools""&&&.|||Dot. Separate objects and methods.|||DateTime.Hour&&&()|||Parenthesis. Groups values.|||(i+5)&&&()|||Parenthesis. Passes parameters.|||x=Add(i,5)&&&()|||Parenthesis. Accesses values in arrays or collections.|||name(3)&&&Not|||Not. Reverses true or false.|||if Not ready&&&AndOR|||Logical AND.Logical OR.|||if ready And clearif ready Or clear&&&AndAlsoorElse|||Extended Logical AND.Extended Logical OR.|||if ready AndAlso clearif ready OrElse clear$$$AsInt()IsInt()|||Converts a string to an integer.|||if myString.IsInt() then   myInt=myString.AsInt()end if&&&AsFloat()IsFloat()|||Converts a string to a floating-point number.|||if myString.IsFloat() then   myFloat=myString.AsFloat()end 
if&&&AsDecimal()IsDecimal()|||Converts a string to a decimal number.|||if myString.IsDecimal() then   myDec=myString.AsDecimal()
end if&&&AsDateTime()IsDateTime()|||Converts a string to an ASP.NET DateTime type.|||myString=""10/10/2012""myDate=myString.AsDateTime()&&&AsBool()IsBool()|||Converts a string to a Boolean.|||myString=""True""myBool=myString.AsBool()&&&ToString()|||Converts any data type to a string.|||myInt=1234myString=myInt.ToString()","[['\n    // \n    Using the Dim keyword:', 'Dim greeting = ""Welcome to W3Schools""', '\n    Dim counter = 103', 'Dim today = DateTime.Today', '// Using data types:', '\n    Dim greeting As String = ""Welcome to W3Schools""', 'Dim counter As Integer = \n    103', 'Dim today As DateTime = DateTime.Today\n']]"
ASP.NET Razor,Razor VB Loops,https://www.w3schools.com/asp/razor_vb_loops.asp,"Statements can be executed repeatedly in loops.|||If you need to run the same statements repeatedly, you can program a loop.|||If you know how many times you want to loop, you can use a for loop. This kind of loop is especially useful for counting up or counting down:|||If you work with a collection or an array, you often use a for each loop.|||A collection is a group of similar objects, and the for each loop lets you carry out a task on each item. The for each loop walks through a collection until it is finished.|||The example below walks through the ASP.NET Request.ServerVariables collection.|||The while loop is a general purpose loop. |||A while loop begins with the while keyword, followed by parentheses, where you specify how long the loop continues, then a block to repeat.|||While loops typically add to, or subtract from, a variable used for counting.|||In the example below, the += operator adds 1 to the variable i, each time the loop runs.|||An array is useful when you want to store similar variables but don't want to create a separate variable for each of them:",Arrays,,,,"[['\n<html>', '<body>', <span class=""marked"">@For i=10 To 21<br/>    
    @&lt;p&gt;Line #@i&lt;/p&gt;<br/>Next i<br/></span>, '</body>', '</html>\n'], ['\n<html>', '<body>', '<ul>', <span class=""marked"">@For Each x 
    In Request.ServerVariables<br/>    @&lt;li&gt;@x&lt;/li&gt;<br/>Next x<br/></span>, '</ul>', '\n</body>', '</html>'], ['\n<html>', '<body>', <span class=""marked"">@Code<br/>Dim i=0<br/>Do While 
    i&lt;5<br/>    i += 1<br/>    @&lt;p&gt;Line #@i&lt;/p&gt;<br/>Loop<br/>
    End Code</span>, '</body>', '</html>'], ['\n', <span class=""marked"">@Code<br/>Dim members As String()={""Jani"",""Hege"",""Kai"",""Jim""}<br/>i=Array.IndexOf(members,""Kai"")+1<br/>len=members.Length<br/>x=members(2-1)<br/>
    end Code<br/></span>, '<html>', '<body>', '<h3>Members</h3>', '\n', <span class=""marked"">@For Each person In members<br/>   @&lt;p&gt;@person&lt;/p&gt;<br/>
    Next person</span>, '<p>The number of names \n    in Members are ', <span class=""marked"">@len</span>, '</p>', '<p>The person at \n    position 2 is ', <span class=""marked"">@x</span>, '</p>', '<p>Kai is now in \n    position ', <span class=""marked"">@i</span>, '</p>', '</body>', '</html>']]"
ASP.NET Razor,Razor VB Logic,https://www.w3schools.com/asp/razor_vb_logic.asp,"Programming Logic: Execute code based on conditions.|||VB lets you execute code based on conditions.|||To test a condition you use the if statement. The if statement returns true or false, based on your test:|||An if statement can include an else condition.|||The else condition defines the code to be executed if the condition is false.|||Note: In the example above, if the first condition is true, it will be executed. The else condition covers ""everything else"".|||Multiple conditions can be tested with an else if condition: |||In the example above, if the first condition is true, it will be executed.|||If not, then if the next condition is true, this condition will be executed.|||You can have any number of else if conditions.|||If none of the if or else if conditions are true, the last else block (without a condition) covers ""everything else"".|||A select block can be used to test a number of individual conditions:|||""Select Case"" is followed by the test value (day). Each individual test condition has a case value, and any number of code lines. If the test value matches the case value, the code lines are executed. |||A select block can have a default case (Case Else) for  ""everything else"" that runs if none of the other cases are true.",The ElseIf Condition,The if statement starts a code block@@@The condition is written between if and then@@@The code between if ... then and end if is executed if the test is true,,,"[['\n', <span class=""marked"">@Code<br/>Dim 
    price=50<br/>End Code<br/></span>, '<html>', '<body>', <span class=""marked"">@If price&gt;30 
    Then<br/>    @&lt;p&gt;The price is too high.&lt;/p&gt;<br/>End 
    If<br/></span>, '</body>', '</html>\n'], ['\n', <span class=""marked"">@Code<br/>Dim 
    price=20<br/>End Code<br/></span>, '<html>', '<body>', '\n', <span class=""marked"">@if price&gt;30 then<br/>    @&lt;p&gt;The price is too high.&lt;/p&gt;<br/>
    Else<br/>    @&lt;p&gt;The price is OK.&lt;/p&gt;<br/>End If <br/></span>, '</body>', '</html>'], ['\n', <span class=""marked"">@Code<br/>Dim 
    price=25<br/>End Code<br/></span>, '<html>', '<body>', '\n', <span class=""marked"">@If price&gt;=30 Then<br/>    @&lt;p&gt;The price is 
    high.&lt;/p&gt;<br/>ElseIf price&gt;20 And price&lt;30 then <br/>
        @&lt;p&gt;The price is OK.&lt;/p&gt;<br/>Else<br/>    
    @&lt;p&gt;The price is low.&lt;/p&gt;<br/>End If    <br/></span>, '</body>', '</html>'], ['\n', <span class=""marked"">
    @Code<br/>Dim weekday=DateTime.Now.DayOfWeek<br/>Dim day=weekday.ToString()<br/>Dim message=""""<br/>End Code<br/></span>, '<html>', '<body>', '\n', <span class=""marked"">
    @Select Case day<br/>Case ""Monday""<br/>    message=""This is the first 
    weekday.""<br/>Case ""Thursday""<br/>    message=""Only one day before weekend.""<br/>
    Case ""Friday""<br/>    message=""Tomorrow is weekend!""<br/>Case Else<br/>    
    message=""Today is "" &amp; day<br/>End Select<br/></span>, '<p>', <span class=""marked"">@message</span>, '</p>', '</body>', '</html>']]"
ASP Classic,ASP Intro,https://www.w3schools.com/asp/asp_introduction.asp,"ASP is an old (but still powerful) tool for making dynamic Web pages.|||ASP is a technology (much like PHP) for executing scripts on a web server.|||In this tutorial you will learn all you need to know about ASP.|||This ASP tutorial contains hundreds of examples.|||Our ""Show Example"" tool makes it easy to learn ASP, because it shows ASP  code with parallel HTML output.|||Click on the ""Show Example"" button to see how it works!|||When a browser requests a normal HTML file, the server just returns the file.|||When a browser requests an ASP file, the server passes the request to the ASP engine which reads the ASP file and executes the server scripts in the file.|||Finally the ASP file is returned to the browser as plain HTML.|||At W3Schools you will find complete ASP references about built-in objects and components, and their properties and methods.|||ASP References|||Learn by 100 examples! Because ASP scripts are executed on the server, youcan not view ASP code in a browser, you will only see the output from ASP whichis plain HTML. At W3Schools every example displays the hidden ASP code. Thiswill make it easier for you to understand how it works.||| ASP Examples!",What is ASP?|||What is an ASP File?|||What can ASP do for you?,"ASP stands for Active Server Pages@@@ASP is a Microsoft Technology@@@ASP is a program that runs inside a web server|||An ASP file has the file extension "".asp""@@@An ASP file is just the same as an HTML file@@@An ASP file can contain server scripts in addition to HTML@@@Server scripts in an ASP file are executed on the server|||Edit, change, add content, or customize any web page@@@Respond to user queries or data submitted from HTML forms@@@Access databases or other server data and return results to a browser@@@Provide web security since ASP code cannot be viewed in a browser@@@Offer simplicity and speed",,,"[['\n<!DOCTYPE html>', '<html>', '\n<body>', '\n', <span class=""marked"">&lt;%<br/>
response.write(""My first ASP script!"")<br/>
%&gt;</span>, '\n</body>', '\n</html>\n']]"
ASP Classic,ASP Syntax,https://www.w3schools.com/asp/asp_syntax.asp,"All our examples shows the ASP code in red.|||This makes it easier for you to understand how ASP works.|||The default scripting language in ASP is VBScript.|||A scripting language is a lightweight programming language.|||VBScript is a light version of Microsoft's Visual Basic.|||ASP files can be ordinary HTML files. In addition, ASP files can also contain server scripts.|||Scripts surrounded by <% and %> are executed on the server.|||The Response.Write() method is used by ASP to write output to HTML.|||The following example writes ""Hello World"" into HTML:|||VBScript is case insensitive. Response.Write() can be written as response.write().|||To set JavaScript as the scripting language for a web page you must insert a language specification at the top of the page:|||This tutorial uses the VBScript scripting language.|||There is an easy shortcut to Response.Write(). You can use an equal sign (=) instead. |||The following example also writes ""Hello World"" into HTML:|||HTML tags can be a part of the output:|||HTML attributes can be a part of the output:|||This tutorial contains a lot of VBScript examples.|||VBScript Examples|||This tutorial has complete VBScript reference.|||VBScript Reference",ASP Uses VBScript,,,,"[['\n    <!DOCTYPE html>', '<html>', '\n<body>', '\n', <span class=""marked"">&lt;%<br/>
    Response.Write(""Hello World!"")<br/>
%&gt;</span>, '\n</body>', '\n</html>\n'], ['\n<!DOCTYPE html>', '<html>', '\n<body>', '\n', <span class=""marked"">&lt;%<br/>
=""Hello World!""<br/>
%&gt;</span>, '\n</body>', '\n</html>\n']]"
ASP Classic,ASP Variables,https://www.w3schools.com/asp/asp_variables.asp,"Variables are ""containers"" for storing information.|||Declare a variableThis example demonstrates how to declare a variable, assign a value to it, and use the value in a text.|||Create an arrayArrays are used to store a series of related data items. This example demonstrates how to create an array that stores names.|||Loop through the HTML headingsHow to loop through the six headings in HTML.|||Time-based greeting using VBScriptThis example will display a different message to the user depending on the time on the server.|||Time-based greeting using JavaScriptThis example is the same as the one above, but the syntax is different.|||Create and change a variableHow to create a variable, assign a value to it, and then change the value of it.|||Insert a variable value in a textHow to insert a variable value in a text.|||Do you remember algebra from school? x=5, y=6, z=x+y|||Do you remember that a letter (like x) could be used to hold a value (like 5), and that you could use the information above to calculate the value of z to be 11?|||These letters are called variables, and variables can be used to hold values (x=5) or expressions (z=x+y).|||As with algebra, VBScript variables are used to hold values or expressions.|||A variable can have a short name, like x, or a more descriptive name, like carname.|||Rules for VBScript variable names:|||In VBScript, all variables are of type variant, that can store different types of data.|||Creating variables in VBScript is most often referred to as ""declaring"" variables.|||You can declare VBScript variables with the Dim, Public or the Private statement. Like this:|||Now you have created two variables. The name of the variables are ""x"" and ""carname"".|||You can also declare variables by using its name in a script. Like this:|||Now you have also created a variable. The name of the variable is ""carname"". However, this method is not a good practice, because you can misspell the variable name laterin your script, and that can cause strange results when your script is running.||| If you misspell for example the ""carname"" variable to ""carnime"", the script will automatically create a new variable called ""carnime"".  To prevent your script from doing this, you can use the Option Explicit statement.This statement forces you to declare all your variables with the dim, public or private statement.||| Put the Option Explicit statement on the top of your script. Like this:|||You assign a value to a variable like this:|||The variable name is on the left side of the expression and the value you want toassign to the variable is on the right. Now the variable ""carname"" hasthe value of ""Volvo"", and the variable ""x"" has the value of ""10"".|||An array variable is used to store multiple values in a single variable.|||In the following example, an array containing3 elements is declared:|||The number shown in the parentheses is 2. We start at zero so this array contains 3 elements. This is a fixed-size array.You assign data to each of the elements of the array like this:|||Similarly, the data can be retrieved from any element using the index of the particular array element you want.Like this:|||You can have up to 60 dimensions in an array. Multiple dimensions are declared by separatingthe numbers in the parentheses with commas. Here we have a two-dimensional array consisting of 5 rows and 7 columns:|||Assign data to a two-dimensional array:|||A variable declared outside a procedure can be accessed and changed by any script in the ASP file. |||A variable declared inside a procedure is created and destroyed every time the procedure is executed. No scripts outside the procedure can access or change the variable. |||To declare variables accessible to more than one ASP file, declare them as session variables or application variables.|||Session variables are used to store information about ONE single user, and are available to all pages in one application. Typically information stored in session variables are name, id, and preferences.|||Application variables are also available to all pages in one application. Application variables are used to store information about ALL users in one specific application.",VBScript Array Variables,Must begin with a letter @@@Cannot contain a period (.)@@@Cannot exceed 255 characters,,,"[['\n<html>', '\n<body>', '\n', '\n<%', '\nDim x(2,2)', '\nx(0,0)=""Volvo""', '\nx(0,1)=""BMW""', '\nx(0,2)=""Ford""', '\nx(1,0)=""Apple""', '\nx(1,1)=""Orange""', '\nx(1,2)=""Banana""', '\nx(2,0)=""Coke""', '\nx(2,1)=""Pepsi""', '\nx(2,2)=""Sprite""', '\nfor i=0 to 2', '\n\xa0\xa0\xa0\n    response.write(""<p>"")', '\n\xa0\xa0\xa0\nfor j=0 to 2', '\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n    response.write(x(i,j) & ""<br />"")', '\n\xa0\xa0\xa0\nnext', '\n\xa0\xa0\xa0\n    response.write(""</p>"")', '\nnext', '\n%>', '\n', '\n</body>', '\n</html>']]"
ASP Classic,ASP Procedures,https://www.w3schools.com/asp/asp_procedures.asp,"In ASP you can call a JavaScript procedure from a VBScript and vice versa. |||The ASP source code can contain procedures and functions: |||Insert the <%@ language=""language"" %> line above the<html> tag to write the procedure/function in another scripting language: |||When calling a VBScript or a JavaScript procedure from an ASP file written in VBScript, you can use the""call"" keyword followed by the procedure name. If a procedure requiresparameters, the parameter list must be enclosed in parentheses when using the""call"" keyword. If you omit the ""call"" keyword, theparameter list must not be enclosed in parentheses. If the procedure has noparameters, the parentheses are optional.|||When calling a JavaScript or a VBScript procedure from an ASP file written in JavaScript,always use parentheses after the procedure name.|||VBScript has two kinds procedures:|||A Sub procedure:|||or|||A Function procedure:|||or|||This simple function procedures is called to calculate the sum of two arguments:|||The function ""myfunction"" will return the sum of argument ""a"" and argument ""b"". In this case 14.|||When you call a procedure you can use the Call statement, like this:|||Or, you can omit the Call statement, like this:|||Call procedures using VBScriptHow to call both a JavaScript procedure and a VBScript procedure in an ASP file.",Calling a Procedure,"Sub procedure@@@Function procedure|||is a series of statements, enclosed by the Sub and End Sub statements@@@can perform actions, but  does not return a value@@@can take arguments|||is a series of statements, enclosed by the Function and End Function statements@@@can perform actions and can return a value@@@can take arguments that are passed to it by a calling procedure@@@without arguments, must include an empty set of parentheses ()@@@returns a value by assigning a value to its name",,,"[['\n    <!DOCTYPE html>', '<html>', '\n<head>', '\n<%', '\nsub vbproc(num1,num2)', '\nresponse.write(num1*num2)', '\nend sub', '\n%>', '\n</head>', '\n<body>', '\n', '\n<p>Result: <%call vbproc(3,4)%></p>', '\n', '\n</body>', '\n</html>\n'], ['\n<%@ language=""javascript"" %>', '\n<!DOCTYPE html>', '<html>', '\n<head>', '\n<%', '\nfunction jsproc(num1,num2)', '\n{', '\nResponse.Write(num1*num2)', '\n}', '\n%>', '\n</head>', '\n<body>', '\n', '\n<p>Result: <%jsproc(3,4)%></p>', '\n', '\n</body>', '\n</html>\n'], ['\nSub mysub()', '\n\xa0\xa0response.write(""I was written by a sub procedure"")', '\nEnd Sub\n'], ['\nfunction myfunction()', '\n \xa0\xa0myfunction=Date()', '\nend function'], ['\nFunction myfunction(a,b)', '\nmyfunction=a+b', '\nEnd Function\n', '\n', '\n    response.write(myfunction(5,9))']]"
ASP Classic,ASP Conditionals,https://www.w3schools.com/asp/asp_conditionals.asp,"Conditional statements are used to perform different actions for different decisions.|||In VBScript we have four conditional statements:|||Use the If...Then...Else statement if you want to|||If you want to execute only  one statement when a condition is true, you can write the code on one line:|||There is no ..Else.. in this syntax. You just tell the code toperform one action if a condition is true (in this case If i=10).|||If you want to execute  more than one statement when a condition is true,you must put each statement on separate lines, and end the statement with thekeyword ""End If"":|||There is no ..Else.. in the example above either. You just tell the code to perform  multiple actions if the condition is true.|||If you want to execute a statement if a condition is true and execute another statement if the condition is not true, you must add the ""Else""keyword:|||In the example above, the first block of code will be executed if the condition is true, and the other blockwill be executed otherwise (if i is greater than 10).|||You can use the If...Then...ElseIf statement if you want to select one of many blocks ofcode to execute:|||You can also use the ""Select Case"" statement if you want to select one of many blocks ofcode to execute:|||This is how it works: First we have a single expression (most often avariable), that is evaluated once. The value of the expression is then compared with thevalues for each Case in the structure. If there is a match, the block of codeassociated with that Case is executed.",,If statement - executes a set of code when a condition is true@@@If...Then...Else statement  - select one of two sets of lines to execute@@@If...Then...ElseIf statement  - select one of many sets of lines to execute@@@Select Case statement - select one of many sets of lines to execute|||execute some code if a condition is true@@@select one of two blocks of code to execute,,,"[['\ni=hour(time)', '\nIf i < 10 Then', '\n    response.write(""Good morning!"")', '\nElse', '\n    response.write(""Have a nice day!"")', '\nEnd If'], ['\ni=hour(time)', '\nIf i = 10 Then', '\n    response.write(""Just started...!"")', '\nElseIf i = 11 Then', '\n    response.write(""Hungry!"")', '\nElseIf i = 12 Then', '\n    response.write(""Ah, lunch-time!"")', '\nElseIf i = 16 Then', '\n    response.write(""Time to go home!"")', '\nElse', '\n    response.write(""Unknown"")', '\nEnd If'], ['\nd=weekday(date)', 'Select Case d', '\n\xa0\nCase 1', '\n\xa0\xa0\xa0\n    response.write(""Sleepy Sunday"")', '\n\xa0\nCase 2', '\n\xa0\xa0\xa0\n    response.write(""Monday again!"")', '\n\xa0\nCase 3', '\n\xa0\xa0\xa0\n    response.write(""Just Tuesday!"")', '\n\xa0\nCase 4', '\n\xa0\xa0\xa0\n    response.write(""Wednesday!"")', '\n\xa0\nCase 5', '\n\xa0\xa0\xa0\n    response.write(""Thursday..."")', '\n\xa0\nCase 6', '\n\xa0\xa0\xa0\n    response.write(""Finally Friday!"")', '\n\xa0\nCase else', '\n\xa0\xa0\xa0\n    response.write(""Super Saturday!!!!"")', '\nEnd Select']]"
ASP Classic,ASP Looping,https://www.w3schools.com/asp/asp_looping.asp,"Looping statements are used to run the same block of code a specified number of times.|||In VBScript we have four looping statements:|||Use the For...Next statement to run a block of code a specified number of times.|||The For statement specifies the counter variable (i), and its start and endvalues. The  Next statement increases the counter variable (i) by one.|||With the  Step keyword, you can increase or decrease the counter variable by the value you specify.|||In the example below, the counter variable (i) is INCREASED by two, each time the loop repeats.|||To decrease the counter variable, you must use a negative  Step value. You must specify an end value that is less than the start value.|||In the example below, the counter variable (i) is DECREASED by two, each time the loop repeats.|||You can exit a For...Next statement with the Exit For keyword.|||A For Each...Next loop repeats a block of code for each item in a collection, or for each element of an array.|||If you don't know how many repetitions you want, use a Do...Loop statement.|||The Do...Loop statement repeats a block of code while a condition istrue, or until a condition becomes true.|||You use the While keyword to check a condition in a Do...Loop statement.|||If  i equals 9, the code inside the loop above will never be executed.|||The code inside this loop will be executed at least one time, even if  i is less than 10.|||You use the Until keyword to check a condition in a Do...Loop statement.|||If  i equals 10, the code inside the loop will never be executed.|||The code inside this loop will be executed at least one time, even if  i is equal to 10.|||You can exit a Do...Loop statement with the Exit Do keyword.|||The code inside this loop will be executed as long as  i is differentfrom 10, and as long as  i is greater than 10.|||Looping through headersHow to loop through the six headings in html.|||Do...While loopHow to make a simple Do...While loop.",,For...Next statement - runs code a specified number of times@@@For Each...Next statement - runs code for each item in a collection or each element of an array@@@Do...Loop statement - loops while or until a condition is true@@@While...Wend statement - Do not use it - use the Do...Loop statement instead,,,"[['\n<html>', '\n<body>', '\n<%', '\nFor i = 0 To 5', '\n\xa0 response.write(""The number is "" & i & ""<br />"")', '\nNext', '\n%>', '\n</body>', '\n</html>'], ['\n<html>', '\n<body>', '\n<%', '\nDim cars(2)', '\ncars(0)=""Volvo""', '\ncars(1)=""Saab""', '\ncars(2)=""BMW""', '\n', '\nFor Each x In cars', '\n\xa0\xa0response.write(x & ""<br />"")', '\nNext', '\n%>', '\n</body>', '\n</html>']]"
ASP Classic,ASP Forms,https://www.w3schools.com/asp/asp_inputforms.asp,"The Request.QueryString and Request.Form commands are used to retrieve user input from forms.|||A form with method=""get""How to interact with the user, with the Request.QueryString command.|||A form with method=""post""How to interact with the user, with the Request.Form command.|||A form with radio buttonsHow to interact with the user, through radio buttons, with the Request.Form command.|||The Request object can be used to retrieve user information from forms.|||User input can be retrieved with the Request.QueryString or Request.Form command. |||The Request.QueryString command is used to collect values in a form with method=""get"".|||Information sent from a form with the GET method is visible to everyone (it will be displayed in the browser's address bar)and has limits on the amount of information to send.|||If a user typed ""Bill"" and ""Gates"" in the HTML form above, the URL sent to the server would look like this:|||Assume that ""simpleform.asp"" contains the following ASP script:|||The browser will display the following in the body of the document:|||The Request.Formcommand is used to collect values in a form with method=""post"".|||Information sent from a form with the POST method is invisible to others and has no limits on the amount of information to send.|||If a user typed ""Bill"" and ""Gates"" in the HTML form above, the URL sent to the server would look like this: |||Assume that ""simpleform.asp"" contains the following ASP script:|||The browser will display the following in the body of the document:|||User input should be validated on the browser whenever possible (by client scripts).Browser validation is faster and reduces the server load.|||You should consider server validation if the user input will beinserted into a database. A good way to validate a form on the server is to postthe form to itself, instead of jumping to a different page. The user will thenget the error messages on the same page as the form. This makes it easier todiscover the error.",Form Validation,,,,[]
ASP Classic,ASP Cookies,https://www.w3schools.com/asp/asp_cookies.asp,"A cookie is often used to identify a user.|||Welcome cookieHow to create a Welcome cookie.|||A cookie is often used to identify a user. A cookie is a small file that the serverembeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookietoo. With ASP, you can both create and retrieve cookie values.|||The ""Response.Cookies"" command is used to create cookies.|||Note: The Response.Cookies command must appear BEFORE the <html> tag.|||In the example below, we will create a cookie named ""firstname"" and assign the value ""Alex"" to it:|||It is also possible to assign properties to a cookie, like setting a date when the cookie should expire:|||The ""Request.Cookies"" command is used to retrieve a cookie value.|||In the example below, we retrieve the value of the cookie named ""firstname"" and display it on a page:|||Output: Firstname=Alex|||If a cookie contains a collection of multiple values, we say that the cookie has Keys.|||In the example below, we will create a cookie collection named ""user"".The ""user"" cookie has Keys that contains information about a user:|||Look at the following code:|||Assume that your server has sent all the cookies above to a user.|||Now we want to read all the cookies sent to a user. The example below shows how to do it (note that the code below checks if a cookie has Keys with the HasKeys property):|||Output:|||firstname=Alex|||user:firstname=Johnuser:lastname=Smithuser:country=Norwayuser:age=25|||If your application deals with browsers that do not support cookies, you willhave to use other methods to pass information from one page to another in your application.There are two ways of doing this:|||You can add parameters to a URL:|||And retrieve the values in the ""welcome.asp"" file like this:|||You can use a form. The form passes the user input to ""welcome.asp"" when the user clicks on the Submit button:|||Retrieve the values in the ""welcome.asp"" file like this:",A Cookie with Keys,,,,[]
ASP Classic,ASP Session,https://www.w3schools.com/asp/asp_sessions.asp,"A Session object stores information about, or change settings for a user session.|||When you are working with an application on your computer, you open it, do some changes and thenyou close it. This is much like a Session. The computer knows who you are. Itknows when you open the application and when you close it. However, on the internet there is oneproblem: the web server does not know who you are and what you do, because the HTTP address doesn't maintain state. |||ASP solves this problem by creating a unique cookie for each user. The cookieis sent to the user's computer and it contains information that identifies the user. Thisinterface is called the Session object. |||The Session object stores information about, or change settings for a user session.|||Variables stored in a Session object hold information about one single user, and are available to all pages in one application. Common informationstored in session variables are name, id, and preferences. The server creates a new Session object for each new user, and destroys the Session object when the session expires. |||A session starts when:|||A session ends if a user has not requested or refreshed a page in the application for a specified period. By default, this is 20 minutes. |||If you want to set a timeout interval that is shorter or longer than the default, use the Timeout property.|||The example below sets a timeout interval of 5 minutes:|||Use the Abandon method to end a session immediately:|||Note: The main problem with sessions is WHEN they should end. We do not know if the user's last request was the final one or not. So we do not know how long we should keep the session ""alive"". Waiting too long for an idle session uses up resources on the server, but if the session is deleted too soon the user has to start all over again because the server has deleted all the information. Finding the right timeout interval can be difficult!|||Tip: Only store SMALL amounts of data in session variables!|||The most important thing about the Session object is that you can store variables in it.|||The example below will set the Session variable username to ""Donald Duck"" and the Session variable age to ""50"":|||When the value is stored in a session variable it can be reached from ANY page in the ASP application:|||The line above returns: ""Welcome Donald Duck"".|||You can also store user preferences in the Session object, and then accessthat preference to choose what page to return to the user.|||The example below specifies a text-only version of the page if the user has a low screen resolution: |||The Contents collection contains all session variables.|||It is possible to remove a session variable with the Remove method.|||The example below removes the session variable ""sale"" if the value of the session variable ""age"" is lower than 18: |||To remove all variables in a session, use the RemoveAll method: |||The Contents collection contains all session variables. You can loop through the Contents collection, to see what's stored in it: |||Result:|||If you do not know the number of items in the Contents collection, you can use the Count property:|||Result:|||You can loop through the StaticObjects collection, to see the values of all objects stored in the Session object:",When does a Session End?,"A new user requests an ASP file, and the Global.asa file includes a Session_OnStart procedure@@@A value is stored in a Session variable@@@A user requests an ASP file, and the Global.asa file uses the <object> tag to instantiate an object with session scope",,,[]
ASP Classic,ASP Application,https://www.w3schools.com/asp/asp_applications.asp,"A group of ASP files that work together to perform some purpose is called an application.|||An application on the Web may consist of several ASP files that work together to perform some purpose.The Application object is used to tie these files together.|||The Application object is used to store and access variables from any page, just like the Session object. The differenceis that ALL users share ONE Application object (with Sessions there is ONE Session object for EACH user).|||The Application object holds information that will be used by many pages in the application (like database connection information).The information can be accessed from any page. The information can also be changed in one place, and the changes will automatically be reflectedon all pages.|||Application variables can be accessed and changed by any page in an application.|||You can create Application variables in ""Global.asa"" like this:|||In the example above we have created two Application variables: ""vartime"" and ""users"".|||You can access the value of an Application variable like this:|||The Contents collection contains all application variables. You can loop through the Contents collection, to see what's stored in it:|||If you do not know the number of items in the Contents collection, you can use the Count property:|||You can loop through the StaticObjects collection, to see the values of all objects stored in the Application object:|||You can lock an application with the ""Lock"" method. When anapplication is locked, the users cannot change the Application variables (other than the one currently accessingit). You can unlock an application with the ""Unlock"" method. This methodremoves the lock from the Application variable:",,,,,[]
ASP Classic,ASP #include,https://www.w3schools.com/asp/asp_incfiles.asp,"You can insert the content of one ASP file into another ASP file before theserver executes it, with the #include directive.|||The #include directive is used to create functions, headers, footers, or elements that will be reused on multiple pages.|||Here is a file called ""mypage.asp"":|||Here is the ""wisdom.inc"" file:|||Here is the ""time.inc"" file:|||If you look at the source code in a browser, it will look something like this:|||To include a file in an ASP page, place the #include directive inside comment tags:|||Use the virtual keyword to indicate a path beginning with a virtual directory.|||If a file named ""header.inc"" resides in a virtual directory named /html, the following line would insert the contents of ""header.inc"":|||Use the file keyword to indicate a relative path. A relative path begins with the directory that contains the including file.|||If you have a file in the html directory, and the file ""header.inc"" resides in html\headers, the following line would insert ""header.inc"" in your file:|||Note that the path to the included file (headers\header.inc) is relative to the including file. If the file containing this #include statement is not in the html directory, the statement will not work.|||In the sections above we have used the file extension "".inc"" for included files. Notice that if a user tries to browse an INC file directly,its content will be displayed. If your included file contains confidential information or information you do not want any users to see, it is better to use an ASP extension. The source code in an ASP file will not be visible after the interpretation. An included file can also include other files,and one ASP file can include the same file more than once.|||Important: Included files are processed and inserted before the scripts are executed. The following script will NOT work because ASP executes the #include directive before it assigns a value to the variable:|||You cannot open or close a script delimiter in an INC file. The following script will NOT work:|||But this script will work:",h3&gt;Words of Wisdom:&lt;/h3&gt;,,,,[]
ASP Classic,ASP Global.asa,https://www.w3schools.com/asp/asp_globalasa.asp,"The Global.asa file is an optional file that can contain declarations of objects, variables, and methods thatcan be accessed by every page in an ASP application.|||All valid browser scripts (JavaScript, VBScript, JScript, PerlScript, etc.) can be used within Global.asa.|||The Global.asa file can contain only the following:|||Note: The Global.asa file must be stored in the root directory of theASP application, and each application can only have one Global.asa file.|||In  Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when theapplication/session ends. The code for this is placed in event handlers. The Global.asa file can contain four types of events:|||Session_OnStart - This event occurs EVERY time a NEW user requests his or her first page in the ASP application.|||Session_OnEnd - This event occurs EVERY time a user ends a session. A user-session ends after a page has not been requested by the user for a specified time (by default this is 20 minutes).|||Application_OnEnd - This event occurs after the LAST user has ended the session. Typically, this event occurs when a Web server stops.This procedure is used to clean up settings after the Application stops, like delete records or write information to text files.|||A Global.asa file could look something like this:|||Note: Because we cannot use the ASP script delimiters (<% and %>) to insert scripts in the Global.asa file, we put subroutines inside an HTML <script> element.|||It is possible to create objects with session or application scope in Global.asa by using the <object> tag.|||Note: The <object> tag should be outside the <script> tag!||| Either ProgID or ClassID must be specified.||| Either ProgID or ClassID must be specified.|||The first example creates an object of session scope named ""MyAd"" by using the ProgID parameter:|||The second example creates an object of application scope named ""MyConnection"" by using the ClassID parameter:|||The objects declared in the Global.asa file can be used by any script in the application:|||A TypeLibrary is a container for the contents of a DLL file corresponding to a COM object. By including a call to the TypeLibrary in the Global.asa file,the constants of the COM object can be accessed, and errors can be better reported by the ASP code. If your Web application relies on COM objects that havedeclared data types in type libraries, you can declare the type libraries in Global.asa.|||Either the file parameter or the uuid parameter is required|||Either the file parameter or the uuid parameter is required|||The server can return one of the following error messages:|||Note: METADATA tags can appear anywhere in the Global.asa file (both inside and outside <script> tags). However, it is recommended thatMETADATA tags appear near the top of the Global.asa file.|||Restrictions on what you can include in the Global.asa file:|||Global.asa is often used to initialize variables. ||| The example below shows how to detect the exact time a visitor first arrives on a Web site. The time is stored in a Session variable named ""started"", and the value of the ""started"" variable can be accessed from any ASP page in the application:|||Global.asa can also be used to control page access.|||The example below shows how to redirect every new visitor to another page, in this case to apage called ""newpage.asp"":|||And you can include functions in the Global.asa file.|||In the example below the Application_OnStart subroutine occurs when the Web server starts. Thenthe Application_OnStart subroutine calls another subroutine named ""getcustomers"".The ""getcustomers"" subroutine opens a database and retrieves a record set fromthe ""customers"" table. The record set is assigned to an array, where itcan be accessed from any ASP page without querying the database:|||In this example we will create a Global.asa file that counts the number of current visitors.|||The Global.asa file:|||To display the number of current visitors in an ASP file:",,"Application events@@@Session events@@@<object> declarations@@@TypeLibrary declarations@@@the #include directive||| You cannot display text written in the Global.asa file. This file can't display information@@@You can only use Server and Application objects in the Application_OnStart and Application_OnEndsubroutines. In the Session_OnEnd subroutine, you can use Server, Application, and Session    objects. In the Session_OnStart subroutine you can use any built-in object|||The Application_OnStart sets the Application variable ""visitors"" to 0 when the server starts@@@The Session_OnStart subroutine adds one to the variable ""visitors"" every time a new visitor arrives@@@The Session_OnEnd subroutine subtracts one from ""visitors"" each time this subroutine is triggered",,"scope |||Sets the scope of the object (either Session or Application)&&&id |||Specifies a unique id for the object&&&ProgID |||An id associated with a class id. The format for ProgID is [Vendor.]Component[.Version]
     Either ProgID or ClassID must be specified.&&&ClassID |||Specifies a unique id for a COM class object. Either ProgID or ClassID must be specified.$$$&&&file|||Specifies an absolute path to a type library.
      Either the file parameter or the uuid parameter is required&&&uuid|||Specifies a unique identifier for the type library.
      Either the file parameter or the uuid parameter is required&&&version|||Optional. Used for selecting version. If the requested version is not found, then the most recent version is used&&&lcid|||Optional. The locale identifier to be used for the type library$$$ASP 0222||| Invalid type library specification&&&ASP 0223||| Type library not found&&&ASP 0224||| Type library cannot be loaded&&&ASP 0225||| Type library cannot be wrapped",[]
ASP Classic,ASP AJAX,https://www.w3schools.com/asp/asp_ajax.asp,"AJAX is about updating parts of a web page, without reloading the whole page.|||AJAX = Asynchronous JavaScript and XML.|||AJAX is a technique for creating fast and dynamic web pages.|||AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.|||Classic web pages, (which do not use AJAX) must reload the entire page if the content should change.|||Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs.||||||AJAX is based on internet standards, and uses a combination of:|||AJAX applications are browser- and platform-independent!|||AJAX was made popular in 2005 by Google, with Google Suggest.|||Google Suggest is using AJAX to create a very dynamic web interface: When you start typing in Google's search box, a JavaScript sends the letters off to a server and the server returns a list of suggestions.|||In our ASP tutorial, we will demonstrate how AJAX can update parts of a web page, without reloading the whole page. The server script will be written in ASP.|||If you want to learn more about AJAX, visit our AJAX tutorial.|||The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:|||Start typing a name in the input field below:|||Suggestions: |||In the example above, when a user types a character in the input field, a function called ""showHint()"" is executed.|||The function is triggered by the onkeyup event.|||Here is the HTML code:|||Code explanation:|||First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.|||However, if the input field is not empty, do the following:|||The ASP file checks an array of names, and returns the corresponding name(s) to the browser:|||AJAX can be used for interactive communication with a database.|||The following example will demonstrate how a web page can fetch information from a database with AJAX:|||Try it Yourself »|||When a user selects a customer in the dropdown list above, a function called ""showCustomer()"" is executed. The function is triggered by the ""onchange"" event:|||Source code explanation:|||If no customer is selected (str.length==0), the function clears the content of the txtHint placeholder and exits the function.|||If a customer is selected, the showCustomer() function executes the following:|||The page on the server called by the JavaScript above is an ASP file called ""getcustomer.asp"".|||The source code in ""getcustomer.asp"" runs a query against a database, and returns the result in an HTML table:",Google Suggest,"XMLHttpRequest object (to exchange data asynchronously with a server)@@@JavaScript/DOM (to display/interact with the information)@@@CSS (to style the data)@@@XML (often used as the format for transferring data)|||Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to an ASP file (gethint.asp) on the server@@@Notice that q parameter is added gethint.asp?q=""+str@@@The str variable holds the content of the input field|||Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a file on the server@@@Notice that a parameter (q) is added to the URL (with the content of the     dropdown list)",,,"[['\n    <html>', '<head>', '<script>', 'function showHint(str) {', '\xa0\xa0\xa0 \n    if (str.length == 0) { ', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n    document.getElementById(""txtHint"").innerHTML = """";', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n    return;', '\xa0\xa0\xa0 } else {', '\xa0\xa0\xa0 \xa0\xa0\xa0 var xmlhttp = new \n    XMLHttpRequest();', '\xa0\xa0\xa0 \xa0\xa0\xa0 xmlhttp.onreadystatechange = function() \n    {', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (this.readyState == 4 && \n    this.status == 200) {', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = \n    this.responseText;', '\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n    }', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 };', '\xa0\xa0\xa0 \xa0\xa0\xa0 xmlhttp.open(""GET"", ""gethint.asp?q="" + str, true);', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 xmlhttp.send();', '\xa0\xa0\xa0 \n    }', '}', '</script>', '</head>', '<body>', '<p><b>Start typing a name in the \n    input field below:</b></p>', '<form> ', 'First name: <input type=""text"" \n    onkeyup=""showHint(this.value)"">', '</form>', '<p>Suggestions: <span id=""txtHint""></span></p>', '\n    </body>', '</html>']]"
ASP Classic,ASP e-mail,https://www.w3schools.com/asp/asp_send_email.asp,"CDOSYS is a built-in component in ASP. This component is used to send e-mails with ASP.|||CDO (Collaboration Data Objects) is a Microsoft technology that is designed to simplify the creation of messaging applications.|||CDOSYS is a built-in component in ASP. We will show you how to use this component to send e-mail with ASP.|||Microsoft has discontinued the use of CDONTs on Windows 2000, Windows XP and Windows 2003. If you have used CDONTs in your ASP applications, you should update the code and use the new CDO technology.|||Sending a text e-mail:|||Sending a text e-mail with Bcc and CC fields:|||Sending an HTML e-mail:|||Sending an HTML e-mail that sends a webpage from a website:|||Sending an HTML e-mail that sends a webpage from a file on your computer:|||Sending a text e-mail with an Attachment:|||Sending a text e-mail using a remote server:",How about CDONTs?,,,,[]
ASP Classic,ASP Examples,https://www.w3schools.com/asp/asp_examples.asp,"ASP Output|||Writing plain textWriting HTML TagsWriting HTML attributes|||VbScript Variables|||Create a variableCreate a variable and change its valueInsert a variable value in a textCreate an array|||VBScript Looping|||For..Next loopLooping through HTML headersFor..Each loopDo...While loop|||VBScript Date and Time Functions|||Date and timeGet the name of a dayGet the name of a monthGet todays' day and monthCountdown to year 3000Calculate the day which is n days from todayFormat date and timeIs this a date?|||Some Other Built-in VBScript Functions|||Uppercase or lowercase a stringTrim a stringHow to reverse a string?How to round a number?A random numberReturn a random number between 0-99Return a specified number of characters from left/right of a stringReplace some characters in a stringReturn a specified number of characters from a string|||Procedures|||Sub procedureFunction procedure|||VBScript vs JavaScript|||Call a procedure using VBScript in ASPCall a procedure using JavaScript in ASPCall a JavaScript procedure and a VBScript procedure using VBScript in ASPTime-based greeting using VBScriptTime-based greeting using JavaScript|||VBScript Conditional Statements|||If...Then..Else statementIf...Then..ElseIf statementSelect Case statementRandom link|||ASP Forms|||Interact with a user in a form that uses the ""get"" methodInteract with a user in a form that uses the ""post"" methodInteract with a user in a  form with radio buttons|||ASP Cookies|||Create a welcome cookie|||ASP Response Object|||Write text using ASPFormat text with HTML tagsRedirect the user to another URLRandom linksControlling the bufferClear the bufferEnd a script in the middle of processingSet how many minutes a page will be cached in a browser before it expiresSet a date/time when a page cached in a browser will expireCheck if the user is still connectedSet the type of contentSet the name of character set|||ASP Request Object|||Send extra information within a linkA QueryString collection in its simplest useHow to use information from formsMore information from a formA form collection in its simplest useHow to use information from formsMore information from a formA form with radio buttonsA form with checkboxesHow to find the visitors' browser type, IP address and moreList all servervariables you can ask forWelcome cookieTotal number of bytes the user sent|||ASP Session Object|||Return session id number for a userGet a session's timeout|||ASP Server Object|||When was a file last modified?Open a textfile for readingHome made hit counter|||ASP FileSystem Object|||Does a specified file exist?Does a specified folder exist?Does a specified drive exist?Get the name of a specified driveGet the name of the parent folder of a specified pathGet the file extensionGet the base name of a file or folder|||ASP TextStream Object|||Read textfileRead only a part of a textfileRead one line of a textfileRead all lines from a textfileSkip a part of a textfileSkip a line of a textfileReturn current line-number in a text fileGet column number of the current character in a text file|||ASP Drive Object|||Get the available space of a specified driveGet the free space of a specified driveGet the total size of a specified driveGet the drive letter of a specified driveGet the drive type of a specified driveGet the file system of a specified driveIs the drive ready?Get the path of a specified driveGet the root folder of a specified driveGet the serial number of a specified drive|||ASP File Object|||When was the file created?When was the file last modified?When was the file last accessed?Return the attributes of a specified file|||ASP Dictionary Object|||Does a specified key exist?Return an array of all itemsReturn an array of all keysReturn the value of an itemSet a keyReturn the number of key/item pairs|||ASP AdRotator|||Display a different image each time a user visits a page|||ASP Browser Capabilities|||Find the type, capabilities, and version of each browser that visits your site|||ASP ContentRotator|||Display a different content each time a user visits a page (ASP 3.0)|||ASP Content Linking|||Build a table of contentsNavigate between pages in a text file|||ADO Display|||Display recordsDisplay records in an HTML tableAdd headers to the HTML tableAdd colors to the HTML table|||ADO Queries|||Display records where ""Companyname"" starts with an ADisplay records where ""Companyname"" is > EDisplay only Spanish customersLet the user choose filter|||ADO Sort|||Sort the records on a specified fieldname ascendingSort the records on a specified fieldname descendingLet the user choose what column to sort on|||ADO Recordset Object|||GetRowsGetString",,,,,[]
ASP Reference,ASP VB Functions,https://www.w3schools.com/asp/asp_ref_vbscript_functions.asp,This page contains all the built-in VBScript functions. The page is divided into following sections:,,Date/Time functions@@@Conversion functions@@@Format functions|||Math functions@@@Array functions|||String functions@@@Other functions,,"$$$&&&CDate|||Converts a valid date and time expression to the variant of 
    subtype Date&&&Date|||Returns the current system date&&&DateAdd|||Returns a date to which a specified time interval has been 
    added&&&DateDiff|||Returns the number of intervals between two dates&&&DatePart|||Returns the specified part of a given date&&&DateSerial|||Returns the date for a specified year, 
    month, and day&&&DateValue|||Returns a date&&&Day|||Returns a number  that represents the day 
    of the month (between 1 and 31, inclusive)&&&FormatDateTime|||Returns an expression formatted as a date or time&&&Hour|||Returns a number that 
    represents the hour of the day (between 0 and 23, inclusive)&&&IsDate|||Returns a Boolean value that indicates if the evaluated 
    expression can be converted to a date&&&Minute|||Returns a number that 
    represents the minute of the hour (between 0 and 59, inclusive)&&&Month|||Returns a number  that 
    represents the month of the year (between 1 and 12, inclusive)&&&MonthName|||Returns the name of a specified month&&&Now|||Returns the current system date and time&&&Second|||Returns a number that 
    represents the second of the minute (between 0 and 59, inclusive)&&&Time|||Returns the current 
    system time&&&Timer|||Returns the number of seconds since 12:00 
    AM&&&TimeSerial|||Returns the time for a 
    specific hour, minute, and second&&&TimeValue|||Returns a time&&&Weekday|||Returns a number that represents the day of the week 
    (between 1 and 7, inclusive)&&&WeekdayName|||Returns the weekday name of a specified day of the week&&&Year|||Returns a number that represents the year$$$&&&Asc|||Converts the first letter in a string to ANSI code&&&CBool|||Converts an expression to a variant of subtype Boolean&&&CByte|||Converts an expression to a variant of subtype Byte&&&CCur|||Converts an expression to a variant of subtype Currency&&&CDate|||Converts a valid date and time expression to the variant of 
    subtype Date&&&CDbl|||Converts an expression to a variant of subtype Double&&&Chr|||Converts the specified ANSI code to a character&&&CInt|||Converts an expression to a variant of subtype Integer&&&CLng|||Converts an expression to a variant of subtype Long&&&CSng|||Converts an expression to a variant of subtype Single&&&CStr|||Converts an expression to a variant of subtype String&&&Hex|||Returns the hexadecimal value of a specified number&&&Oct|||Returns the octal value of a specified number$$$&&&FormatCurrency|||Returns an expression formatted as a currency value&&&FormatDateTime|||Returns an expression formatted as a date or time&&&FormatNumber|||Returns an expression formatted as a number&&&FormatPercent|||Returns an expression formatted as a percentage$$$&&&Abs|||Returns the absolute value of a specified number&&&Atn|||Returns the arctangent of a specified number&&&Cos|||Returns the cosine of a specified number (angle)&&&Exp|||Returns e raised to 
    a power&&&Hex|||Returns the hexadecimal value of a 
    specified number&&&Int|||Returns the integer part of a specified number&&&Fix|||Returns the integer part of a specified number&&&Log|||Returns the natural logarithm of a specified number&&&Oct|||Returns the octal value of a specified number&&&Rnd|||Returns a random number less than 1 but greater or equal to 
    0&&&Sgn|||Returns an integer that indicates the sign of a specified number&&&Sin|||Returns the sine of a specified number (angle)&&&Sqr|||Returns the square root of a specified number&&&Tan|||Returns the tangent of a specified number (angle)$$$&&&Array|||Returns a variant containing an array&&&Filter|||Returns a zero-based array that contains a subset 
    of a string array based on a filter criteria&&&IsArray|||Returns a Boolean value that indicates whether a 
    specified variable is an array&&&Join|||Returns a string that consists of a number of substrings 
    in an array&&&LBound|||Returns the smallest subscript for 
    the indicated dimension of an array&&&Split|||Returns a zero-based, one-dimensional array that contains a 
    specified number of substrings&&&UBound|||Returns the largest subscript for the 
    indicated dimension of an array$$$&&&InStr|||Returns the position of the first occurrence of 
    one string within another. The search begins at the first character of the 
    string&&&InStrRev|||Returns the position of the first occurrence of one string 
    within another. The search begins at the last character of the string&&&LCase|||Converts a specified string to lowercase&&&Left|||Returns a specified number of characters from 
    the left side of a string&&&Len|||Returns the number of characters in a string&&&LTrim|||Removes spaces on the left side of a string&&&RTrim|||Removes spaces on the right side of a string&&&Trim|||Removes spaces on both the left and the right side of a 
    string&&&Mid|||Returns a specified number of characters from a 
    string&&&Replace|||Replaces a specified part of a string with another string a 
    specified number of times&&&Right|||Returns a specified number of characters from 
    the right side of a string&&&Space|||Returns a string that consists of a specified number of 
    spaces&&&StrComp|||Compares two strings and returns a value that represents 
    the result of the comparison&&&String|||Returns a string that contains a repeating character of a 
    specified length&&&StrReverse|||Reverses a string&&&UCase|||Converts a specified string to uppercase$$$CreateObject|||Creates an object of a specified type&&&Eval|||Evaluates an expression and returns the result&&&IsEmpty|||Returns a Boolean value that indicates whether a 
    specified variable has been initialized or not&&&IsNull|||Returns a Boolean value that indicates whether 
    a specified expression contains no valid data (Null)&&&IsNumeric|||Returns a Boolean value that indicates whether a specified 
    expression can be evaluated as a number&&&IsObject|||Returns a Boolean value that indicates whether the 
    specified expression is an automation object&&&RGB|||Returns a number that represents an RGB 
    color value&&&Round|||Rounds a number&&&ScriptEngine|||Returns the scripting 
    language in use&&&ScriptEngineBuildVersion|||Returns the build version number of the 
    scripting engine in use&&&ScriptEngineMajorVersion|||Returns the major version number of the 
    scripting engine in use&&&ScriptEngineMinorVersion|||Returns the minor version number of the 
    scripting engine in use&&&TypeName|||Returns the subtype 
    of a specified variable&&&VarType|||Returns a value that indicates the subtype of a specified 
    variable",[]
ASP Reference,ASP VB Keywords,https://www.w3schools.com/asp/asp_ref_vbscript_keywords.asp,"Used to indicate an uninitialized variable value. A     variable value is uninitialized when it is first created and no value is     assigned to it, or when a variable value is explicitly set to empty.|||Example:    Dim x       'the variable x is uninitialized!    x=""ff""   'the variable x is NOT uninitialized anymore    x=Empty   'the variable x is uninitialized!|||Note: This is not the same as Null!!|||Used to test if a variable is uninitialized.|||Example: If (IsEmpty(x)) 'is x uninitialized?|||Example:     Set myObject=Nothing|||Example: If (myObject Is Nothing) 'is it unset?|||Note: If you compare a value to Nothing, you will not get the     right result! Example: If (myObject = Nothing) 'always false!|||One way to think of Null is that someone has explicitly set the value to     ""invalid"", unlike Empty where the value is ""not set"".|||Note: This is not the same as Empty or Nothing!!|||Example: x=Null 'x contains no valid data|||Example: if (IsNull(x)) 'is x invalid?",,,,"Empty|||
Used to indicate an uninitialized variable value. A 
    variable value is uninitialized when it is first created and no value is 
    assigned to it, or when a variable value is explicitly set to empty.
Example:
    Dim x   
    'the variable x is uninitialized!
    x=""ff""   'the variable x is NOT uninitialized anymore
    x=Empty   'the variable x is uninitialized!
Note: This is not the same as Null!!&&&IsEmpty|||Used to test if a variable is uninitialized.
Example: If (IsEmpty(x)) 'is x uninitialized?&&&Nothing|||Used to indicate an uninitialized object value, or to 
    disassociate an object variable from an object to release system resources.Example: 
    Set myObject=Nothing&&&Is Nothing|||Used to test if a value is an initialized object.
    Example: If (myObject Is Nothing) 'is it unset?
Note: If you compare a value to Nothing, you will not get the 
    right result! Example: If (myObject = Nothing) 'always false!&&&Null|||Used to indicate that a variable contains no valid data.
    One way to think of Null is that someone has explicitly set the value to 
    ""invalid"", unlike Empty where the value is ""not set"".
Note: This is not the same as Empty or Nothing!!
Example: x=Null 'x contains no valid data&&&IsNull|||Used to test if a value contains invalid data.
    Example: if (IsNull(x)) 'is x invalid?&&&True|||Used to indicate a Boolean condition that is correct&&&False|||Used to indicate a Boolean condition that is not correct (False has a value of 0)",[]
ASP Reference,ASP Response,https://www.w3schools.com/asp/asp_ref_response.asp,"The ASP Response object is used to send output to the user from the server.|||Write text with ASPHow to write text with ASP.|||Format text with HTML tags in ASPHow to combine text and HTML tags with ASP.|||Redirect the user to a different URLHow to redirect the user to a different URL.|||Show a random linkHow to create a random link.|||Controlling the bufferHow to control the buffer.|||Clear the bufferHow to clear the buffer.|||End a script in the middle of processing and return the resultHow to end a script in the middle of processing.|||Set how many minutes a page will be cached in a browser before it expiresHow to specify how many minutes a page will be cachedin a browser before it expires.|||Set a date/time when a page cached in a browser will expireHow to specify a date/time a page cached in a browserwill expire.|||Check if the user is still connected to the serverHow to check if a user is disconnected from the server.|||Set the type of contentHow to specify the type of content.|||Set the name of the character setHow to specify the name of the character set.|||The ASP Response object is used to send output to the user from the server. Itscollections, properties, and methods are described below:",,,,"Cookies|||Sets a cookie value. If the cookie does not exist, it will be created,
      and take the value that is specified$$$&&&Buffer|||Specifies whether to buffer the page output or not&&&CacheControl|||Sets whether a proxy server can cache the output generated
      by ASP or not&&&Charset|||Appends the name of a character-set to the content-type
      header in the Response object&&&ContentType|||Sets the HTTP content type for the Response object&&&Expires|||Sets how long (in minutes) a page will be cached on a browser before it
      expires&&&ExpiresAbsolute|||Sets a date and time when a page cached on a browser will
      expire&&&IsClientConnected|||Indicates if the client has disconnected from the server&&&Pics|||Appends a value to the PICS label response header&&&Status|||Specifies the value of the status line returned by the
      server$$$AddHeader|||Adds a new HTTP header and a value to the HTTP response&&&AppendToLog|||Adds a string to the end of the server log entry&&&BinaryWrite|||Writes data directly to the output without any character conversion&&&Clear|||Clears any buffered HTML output&&&End|||Stops processing a script, and returns the current result&&&Flush|||Sends buffered HTML output immediately&&&Redirect|||Redirects the user to a different URL&&&Write|||Writes a specified string to the output",[]
ASP Reference,ASP Request,https://www.w3schools.com/asp/asp_ref_request.asp,"The Request object is used to get information from a visitor.|||Send query information when a user clicks on a linkHow to send query information to a page within a link, and retrieve that information on thedestination page (which is, in this example, the same page).|||A QueryString collection in its simplest useUse the QueryString collection to retrieve the values from a form (the form uses the get method - the information sent is visible to everybody).|||How to use information from formsHow to use the values retrieved from a form.|||More information from a formWhat the QueryString collection contains if several inputfields have equal names. It also shows how to use the Count keyword to count the ""name"" property.|||A form collection in its simplest useHow the Form collection retrieves the values from a form (the form uses the postmethod - the information sent is invisible to others).|||How to use information from formsHow to use the values retrieved from a form.|||More information from a formWhat the Form collection contains if severalinput fields have equal names. It also shows how to use the Count keyword to count the ""name"" property.|||A form with radio buttonsHow to interact with the user through radio buttons.|||A form with checkboxesHow to interact with the user through checkboxes.|||Get the server variablesHow to get the visitor's browser type, IP address, and more. |||Create a welcome cookieHow to create a Welcome Cookie.|||Find the total number of bytes the user sentHow to findthe total number of bytes the user sent in the Request object.|||When a browser asks for a page from a server, it is called a request. The Request object is used to get information from a visitor.Its collections, properties, and methods are described below:",,,,"ClientCertificate|||Contains all the field values stored in the client certificate&&&Cookies|||Contains all the cookie values sent in a HTTP request&&&Form|||Contains all the form (input) values from a form that uses the post
      method&&&QueryString|||Contains all the variable values in a HTTP query string&&&ServerVariables|||Contains all the server variable values$$$&&&TotalBytes|||Returns the total number of bytes the client sent in the
      body of the request$$$BinaryRead|||Retrieves the data sent to the server from the client as part of a
      post request and stores it in a safe array",[]
ASP Reference,ASP Application,https://www.w3schools.com/asp/asp_ref_application.asp,"A group of ASP files that work together to perform some purposeis called an application.The Application object is used to tie these files together.|||An application on the Web may consists of several ASP files that work together to perform some purpose.The Application object is used to tie these files together.|||The Application object is used to store and access variables from any page, just like the Session object. The differenceis that ALL users share ONE Application object (with Sessions there is ONE Session object for EACH user).|||The Application object holds information that will be used by many pages in the application (like database connection information).The information can be accessed from any page. The information can also be changed in one place, and the changes will automatically be reflectedon all pages.|||The Application object's collections, methods, and events are described below:",,,,"Contents|||Contains all the items appended to the application
      through a script command&&&StaticObjects|||Contains all the objects appended to the application with the HTML <object> tag$$$&&&Contents.Remove|||Deletes an item from the Contents collection&&&Contents.RemoveAll()|||Deletes all items from the Contents collection&&&Lock|||Prevents other users from modifying the variables in the
      Application object&&&Unlock|||Enables other users to modify the variables in the Application object
      (after it has been locked using the Lock method)$$$Application_OnEnd|||Occurs when all user sessions are over, and the application ends&&&Application_OnStart|||Occurs before the first new session is created (when the Application object is first referenced)",[]
ASP Reference,ASP Session,https://www.w3schools.com/asp/asp_ref_session.asp,"A Session object stores information about, or change settings for a user session.|||Set and return the LCIDSet or return an integer that specifies a location or region. Contents like date,time, and currency will be displayed according to that location or region.|||Return the SessionIDReturna unique id for each user. The id is generated by the server.|||A session's timeoutSet and return the timeout (in minutes) of a session.|||When you are working with an application on your computer, you open it, do some changes and thenyou close it. This is much like a Session. The computer knows who you are. Itknows when you open the application and when you close it. However, on the internet there is oneproblem: the web server does not know who you are and what you do, because the HTTP address doesn't maintain state. |||ASP solves this problem by creating a unique cookie for each user. The cookieis sent to the user's computer and it contains information that identifies the user. Thisinterface is called the Session object. |||The Session object stores information about, or change settings for a user session.|||Variables stored in a Session object hold information about one single user, and are available to all pages in one application. Common informationstored in session variables are name, id, and preferences. The server creates a new Session object for each new user, and destroys the Session object when the session expires. |||The Session object's collections, properties, methods, and events are described below:",,,,"Contents|||Contains all the items appended to the session through a script command&&&StaticObjects|||Contains all the objects appended to the session with the HTML
      <object> tag$$$&&&CodePage|||Specifies the character set that will be used when 
    displaying dynamic content&&&LCID|||Sets or returns an integer that specifies a location or
      region. Contents like date, time, and currency will be displayed according
      to that location or region&&&SessionID|||Returns a unique id for each user. The unique id is
      generated by the server&&&Timeout|||Sets or returns the timeout period (in minutes) for the
      Session object in this application$$$&&&Abandon|||Destroys a user session&&&Contents.Remove|||Deletes an item from the Contents collection&&&Contents.RemoveAll()|||Deletes all items from the Contents collection$$$Session_OnEnd|||Occurs when a session ends&&&Session_OnStart|||Occurs when a session starts ",[]
ASP Reference,ASP Server,https://www.w3schools.com/asp/asp_ref_server.asp,"The Server object is used to access properties and methods on the server.|||When was a file last modified?Check when a file was last modified.|||Open a text file for readingOpen ""Textfile.txt"" for reading.|||Homemade hit counter|||The ASP Server object is used to access properties and methods on the server. Its properties and methods are described below:",,,,"ScriptTimeout|||Sets or returns the maximum number of seconds a script can run before it is
      terminated$$$CreateObject|||Creates an instance of an object&&&Execute|||Executes an ASP file from inside another ASP file&&&GetLastError()|||Returns an ASPError object that describes the error condition that
      occurred&&&HTMLEncode|||Applies HTML encoding to a specified string&&&MapPath|||Maps a specified path to a physical path&&&Transfer|||Sends (transfers) all the information created in one ASP file to a second
      ASP file&&&URLEncode|||Applies URL encoding rules to a specified string",[]
ASP Reference,ASP Error,https://www.w3schools.com/asp/asp_ref_error.asp,"The ASPError object displays information about errors in scripts.|||The ASPError object was implemented in ASP 3.0 and is available in IIS5 and later.|||The ASPError object is used to display detailed information of any error that occursin scripts in an ASP page.|||Note: The ASPError object is created when Server.GetLastError iscalled, so the error information can only be accessed by using the Server.GetLastError method.|||The ASPError object's properties are described below (all properties are read-only):",,,,ASPCode|||Returns an error code generated by IIS&&&ASPDescription|||Returns a detailed description of the error (if the error is ASP-related)&&&Category|||Returns the source of the error (was the error generated by ASP? By a scripting language? By an object?)&&&Column|||Returns the column position within the file that generated the error&&&Description|||Returns a short description of the error&&&File|||Returns the name of the ASP file that generated the error&&&Line|||Returns the line number where the error was detected&&&Number|||Returns the standard COM error code for the error&&&Source|||Returns the actual source code of the line where the error occurred,[]
ASP Reference,ASP FileSystem,https://www.w3schools.com/asp/asp_ref_filesystem.asp,"The FileSystemObject object is used to access the file system on a server.|||Does a specified file exist?How to check if a file exists.|||Does a specified folder exist?How to check if a folder exists.|||Does a specified drive exist?How to check if a drive exists.|||Get the name of a specified driveHow to get the name of a specified drive.|||Get the name of the parent folder of a specified pathHow to get the name of the parent folder of a specified path.|||Get file nameHow to get the file name of the last component in a specified path.|||Get the file extensionHow to get the file extension of the last component in a specified path.|||Get the base name of a file or folderHow to get the base name of a file or folder, in a specified path.|||The FileSystemObject object is used to access the file system on a server.|||This object can manipulate files, folders, and directory paths. It is alsopossible to retrieve file system information with this object.|||The following code creates a text file (c:\test.txt) and then writes some text tothe file:",,,,"Drives|||Returns a collection of all Drive objects on the computer$$$BuildPath|||Appends a name to an existing path&&&CopyFile|||Copies one or more files from one location to another&&&CopyFolder|||Copies one or more folders from one location to another&&&CreateFolder|||Creates a new folder&&&CreateTextFile|||Creates a text file and returns a TextStream object that
      can be used to read from, or write to the file&&&DeleteFile|||Deletes one or more specified files&&&DeleteFolder|||Deletes one or more specified folders&&&DriveExists|||Checks if a specified drive exists&&&FileExists|||Checks if a specified file exists&&&FolderExists|||Checks if a specified folder exists&&&GetAbsolutePathName|||Returns the complete path from the root of the drive for
      the specified path&&&GetBaseName|||Returns the base name of a specified file or folder&&&GetDrive|||Returns a Drive object corresponding to the drive in a specified
      path&&&GetDriveName|||Returns the drive name of a specified path&&&GetExtensionName|||Returns the file extension name for the last component in a
      specified path&&&GetFile|||Returns a File object for a specified path&&&GetFileName|||Returns the file name or folder name for the last component in a
      specified path&&&GetFolder|||Returns a Folder object for a specified path&&&GetParentFolderName|||Returns the name of the parent folder of the last component in
      a specified path&&&GetSpecialFolder|||Returns the path to some of Windows' special folders&&&GetTempName|||Returns a randomly generated temporary file or folder&&&MoveFile|||Moves one or more files from one location to another&&&MoveFolder|||Moves one or more folders from one location to another&&&OpenTextFile|||Opens a file and returns a TextStream object that can be used to access the
      file",[]
ASP Reference,ASP TextStream,https://www.w3schools.com/asp/asp_ref_textstream.asp,"The TextStream object is used to access the contents of a text file.|||Read textfileHow to read from a text file.|||Read only a part of a textfileHow to only read a part of a TextStream file.|||Read one line of a textfileHow to read one line from a TextStream file.|||Read all lines from a textfileHow to read all the lines from a TextStream file.|||Skip a part of a textfileHow to skip a specified number of characters when reading the TextStream file.|||Skip a line of a textfileHow to skip a line when reading the TextStream file.|||Return line-numberHow to return the current line number in a TextStream file.|||Get column numberHow to get the column number of the current character in a file.|||The TextStream object is used to access the contents of text files.|||The following code creates a text file (c:\test.txt) and then writes some textto the file (the variable f is an instance of the TextStream object):|||To create an instance of the TextStream object you can use the CreateTextFile or OpenTextFile methods of the FileSystemObject object,or you can use the OpenAsTextStream method of the File object.The TextStream object's properties and methods are described below:PropertiesPropertyDescriptionAtEndOfLineReturns true if the file pointer is positioned immediately      before the end-of-line marker in a TextStream file, and false if notAtEndOfStreamReturns true if the file pointer is at the end of a      TextStream file, and false if notColumnReturns the column number of the current character position      in an input streamLineReturns the current line number in a TextStream fileMethodsMethodDescriptionCloseCloses an open TextStream fileReadReads a specified number of characters from a TextStream      file and returns the resultReadAllReads an entire TextStream file and returns the resultReadLineReads one line from a TextStream file and returns the resultSkipSkips a specified number of characters when reading a TextStream fileSkipLineSkips the next line when reading a TextStream fileWriteWrites a specified text to a TextStream fileWriteLineWrites a specified text and a new-line character to a TextStream fileWriteBlankLinesWrites a specified number of new-line character to a TextStream file❮ PreviousNext ❯|||The TextStream object's properties and methods are described below:",,,,"AtEndOfLine|||Returns true if the file pointer is positioned immediately
      before the end-of-line marker in a TextStream file, and false if not&&&AtEndOfStream|||Returns true if the file pointer is at the end of a
      TextStream file, and false if not&&&Column|||Returns the column number of the current character position
      in an input stream&&&Line|||Returns the current line number in a TextStream file$$$Close|||Closes an open TextStream file&&&Read|||Reads a specified number of characters from a TextStream
      file and returns the result&&&ReadAll|||Reads an entire TextStream file and returns the result&&&ReadLine|||Reads one line from a TextStream file and returns the result&&&Skip|||Skips a specified number of characters when reading a TextStream file&&&SkipLine|||Skips the next line when reading a TextStream file&&&Write|||Writes a specified text to a TextStream file&&&WriteLine|||Writes a specified text and a new-line character to a TextStream file&&&WriteBlankLines|||Writes a specified number of new-line character to a TextStream file",[]
ASP Reference,ASP Drive,https://www.w3schools.com/asp/asp_ref_drive.asp,"The Drive object is used to get information about a local disk drive or a network share.|||Get the total size of a specified driveHow to get the total size of a specified drive.|||Get the available space of a specified driveHow to get the available space of a specified drive.|||Get the free space of a specified driveHow to get the free space of a specified drive.|||Get the drive letter of a specified driveHow to get the drive letter of a specified drive.|||Get the drive type of a specified driveHow to get the drive type of a specified drive.|||Get the file system of a specified driveHow to get the file system of a specified drive.|||Is the drive ready?How to check whether a specified drive is ready.|||Get the path of a specified driveHow to get the path of a specified drive.|||Get the root folder of a specified driveHow to get the root folder of a specified drive.|||Get the serialnumber of a specified driveHow to get the serialnumber of a specified drive.|||The Drive object is used to return information about a local disk drive or a network share.The Drive object can return information about a drive's type of file system, free space,serial number, volume name, and more.|||Note: You cannot return information about a drive's content with theDrive object. For this purpose you will have to use the Folder object.|||To work with the properties of the Drive object, you will have to create an instance of the Drive object through the FileSystemObjectobject. First; create a FileSystemObject object and then instantiate the Drive object through the GetDrive method orthe Drives property of the FileSystemObject object.|||The Drive object's properties are described below:",,,,"AvailableSpace|||Returns the amount of available space to a user on a
      specified drive or network share&&&DriveLetter|||Returns one uppercase letter that identifies the local
      drive or a network share&&&DriveType|||Returns the type of a specified drive&&&FileSystem|||Returns the file system in use for a specified drive&&&FreeSpace|||Returns the amount of free space to a user on a
      specified drive or network share&&&IsReady|||Returns true if the specified drive is ready and false if
      not&&&Path|||Returns an uppercase letter followed by a colon that
      indicates the path name for a specified drive&&&RootFolder|||Returns a Folder object that represents the root folder of a specified
      drive&&&SerialNumber|||Returns the serial number of a specified drive&&&ShareName|||Returns the network share name for a specified drive&&&TotalSize|||Returns the total size of a specified drive or network
      share&&&VolumeName|||Sets or returns the volume name of a specified drive",[]
ASP Reference,ASP File,https://www.w3schools.com/asp/asp_ref_file.asp,"The File object is used to return information about a specified file.|||When was the file last modified?How to get the date and time a specified file was last modified.|||When was the file last accessed?How to get the date and time a specified file was last accessed.|||Return the attributes of a specified fileHow to return the attributes of a specified file.|||The File object is used to return information about a specified file.|||To work with the properties and methods of the File object, you will have to create an instance ofthe File object through the FileSystemObject object. First; create a FileSystemObjectobject and then instantiate the File object through the GetFile method of theFileSystemObject object or through the Files property of the Folder object.|||The following code uses the GetFile method of the FileSystemObject object toinstantiate the File object and the DateCreated property to return the date whenthe specified file was created:|||The File object's properties and methods are described below:",,,,"Attributes|||Sets or returns the attributes of a specified file&&&DateCreated|||Returns the date and time when a specified file was created&&&DateLastAccessed|||Returns the date and time when a specified file was last accessed&&&DateLastModified|||Returns the date and time when a specified file was last modified&&&Drive|||Returns the drive letter of the drive where a specified 
    file or folder resides&&&Name|||Sets or returns the name of a specified file&&&ParentFolder|||Returns the folder object for the parent of the specified 
    file&&&Path|||Returns the path for a specified file&&&ShortName|||Returns the short name of a specified file (the 8.3 naming convention)&&&ShortPath|||Returns the short path of a specified file (the 8.3 naming convention)&&&Size|||Returns the size, in bytes, of a specified file&&&Type|||Returns the type of a specified file$$$Copy|||Copies a specified file from one location to another&&&Delete|||Deletes a specified file&&&Move|||Moves a specified file from one location to another&&&OpenAsTextStream |||Opens a specified file and returns a TextStream object to access
      the file","[['\n<%', '\nDim fs,f', '\nSet fs=Server.CreateObject(""Scripting.FileSystemObject"")', '\nSet f=fs.GetFile(""c:\\test.txt"")', '\nResponse.Write(""File created: "" & f.DateCreated)', '\nset f=nothing', '\nset fs=nothing', '\n%>']]"
ASP Reference,ASP Folder,https://www.w3schools.com/asp/asp_ref_folder.asp,"The Folder Object is used to return information about a specified folder.|||The Folder object is used to return information about a specified folder.|||To work with the properties and methods of the Folder object, you will have to create an instance of the Folder object through the FileSystemObject object. First; create a FileSystemObjectobject and then instantiate the Folder object through the GetFolder method of the FileSystemObject object.|||The following code uses the GetFolder method of the FileSystemObject object to instantiate the Folder objectand the DateCreated property to return the date when the specified folder was created:|||The Folder object's collections, properties, and methods are described below: ",,,,"Files|||Returns a collection of all the files in a
      specified folder&&&SubFolders|||Returns a collection of all subfolders in a specified folder$$$&&&Attributes|||Sets or returns the attributes of a specified folder&&&DateCreated|||Returns the date and time when a specified folder was created&&&DateLastAccessed|||Returns the date and time when a specified folder was last accessed&&&DateLastModified|||Returns the date and time when a specified folder was last modified&&&Drive|||Returns the drive letter of the drive where the specified 
    folder resides&&&IsRootFolder|||Returns true if a folder is the root
      folder and false if not&&&Name|||Sets or returns the name of a specified folder&&&ParentFolder|||Returns the parent folder of a specified folder&&&Path|||Returns the path for a specified folder&&&ShortName|||Returns the short name of a specified folder (the 8.3 naming convention)&&&ShortPath|||Returns the short path of a specified folder (the 8.3 naming convention)&&&Size|||Returns the size of a specified folder&&&Type|||Returns the type of a specified folder$$$Copy|||Copies a specified folder from one location to another&&&Delete|||Deletes a specified folder&&&Move|||Moves a specified folder from one location to another&&&CreateTextFile|||Creates a new text file in the specified folder and returns a TextStream object to
      access the
      file",[]
ASP Reference,ASP Dictionary,https://www.w3schools.com/asp/asp_ref_dictionary.asp,"The Dictionary object stores information in name/value pairs.|||Does a specified key exist?How to create a Dictionary object, and then use the Exists method to check if a specified key exists.|||Return an array of all itemsHow to use the Items method to return an array of all the items.|||Return an array of all keysHow to use the Keys method to return an array of all the keys.|||Return the value of an itemHow to use the Item property to return the value of an item.|||Set a keyHow to use the Key property to set a key in a Dictionary object.|||Return the number of key/item pairsHow to use the Count property to return the number of key/item pairs.|||The Dictionary object is used to store information in name/value pairs (referred to as key and item). The Dictionary object might seem similar to Arrays, however, the Dictionary object is a more desirable solution to manipulate related data.|||Comparing Dictionaries and Arrays:|||The following example creates a Dictionary object, adds some key/item pairs to it, and retrieves the item value for the key gr:|||The Dictionary object's properties and methods are described below: ",,"Keys are used to identify the items in a Dictionary object@@@You do not have to call ReDim to change the size of the Dictionary object@@@When deleting an item from a Dictionary, the remaining items will   automatically shift up@@@Dictionaries cannot be multidimensional, Arrays can@@@Dictionaries have more built-in functions than Arrays@@@Dictionaries work better than arrays on accessing random elements frequently@@@Dictionaries work better than arrays on locating items by their content",,"CompareMode|||Sets or returns the comparison mode for comparing keys in a Dictionary 
    object&&&Count|||Returns the number of key/item pairs in a Dictionary object&&&Item|||Sets or returns the value of an item in a Dictionary object&&&Key|||Sets a new key value for an existing key value in a 
    Dictionary object$$$Add|||Adds a new key/item pair to a Dictionary object&&&Exists|||Returns a Boolean value that indicates whether a specified key exists in 
    the Dictionary object&&&Items|||Returns an array of all the items in a Dictionary
      object&&&Keys|||Returns an array of all the keys in a Dictionary
      object&&&Remove|||Removes one specified key/item pair from the Dictionary 
    object&&&RemoveAll|||Removes all the key/item pairs in the Dictionary object",[]
ASP Reference,ASP AdRotator,https://www.w3schools.com/asp/asp_adrotator.asp,"The ASP AdRotator component creates an AdRotator object that displays a different image each time a user enters or refreshes a page. Atext file includes information about the images.|||Note: The AdRotator does not work with Internet Information Server 7 (IIS7).|||Assume that we have the following text file, named ""ads.txt"":|||The lines below the asterisk in the text file above specifies the name of the images (ads) to be displayed, thehyperlink addresses, the alternate text (for the images), and the display rates (in percent).|||The first line in the text file above specifies what to happen when a visitor clicks on one of the images.The redirection page (banners.asp) will receive a querystring with the URL to redirect to.|||Tip: To specify the height, width, and border of the image, you can insert the following lines under REDIRECT:|||The ""banners.asp"" file looks like this:|||That's all!!",,,,"Border|||Specifies the size of the borders around the advertisement|||<%
    set adrot=Server.CreateObject(""MSWC.AdRotator"")
    adrot.Border=""2""
    Response.Write(adrot.GetAdvertisement(""ads.txt""))
    %>&&&Clickable|||Specifies whether the advertisement is a hyperlink|||<%
    set adrot=Server.CreateObject(""MSWC.AdRotator"")
    adrot.Clickable=false
    Response.Write(adrot.GetAdvertisement(""ads.txt""))
    %>&&&TargetFrame|||Name of the frame to display the advertisement|||<%
    set adrot=Server.CreateObject(""MSWC.AdRotator"")
    adrot.TargetFrame=""target='_blank'""
    Response.Write(adrot.GetAdvertisement(""ads.txt""))
    %>$$$GetAdvertisement|||Returns HTML that displays the advertisement in the page|||<%
    set adrot=Server.CreateObject(""MSWC.AdRotator"")
    Response.Write(adrot.GetAdvertisement(""ads.txt""))
    %>","[['\n<%', '\nurl=Request.QueryString(""url"")', '\nIf url<>"""" then Response.Redirect(url)', '\n%>', '\n', '\n    <!DOCTYPE html>', '<html>', '\n<body>', '\n<%', '\nset adrotator=Server.CreateObject(""MSWC.AdRotator"")', '\nresponse.write(adrotator.GetAdvertisement(""textfile.txt""))', '\n%>', '\n</body>', '\n</html>\n']]"
ASP Reference,ASP BrowserCap,https://www.w3schools.com/asp/asp_browser.asp,"The ASP Browser Capabilities component creates a BrowserType object that determines the type, capabilities and version number of a visitor's browser.|||When a browser connects to a server, a User Agent header is also sent to the server. This header contains information about the browser.|||The BrowserType object compares the information in the header with information in a file on the server called ""Browscap.ini"".|||If there is a match between the browser type and version number in the header and the information in the ""Browscap.ini"" file, the BrowserType object can be used to list the properties of the matching browser. If there is no match for the browser type and version number in the Browscap.ini file, it will set every property to ""UNKNOWN"".|||The example below creates a BrowserType object in an ASP file, and displays  some of the capabilities of your browser:|||Output:|||Show Example »|||The ""Browscap.ini"" file is used to declare properties and to set default values for browsers.|||This section is not a tutorial on how to maintain ""Browscap.ini"" files, it only shows you the basics;so you get an idea what the file is all about.|||The ""Browscap.ini"" file can contain the following:|||A ""Browscap.ini"" file might look something like this:",The Browscap.ini File,ActiveXControls - Support ActiveX controls?@@@Backgroundsounds - Support background sounds?@@@Cdf - Support Channel Definition Format for Webcasting?@@@Tables - Support tables?@@@Cookies - Support cookies?@@@Frames - Support frames?@@@Javaapplets - Support Java applets?@@@Javascript - Supports JScript?@@@Vbscript - Supports VBScript?@@@Browser - Specifies the name of the browser@@@Beta - Is the browser beta software?@@@Platform - Specifies the platform that the browser runs on@@@Version - Specifies the version number of the browser,,"Web Browser|||IE&&&Browser version|||5.0&&&Frame support?|||True&&&Table support?|||True&&&Sound support?|||True&&&Cookies support?|||True&&&VBScript support?|||True&&&JavaScript support?|||True$$$comments|||Optional. Any line that starts with a semicolon are ignored by the BrowserType object&&&HTTPUserAgentHeader|||Optional. Specifies the HTTP User Agent header to associate with the 
    browser-property value statements specified in propertyN. Wildcard characters are allowed&&&browserDefinition|||Optional. Specifies the HTTP User Agent header-string of a browser to 
    use as the parent browser. The current browser's definition will inherit all 
    of the property values declared in the parent browser's definition&&&propertyN|||Optional. Specifies the browser properties. The following table lists some possible properties:
ActiveXControls - Support ActiveX controls?
Backgroundsounds - Support background sounds?
Cdf - Support Channel Definition Format for Webcasting?
Tables - Support tables?
Cookies - Support cookies?
Frames - Support frames?
Javaapplets - Support Java applets?
Javascript - Supports JScript?
Vbscript - Supports VBScript?
Browser - Specifies the name of the browser
Beta - Is the browser beta software?
Platform - Specifies the platform that the browser runs on
Version - Specifies the version number of the browser

&&&valueN|||Optional. Specifies the value of propertyN. Can be a string, an integer (prefix with #), or a Boolean value&&&defaultPropertyN|||Optional. Specifies the name of the browser property to 
    which to assign a default value if none of the defined HTTPUserAgentHeader 
    values match the HTTP User Agent header sent by the browser&&&defaultValueN|||Optional. Specifies the value of defaultPropertyN. Can be a string, an integer (prefix with #), or a Boolean value","[['\n    <!DOCTYPE html>', '<html>', '\n<body>', '\n<%', '\nSet MyBrow=Server.CreateObject(""MSWC.BrowserType"")', '\n%>', '\n', '\n<table border=""0"" width=""100%"">', '\n<tr>', '\n<th>Client OS</th><th><%=MyBrow.platform%></th>', '\n</tr><tr>', '\n<td >Web Browser</td><td ><%=MyBrow.browser%></td>', '\n</tr><tr>', '\n<td>Browser version</td><td><%=MyBrow.version%></td>', '\n</tr><tr>', '\n<td>Frame support?</td><td><%=MyBrow.frames%></td>', '\n</tr><tr>', '\n<td>Table support?</td><td><%=MyBrow.tables%></td>', '\n</tr><tr>', '\n<td>Sound support?</td><td><%=MyBrow.backgroundsounds%></td>', '\n</tr><tr>', '\n<td>Cookies support?</td><td><%=MyBrow.cookies%></td>', '\n</tr><tr>', '\n<td>VBScript support?</td><td><%=MyBrow.vbscript%></td>', '\n</tr><tr>', '\n<td>JavaScript support?</td><td><%=MyBrow.javascript%></td>', '\n</tr>', '\n</table>', '\n', '\n</body>', '\n</html>\n']]"
ASP Reference,ASP Content Linking,https://www.w3schools.com/asp/asp_contentlinking.asp,"The Content Linking ComponentBuild a table of contents.|||The Content Linking Component 2Use the Content Linking Component to navigate between the pages in a text file.|||The ASP Content Linking component is used to create a quick and easy navigation system!|||The Content Linking component returns a Nextlink object that is used to hold a list of Web pages to be navigated.|||First we create a text file - ""links.txt"":|||The text file above contains the pages to be navigated. The pages must be listed in the same order you want them to be displayed, and it must also contain a description for each file name (use the tab key to separate file name from description).|||Note: If you want to add a page, or change the order of the pages in the list; you only have to modify the text file! The navigation will automatically be corrected!|||Then we create an include file, ""nlcode.inc"". The .inc file creates a NextLink object to navigate between the pages listed in ""links.txt"".|||""nlcode.inc"":|||In each of the .asp pages listed in the text file ""links.txt"", put one line of code: <!-- #include file=""nlcode.inc""-->. This line will include the code in""nlcode.inc"" on every page listed in ""links.txt"" and the navigation will work.|||Output:|||There are 4 items in the list|||Output:|||Item number 3|||Next description is: ASP Variables|||Next URL is: asp_variables.asp|||Third description is: ASP Variables|||Third URL is: asp_variables.asp|||Previous description is: ASP Variables|||Previous URL is: asp_variables.asp",,,,"GetListCount||| Returns the number of items listed in the Content Linking List file||| <%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetListCount(""links.txt"") 
    Response.Write(""There are "")
    Response.Write(c)
    Response.Write("" items in the list"")
    %>Output:
There are 4 items in the list&&&GetListIndex||| Returns the index number of the current item in the Content Linking 
    List file. The index number of the first item is 1. 0 is returned if the 
    current page is not in the Content Linking List file||| <%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetListIndex(""links.txt"") 
    Response.Write(""Item number "")
    Response.Write(c)
    %>Output:
Item number 3&&&GetNextDescription||| Returns the text description of the next item listed in the Content 
    Linking List file. If the current page is not found in the list file it 
    returns the text description of the last page on the list||| <%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetNextDescription(""links.txt"") 
    Response.Write(""Next "")
    Response.Write(""description is: "")
    Response.Write(c)
    %>Next description is: ASP Variables&&&GetNextURL|||Returns the URL of the next item listed in the Content Linking List 
    file. If the current page is not found in the list file it returns the URL 
    of the last page on the list|||<%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetNextURL(""links.txt"") 
    Response.Write(""Next "")
    Response.Write(""URL is: "")
    Response.Write(c)
    %>Next URL is: asp_variables.asp&&&GetNthDescription||| Returns the description of the Nth page listed in the Content Linking 
    List file||| <%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetNthDescription(""links.txt"",3) 
    Response.Write(""Third "")
    Response.Write(""description is: "")
    Response.Write(c)
    %>Third description is: ASP Variables&&&GetNthURL|||Returns the URL of the Nth page listed in the Content Linking List file|||<%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetNthURL(""links.txt"",3) 
    Response.Write(""Third "")
    Response.Write(""URL is: "")
    Response.Write(c)
    %>Third URL is: asp_variables.asp&&&GetPreviousDescription||| Returns the text description of the previous item listed in the Content 
    Linking List file. If the current page is not found in the list file it 
    returns the text description of the first page on the list||| <%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetPreviousDescription(""links.txt"") 
    Response.Write(""Previous "")
    Response.Write(""description is: "")
    Response.Write(c)
    %>Previous description is: ASP Variables&&&GetPreviousURL||| Returns the URL of the previous item listed in the Content Linking List 
    file. If the current page is not found in the list file it returns the URL 
    of the first page on the list||| <%
    dim nl,c
    Set nl=Server.CreateObject(""MSWC.NextLink"") 
    c=nl.GetPreviousURL(""links.txt"") 
    Response.Write(""Previous "")
    Response.Write(""URL is: "")
    Response.Write(c)
    %>Previous URL is: asp_variables.asp",[]
ASP Reference,ASP Content Rotator,https://www.w3schools.com/asp/asp_contentrotator.asp,"The ASP Content Rotator component creates a ContentRotator object that displays adifferent content string each time a visitor enters or refreshes a page.|||Atext file, called the Content Schedule File, includes the information about the content strings.|||The content strings can contain HTML tags so you can display any type of content that HTML can represent: text, images, colors, or hyperlinks.|||The following example displays a different content each time a visitor views the Web page.|||First, create a text file named ""textads.txt"" and place it in a subfolder called ""text"".|||""textads.txt"":|||Notice the #number at the beginning of each content string. This number is an optional parameter that indicates the relative weight of the HTML content string. In the text file above, the Content Rotator will display the first and second content string three-tenth of the time, and the third string four-tenths of the time.|||Then, create an ASP file, and insert the following code:|||Output:|||Output:||||||Visit W3Schools.com",,,,"ChooseContent|||Gets and displays a content string|||<%
    dim cr
    Set cr=Server.CreateObject(""MSWC.ContentRotator"") 
      response.write(cr.ChooseContent(""text/textads.txt""))
    %>Output:

&&&GetAllContent||| Retrieves and displays all of the content strings in the text file||| <%
    dim cr
    Set cr=Server.CreateObject(""MSWC.ContentRotator"") 
      response.write(cr.GetAllContent(""text/textads.txt""))
    %>
    Output:
This is a great day!!

Visit W3Schools.com","[['\n<html>', '\n<body>', '\n<%', '\nset cr=server.createobject(""MSWC.ContentRotator"")', '\nresponse.write(cr.ChooseContent(""text/textads.txt""))', '\n%>', '\n</body>', '\n</html>\n']]"
ASP Reference,ASP Quick Ref,https://www.w3schools.com/asp/asp_quickref.asp,"ASP Quick Reference from W3Schools. Print it, and fold it in your pocket.|||ASP scripts are surrounded by <% and %>.  To write some output to a browser:|||<html><body><%response.write(""Hello World!"")%></body></html>|||The default language in ASP is VBScript. To use another scripting language, insert a language specification at the top of the ASP page:|||<%@ language=""javascript"" %><html><body>|||<%....%>|||Request.QueryString is used to collect values in a form with method=""get"". Information sent from a form with the GET method is visible to everyone (it will be displayed in the browser's address bar) and has limits on the amount of information to send.|||Request.Form is used to collect values in a form with method=""post"". Information sent from a form with the POST method is invisible to others and has no limits on the amount of information to send.|||A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests for a page with a browser, it will send the cookie too.|||The Response.Cookies command is used to create cookies:|||<%Response.Cookies(""firstname"")=""Alex""Response.Cookies(""firstname"").Expires=""May 10,2002""%>|||Note: The Response.Cookies command must appear BEFORE the <html> tag!|||The ""Request.Cookies"" command is used to retrieve a cookie value:|||<%fname=Request.Cookies(""firstname"")response.write(""Firstname="" & fname)%>||| You can insert the content of one ASP file into another ASP file before the server executes it, with the #include directive. The #include directive is used to create functions, headers, footers, or elements that will be reused on multiple pages|||Syntax:|||<!--#include virtual=""somefile.inc""-->or<!--#include file =""somefile.inc""-->|||Use the virtual keyword to indicate a path beginning with a virtual directory. If a file named ""header.inc"" resides in a virtual directory named /html, the following line would insert the contents of ""header.inc"":|||<!-- #include virtual =""/html/header.inc"" -->|||Use the file keyword to indicate a relative path. A relative path begins with the directory that contains the including file. If you have a file in the html directory, and the file ""header.inc"" resides in html\headers, the following line would insert ""header.inc"" in your file:|||<!-- #include file =""headers\header.inc"" -->|||Use the file keyword with the syntax (..\) to include a file from a higher-level directory.|||The Global.asa file is an optional file that can contain declarations of objects, variables, and methods that can be accessed by every page in an ASP application.||| Note: The Global.asa file must be stored in theroot directory of the ASP application, and each application can only have oneGlobal.asa file.|||The Global.asa file can contain only the following:|||Application and Session Events|||In Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when the application/session ends. The code for this is placed in event handlers. Note: We do not use<% and %>, toinsert scripts in the Global.asa file, we have to put the subroutines inside theHTML <script> tag:|||<script language=""vbscript"" runat=""server""> sub Application_OnStart   ' some code end sub sub Application_OnEnd   ' some code end sub sub Session_OnStart   ' some code end sub sub Session_OnEnd   ' some code end sub </script>|||<object> Declarations|||It is also possible to create objects with session or application scope in  Global.asa by using the <object> tag. Note: The <object> tag should be  outside the <script> tag!|||Syntax:|||<object runat=""server"" scope=""scope"" id=""id"" {progid=""progID""|classid=""classID""}> ....... </object>|||TypeLibrary Declarations|||A TypeLibrary is a container for the contents of a DLL file corresponding to  a COM object. By including a call to the TypeLibrary in the Global.asa file,  the constants of the COM object can be accessed, and errors can be better  reported by the ASP code. If your Web application relies on COM objects that  have declared data types in type libraries, you can declare the type libraries  in Global.asa.|||Syntax:||| <!--METADATA TYPE=""TypeLib"" file=""filename"" uuid=""typelibraryuuid"" version=""versionnumber"" lcid=""localeid"" -->|||The Session object is used to store information about, or change settings for a user session. Variables stored in the Session object hold information about one single user, and are available to all pages in one application.|||Collections|||Properties|||Method|||A group of ASP files that work together to perform some  purpose is called an application. The Application object in ASP is used to tie  these files together. All users share one Application object. The Application objectshould hold information that will be used by many pages in the application (likedatabase connection information).|||Collections|||Methods|||The Response Object is used to send output to the user from the server.|||Collection|||Properties|||Methods|||When a browser asks for a page from a server, it is called a request. TheRequest Object is used to get information from the user.|||Collection|||Property|||Method|||The Server Object is used to access properties and methods on the server.|||Property|||Method|||Source : https://www.w3schools.com/asp/asp_quickref.asp",,"Application events @@@Session events @@@<object> declarations  @@@TypeLibrary declarations @@@the #include directive|||Contents - Holds every item added to the session with script commands@@@StaticObjects - Holds every object added to the session with the <object> tag, and a given session@@@Contents.Remove(item/index) - Deletes an item from the Contents collection@@@Contents.RemoveAll() - Deletes every item from the Contents collection|||CodePage - Sets the code page that will be used to display dynamic content@@@LCID - Sets the locale identifier that will be used to display dynamic content@@@SessionID - Returns the session id@@@Timeout - Sets the timeout for the session|||Abandon - Kills every object in a session object|||Contents - Holds every item added to the application with script commands@@@StaticObjects - Holds every object added to the application with the <object>tag@@@Contents.Remove - Deletes an item from a collection@@@Contents.RemoveAll - Deletes every item from a collection|||Lock - Prevents a user from changing the application object properties@@@Unlock - Allows a user to change the application object properties|||Cookies(name) - Sets a cookie value. If the cookie does not exist, it will    be created, and take the value that is specified|||Buffer - Whether to buffer the output or not. When the output is buffered,    the server will hold back the response until all of the server scripts have    been processed, or until the script calls the Flush or End method. If this    property is set, it should be before the <html> tag in the ASP file@@@CacheControl - Sets whether proxy servers can cache the output or not.    When set to Public, the output can be cached by a proxy server@@@Charset(charset_name) - Sets the name of the character set (like    ""ISO8859-1"") to the content type header@@@ContentType - Sets the HTTP content type (like ""text/html"",    ""image/gif"", ""image/jpeg"", ""text/plain""). Default    is ""text/html""@@@Expires - Sets how long a page will be cached on a browser before it    expires@@@ExpiresAbsolute - Sets a date and time when a page cached on a browser    will expire@@@IsClientConnected - Checks if the client is still connected to the server@@@Pics(pics_label) - Adds a value to the pics label response header@@@Status - Specifies the value of the status line|||AddHeader(name, value) - Adds an HTML header with a specified value@@@AppendToLog string - Adds a string to the end of the server log    entry@@@BinaryWrite(data_to_write) - Writes the given information without    any character-set conversion@@@Clear - Clears the buffered output. Use this method to handle errors. If    Response.Buffer is not set to true, this method will cause a run-time error@@@End - Stops processing the script, and return the current result@@@Flush - Sends buffered output immediately. If Response.Buffer is not set    to true, this method will cause a run-time error@@@Redirect(url) - Redirects the user to another url@@@Write(data_to_write) - Writes a text to the user|||ClientCertificate - Holds field values stored in the client certificate@@@Cookies(name) - Holds cookie values@@@Form(element_name) - Holds form (input) values. The form must use    the post method@@@QueryString(variable_name) - Holds variable values in the query    string@@@ServerVariables(server_variable) - Holds server variable values|||TotalBytes - Holds the total number of bytes the client is sending in the    body of the request|||BinaryRead - Fetches the data that is sent to the server from the client    as part of a post request|||ScriptTimeout - Sets how long a script can run before it is terminated|||CreateObject(type_of_object) - Creates an instance of an object@@@Execute(path) - Executes an ASP file from inside another ASP    file. After executing the called ASP file, the control is    returned to the original ASP file@@@GetLastError() - Returns an ASPError object that will describe the error    that occurred@@@HTMLEncode(string) - Applies HTML encoding to a string@@@MapPath(path) - Maps a relative or virtual path to a physical path@@@Transfer(path) - Sends all of the state information to another ASP    file for processing. After the transfer, procedural control is not returned    to the original ASP file@@@URLEncode(string) - Applies URL encoding rules to a string",,,[]
ADO Tutorial,ADO Intro,https://www.w3schools.com/asp/ado_intro.asp,"ADO can be used to access databases from your web pages.|||Before you continue you should have a basic understanding of thefollowing:|||If you want to study these subjects first, go to our Home page|||The common way to access a database from inside an ASP page is to:",What you should already know|||What is ADO?,HTML@@@ASP@@@SQL|||ADO is a Microsoft technology@@@ADO stands for ActiveX Data Objects@@@ADO is a Microsoft Active-X component@@@ADO is automatically installed with Microsoft IIS@@@ADO is a programming interface to access data in a database,Create an ADO connection to a database@@@Open the database connection@@@Create an ADO recordset@@@Open the recordset@@@Extract the data you need from the recordset@@@Close the recordset@@@Close the connection,,[]
ADO Tutorial,ADO Connect,https://www.w3schools.com/asp/ado_connect.asp,"Before a database can be accessed from a web page, a database connection hasto be established.|||The easiest way to connect to a database is to use a DSN-less connection. ADSN-less connection can be used against any Microsoft Access database on your web site.|||If you have a database called ""northwind.mdb"" located in a webdirectory like ""c:/webdata/"",you can connect to the database with the following ASP code:|||Note, from the example above, that you have to specify the Microsoft Accessdatabase driver (Provider) and the physical path to the database on yourcomputer.|||If you have an ODBC database called ""northwind"" you can connect to the database with the followingASP code:|||With an ODBC connection, you can connect to any database, on any computer inyour network, as long as an ODBC connection is available.|||Here is how to create a connection to a MS Access Database: |||Note that this configuration has to be done on the computer where your web siteis located. If you are running Personal Web Server (PWS)or Internet Information Server (IIS) on your own computer,the instructions above will work, but if your web site is located on a remote server, you have tohave physical access to that server, or ask your webhost to do this for you. |||The ADO Connection object is used to create an open connection to a datasource. Through this connection, you can access and manipulate a database.|||View all methods and properties of the Connection object.",,,"Open the ODBC icon in your Control Panel.@@@Choose the System DSN tab.@@@Click on  Add in the System DSN tab.@@@Select the Microsoft Access Driver. Click Finish.@@@In the next screen, click  Select to locate the database.@@@Give the database a Data Source Name (DSN).@@@Click  OK.",,[]
ADO Tutorial,ADO Recordset,https://www.w3schools.com/asp/ado_recordset.asp,"To be able to read database data, the data must first be loadedinto arecordset. |||After an ADO Database Connection has been created, as demonstrated in theprevious chapter, it is possible to create an ADO Recordset.  |||Suppose we have a database named ""Northwind"", we can get access to the""Customers"" table inside the database withthe following lines:|||We can also get access to the data in the ""Customers"" table usingSQL:|||After a recordset is opened, we can extract data from recordset.  |||Suppose we have a database named ""Northwind"", we can get access to the""Customers"" table inside the database withthe following lines:|||The ADO Recordset object is used to hold a set of records from a database table. |||View all methods and properties of the Recordset object.",,,,,[]
ADO Tutorial,ADO Display,https://www.w3schools.com/asp/ado_display.asp,"The most common way to display data from a recordset, is todisplay the data in an HTML table. |||We have a database named ""Northwind"" and we want to display thedata from the ""Customers"" table (remember to save the file with an .asp extension):|||Show example »|||We can also display the data from the ""Customers"" table inside an HTMLtable with the following lines (remember to save the file with an .asp extension):|||Show example »|||We want to add headers to the HTMLtable to make it more readable (remember to save the file with an .asp extension):|||Show example »|||Add colors to the HTML tableHow to add colors to the HTML table to make it look nice.",,,,,"[['\n<html>', '\n<body>', '\n', '\n<%', '\nset conn=Server.CreateObject(""ADODB.Connection"")', '\nconn.Provider=""Microsoft.Jet.OLEDB.4.0""', '\nconn.Open ""c:/webdata/northwind.mdb""', '\n', '\nset rs = Server.CreateObject(""ADODB.recordset"")', '\nrs.Open ""SELECT * FROM Customers"", conn', '\n', '\ndo until rs.EOF', '\n\xa0\xa0for each x in rs.Fields', '\n\xa0\xa0\xa0\xa0Response.Write(x.name)', '\n\xa0\xa0\xa0\xa0Response.Write("" = "")', '\n\xa0\xa0\xa0\xa0Response.Write(x.value & ""<br>"")', '\n\xa0\xa0next', '\n\xa0\xa0Response.Write(""<br>"")', '\n\xa0\xa0rs.MoveNext', '\nloop', '\n', '\nrs.close', '\nconn.close', '\n%>', '\n', '\n</body>', '\n</html>'], ['\n<html>', '\n<body>', '\n', '\n<%', '\nset conn=Server.CreateObject(""ADODB.Connection"")', '\nconn.Provider=""Microsoft.Jet.OLEDB.4.0""', '\nconn.Open ""c:/webdata/northwind.mdb""', '\n', '\nset rs = Server.CreateObject(""ADODB.recordset"")', '\nrs.Open ""SELECT Companyname, Contactname FROM Customers"", conn', '\n%>', '\n', '\n<table border=""1"" width=""100%"">', '\n<%do until rs.EOF%>', '\n\xa0\xa0<tr>', '\n\xa0\xa0<%for each x in rs.Fields%>', '\n\xa0\xa0\xa0\xa0<td><%Response.Write(x.value)%></td>', '\n\xa0\xa0<%next', '\n\xa0\xa0rs.MoveNext%>', '\n\xa0\xa0</tr>', '\n<%loop', '\nrs.close', '\nconn.close', '\n%>', '\n</table>', '\n', '\n</body>', '\n</html>'], ['\n<html>', '\n<body>', '\n', '\n<%', '\nset conn=Server.CreateObject(""ADODB.Connection"")', '\nconn.Provider=""Microsoft.Jet.OLEDB.4.0""', '\nconn.Open ""c:/webdata/northwind.mdb""', '\n', '\nset rs = Server.CreateObject(""ADODB.recordset"")', '\nsql=""SELECT Companyname, Contactname FROM Customers""', '\nrs.Open sql, conn', '\n%>', '\n', '\n<table border=""1"" width=""100%"">', '\n\xa0\xa0<tr>', '\n\xa0\xa0<%for each x in rs.Fields', '\n\xa0\xa0\xa0\xa0response.write(""<th>"" & x.name & ""</th>"")', '\n\xa0\xa0next%>', '\n\xa0\xa0</tr>', '\n\xa0\xa0<%do until rs.EOF%>', '\n\xa0\xa0\xa0\xa0<tr>', '\n\xa0\xa0\xa0\xa0<%for each x in rs.Fields%>', '\n\xa0\xa0\xa0\xa0\xa0\xa0<td><%Response.Write(x.value)%></td>', '\n\xa0\xa0\xa0\xa0<%next', '\n\xa0\xa0\xa0\xa0rs.MoveNext%>', '\n\xa0\xa0\xa0\xa0</tr>', '\n\xa0\xa0<%loop', '\n\xa0\xa0rs.close', '\n\xa0\xa0conn.close', '\n\xa0\xa0%>', '\n</table>', '\n', '\n</body>', '\n</html>']]"
ADO Tutorial,ADO Query,https://www.w3schools.com/asp/ado_query.asp,"We may use SQL to create queries to specify only a selected set of records and fields to view.|||We want to display only the records from the ""Customers"" table that have a ""Companyname"" that starts with an A (remember to save the file with an .asp extension):|||Display records where ""Companyname"" is > EHow to display only the records from the ""Customers"" table that have a ""Companyname"" that is larger than E.|||Display only Spanish customersHow to display only the Spanish customers from the ""Customers"" table.|||Let the user choose filterLet the user choose which country to show customers from.",,,,,"[['\n<html>', '\n<body>', '\n', '\n<%', '\nset conn=Server.CreateObject(""ADODB.Connection"")', '\nconn.Provider=""Microsoft.Jet.OLEDB.4.0""', '\nconn.Open ""c:/webdata/northwind.mdb""', '\n', '\nset rs=Server.CreateObject(""ADODB.recordset"")', '\nsql=""SELECT Companyname, Contactname FROM Customers', '\nWHERE CompanyName LIKE \'A%\'""', '\nrs.Open sql, conn', '\n%>', '\n', '\n<table border=""1"" width=""100%"">', '\n\xa0\xa0<tr>', '\n\xa0\xa0<%for each x in rs.Fields', '\n\xa0\xa0\xa0\xa0response.write(""<th>"" & x.name & ""</th>"")', '\n\xa0\xa0next%>', '\n\xa0\xa0</tr>', '\n\xa0\xa0<%do until rs.EOF%>', '\n\xa0\xa0\xa0\xa0<tr>', '\n\xa0\xa0\xa0\xa0<%for each x in rs.Fields%>', '\n\xa0\xa0\xa0\xa0\xa0\xa0<td><%Response.Write(x.value)%></td>', '\n\xa0\xa0\xa0\xa0<%next', '\n\xa0\xa0\xa0\xa0rs.MoveNext%>', '\n\xa0\xa0\xa0\xa0</tr>', '\n\xa0\xa0<%loop', '\n\xa0\xa0rs.close', '\n\xa0\xa0conn.close%>', '\n</table>', '\n', '\n</body>', '\n</html>\n']]"
ADO Tutorial,ADO Sort,https://www.w3schools.com/asp/ado_sort.asp,"We may use SQL to specify how to sort the data in the record set. |||We want to display the ""Companyname"" and ""Contactname"" fields from the ""Customers"" table, ordered by ""Companyname"" (remember to save the file with an .asp extension):|||Sort the records on a specified fieldname descendingHow to sort the data on a specified fieldname.|||Let the user choose what column to sort onLet the user choose what column to sort on.",,,,,"[['\n<html>', '\n<body>', '\n', '\n<%', '\nset conn=Server.CreateObject(""ADODB.Connection"")', '\nconn.Provider=""Microsoft.Jet.OLEDB.4.0""', '\nconn.Open ""c:/webdata/northwind.mdb""', '\n', '\nset rs = Server.CreateObject(""ADODB.recordset"")', '\nsql=""SELECT Companyname, Contactname FROM', '\nCustomers ORDER BY CompanyName""', '\nrs.Open sql, conn', '\n%>', '\n', '\n<table border=""1"" width=""100%"">', '\n\xa0\xa0<tr>', '\n\xa0\xa0<%for each x in rs.Fields', '\n\xa0\xa0\xa0\xa0response.write(""<th>"" & x.name & ""</th>"")', '\n\xa0\xa0next%>', '\n\xa0\xa0</tr>', '\n\xa0\xa0<%do until rs.EOF%>', '\n\xa0\xa0\xa0\xa0<tr>', '\n\xa0\xa0\xa0\xa0<%for each x in rs.Fields%>', '\n\xa0\xa0\xa0\xa0\xa0\xa0<td><%Response.Write(x.value)%></td>', '\n\xa0\xa0\xa0\xa0<%next', '\n\xa0\xa0\xa0\xa0rs.MoveNext%>', '\n\xa0\xa0\xa0\xa0</tr>', '\n\xa0\xa0<%loop', '\n\xa0\xa0rs.close', '\n\xa0\xa0conn.close%>', '\n</table>', '\n', '\n</body>', '\n</html>\n']]"
ADO Tutorial,ADO Add,https://www.w3schools.com/asp/ado_add.asp,"We may use the SQL INSERT INTO command to add a record to a table in a database. |||We want to add a new record to the Customers table in the Northwind database. We first create a form that contains the fields we want to collect data from:|||When the user presses the submit button the form is sent to a file called ""demo_add.asp"". The ""demo_add.asp"" file contains the code that will add a new record to the Customers table:|||If you use the SQL INSERT command be aware of the following:|||In a MS Access database, you can enter zero-length strings ("""") in Text, Hyperlink, and Memo fields IF you set the AllowZeroLength property to Yes.|||Note: Not all databases support zero-length strings and may cause an error when a record with blank fields is added. It is important to check what data types your database supports.",,"If the table contains a primary key, make sure to append a unique, non-Null value to the primary key field (if not, the provider may not append the   record, or an error occurs)@@@If the table contains an AutoNumber field, do not include this field in   the SQL INSERT command (the value of this field will be taken care of   automatically by the provider)",,,[]
ADO Tutorial,ADO Update,https://www.w3schools.com/asp/ado_update.asp,"We may use the SQL UPDATE command to update a record in a table in a database. |||We want to update a record in the Customers table in the Northwind database. We first create a table that lists all records in the Customers table:|||If the user clicks on the button in the ""customerID"" column he or she will be taken to a new file called ""demo_update.asp"". The ""demo_update.asp"" file contains the source code on how to create input fields based on the fields from one record in the database table. It also contains a ""Update record"" button that will save your changes:",,,,,[]
ADO Tutorial,ADO Delete,https://www.w3schools.com/asp/ado_delete.asp,"We may use the SQL DELETE command to delete a record in a table in a database. |||We want to delete a record in the Customers table in the Northwind database. We first create a table that lists all records in the Customers table:|||If the user clicks on the button in the ""customerID"" column he or she will be taken to a new file called ""demo_delete.asp"". The ""demo_delete.asp"" file contains the source code on how to create input fields based on the fields from one record in the database table. It also contains a ""Delete record"" button that will delete the current record:",,,,,[]
ADO Tutorial,ADO Demo,https://www.w3schools.com/asp/ado_demo.asp,"To demonstrate a small real life ADO application, we have put together a fewADO demos.|||If you try to update the database, you will get the error message: ""Youdo not have permission to update this database"". You get this error becauseyou don't have write access to our server.|||BUT, if you copy the code and run it on your own system, you might get thesame error. That is because the system might see you as an anonymous internet userwhen you access the file via your browser. In that case, you have to change the access-rightsto get access to the file.|||Open Windows Explorer, find the .mdb file. Right-click on the .mdb file and select Properties. Go to the Security tab and set the access-rights here.|||List, edit, update, and delete database records|||Add a new record",,,,,[]
ADO Tutorial,ADO Speed Up,https://www.w3schools.com/asp/ado_getstring.asp,"Use the GetString() method to speed up your ASP script (instead of using multiple Response.Write's).|||The following example demonstrates one way of how to display a  database query in an HTML table:|||For a large query, this can slow down the script processing time, since many Response.Write commands must be processed by the server.|||The solution is to have the entire string created, from <table> to </table>, and then output it - using Response.Write just once.|||The GetString() method allows you to display the string with only one Response.Write. It also eliminates the do...loop code and the conditional test that checks if the recordset is at EOF.|||To create an HTML table with data from a recordset, we only need to use three of the parameters above (all parameters are optional):|||Note: The GetString() method is an ADO 2.0 feature. You can download ADO 2.0 athttps://www.microsoft.com/data/download.htm.|||In the following example we will use the GetString() method to hold the recordset as a string: |||Show example »|||The str variable above contains a string of all the columns and rows returned by the SQL SELECT statement. Between each column the HTML </td><td> will appear, and between each row, the HTML </td></tr><tr><td> will appear. This will produce the exact HTML we need with only one Response.Write.",,coldel - the HTML to use as a column-separator@@@rowdel - the HTML to use as a row-separator@@@nullexpr - the HTML to use if a column is NULL,,,"[['\n<html>', '\n<body>', '\n', '\n<%', '\nset conn=Server.CreateObject(""ADODB.Connection"")', '\nconn.Provider=""Microsoft.Jet.OLEDB.4.0""', '\nconn.Open ""c:/webdata/northwind.mdb""', '\n', '\nset rs = Server.CreateObject(""ADODB.recordset"")', '\nrs.Open ""SELECT Companyname, Contactname FROM Customers"", conn', '\n', '\nstr=rs.GetString(,,""</td><td>"",""</td></tr><tr><td>"",""&nbsp;"")', '\n%>', '\n', '\n<table border=""1"" width=""100%"">', '\n\xa0\xa0<tr>', '\n\xa0\xa0\xa0\xa0<td><%Response.Write(str)%></td>', '\n\xa0\xa0</tr>', '\n</table>', '\n', '\n<%', '\nrs.close', '\nconn.close', '\nset rs = Nothing', '\nset conn = Nothing', '\n%>', '\n</body>', '\n</html>\n']]"
ADO Objects,ADO Command,https://www.w3schools.com/asp/ado_ref_command.asp,"The ADO Command object is used to execute a single query against a database. The query canperform actions like creating, adding, retrieving, deleting or updatingrecords.|||If the query is used to retrieve data, the data will be returned as a RecordSet object. This means that the retrieved data can be manipulated byproperties, collections, methods, and events of the Recordset object.|||The major feature of the Command object is the ability to use stored queries and procedureswith parameters.",,,,"ActiveConnection|||Sets or returns a definition for a connection if the connection is closed, or
      the current Connection object if the connection is open&&&CommandText|||Sets or returns a provider command&&&CommandTimeout|||Sets or returns the number of seconds to wait while attempting to execute a
      command&&&CommandType|||Sets or returns the type of a Command object&&&Name|||Sets or returns the name of a Command
      object&&&Prepared|||Sets or returns a Boolean value that, if set to True, indicates that the command should
      save a prepared version of the query before the first execution&&&State|||Returns a value that describes if the Command object is open, closed, connecting, executing or
      retrieving data$$$&&&Cancel|||Cancels an execution of a method&&&CreateParameter|||Creates a new Parameter object&&&Execute|||Executes the query, SQL statement or procedure in the
      CommandText property$$$Parameters|||Contains all the Parameter objects of a Command Object&&&Properties|||Contains all the Property objects of a Command Object",[]
ADO Objects,ADO Connection,https://www.w3schools.com/asp/ado_ref_connection.asp,"The ADO Connection Object is used to create an open connection to a data source. Through thisconnection, you can access and manipulatea database.|||If you want to access a database multiple times, you should establish a connection using the Connection object.You can also make a connection to a database by passing a connection string via a Command or Recordset object. However,this type of connection is only good for one specific, single query.|||Note:  You cannot handle events using VBScript or JScript (only Visual Basic, Visual C++, and Visual J++ languages can handleevents).",,,,"Attributes|||Sets or returns the attributes of a Connection
      object&&&CommandTimeout|||Sets or returns the number of seconds to wait while
      attempting to execute a command&&&ConnectionString|||Sets or returns the details used to create a connection to a data
      source&&&ConnectionTimeout|||Sets or returns the number of seconds to wait for a connection to
      open&&&CursorLocation|||Sets or returns the location of the cursor service&&&DefaultDatabase|||Sets or returns the default database name&&&IsolationLevel|||Sets or returns the isolation level&&&Mode|||Sets or returns the provider access permission&&&Provider|||Sets or returns the provider name&&&State|||Returns a value describing if the connection is open or
      closed&&&Version|||Returns the ADO version number$$$&&&BeginTrans|||Begins a new transaction&&&Cancel|||Cancels an execution&&&Close|||Closes a connection&&&CommitTrans|||Saves any changes and ends the current transaction&&&Execute|||Executes a query, statement, procedure or provider specific
      text&&&Open|||Opens a connection&&&OpenSchema|||Returns schema information from the provider about the data
      source&&&RollbackTrans|||Cancels any changes in the current transaction and ends the
      transaction$$$&&&BeginTransComplete|||Triggered after the BeginTrans operation&&&CommitTransComplete|||Triggered after the CommitTrans operation&&&  ConnectComplete|||Triggered after a connection starts&&&  Disconnect|||Triggered after a connection ends&&&  ExecuteComplete|||Triggered after a command has finished executing&&&  InfoMessage|||Triggered if a warning occurs during a ConnectionEvent
      operation&&&  RollbackTransComplete|||Triggered after the RollbackTrans operation&&&WillConnect|||Triggered before a connection starts&&&WillExecute|||Triggered before a command is executed$$$Errors|||Contains all the Error objects of the Connection object&&&Properties|||Contains all the Property objects of the Connection object",[]
ADO Objects,ADO Error,https://www.w3schools.com/asp/ado_ref_error.asp,"The ADO Error object contains details about data access errors that have been generated during asingle operation. |||ADO generates one Error object for each error. Each Error object contains details of the specificerror, and are stored in the Errors collection. To access the errors, you must refer toa specific connection.|||To loop through the Errors collection:",,,,"Description|||Returns an error description&&&HelpContext|||Returns the context ID of a topic in
      the Microsoft Windows help system&&&HelpFile|||Returns the full path of the help
      file in the Microsoft Windows help system&&&NativeError|||Returns an error code from the provider or the data source&&&Number|||Returns a unique number that identifies the error&&&Source|||Returns the name of the object or application that generated the
      error&&&SQLState|||Returns a 5-character SQL error code",[]
ADO Objects,ADO Field,https://www.w3schools.com/asp/ado_ref_field.asp,The ADO Field object contains information about a column in a Recordset object. There is one Field object for eachcolumn in the Recordset.,,,,"ActualSize|||Returns the actual length of a field's
      value&&&Attributes|||Sets or returns the attributes of a Field
      object&&&DefinedSize|||Returns the defined size of a field&&&Name|||Sets or returns the name of a Field
      object&&&NumericScale|||Sets or returns the number of decimal places allowed for
      numeric values in a Field
      object&&&OriginalValue|||Returns the original value of a field&&&Precision|||Sets or returns the maximum number of digits allowed when
      representing numeric values in a Field
      object&&&Status|||Returns the status of a Field object&&&Type|||Sets or returns the type of a Field object&&&UnderlyingValue|||Returns the current value of a field&&&Value|||Sets or returns the value of a Field object $$$&&&AppendChunk|||Appends long binary or character data to a Field object&&&GetChunk|||Returns all or a part of the contents of a large text or
      binary data Field object$$$Properties|||Contains all the Property objects for a Field object",[]
ADO Objects,ADO Parameter,https://www.w3schools.com/asp/ado_ref_parameter.asp,"The ADO Parameter object provides information about a single parameter used in a stored procedure orquery.  |||A Parameter object is added to the Parameters Collection when it is created.The Parameters Collection is associated with a specific Command object, which uses theCollection to pass parameters in and out of stored procedures and queries.|||Parameters can be used to create Parameterized Commands. These commands are (after they have beendefined and stored) using parameters to alter some details of the command before it is executed.For example, an SQL SELECT statement could use a parameter to define thecriteria of a WHERE clause.|||There are four types of parameters: input parameters, output parameters, input/outputparameters and return parameters.",,,,"Attributes|||Sets or returns the attributes of a Parameter
      object&&&Direction|||Sets or returns how a parameter is passed to or from a
      procedure&&&Name|||Sets or returns the name of a Parameter
      object&&&NumericScale|||Sets or returns the number of digits stored to the right
      side of the decimal point for a numeric value of a Parameter object&&&Precision|||Sets or returns the maximum number of digits allowed when
      representing numeric values in a Parameter&&&Size|||Sets or returns the maximum size in bytes or characters of
      a value in a Parameter object&&&Type|||Sets or returns the type of a Parameter object&&&Value|||Sets or returns the value of a Parameter object $$$AppendChunk|||Appends long binary or character data to a Parameter object&&&Delete|||Deletes an object from the Parameters Collection",[]
ADO Objects,ADO Property,https://www.w3schools.com/asp/ado_ref_property.asp,"The ADO Property object represents a dynamic characteristic of an ADO object that is defined by the provider.|||Each provider that talks with ADO has different ways of interacting with ADO. Therefore, ADO needsto store information about the provider in some way. The solution is that the provider gives specificinformation (dynamic properties) to ADO. ADO stores each provider property in a Property objectthat is again stored in the Properties Collection. The Collection is assigned toeither a Command object, Connection object, Field object, or a Recordset object.",,,,"Attributes|||Returns the attributes of a Property
      object&&&Name|||Sets or returns the name of a Property
      object&&&Type|||Returns the type of a Property object&&&Value|||Sets or returns the value of a Property object ",[]
ADO Objects,ADO Record,https://www.w3schools.com/asp/ado_ref_record.asp,"The ADO Record object is used to hold a row in a Recordset, a directory, or afile from a file system.|||Only structured databases could be accessed by ADO in versions prior 2.5. Ina structured database, each table has the exact same number of columns in each row, and each column is composed of the same data type.|||The Record object allows access to data-sets where the number of columns and/or the data type canbe different from row to row. |||Example:|||countfields=rec.Fields.Count|||Example:|||itemfields=rec.Fields.Item(1)      or      itemfields = rec.Fields.Item(""Name"")",,,,"ActiveConnection|||Sets or returns which Connection object a Record object
      belongs to&&&Mode|||Sets or returns the permission for modifying data in a
      Record object&&&ParentURL|||Returns the absolute URL of the parent Record&&&RecordType|||Returns the type of a Record object&&&Source|||Sets or returns the src parameter of the Open method of a Record
      object&&&State|||Returns the status of a Record object$$$&&&Cancel|||Cancels an execution of a CopyRecord, DeleteRecord,
      MoveRecord, or Open call&&&Close|||Closes a Record object&&&CopyRecord|||Copies a file or directory to another location&&&DeleteRecord|||Deletes a file or directory&&&  GetChildren|||Returns a Recordset object where each row represents the
      files in the directory&&&MoveRecord|||Moves a file or a directory to another location&&&Open|||Opens an existing Record object or creates a new file or
      directory$$$&&&Properties|||A collection of provider-specific properties&&&Fields|||Contains all the Field objects in the Record object$$$Count|||Returns the number of items in the fields collection.
      Starts at zero.
      Example:
countfields=rec.Fields.Count
&&&Item(named_item/number)|||Returns a specified item in the fields collection.
      Example:
itemfields=rec.Fields.Item(1)
      or
      itemfields = rec.Fields.Item(""Name"")
",[]
ADO Objects,ADO Recordset,https://www.w3schools.com/asp/ado_ref_recordset.asp,"GetRowsThis example demonstrates how to use the GetRows method.|||The ADO Recordset object is used to hold a set of records from a database table.A Recordset object consist of records and columns (fields).|||In ADO, this object is the most important and the one used most often to manipulate data from a database.|||Recordset objects can support two types of updating: |||In ADO there are 4 different cursor types defined:|||The cursor type can be set by the CursorType property or by the CursorTypeparameter in the Open method.|||Note: Not all providers support all methods or properties of the Recordsetobject.|||Cancels changes made to a record of a Recordset      object|||Note:  You cannot handle events using VBScript or JScript (onlyVisual Basic, Visual C++, and Visual J++ languages can handle events).|||Example:|||countfields=rs.Fields.Count|||Example:|||itemfields=rs.Fields.Item(1)      or      itemfields=rs.Fields.Item(""Name"")|||Example:|||countprop=rs.Properties.Count|||Example:|||itemprop = rs.Properties.Item(1)      or      itemprop=rs.Properties.Item(""Name"")",,"Immediate updating - all changes are written immediately to the    database once you call the Update method.@@@Batch updating - the provider will cache multiple changes and then   send them to the database with the UpdateBatch method.|||Dynamic cursor - Allows you to see additions, changes, and deletions by other    users.@@@Keyset cursor - Like a dynamic cursor, except that    you cannot see additions by other users, and it prevents access to records that other users    have deleted. Data changes by other users will still be visible.@@@Static cursor - Provides a static copy of a recordset for you to use to find data or generate    reports. Additions, changes, or deletions by other users will not be visible. This is the only type of cursor allowed when you open a client-side Recordset object.@@@Forward-only cursor - Allows you to only scroll forward through the Recordset. Additions, changes, or deletions by other users will not be visible. ",,"AbsolutePage|||Sets or returns a value that specifies the page number in the Recordset object&&&AbsolutePosition|||Sets or returns a value that specifies the ordinal position of the current record in the Recordset object&&&ActiveCommand|||Returns the Command object associated with the Recordset&&&ActiveConnection|||Sets or returns a definition for a connection if the connection is closed,
    or the current Connection object if the connection is open&&&BOF|||Returns true if the current record position is before the first record, otherwise false&&&Bookmark|||Sets or returns a bookmark. The bookmark saves the position of the current record&&&CacheSize|||Sets or returns the number of records that can be cached&&&CursorLocation|||Sets or returns the location of the cursor service&&&CursorType|||Sets or returns the cursor type of a Recordset object&&&DataMember|||Sets or returns the name of the data member that will be
      retrieved from the object referenced by the DataSource property&&&DataSource|||Specifies an object containing data to be represented as a Recordset object&&&EditMode|||Returns the editing status of the current record&&&EOF|||Returns true if the current record position is after the last record, otherwise false&&&Filter|||Sets or returns a filter for the data in a Recordset object&&&Index|||Sets or returns the name of the current index for a
      Recordset object&&&LockType|||Sets or returns a value that specifies the type of locking
      when editing a record in a Recordset&&&MarshalOptions|||Sets or returns a value that specifies which records are to 
    be returned to the server&&&MaxRecords|||Sets or returns the maximum number of records to return to a Recordset object from a query&&&PageCount|||Returns the number of pages with data in a Recordset object&&&PageSize|||Sets or returns the maximum number of records allowed on a
      single page of a Recordset object&&&RecordCount|||Returns the number of records in a Recordset object&&&Sort|||Sets or returns the field names in the Recordset to sort on&&&Source|||Sets a string value or a Command object reference, or
      returns a String value that indicates the data source of the Recordset
      object&&&State|||Returns a value that describes if the Recordset object is
      open, closed, connecting, executing or retrieving data&&&Status|||Returns the status of the current record with regard to
      batch updates or other bulk operations&&&StayInSync|||Sets or returns whether the reference to the child records
      will change when the parent record position changes$$$&&&AddNew|||Creates a new record&&&Cancel|||Cancels an execution&&&CancelBatch|||Cancels a batch update&&&CancelUpdate|||Cancels changes made to a record of a Recordset
      object

&&&Clone|||Creates a duplicate of an existing Recordset&&&Close|||Closes a Recordset&&&CompareBookmarks|||Compares two bookmarks&&&Delete|||Deletes a record or a group of records&&&Find|||Searches for a record in a Recordset that
      satisfies a specified criteria&&&GetRows|||Copies multiple records from a Recordset object
      into a two-dimensional array&&&GetString|||Returns a Recordset as a string&&&Move|||Moves the record pointer in a Recordset object&&&MoveFirst|||Moves the record pointer to the first record&&&MoveLast|||Moves the record pointer to the last record&&&MoveNext|||Moves the record pointer to the next record&&&MovePrevious|||Moves the record pointer to the previous record&&&NextRecordset|||Clears the current Recordset object and returns
      the next Recordset object by looping through a series of commands&&& Open|||Opens a database element that gives you access
      to records in a table, the results of a query, or to a saved Recordset&&&Requery|||Updates the data in a Recordset by re-executing
      the query that made the original Recordset&&&Resync|||Refreshes the data in the current Recordset from the original database&&&Save|||Saves a Recordset object to a file or a Stream
      object&&&Seek|||Searches the index of a Recordset to find a
      record that matches the specified values&&&Supports|||Returns a boolean value that defines whether or
      not a Recordset object supports a specific type of functionality&&&Update|||Saves all changes made to a single record 
      in a Recordset object&&&UpdateBatch|||Saves all changes in a Recordset to the database.
    Used when working in batch update mode$$$&&&EndOfRecordset|||Triggered when you try to move to a record after the last record&&&FetchComplete|||Triggered after all records in an asynchronous operation have
      been fetched&&&FetchProgress|||Triggered periodically in an asynchronous operation,
    to state how many more records that have been fetched&&&FieldChangeComplete|||Triggered after the value of a Field object change&&&MoveComplete|||Triggered after the current position in the Recordset has changed&&&RecordChangeComplete|||Triggered after a record has changed&&&RecordsetChangeComplete|||Triggered after the Recordset has changed&&&WillChangeField|||Triggered before the value of a Field object change&&&WillChangeRecord|||Triggered before a record change&&&WillChangeRecordset|||Triggered before a Recordset change&&&WillMove|||Triggered before the current position in the Recordset changes$$$&&&Fields|||Indicates the number of Field objects in the Recordset object&&&Properties|||Contains all the Property objects in the Recordset object$$$&&&Count|||Returns the number of items in the fields collection. Starts at zero.
      Example:
countfields=rs.Fields.Count
&&&Item(named_item/number)|||Returns a specified item in the fields collection.
      Example:
itemfields=rs.Fields.Item(1)
      or
      itemfields=rs.Fields.Item(""Name"")
$$$Count|||Returns the number of items in the properties collection. Starts at zero.
      Example:
countprop=rs.Properties.Count
&&&Item(named_item/number)|||Returns a specified item in the properties collection.
      Example:
itemprop = rs.Properties.Item(1)
      or
      itemprop=rs.Properties.Item(""Name"")
",[]
ADO Objects,ADO Stream,https://www.w3schools.com/asp/ado_ref_stream.asp,"The ADO Stream Object is used to read, write, and manage a stream of binary data or text.|||A Stream object can be obtained in three ways:",,"From a URL pointing to a document, a folder, or a Record object@@@By instantiating a Stream object to store data for your application@@@By opening the default Stream object associated with a Record object",,"CharSet|||Sets or returns a value that specifies into which character set the contents
      are to be
      translated. This property is only used with text Stream objects (type is
      adTypeText)&&&EOS|||Returns whether the current position is at the end of the
      stream or not&&&LineSeparator|||Sets or returns the line separator character used in a text Stream
      object&&&Mode|||Sets or returns the available permissions for modifying
      data&&&Position|||Sets or returns the current position (in bytes) from the
      beginning of a Stream object&&&Size|||Returns the size of an open Stream
      object&&&State|||Returns a value describing if the Stream object is open or
      closed&&&Type|||Sets or returns the type of data in a Stream object$$$Cancel|||Cancels an execution of an Open call on a Stream object&&&Close|||Closes a Stream object&&&CopyTo|||Copies a specified number of characters/bytes from one
      Stream object into another Stream object&&&Flush|||Sends the contents of the Stream buffer to the associated
      underlying object&&&  LoadFromFile|||Loads the contents of a file into a Stream object&&&Open|||Opens a Stream object&&&Read|||Reads the entire stream or a specified number of bytes from
      a binary Stream object&&&  ReadText|||Reads the entire stream, a line, or a specified number of
      characters from a text Stream object&&&  SaveToFile|||Saves the binary contents of a Stream object to a file&&&  SetEOS|||Sets the current position to be the end of the stream (EOS)&&&SkipLine|||Skips a line when reading a text Stream&&&Write|||Writes binary data to a binary Stream object&&&WriteText|||Writes character data to a text Stream object",[]
ADO Objects,ADO DataTypes,https://www.w3schools.com/asp/ado_datatypes.asp,"The table below shows the ADO Data Type mapping between Access, SQL Server, and Oracle:|||* In Oracle 8.0.x - decimal and int are equal to number and number(10).",,,,"adBigInt|||20||| |||BigInt (SQL Server 2000 +)||| &&&adBinary|||128||| |||Binary
    TimeStamp|||Raw *&&&adBoolean|||11|||YesNo|||Bit||| &&&adChar|||129||| |||Char|||Char&&&adCurrency|||6|||Currency|||Money
    SmallMoney||| &&&adDate|||7|||Date|||DateTime||| &&&adDBTimeStamp|||135|||DateTime (Access 97 (ODBC))|||DateTime
    SmallDateTime|||Date&&&adDecimal|||14||| ||| |||Decimal *&&&adDouble|||5|||Double|||Float|||Float&&&adGUID|||72|||ReplicationID (Access 97 (OLEDB)), (Access 2000 (OLEDB))|||UniqueIdentifier (SQL Server 7.0 +)||| &&&adIDispatch|||9||| ||| ||| &&&adInteger|||3|||AutoNumber
    Integer
    Long|||Identity (SQL Server 6.5)
    Int
 |||Int *&&&adLongVarBinary|||205|||OLEObject|||Image|||Long Raw *
    Blob (Oracle 8.1.x)&&&adLongVarChar|||201|||Memo (Access 97)
    Hyperlink (Access 97)|||Text|||Long *
    Clob (Oracle 8.1.x)&&&adLongVarWChar|||203|||Memo (Access 2000 (OLEDB))
    Hyperlink (Access 2000 (OLEDB))|||NText (SQL Server 7.0 +)|||NClob (Oracle 8.1.x)&&&adNumeric|||131|||Decimal (Access 2000 (OLEDB))|||Decimal
    Numeric|||Decimal
    Integer
    Number
    SmallInt&&&adSingle|||4|||Single|||Real||| &&&adSmallInt|||2|||Integer|||SmallInt||| &&&adUnsignedTinyInt|||17|||Byte|||TinyInt||| &&&adVarBinary|||204|||ReplicationID (Access 97)|||VarBinary||| &&&adVarChar|||200|||Text (Access 97)|||VarChar|||VarChar&&&adVariant|||12||| |||Sql_Variant (SQL Server 2000 +)|||VarChar2&&&adVarWChar|||202|||Text (Access 2000 (OLEDB))|||NVarChar (SQL Server 7.0 +)|||NVarChar2&&&adWChar|||130||| |||NChar (SQL Server 7.0 +)||| ",[]
