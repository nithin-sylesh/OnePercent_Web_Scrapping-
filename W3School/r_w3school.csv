Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
R Tutorial,R HOME,https://www.w3schools.com/r/default.asp,"R is a programming language.|||R is often used for statistical computing and graphical presentation to analyze   and visualize data.|||With our ""Try it Yourself"" editor, you can edit R code and view the result.|||How to output some text, and how to do a simple calculation in R:|||Result:|||How you can use R to easily create a graph with numbers from 1 to 10 on both the x and y axis:|||Result:|||We recommend reading this tutorial, in the sequence listed in the left menu.|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise|||Learn by examples! This tutorial supplements all explanations with clarifying examples.|||See All R Examples|||Learn by taking a quiz! This quiz will give you a signal of how much you know about R.|||Take the R Quiz",Examples in Each Chapter|||Example,,,,"[['\n  ""Hello World!""', '5 + 5'], ['\n  plot(1:10)']]"
R Tutorial,R Intro,https://www.w3schools.com/r/r_intro.asp,R is a popular programming language used for statistical computing and graphical presentation.|||Its most common use is to analyze and visualize data.|||This tutorial will teach you the basics of R.|||It is not necessary to have any prior programming experience.,What is R|||Why Use R?,"It is a great resource for data analysis, data visualization, data science and machine learning@@@It provides many statistical techniques (such as statistical tests, classification, clustering and data reduction)@@@It is easy to draw graphs in R, like pie charts, histograms, box plot, scatter plot, etc++@@@It works on different platforms (Windows, Mac, Linux)@@@It is open-source and free@@@It has a large community support@@@It has many packages (libraries of functions) that can be used to solve different problems",,,[]
R Tutorial,R Get Started,https://www.w3schools.com/r/r_get_started.asp,"To install R, go to https://cloud.r-project.org/ and download the latest version of R for Windows, Mac or Linux.|||When you have downloaded and installed R, you can run R on your computer.|||The screenshot below shows how it may look like when you run R on a Windows PC:|||If you type 5 + 5, and press enter, you will see that R outputs 10.|||When learning R at W3Schools.com, you can use our ""Try it Yourself"" tool, which shows both the code and the result in your browser. This will make it easier for you to test and understand every part as we move forward:|||Result:",Learning R at W3Schools,,,,[['\n  5 + 5']]
R Tutorial,R Syntax,https://www.w3schools.com/r/r_syntax.asp,"To output text in R, use single or double quotes:|||To output numbers, just type the number (without quotes):|||To do simple calculations, add numbers together:|||Congratulations! You have now written your first R code.",,,,,"[['\n  ""Hello World!""'], ['\n  5', '10', '25'], ['\n  5 + 5']]"
R Tutorial,R Comments,https://www.w3schools.com/r/r_comments.asp,"Comments can be used to explain R code, and to make it more readable. It can also be used to prevent execution when testing alternative code.|||Comments starts with a #. When executing the R-code, R will ignore anything that starts with #.|||This example uses a comment before a line of code:|||This example uses a comment at the end of a line of code:|||Comments does not have to be text to explain the code, it can also be used to prevent R fromexecuting the code:|||Unlike other programming languages, such as Java, there are no syntax in R for multiline comments. However, we can just insert a # for each line to create multiline comments:",Multiline Comments,,,,"[['\n  # This is a comment', '""Hello World!""'], ['\n  ""Hello World!""\n  # This is a comment'], ['\n  # ""Good morning!""', '""Good night!""'], ['\n  # This is a comment', '# written in', '# more than just one line', '\n  ""Hello World!""']]"
R Tutorial,R Variables,https://www.w3schools.com/r/r_variables.asp,"Variables are containers for storing data values.|||R does not have a command for declaring a variable. A variable is created the moment you first assign a value to it. To assign a value to a variable, use the <- sign. To output (or print) the variable value, just type the variable name:|||From the example above, name and age are variables, while ""John"" and 40 are values.|||In other programming language, it is common to use = as an assignment operator. In R, we can useboth = and <- as assignment operators.|||However, <- is preferred in most cases because the = operator can be forbidden in some context in R.|||Compared to many other programming languages, you do not have to use a function to print/output variables in R. You can just type the name of the variable:|||However, R does have a print() function available if you want to use it. This might be useful if you are familiar with other programming languages, such as Python, which often use a print() function to output variables.|||And there are times you must use the print() function to output code, for example when working with for loops (which you will learn more about in a later chapter):|||Conclusion: It is up to your if you want to use the print() function or not to output code. However, when your code is inside an R expression (for example inside curly braces {} like in the example above), use the print() function if you want to output the result.|||You can also concatenate, or join, two or more elements, by using the paste() function.|||To combine both text and a variable, R uses comma (,):|||You can also use , to add a variable to another variable:|||For numbers, the + character works as a mathematical operator:|||If you try to combine a string (text) and a number, R will give you an error:|||Result:|||R allows you to assign the same value to multiple variables in one line:|||Remember that variable names are case-sensitive!",Multiple Variables,"A variable name must start with a letter and can be a combination of letters, digits, period(.)and underscore(_). If it starts with period(.), it cannot be followed by a digit.@@@A variable name cannot start with a number or underscore (_)@@@Variable names are case-sensitive (age, Age and AGE are three different variables)@@@Reserved words cannot be used as variables (TRUE, FALSE, NULL, if...)",,,"[['\n  name <- ""John""', 'age <- 40', 'name\xa0\xa0 # output ""John""', 'age\xa0\xa0\xa0 # output 40'], ['\n  name <- ""John Doe""', 'name # auto-print the value of the name variable'], ['\n  name <- ""John Doe""', 'print(name) # print the value of the name variable'], ['\n  for (x in 1:10) {', '\xa0 print(x)', '}'], ['\n  text <- ""awesome""', 'paste(""R is"", text)'], ['\n  text1 <- ""R is""', 'text2 <- ""awesome""', 'paste(text1, \n  text2)'], ['\n  num1 <- 5', 'num2 <- 10', 'num1 + num2'], ['\n  # Assign the same value to multiple variables in one line', 'var1 <- var2 <- \n  var3 <- ""Orange""', '# Print variable values', 'var1', 'var2', 'var3'], ['\n  # Legal variable names:', 'myvar <- ""John""', 'my_var <- ""John""', 'myVar \n  <- ""John""', '\n  MYVAR <- ""John""', 'myvar2 <- ""John""', '.myvar <- ""John""', '# Illegal variable names:', '\n  2myvar <- ""John""', 'my-var <- ""John""', 'my var <- ""John""', '_my_var <- ""John""', '\n  my_v@ar <- ""John""', 'TRUE <- ""John""']]"
R Tutorial,R Data Types,https://www.w3schools.com/r/r_data_types.asp,"In programming, data type is an important concept.|||Variables can store data of different types, and different types can do different things.|||In R, variables do not need to be declared with any particular type, and can even change type after theyhave been set:|||R has a variety of data types and object classes. You will learn much more about these as you continue to get to know R.|||Basic data types in R can be divided into the following types:|||We can use the class() function to check the data type of a variable:|||You will learn much more about the individual data types in the upcoming chapters.",,"numeric - (10.5, 55, 787)@@@integer - (1L, 55L, 100L, where the letter ""L"" declares this as an integer)@@@complex - (9 + 3i, where ""i"" is the imaginary part)@@@character (a.k.a. string) - (""k"", ""R is exciting"", ""FALSE"", ""11.5"")@@@logical (a.k.a. boolean) - (TRUE or FALSE)",,,"[['\n  my_var <- 30 # my_var is type of ', <strong>numeric</strong>, 'my_var <- ""Sally"" \n  # my_var is now of type ', <strong>character</strong>, ' (aka string)'], ['\n  # numeric', 'x <- 10.5', 'class(x)', '# integer', 'x <- 1000L', '\n  class(x)', '# \n  complex', 'x <- 9i + 3', 'class(x)', '\n', '# character/string', 'x <- ""R is exciting""', 'class(x)', '\n', '# logical/boolean', 'x <- TRUE', 'class(x)']]"
R Tutorial,R Numbers,https://www.w3schools.com/r/r_numbers.asp,"There are three number types in R:|||Variables of number types are created when you assign a value to them:|||A numeric data type is the most common type in R, and contains any number with or without a decimal, like: 10.5, 55, 787:|||Integers are numeric data without decimals. This is used when you are certain that you will never create a variable that should contain decimals. To create an integer variable, you must use the letter L after the integer value:|||A complex number is written with an ""i"" as the imaginary part:|||You can convert from one type to another with the following functions:",,numeric@@@integer@@@complex|||as.numeric()@@@as.integer()@@@as.complex(),,,"[['\n  x <- 10.5\xa0\xa0 # \n  numeric', 'y <- 10L\xa0\xa0\xa0 # integer', 'z <- 1i\xa0\xa0\xa0\xa0 # complex'], ['\n  x <- 10.5', 'y <- 55', '# Print values of x and y', '\n  x', 'y', '# \n  Print the class name of x and y', 'class(x)', 'class(y)'], ['\n  x <- 1000L', 'y <- 55L', '# Print values of x and y', 'x', 'y', '# Print the class name of x and y', '\n  class(x)', 'class(y)'], ['\n  x <- 3+5i', 'y <- 5i', '# Print values of x and y', 'x', 'y', '# Print the class name of x and y', '\n  class(x)', 'class(y)'], ['\n  x <- 1L # integer', 'y <- 2 # numeric', '# convert from integer to \n  numeric:', 'a <- as.numeric(x)', '# convert from numeric to integer:', 'b \n  <- as.integer(y)', '# print values of x and y', 'x', 'y', '# print \n  the class name of a and b', 'class(a)', '\n  class(b)']]"
R Tutorial,R Math,https://www.w3schools.com/r/r_math.asp,"In R, you can use operators to perform common mathematical operations on numbers.|||The + operator is used to add together two values:|||And the - operator is used for subtraction:|||You will learn more about available operators in our R Operators Tutorial.|||R also has many built-in math functions that allows you to perform mathematical tasks on numbers.|||For example, the min() and max() functions can be used to find the lowest or highest number in a set:|||The sqrt() function returns the square root of a number:|||The abs() function returns the absolute (positive) value of a number:|||The ceiling() function rounds a number upwards to its nearest integer, and the floor() function rounds a number downwards to its nearest integer, and returns the result:",,,,,"[['\n  10 + 5'], ['\n  10 - 5'], ['\n  max(5, 10, 15)', 'min(5, 10, 15)'], ['\n  sqrt(16)'], ['\n  abs(-4.7)'], ['\n  ceiling(1.4)', 'floor(1.4)']]"
R Tutorial,R Strings,https://www.w3schools.com/r/r_strings.asp,"A character, or strings, are used for storing text. A string is surrounded by either single quotation marks, or double quotation marks:|||""hello"" is the same as 'hello':|||Assigning a string to a variable is done with the variable followed by the <- operator and the string:|||You can assign a multiline string to a variable like this:|||However, note that R will add a ""\n"" at the end of each line break. This is called an escape character, and the n character indicates a new line.|||If you want the line breaks to be inserted at the same position as in the code, use the cat() function:|||There are many usesful string functions in R.|||For example, to find the number of characters in a string, use the nchar() function:|||Use the grepl() function to check if a character or a sequence of characters are present in a string:|||Use the paste() function to merge/concatenate two strings:|||To insert characters that are illegal in a string, you must use an escape character.|||An escape character is a backslash \ followed by the character you want to insert.|||An example of an illegal character is a double quote inside a string that is surrounded by double quotes:|||Result:|||To fix this problem, use the escape character \"":|||The escape character allows you to use double quotes when you normally would not be allowed:|||Note that auto-printing the str variable will print the backslash in the output. You can use the cat() function to printit without backslash.|||Other escape characters in R:",Multiline Strings|||String Length|||Example,,,\\|||Backslash&&&\n|||New Line&&&\r|||Carriage Return&&&\t|||Tab&&&\b|||Backspace,"[['\n  ""hello""', ""'hello'""], ['\n  str <- ""Hello""', 'str # print the value of str'], ['\n  str <- ""Lorem ipsum dolor sit amet,', 'consectetur adipiscing elit,', 'sed do \n  eiusmod tempor incididunt', 'ut labore et dolore magna aliqua.""', '\n  str # print the value of str'], ['\n  str <- ""Lorem ipsum dolor sit amet,', 'consectetur adipiscing elit,', 'sed do \n  eiusmod tempor incididunt', 'ut labore et dolore magna aliqua.""', 'cat(str)'], ['\n  str <- ""Hello World!""', 'nchar(str)'], ['\n  str <- ""Hello World!""', 'grepl(""H"", str)', 'grepl(""Hello"", \n  str)', 'grepl(""X"", \n  str)'], ['\n  str1 <- ""Hello""', 'str2 <- ""World""', '\n  paste(str1, str2)'], ['\n  str <- ""We are the so-called \\""Vikings\\"", from the north.""', '\n  str', '\n  cat(str)']]"
R Tutorial,R Logical/Booleans,https://www.w3schools.com/r/r_booleans.asp,"In programming, you often need to know if an expression is true or false.|||You can evaluate any expression in R, and get one of two answers, TRUE or FALSE.|||When you compare two values, the expression is evaluated and R returns the logical answer:|||You can also compare two variables:|||You can also run a condition in an if statement, which you will learn much more about in the if..else chapter.",,,,,"[['\n  10 > 9\xa0\xa0\xa0 # TRUE because 10 is greater than 9', '10 == 9\xa0\xa0 \n  # FALSE because 10 is not equal to 9', '10 < 9\xa0\xa0\xa0 # FALSE \n  because 10 is greater than 9'], ['\n  a <- 10', 'b <- 9', 'a > b'], ['\n  a <- 200', 'b <- 33', 'if (b > a) {', '\xa0 print (""b is greater than \n  a"")', '} else {', '\xa0 print(""b is not greater than a"")', '}']]"
R Tutorial,R Operators,https://www.w3schools.com/r/r_operators.asp,"Operators are used to perform operations on variables and values.|||In the example below, we use the + operator to add together two values:|||R divides the operators in the following groups:|||Arithmetic operators are used with numeric values to perform common mathematical operations:|||Assignment operators are used to assign values to variables:|||Note: <<- is a global assigner. You will learn more about this in the Global Variable chapter.|||It is also possible to turn the direction of the assignment operator.|||x <- 3 is equal to 3 -> x|||Comparison operators are used to compare two values:|||Logical operators are used to combine conditional statements:|||Miscellaneous operators are used to manipulate data:|||Note: You will learn more about Matrix multiplication and matrices in a later chapter.",R Miscellaneous Operators,Arithmetic operators@@@Assignment operators@@@Comparison operators@@@Logical operators@@@Miscellaneous operators,,+|||Addition|||x + y|||Try it »&&&-|||Subtraction|||x - y|||Try it »&&&*|||Multiplication|||x * y|||Try it »&&&/|||Division|||x / y|||Try it »&&&^|||Exponent|||x ^ y|||Try it »&&&%%|||Modulus (Remainder from division)|||x %% y|||Try it »&&&%/%|||Integer Division|||x%/%y|||Try it »$$$&&&==|||Equal|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »$$$&&&&|||Element-wise Logical AND operator. It returns TRUE if both elements are TRUE&&&&&|||Logical AND operator - Returns TRUE if both statements are TRUE&&&||||Elementwise- Logical OR operator. It returns TRUE if one of the statement is TRUE&&&|||||Logical OR operator. It returns TRUE if one of the statement is TRUE.&&&!|||Logical NOT - returns FALSE if statement is TRUE$$$:|||Creates a series of numbers in a sequence|||x <- 1:10&&&%in%|||Find out if an element belongs to a vector|||x %in% y&&&%*%|||Matrix Multiplication|||x <- Matrix1 %*% Matrix2,"[['\n  10 + 5'], ['\n  my_var <- 3', 'my_var <<- 3', '3 -> my_var', '3 ->> \n  my_var', 'my_var # print my_var']]"
R Tutorial,R If...Else,https://www.w3schools.com/r/r_if_else.asp,"R supports the usual logical conditions from mathematics:|||These conditions can be used in several ways, most commonly in ""if statements"" and loops.|||An ""if statement"" is written with the if keyword, and it is used to specify a block of code to be executed if a condition is TRUE:|||In this example we use two variables, a and b,which are used as a part of the if statement to test whether b is greater than a.As a is 33, and b is 200,we know that 200 is greater than 33, and so we print to screen that ""b is greater than a"".|||R uses curly brackets { } to define the scope in the code.|||The else if keyword is R's way of saying ""if the previous conditions were not true, then try thiscondition"":|||In this example a is equal to b, so the first condition is not true, but the else if condition is true, so weprint to screen that ""a and b are equal"".|||You can use as many else if statements as you want in R.|||The else keyword catches anything which isn't caught by the preceding conditions:|||In this example, a is greater than b,so the first condition is not true, also the else if condition is not true,so we go to the else condition and print to screen that ""a is greater than b"".|||You can also use else withoutelse if:|||You can also have if statements inside if statements, this is called nestedif statements.|||The & symbol (and) is a logical operator, and is used to combine conditional statements:|||Test if a is greater than b, AND if c is greater than a:|||The | symbol (or) is a logical operator, and is used to combine conditional statements:|||Test if a is greater than b, or if c is greater than a:",,,,==|||Equal|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »,"[['\n  a <- 33', 'b <- 200', 'if (b > a) {', '\xa0 print(""b is greater than a"")', '\n  }'], ['\n  a <- 33', 'b <- 33', 'if (b > a) {', '\xa0 print(""b is greater than a"")', '\n  } else if (a == b) {', '\xa0 print (""a and b are equal"")', '}'], ['\n  a <- 200', 'b <- 33', 'if (b > a) {', '\xa0 print(""b is greater than a"")', '\n  } else if (a == b) {', '\xa0 print(""a and b are equal"")', '} else {', '\xa0 \n  print(""a is greater than b"")', '}'], ['\n  a <- 200', 'b <- 33', 'if (b > a) {', '\xa0 print(""b is greater than a"")', '\n  } else {', '\xa0 print(""b is not greater than a"")', '}'], ['\n  x <- 41', 'if (x > 10) {', '\xa0 print(""Above ten"")', '\xa0 if (x > \n  20) {', '\xa0\xa0\xa0 print(""and also above 20!"")', '\xa0 } else {', '\xa0\xa0\xa0 \n  print(""but not above 20."")', '\xa0 }', '} else {', '\xa0 print(""below \n  10."")', '}'], ['\n  a <- 200', 'b <- 33', 'c <- 500', 'if (a > b & c > a){', '\xa0 \n  print(""Both conditions are true"")', '}'], ['\n  a <- 200', 'b <- 33', 'c <- 500', 'if (a > b | a > c){', '\xa0 print(""At \n  least one of the conditions is true"")', '}']]"
R Tutorial,R While Loop,https://www.w3schools.com/r/r_while_loop.asp,"Loops can execute a block of code as long as a specified condition is reached.|||Loops are handy because they save time, reduce errors, and they make code more readable.|||R has two loop commands:|||With the while loop we can execute a set of statements as long as a condition is TRUE:|||Print i as long as i is less than 6:|||In the example above, the loop will continue to produce numbers ranging from 1 to 5. The loop will stop at 6 because 6 < 6 is FALSE.|||The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.|||Note: remember to increment i, or else the loop will continue forever.|||With the break statement, we can stop the loop even if the while condition is TRUE:|||Exit the loop if i is equal to 4.|||The loop will stop at 3 because we have chosen to finish the loop by using the break statement when i is equal to 4 (i == 4).|||With the next statement, we can skip an iteration without terminating the loop:|||Skip the value of 3:|||When the loop passes the value 3, it will skip it and continue to loop.|||To demonstrate a practical example, let us say we play a game of Yahtzee!|||Print ""Yahtzee!"" If the dice number is 6:|||If the loop passes the values ranging from 1 to 5, it prints ""No Yahtzee"". Whenever it passes the value6, it prints ""Yahtzee!"".",,while loops@@@for loops,,,"[['\n  i <- 1', 'while (i < 6) {', '\xa0 print(i)', '\xa0 i <- i + 1', '}'], ['\n  i <- 1', 'while (i < 6) {', '\xa0 print(i)', '\xa0 i <- i + 1', '\xa0 if \n  (i == 4) {', '\xa0\xa0\xa0 break', '\xa0 }', '}'], ['\n  i <- 0', 'while (i < 6) {', '\xa0 i <- i + 1', '\xa0 if (i == 3) {', '\xa0\xa0\xa0 \n  next', '\xa0 }', '\xa0 print(i)', '}'], ['\n  dice <- 1', 'while (dice <= 6) {', '\xa0 if (dice < 6) {', '\xa0\xa0\xa0 print(""No \n  Yahtzee"")', '\xa0 } else {', '\xa0\xa0\xa0 print(""Yahtzee!"")', '\xa0 }', '\xa0 dice <- dice \n  + 1', '}']]"
R Tutorial,R For Loop,https://www.w3schools.com/r/r_for_loop.asp,"A for loop is used for iterating over a sequence:|||This is less like the for keyword in other programming languages, and works more like an iteratormethod as found in other object-orientated programming languages.|||With the for loop we can execute a set of statements, once for each item in a vector, array, list, etc..|||You will learn about lists and vectors, etc in a later chapter.|||Print every item in a list:|||Print the number of dices:|||The for loop does not require an indexing variable to set beforehand, like with while loops.|||With the break statement, we can stop the loop before it has looped through all the items:|||Stop the loop at ""cherry"":|||The loop will stop at ""cherry"" because we have chosen to finish the loop by using the break statement when x is equal to ""cherry"" (x == ""cherry"").|||With the next statement, we can skip an iteration without terminating the loop:|||Skip ""banana"":|||When the loop passes ""banana"", it will skip it and continue to loop.|||To demonstrate a practical example, let us say we play a game of Yahtzee!|||Print ""Yahtzee!"" If the dice number is 6:|||If the loop reaches the values ranging from 1 to 5, it prints ""No Yahtzee"" and its number. When itreaches the value 6, it prints ""Yahtzee!"" and its number.|||You can also have a loop inside of a loop:|||Print the adjective of each fruit in a list:",,,,,"[['\n  for (x in 1:10) {', '\xa0 print(x)', '}'], ['\n  fruits <- list(""apple"", ""banana"", ""cherry"")', 'for (x in fruits) {', '\xa0 \n  print(x)', '}'], ['\n  dice <- c(1, 2, 3, 4, 5, 6)', 'for (x in dice) {', '\xa0 print(x)', '}'], ['\n  fruits <- list(""apple"", ""banana"", ""cherry"")', 'for (x in fruits) {', '\xa0 \n  if (x == ""cherry"") {', '\xa0\xa0\xa0 break', '\xa0 }', '\xa0 \n  print(x)', '}'], ['\n  fruits <- list(""apple"", ""banana"", ""cherry"")', 'for (x in fruits) {', '\xa0 \n  if (x == ""banana"") {', '\xa0\xa0\xa0 next', '\xa0 }', '\xa0 print(x)', '\n  }'], ['\n  dice <- 1:6', 'for(x in dice) {', '\xa0 if (x == 6) {', '\xa0\xa0\xa0 \n  print(paste(""The dice number is"", x, ""Yahtzee!""))', '\xa0 } else {', '\xa0\xa0\xa0 \n  print(paste(""The dice number is"", x, ""Not Yahtzee""))', '\xa0 }', '}'], ['\n  adj <- list(""red"", ""big"", ""tasty"")', 'fruits <- list(""apple"", ""banana"", \n  ""cherry"")', '\xa0 for (x in adj) {', '\xa0\xa0\xa0 for (y in fruits) {', '\xa0\xa0\xa0\xa0\xa0 \n  print(paste(x, y))', '\xa0 }', '}']]"
R Tutorial,R Functions,https://www.w3schools.com/r/r_functions.asp,"A function is a block of code which only runs when it is called.|||You can pass data, known as parameters, into a function.|||A function can return data as a result.|||To create a function, use the function() keyword:|||To call a function, use the function name followed by parenthesis, like my_function():|||Information can be passed into functions as arguments.|||Arguments are specified after the function name, inside the parentheses. You can add as manyarguments as you want, just separate them with a comma.|||The following example has a function with one argument (fname). When the function is called, wepass along a first name, which is used inside the function to print the full name:|||The terms ""parameter"" and ""argument"" can be used for the same thing: information that are passed intoa function.|||From a function's perspective:|||A parameter is the variable listed inside the parentheses in the function definition.|||An argument is the value that is sent to the function when it is called.|||By default, a function must be called with the correct number of arguments. Meaning that if yourfunction expects 2 arguments, you have to call the function with 2 arguments, not more, and not less:|||This function expects 2 arguments, and gets 2 arguments:|||If you try to call the function with 1 or 3 arguments, you will get an error:|||This function expects 2 arguments, and gets 1 argument:|||The following example shows how to use a default parameter value.|||If we call the function without an argument, it uses the default value:|||To let a function return a result, use the return() function:|||The output of the code above will be:|||There are two ways to create a nested function:|||Call a function within another function:|||The function tells x to add y.|||The first input Nested_function(2,2) is ""x"" of the main function.|||The second input Nested_function(3,3) is ""y"" of the main function.|||The output is therefore (2+2) + (3+3) = 10.|||Write a function within a function:|||You cannot directly call the function because the Inner_func has been defined (nested) inside theOuter_func.|||We need to call Outer_func first in order to call Inner_func as a second step.We need to create a new variable called output and give it a value, which is 3 here.We then print the output with the desired value of ""y"", which in this case is 5.The output is therefore 8 (3 + 5).RecursionR also accepts function recursion, which means a defined function can call itself.Recursion is a common mathematical and programming concept. It means that a function calls itself.This has the benefit of meaning that you can loop through data to reach a result.The developer should be very careful with recursion as it can be quite easy to slip into writing afunction which never terminates, or one that uses excess amounts of memory or processor power.However, when written correctly, recursion can be a very efficient and mathematically-elegantapproach to programming.In this example, tri_recursion() is a function that we have defined to call itself (""recurse""). We use thek variable as the data, which decrements (-1) every time we recurse. The recursion ends when thecondition is not greater than 0 (i.e. when it is 0).To a new developer it can take some time to work out how exactly this works, best way to find out isby testing and modifying it.Example  tri_recursion <- function(k) {  if (k > 0) {      result <- k + tri_recursion(k - 1)    print(result)    } else {    result = 0    return(result)    }}tri_recursion(6)Try it Yourself »❮ PreviousNext ❯|||We need to create a new variable called output and give it a value, which is 3 here.|||We then print the output with the desired value of ""y"", which in this case is 5.|||The output is therefore 8 (3 + 5).|||R also accepts function recursion, which means a defined function can call itself.|||Recursion is a common mathematical and programming concept. It means that a function calls itself.This has the benefit of meaning that you can loop through data to reach a result.|||The developer should be very careful with recursion as it can be quite easy to slip into writing afunction which never terminates, or one that uses excess amounts of memory or processor power.However, when written correctly, recursion can be a very efficient and mathematically-elegantapproach to programming.|||In this example, tri_recursion() is a function that we have defined to call itself (""recurse""). We use thek variable as the data, which decrements (-1) every time we recurse. The recursion ends when thecondition is not greater than 0 (i.e. when it is 0).|||To a new developer it can take some time to work out how exactly this works, best way to find out isby testing and modifying it.",Number of Arguments|||Default Parameter Value|||Return Values,Call a function within another function.@@@Write a function within a function.,,,"[['\n  my_function <- function() { # create a function with the name my_function', '\xa0 print(""Hello World!"")', '}'], ['\n  my_function <- function() {', '\xa0 print(""Hello World!"")', '}', '\n', <strong>my_function() </strong>, '# call the function named my_function'], ['\n  my_function <- function(fname) {', '\xa0 paste(fname, ""Griffin"")', '}', 'my_function(""Peter"")', 'my_function(""Lois"")', 'my_function(""Stewie"")'], ['\n  my_function <- function(fname, lname) {', '\xa0 paste(fname, lname)', '\n  }', 'my_function(""Peter"", ""Griffin"")'], ['\n  my_function <- function(country = ""Norway"") {', '\xa0 paste(""I am \n  from"", country)', '}', 'my_function(""Sweden"")', 'my_function(""India"")', '\n  my_function() \n  # will get the default value, which is Norway', 'my_function(""USA"")'], ['\n  my_function <- function(x) {', '\xa0 return (5 * x)', '}', '\n  print(my_function(3))', 'print(my_function(5))', 'print(my_function(9))'], ['\n  Nested_function <- function(x, y) {', '\xa0 a <- x + y', '\xa0 return(a)', '\n  }', '\n', 'Nested_function(Nested_function(2,2), Nested_function(3,3))'], ['\n  Outer_func <- function(x) {', '\xa0 Inner_func <- function(y) {', '\xa0\xa0\xa0 \n  a <- x + y', '\xa0\xa0\xa0 return(a)', '\xa0 }', '\xa0 return \n  (Inner_func)', '}', 'output <- Outer_func(3) # To \n  call the Outer_func', 'output(5)'], ['\n  tri_recursion <- function(k) {', '\xa0 if (k > 0) {', '\xa0\xa0\xa0 \n  result <- k + tri_recursion(k - 1)', '\xa0\xa0\xa0 print(result)', '\xa0 \n  } else {', '\xa0\xa0\xa0 result = 0', '\xa0\xa0\xa0 return(result)', '\xa0 \n  }', '}', 'tri_recursion(6)']]"
R Data Structures,R Vectors,https://www.w3schools.com/r/r_vectors.asp,"A vector is simply a list of items that are of the same type.|||To combine the list of items to a vector, use the c() function and separate the items by a comma.|||In the example below, we create a vector variable called fruits, that combine strings:|||In this example, we create a vector that combines numerical values:|||To create a vector with numerical values in a sequence, use the : operator:|||You can also create numerical values with decimals in a sequence, but note that if the last element does not belong to the sequence, it is not used:|||Result:|||In the example below, we create a vector of logical values:|||To find out how many items a vector has, use the length() function:|||To sort items in a vector alphabetically or numerically, use the sort() function:|||You can access the vector items by referring to its index number inside brackets []. The first item has index 1, the second item has index 2, and so on:|||You can also access multiple elements by referring to different index positions with the c() function:|||You can also use negative index numbers to access all items except the ones specified:|||To change the value of a specific item, refer to the index number:|||To repeat vectors, use the rep() function:|||Repeat each value:|||Repeat the sequence of the vector:|||Repeat each value independently:|||One of the examples on top, showed you how to create a vector with numerical values in a sequence with the : operator:|||To make bigger or smaller steps in a sequence, use the seq() function:|||Note: The seq() function has three parameters: from is where the sequence starts, to is where the sequence stops, and by is the interval of thesequence.",,,,,"[['\n  # Vector of strings', '\n  fruits <- c(""banana"", ""apple"", ""orange"")', '\n', '# Print fruits', 'fruits'], ['\n  # Vector of numerical \n  values ', 'numbers <- c(1, 2, 3)', '# Print numbers', '\n  numbers'], ['\n  # Vector with numerical values in a sequence', 'numbers <- \n  1:10', 'numbers'], ['\n  # Vector with numerical \n  decimals in a sequence', 'numbers1 <- \n  1.5:6.5', 'numbers1', '# Vector with numerical \n  decimals in a sequence where the last element is not used', 'numbers2 <- \n  1.5:6.3', 'numbers2'], ['\n  # Vector of logical values', 'log_values <- \n  c(TRUE, FALSE, TRUE, FALSE)', 'log_values'], ['\n  fruits <- c(""banana"", ""apple"", ""orange"")', 'length(fruits)'], ['\n    fruits <- c(""banana"", ""apple"", ""orange"", ""mango"", ""lemon"")', 'numbers <- c(13, 3, 5, 7, 20, 2)', 'sort(fruits)\xa0\n  # Sort a string', '\n  sort(numbers) # Sort numbers'], ['\n  fruits <- c(""banana"", ""apple"", ""orange"")', '\n', '# Access the first item (banana)', 'fruits[1]'], ['\n  fruits <- c(""banana"", ""apple"", ""orange"", \n  ""mango"", ""lemon"")', '# Access the first and third item \n  (banana and orange)', 'fruits[c(1, 3)]'], ['\n  fruits <- c(""banana"", ""apple"", ""orange"", ""mango"", ""lemon"")', '# Access all \n  items except for the first item', 'fruits[c(-1)]'], ['\n  fruits <- c(""banana"", ""apple"", ""orange"", ""mango"", ""lemon"")', '# Change \n  ""banana"" to ""pear""', '\n  fruits[1] <- ""pear""', '# Print fruits', 'fruits '], ['\n  repeat_each <- rep(c(1,2,3), each = 3)', 'repeat_each'], ['\n  repeat_times <- rep(c(1,2,3), times = 3)', 'repeat_times'], ['\n  repeat_indepent <- rep(c(1,2,3), times = c(5,2,1))', 'repeat_indepent'], ['\n  numbers <- \n  1:10', 'numbers'], ['\n  numbers <- seq(from = 0, to = 100, by = 20)', 'numbers']]"
R Data Structures,R Lists,https://www.w3schools.com/r/r_lists.asp,"A list in R can contain many different data types inside it. A list is a collection of data which is ordered andchangeable.|||To create a list, use the list() function:|||You can access the list items by referring to its index number, inside brackets. The first item has index 1, the second item has index 2, and so on:|||To change the value of a specific item, refer to the index number:|||To find out how many items a list has, use the length() function:|||To find out if a specified item is present in a list, use the %in% operator:|||Check if ""apple"" is present in the list:|||To add an item to the end of the list, use the append() function:|||Add ""orange"" to the list:|||To add an item to the right of a specified index, add ""after=index number"" in the append() function:|||Add ""orange"" to the list after ""banana"" (index 2):|||You can also remove list items. The following example creates a new, updated list without an ""apple"" item:|||Remove ""apple"" from the list:|||You can specify a range of indexes by specifying where to start and where to end the range, by using the : operator:|||Return the second, third, fourth and fifth item:|||Note: The search will start at index 2 (included) and end at index 5 (included).|||Remember that the first item has index 1.|||You can loop through the list items by using a for loop:|||Print all items in the list, one by one:|||There are several ways to join, or concatenate, two or more lists in R.|||The most common way is to use the c() function, which combines two elements together:",,,,,"[['\n  # List of strings', 'thislist <- list(""apple"", ""banana"", ""cherry"")', '\n', '# Print the list', '\n  thislist'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', '\n  thislist[1]'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', 'thislist[1] <- ""blackcurrant""', '\n', '# Print the updated list', 'thislist'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', 'length(thislist)'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', '""apple"" %in% thislist'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', 'append(thislist, \n  ""orange"")'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', 'append(thislist, \n  ""orange"", after = 2)'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', 'newlist <- thislist[-1]', '\n', '# Print the new list', 'newlist'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"", ""orange"", ""kiwi"", ""melon"", \n  ""mango"")', '(thislist)[2:5]'], ['\n  thislist <- list(""apple"", ""banana"", ""cherry"")', 'for (x in thislist) {', '\xa0 \n  print(x)', '}'], ['\n  list1 <- list(""a"", ""b"", ""c"")', 'list2 <- list(1,2,3)', 'list3 <- \n  c(list1,list2)', 'list3']]"
R Data Structures,R Matrices,https://www.w3schools.com/r/r_matrices.asp,"A matrix is a two dimensional data set with columns and rows.|||A column is a vertical representation of data, while a row is a horizontal representation of data.|||A matrix can be created with the matrix() function. Specify the nrow and ncol parameters to get the amount of rows and columns:|||Note: Remember the c() function is used to concatenate items together.|||You can also create a matrix with strings:|||You can access the items by using [ ] brackets. The first number ""1"" in the bracket specifies the row-position, while the second number ""2"" specifies the column-position: |||The whole row can be accessed if you specify a comma after the number in the bracket:|||The whole column can be accessed if you specify a comma before the number in the bracket:|||More than one row can be accessed if you use the c() function:|||More than one column can be accessed if you use the c() function:|||Use the cbind() function to add additional columns in a Matrix:|||Note: The cells in the new column must be of the same length as the existing matrix.|||Use the rbind() function to add additional rows in a Matrix:|||Note: The cells in the new row must be of the same length as the existing matrix.|||Use the c() function to remove rows and columns in a Matrix:|||To find out if a specified item is present in a matrix, use the %in% operator:|||Check if ""apple"" is present in the matrix:|||Use the dim() function to find the amount of rows and columns in a Matrix:|||Use the length() function to find the dimension of a Matrix:|||Total cells in the matrix is the number of rows multiplied by number of columns.|||In the example above: Dimension = 2*2 = 4.|||You can loop through a Matrix using a for loop. The loop will start at the first row, moving right:|||Loop through the matrix items and print them:|||Again, you can use the rbind() or cbind() function to combine two or more matrices together:",,,,,"[['\n  # Create a matrix', 'thismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)', '# Print the \n  matrix', 'thismatrix'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', 'thismatrix'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', <strong>thismatrix[1, 2]</strong>], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', <strong>thismatrix[2,]</strong>], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', <strong>thismatrix[,2]</strong>], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange"",""grape"", \n  ""pineapple"", ""pear"", ""melon"", ""fig""), nrow = 3, ncol = 3)', 'thismatrix[c(1,2),]'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange"",""grape"", \n  ""pineapple"", ""pear"", ""melon"", ""fig""), nrow = 3, ncol = 3)', 'thismatrix[, \n  c(1,2)]'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange"",""grape"", \n  ""pineapple"", ""pear"", ""melon"", ""fig""), nrow = 3, ncol = 3)', 'newmatrix <- \n  cbind(thismatrix, c(""strawberry"", ""blueberry"", ""raspberry""))', '\n', '# Print the new matrix', '\n  newmatrix'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange"",""grape"", \n  ""pineapple"", ""pear"", ""melon"", ""fig""), nrow = 3, ncol = 3)', 'newmatrix <- \n  rbind(thismatrix, c(""strawberry"", ""blueberry"", ""raspberry""))', '\n', '# Print the new matrix', '\n  newmatrix'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange"", ""mango"", ""pineapple""), \n  nrow = 3, ncol =2)', '\n  #Remove the first row and the first column', 'thismatrix <- thismatrix[-c(1), -c(1)]', '\n  thismatrix'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', '""apple"" %in% thismatrix'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', 'dim(thismatrix)'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', 'length(thismatrix)'], ['\n  thismatrix <- matrix(c(""apple"", ""banana"", ""cherry"", ""orange""), nrow = 2, ncol \n  = 2)', 'for (rows in 1:nrow(thismatrix)) {', '\xa0 for (columns in \n  1:ncol(thismatrix)) {', '\xa0\xa0\xa0 print(thismatrix[rows, columns])', '\xa0 \n  }', '}'], ['\n  # Combine matrices', 'Matrix1 <- matrix(c(""apple"", ""banana"", ""cherry"", \n  ""grape""), nrow = 2, ncol = 2)', 'Matrix2 <- matrix(c(""orange"", ""mango"", \n  ""pineapple"", ""watermelon""), nrow = 2, ncol = 2)', '# Adding it as a rows', '\n  Matrix_Combined <- rbind(Matrix1, Matrix2)', 'Matrix_Combined', '\n  # Adding it as a columns', 'Matrix_Combined <- cbind(Matrix1, Matrix2)', '\n  Matrix_Combined']]"
R Data Structures,R Arrays,https://www.w3schools.com/r/r_arrays.asp,"Compared to matrices, arrays can have more than two dimensions. |||We can use the array() function to create an array, and the dim parameter to specify the dimensions:|||In the example above we create an array with the values 1 to 24.|||How does dim=c(4,3,2) work?The first and second number in the bracket specifies the amount of rows and columns.The last number in the bracket specifies how many dimensions we want.|||Note: Arrays can only have one data type.|||You can access the array elements by referring to the index position. You can use the [] brackets toaccess the desired elements from an array:|||The syntax is as follow:array[row position, column position, matrix level]|||You can also access the whole row or column from a matrix in an array, by using the c() function:|||A comma (,) before c() means that we want to access the column.|||A comma (,) after c() means that we want to access the row.|||To find out if a specified item is present in an array, use the %in% operator:|||Check if the value ""2"" is present in the array:|||Use the dim() function to find the amount of rows and columns in an array:|||Use the length() function to find the dimension of an array:|||You can loop through the array items by using a for loop:",,,,,"[['\n  # An array with one dimension with values ranging from 1 to 24', 'thisarray <- \n  c(1:24)', 'thisarray', '# An array with more than one dimension', '\n  multiarray <- array(thisarray, dim = c(4, 3, 2))', 'multiarray'], ['\n  thisarray <- c(1:24)', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '\n  multiarray[2, 3, 2]'], ['\n  thisarray <- c(1:24)', '# Access all the items from the first row from \n  matrix one', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '\n  multiarray[c(1),,1]', '# Access all the items from the first column \n  from matrix one', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '\n  multiarray[,c(1),1]'], ['\n  thisarray <- c(1:24)', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '2 %in% multiarray'], ['\n  thisarray <- c(1:24)', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '\n  dim(multiarray)'], ['\n  thisarray <- c(1:24)', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '\n  length(multiarray)'], ['\n  thisarray <- c(1:24)', 'multiarray <- array(thisarray, dim = c(4, 3, 2))', '\n', 'for(x in multiarray){', '\xa0 print(x)', '}']]"
R Data Structures,R Data Frames,https://www.w3schools.com/r/r_data_frames.asp,"Data Frames are data displayed in a format as a table.|||Data Frames can have different types of data inside it. While the first column can be character, thesecond and third can be numeric or logical. However, each column should have the same type ofdata.|||Use the data.frame() function to create a data frame:|||Use the summary() function to summarize the data from a Data Frame:|||You will learn more about the summary() function in the statistical part of the R tutorial.|||We can use single brackets [ ], double brackets [[ ]] or $ to access columns from a data frame:|||Use the rbind() function to add new rows in a Data Frame:|||Use the cbind() function to add new columns in a Data Frame:|||Use the c() function to remove rows and columns in a Data Frame:|||Use the dim() function to find the amount of rows and columns in a Data Frame:|||You can also use the ncol() function to find the number of columns and nrow() to find the number of rows:|||Use the length() function to find the number of columns in a Data Frame (similar to ncol()):|||Use the rbind() function to combine two or more data frames in R vertically:|||And use the cbind() function to combine two or more data frames in R horizontally:",,,,,"[['\n  # Create a data frame', 'Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', '# Print the data frame', 'Data_Frame'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'Data_Frame', 'summary(Data_Frame)'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'Data_Frame[1]', '\n', 'Data_Frame[[""Training""]]', 'Data_Frame$Training'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', '# Add a new row', 'New_row_DF <- rbind(Data_Frame, c(""Strength"", \n  110, 110))', '# Print the new row', 'New_row_DF'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', '# Add a new column', 'New_col_DF <- cbind(Data_Frame, Steps = \n  c(1000, 6000, 2000))', '# Print the new column', 'New_col_DF'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', '# Remove the first row and column', 'Data_Frame_New <- \n  Data_Frame[-c(1), -c(1)]', '# Print the new data frame', 'Data_Frame_New'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'dim(Data_Frame)'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'ncol(Data_Frame)', 'nrow(Data_Frame)'], ['\n  Data_Frame <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'length(Data_Frame)'], ['\n  Data_Frame1 <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'Data_Frame2 <- data.frame (', '\xa0 Training = c(""Stamina"", \n  ""Stamina"", ""Strength""),', '\xa0 Pulse = c(140, 150, 160),', '\xa0 Duration = \n  c(30, 30, 20)', ')', 'New_Data_Frame <- rbind(Data_Frame1, Data_Frame2)', '\n  New_Data_Frame'], ['\n  Data_Frame3 <- data.frame (', '\xa0 Training = c(""Strength"", ""Stamina"", \n  ""Other""),', '\xa0 Pulse = c(100, 150, 120),', '\xa0 Duration = c(60, 30, \n  45)', ')', 'Data_Frame4 <- data.frame (', '\xa0 Steps = c(3000, 6000, \n  2000),', '\xa0 Calories = c(300, 400, 300)', ')', 'New_Data_Frame1 <- \n  cbind(Data_Frame3, Data_Frame4)', 'New_Data_Frame1']]"
R Data Structures,R Factors,https://www.w3schools.com/r/r_factors.asp,"Factors are used to categorize data. Examples of factors are:|||To create a factor, use the factor() function and add a vector as argument:|||Result:|||You can see from the example above that that the factor has four levels (categories): Classic, Jazz, Pop and Rock.|||To only print the levels, use the levels() function:|||Result:|||You can also set the levels, by adding the levels argument inside the factor() function:|||Result:|||Use the length() function to find out how many items there are in the factor:|||Result:|||To access the items in a factor, refer to the index number, using [] brackets:|||Access the third item:|||Result:|||To change the value of a specific item, refer to the index number:|||Change the value of the third item:|||Result:|||Note that you cannot change the value of a specific item if it is not already specified in the factor. The following example will produce an error:|||Trying to change the value of the third item (""Classic"") to an item that does not exist/not predefined (""Opera""):|||Result:|||However, if you have already specified it inside the levels argument, it will work:|||Change the value of the third item:|||Result:",,"Demography: Male/Female@@@Music: Rock, Pop, Classic, Jazz@@@Training: Strength, Stamina",,,"[['\n  # Create a factor', 'music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""))', '# Print the factor', 'music_genre'], ['\n  music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""))', 'levels(music_genre)'], ['\n  music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""), levels = c(""Classic"", ""Jazz"", ""Pop"", ""Rock"", ""Other""))', '\n', 'levels(music_genre)'], ['\n  music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""))', 'length(music_genre)'], ['\n  music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""))', 'music_genre[3]'], ['\n  music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""))', 'music_genre[3] <- ""Pop""', 'music_genre[3]'], ['\n  music_genre <- factor(c(""Jazz"", ""Rock"", ""Classic"", ""Classic"", ""Pop"", ""Jazz"", \n  ""Rock"", ""Jazz""), levels = c(""Classic"", ""Jazz"", ""Pop"", ""Rock"", \n  ', <strong>""Opera""</strong>, '))', '\n', 'music_genre[3] <- ""Opera""', 'music_genre[3]']]"
R Graphics,R Plot,https://www.w3schools.com/r/r_graph_plot.asp,"The plot() function is used to draw points (markers) in a diagram.|||The function takes parameters for specifying points in the diagram.|||Parameter 1 specifies points on the x-axis.|||Parameter 2 specifies points on the y-axis.|||At its simplest, you can use the plot() function to plot two numbers against each other:|||Draw one point in the diagram, at position (1) and position (3):|||Result:|||To draw more points, use vectors:|||Draw two points in the diagram, one at position (1, 3) and one in position (8, 10):|||Result:|||You can plot as many points as you like, just make sure you have the same number of points in both axis:|||Result:|||For better organization, when you have many values, it is better to use variables:|||Result:|||If you want to draw dots in a sequence, on both the x-axis and the y-axis, use the : operator:|||Result:|||The plot() function also takes a type parameter with the value l to draw a line to connect all the points in the diagram:|||Result:|||The plot() function also accept other parameters, such as main, xlab and ylab if you want to customize the graph with a main title and different labels for the x and y-axis:|||Result:|||There are many other parameters you can use to change the appearance of the points.|||Use col=""color"" to add a color to the points:|||Result:|||Use cex=number to change the size of the points (1 is default, while 0.5 means 50% smaller, and 2 means 100% larger):|||Result:|||Use pch with a value from 0 to 25 to change the point shape format:|||Result:|||The values of the pch parameter ranges from 0 to 25, which means that we can choose up to 26 different types ofpoint shapes:",,,,,"[['\n  plot(1, 3)'], ['\n  plot(c(1, 8), c(3, 10))'], ['\n  plot(c(1, 2, 3, 4, 5), c(3, 7, 8, 9, 12))'], ['\n  x <- c(1, 2, 3, 4, 5)', 'y <- c(3, 7, 8, 9, 12)', 'plot(x, y)'], ['\n  plot(1:10)'], ['\n  plot(1:10, type=""l"")'], ['\n  plot(1:10, main=""My Graph"", xlab=""The x-axis"", ylab=""The y axis"")'], ['\n  plot(1:10, col=""red"")'], ['\n  plot(1:10, cex=2)'], ['\n  plot(1:10, pch=25, cex=2)']]"
R Graphics,R Line,https://www.w3schools.com/r/r_graph_line.asp,"A line graph has a line that connects all the points in a diagram.|||To create a line, use the plot() function and add the type parameter with a value of ""l"":|||Result:|||The line color is black by default. To change the color, use the col parameter:|||Result:|||To change the width of the line, use the lwd parameter (1 is default, while 0.5 means 50% smaller, and 2 means 100% larger):|||Result:|||The line is solid by default. Use the lty parameter with a value from 0 to 6 to specify the line format.|||For example, lty=3 will display a dotted line instead of a solid line:|||Result:|||Available parameter values for lty:|||To display more than one line in a graph, use the plot() function together with the lines() function:|||Result:",Line Color|||Line Styles,"0 removes the line@@@1 displays a solid line@@@2 displays a dashed line@@@3 displays a dotted line@@@4 displays a ""dot dashed"" line@@@5 displays a ""long dashed"" line@@@6 displays a ""two dashed"" line",,,"[['\n  plot(1:10, type=""l"")'], ['\n  plot(1:10, type=""l"", col=""blue"")'], ['\n  plot(1:10, type=""l"", lwd=2)'], ['\n  plot(1:10, type=""l"", lwd=5, lty=3)'], ['\n  line1 <- c(1,2,3,4,5,10)', 'line2 <- c(2,5,7,8,9,10)', 'plot(line1, \n  type = ""l"", col = ""blue"")', 'lines(line2, type=""l"", col = ""red"")']]"
R Graphics,R Scatterplot,https://www.w3schools.com/r/r_graph_scatterplot.asp,"You learned from the Plot chapter that the plot() function is used to plot numbers against each other.|||A ""scatter plot"" is a type of plot used to display the relationship between two numerical variables, and plots one dot for each observation.|||It needs two vectors of same length, one for the x-axis (horizontal) and one for the y-axis (vertical):|||Result:|||The observation in the example above should show the result of 12 cars passing by.|||That might not be clear for someone who sees the graph for the first time, so let's add a header and different labels to describe the scatter plot better:|||Result:|||To recap, the observation in the example above is the result of 12 cars passing by.|||The x-axis shows how old the car is.|||The y-axis shows the speed of the car when it passes.|||Are there any relationships between the observations?|||It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 12 cars.|||In the example above, there seems to be a relationship between the car speed and age, but what if we plot the observations from another day as well? Will the scatter plot tell us something else?|||To compare the plot with another plot, use the points() function:|||Draw two plots on the same figure:|||Result:|||Note: To be able to see the difference of the comparison, you must assign different colors to the plots (by using the col parameter). Red represents the values of day 1, while blue represents day 2.  Note that we have also added the cex parameter to increase the size of the dots.|||Conclusion of observation: By comparing the two plots, I think it is safe to say that they both gives us the same conclusion: the newer the car, the faster it drives.",,,,,"[['\n  x <- c(5,7,8,7,2,2,9,4,11,12,9,6)', 'y <- \n  c(99,86,87,88,111,103,87,94,78,77,85,86)', 'plot(x, y)'], ['\n  x <- c(5,7,8,7,2,2,9,4,11,12,9,6)', 'y <- \n  c(99,86,87,88,111,103,87,94,78,77,85,86)', 'plot(x, y, main=""Observation \n  of Cars"", xlab=""Car age"", ylab=""Car speed"")'], ['\n  # day one, the age and speed of 12 cars:', 'x1 <- c(5,7,8,7,2,2,9,4,11,12,9,6)', 'y1 <- c(99,86,87,88,111,103,87,94,78,77,85,86)', '\n', '# day two, the age and speed of 15 cars:', 'x2 <- \n  c(2,2,8,1,15,8,12,9,7,3,11,4,7,14,12)', 'y2 <- \n  c(100,105,84,105,90,99,90,95,94,100,79,112,91,80,85)', 'plot(x1, y1, \n  main=""Observation of Cars"", xlab=""Car age"", ylab=""Car speed"", col=""red"", \n  cex=2)', 'points(x2, y2, col=""blue"", cex=2)']]"
R Graphics,R Pie Charts,https://www.w3schools.com/r/r_graph_pie.asp,"A pie chart is a circular graphical view of data.|||Use the pie() function to draw pie charts:|||Result:|||As you can see the pie chart draws one pie for each value in the vector (in this case10, 20, 30, 40).|||By default, the plotting of the first pie starts from the x-axis and move counterclockwise.|||Note: The size of each pie is determined by comparing the value with all the other values, byusing this formula:|||The value divided by the sum of all values: x/sum(x)|||You can change the start angle of the pie chart with the init.angle parameter.|||The value of init.angle is defined with angle in degrees, where default angle is 0.|||Start the first pie at 90 degrees:|||Result:|||Use the label parameter to add a label to the pie chart, and use the main parameter to add a header:|||Result:|||You can add a color to each pie with the col parameter:|||Result:|||To add a list of explanation for each pie, use the legend() function:|||Result:|||The legend can be positioned as either:|||bottomright,bottom,bottomleft,left,topleft,top,topright,right,center",Pie Charts,,,,"[['\n  # Create a vector of pies', 'x <- c(10,20,30,40)', '# Display \n  the pie chart', 'pie(x)'], ['\n  # Create a vector of pies', 'x <- c(10,20,30,40)', '# Display \n  the pie chart and start the first pie at 90 degrees', 'pie(x, init.angle = 90)'], ['\n  # Create a vector of pies', 'x <- c(10,20,30,40)', '# Create a vector of labels', 'mylabel <- c(""Apples"", \n  ""Bananas"", ""Cherries"", ""Dates"")', '# Display \n  the pie chart with labels', 'pie(x, label = mylabel, main = ""Fruits"")'], ['\n  # Create a vector of colors', 'colors <- c(""blue"", ""yellow"", ""green"", ""black"")', '# Display the pie chart \n  with colors', 'pie(x, label = mylabel, main = \n  ""Fruits"", col = colors)'], ['\n  # Create a vector of labels', 'mylabel <- c(""Apples"", ""Bananas"", ""Cherries"", \n  ""Dates"")', '# Create a vector of colors', 'colors <- c(""blue"", ""yellow"", \n  ""green"", ""black"")', '# Display the pie chart with \n  colors', 'pie(x, label = mylabel, \n  main = ""Pie Chart"", col = colors)', '# Display the explanation box', '\n  legend(""bottomright"", mylabel, fill = colors)']]"
R Graphics,R Bars,https://www.w3schools.com/r/r_graph_bars.asp,"A bar chart uses rectangular bars to visualize data. Bar charts can be displayed horizontally or vertically. The height or length of the bars are proportional to the values they represent.|||Use the barplot() function to draw a vertical bar chart:|||Result:|||Use the col parameter to change the color of the bars:|||Result:|||To change the bar texture, use the density parameter:|||Result:|||Use the width parameter to change the width of the bars:|||Result:|||If you want the bars to be displayed horizontally instead of vertically, use horiz=TRUE:|||Result:",Bar Charts,"The x variable represents values in the x-axis (A,B,C,D)@@@The y variable represents values in the y-axis (2,4,6,8)@@@Then we use the barplot() function to create a bar chart of the values@@@names.arg defines the names of each observation in the x-axis",,,"[['\n  # x-axis values', 'x <- c(""A"", ""B"", ""C"", ""D"")', '\n', '# y-axis values', 'y <- c(2, 4, 6, 8)', 'barplot(y, names.arg = x)'], ['\n  x <- c(""A"", ""B"", ""C"", ""D"")', 'y <- c(2, 4, 6, 8)', 'barplot(y, names.arg = x, \n  col = ""red"")'], ['\n  x <- c(""A"", ""B"", ""C"", ""D"")', 'y <- c(2, 4, 6, 8)', 'barplot(y, names.arg = x, \n  density = 10)'], ['\n  x <- c(""A"", ""B"", ""C"", ""D"")', 'y <- c(2, 4, 6, 8)', 'barplot(y, names.arg = x, \n  width = c(1,2,3,4))'], ['\n  x <- c(""A"", ""B"", ""C"", ""D"")', 'y <- c(2, 4, 6, 8)', 'barplot(y, names.arg = x, \n  horiz = TRUE)']]"
R Statistics,R Statistics Intro,https://www.w3schools.com/r/r_stat_intro.asp,"Statistics is the science of analyzing, reviewing and conclude data.|||Some basic statistical numbers include:|||The R language was developed by two statisticians. It has many built-in functionalities, in addition tolibraries for the exact purpose of statistical analysis.|||You will learn about these features, and how to use them in the next chapters.|||Tip: If you are completely new to statistics, and want to learn more about it, visit our Statistics Tutorial.",,"Mean, median and mode@@@Minimum and maximum value@@@Percentiles@@@Variance and Standard Devation@@@Covariance and Correlation@@@Probability distributions",,,[]
R Statistics,R Data Set,https://www.w3schools.com/r/r_stat_data_set.asp,"A data set is a collection of data, often presented in a table.|||There is a popular built-in data set in R called ""mtcars"" (Motor Trend Car Road Tests), which is retrieved from the 1974 Motor Trend US Magazine.|||In the examples below (and for the next chapters), we will use the mtcars data set, for statistical purposes:|||Result:|||You can use the question mark (?) to get information about the mtcars data set:|||Result:|||The data was extracted from the 1974 Motor Trend US magazine,and comprises fuel consumption and 10 aspects ofautomobile design and performance for 32 automobiles (1973-74models).|||A data frame with 32 observations on 11 (numeric) variables.|||Henderson and Velleman (1981) comment in a footnote to Table 1:'Hocking [original transcriber]'s noncrucial coding of theMazda's rotary engine as a straight six-cylinder engine and thePorsche's flat engine as a V engine, as well as the inclusion of thediesel Mercedes 240D, have been retained to enable direct comparisonsto be made with previous analyses.'|||Henderson and Velleman (1981),Building multiple regression models interactively.Biometrics, 37, 391-411.|||Use the dim() function to find the dimensions of the data set, and the names() function to view the names of thevariables:|||Result:|||Use the rownames() function to get the name of each row in the first column, which is the name of each car:|||Result:|||From the examples above, we have found out that the data set has 32 observations (Mazda RX4, Mazda RX4 Wag, Datsun 710, etc) and 11 variables (mpg, cyl, disp, etc).|||A variable is defined as something that can be measured or counted.|||Here is a brief explanation of the variables from the mtcars data set:|||If you want to print all values that belong to a variable, access the data frame by using the $ sign, and the name of the variable (for example cyl (cylinders)):|||Result:|||To sort the values, use the sort() function:|||Result:|||From the examples above, we see that most cars have 4 and 8 cylinders.|||Now that we have some information about the data set, we can start to analyze it with some statistical numbers.|||For example, we can use the summary() function to get a statistical summary of the data:|||Do not worry if you do not understand the output numbers. You will master them shortly.|||The summary() function returns six statistical numbers for each variable:|||We will cover all of them, along with other statistical numbers in the next chapters.",,Min@@@First quantile (percentile)@@@Median@@@Mean@@@Third quantile (percentile)@@@Max,,"
    [, 1] ||| mpg  ||| Miles/(US) gallon &&&
    [, 2] ||| cyl  ||| Number of cylinders &&&
    [, 3] ||| disp ||| Displacement (cu.in.) &&&
    [, 4] ||| hp   ||| Gross horsepower &&&
    [, 5] ||| drat ||| Rear axle ratio &&&
    [, 6] ||| wt   ||| Weight (1000 lbs) &&&
    [, 7] ||| qsec ||| 1/4 mile time &&&
    [, 8] ||| vs   ||| Engine (0 = V-shaped, 1 = straight) &&&
    [, 9] ||| am   ||| Transmission (0 = automatic, 1 = manual) &&&
    [,10] ||| gear ||| Number of forward gears &&&
    [,11] ||| carb ||| Number of carburetors
  $$$mpg|||Miles/(US) Gallon&&&cyl|||Number of cylinders&&&disp|||Displacement&&&hp|||Gross horsepower&&&drat|||Rear axle ratio&&&wt|||Weight (1000 lbs)&&&qsec|||1/4 mile time&&&vs|||Engine (0 = V-shaped, 1 = straight)&&&am|||Transmission (0 = automatic, 1 = manual)&&&gear|||Number of forward gears&&&carb|||Number of carburetors","[['\n  # Print the mtcars data set', 'mtcars '], ['\n  # Use the question mark to get information about \n  the data set', '?mtcars'], ['\n  Data_Cars <- mtcars # create a variable of the mtcars data set for better \n  organization', '# Use dim() to find the dimension of the data set', '\n  dim(Data_Cars)', '# Use names() to find the names of the variables from \n  the data set', 'names(Data_Cars)'], ['\n  Data_Cars <- mtcars', 'rownames(Data_Cars)'], ['\n  Data_Cars <- mtcars', 'Data_Cars$cyl'], ['\n  Data_Cars <- mtcars', 'sort(Data_Cars$cyl)'], ['\n  Data_Cars <- mtcars', 'summary(Data_Cars)']]"
R Statistics,R Max and Min,https://www.w3schools.com/r/r_stat_max_min.asp,"In the previous chapter, we introduced the mtcars data set. We will continue to use this data set throughout the next pages.|||You learned from the R Math chapter that R has several built-in math functions. For example, the min() and max() functions can be used to find the lowest or highest value in a set:|||Find the largest and smallest value of the variable hp (horsepower).|||Result:|||Now we know that the largest horsepower value in the set is 335, and the lowest 52.|||We could take a look at the data set and try to find out which car these two values belongs to:|||By observing the table, it looks like the largest hp value belongs to a Maserati Bora, and the lowest belongs to a Honda Civic.|||However, it is much easier (and safer) to let R find out this for us.|||For example, we can use the which.max() and which.min() functions to find the index position of the max and min value in the table:|||Result:|||Or even better, combine which.max() and which.min() with the rownames() function to get the name of the car with the largest and smallest horsepower:|||Result:|||Now we know for sure:Maserati Bora is the car with the highest horsepower, andHonda Civic is the car with the lowest horsepower.|||Max and min can also be used to detect outliers. An outlier is a data point that differs from restof the observations.|||Example of data points that could have been outliers in the mtcars data set:",,If maximum of forward gears of a car was 11@@@If minimum of horsepower of a car was 0@@@If maximum weight of a car was 50 000 lbs,,,"[['\n  Data_Cars <- mtcars', 'max(Data_Cars$hp)', '\n  min(Data_Cars$hp)'], ['\n  Data_Cars <- mtcars', 'which.max(Data_Cars$hp)', 'which.min(Data_Cars$hp)'], ['\n  Data_Cars <- mtcars', '\n  rownames(Data_Cars)[which.max(Data_Cars$hp)]', '\n  rownames(Data_Cars)[which.min(Data_Cars$hp)]']]"
R Statistics,R Mean Median Mode,https://www.w3schools.com/r/r_stat_mean.asp,"In statistics, there are often three values that interests us:|||To calculate the average value (mean) of a variable from the mtcars data set, find the sum of all values, and divide the sum by the number of values.|||Luckily for us, the mean() function in R can do it for you:|||Find the average weight (wt) of a car:|||Result:",Mean,Mean - The average value@@@Median - The middle value@@@Mode - The most common value,,2.620|||2.770|||2.780|||2.875|||3.150|||3.170|||3.190|||3.215&&&3.435|||3.440|||3.440|||3.440|||3.460|||3.520|||3.570|||3.570&&&3.730|||3.780|||3.840|||3.845|||4.070|||5.250|||5.345|||5.424,"[['\n  Data_Cars <- mtcars', 'mean(Data_Cars$wt)']]"
R Statistics,R Percentiles,https://www.w3schools.com/r/r_stat_percentiles.asp,"Percentiles are used in statistics to give you a number that describes the value that a given percent ofthe values are lower than.|||If we take a look at the values of the wt (weight) variable from the mtcars data set:|||What is the 75. percentile of the weight of the cars? The answer is 3.61 or 3 610 lbs, meaning that 75% or the cars weight 3 610 lbs or less:|||Result:|||If you run the quantile() function without specifying the c() parameter, you will get the percentiles of 0, 25, 50, 75 and 100:|||Result:|||Quartiles are data divided into four parts, when sorted in an ascending order:|||Use the quantile() function to get the quartiles.",,,The value of the first quartile cuts off the first 25% of the data@@@The value of the second quartile cuts off the first 50% of the data@@@The value of the third quartile cuts off the first 75% of the data@@@The value of the fourth quartile cuts off the 100% of the data,2.620|||2.770|||2.780|||2.875|||3.150|||3.170|||3.190|||3.215&&&3.435|||3.440|||3.440|||3.440|||3.460|||3.520|||3.570|||3.570&&&3.730|||3.780|||3.840|||3.845|||4.070|||5.250|||5.345|||5.424,"[['\n  Data_Cars <- mtcars', '# c() specifies which percentile you want', '\n  quantile(Data_Cars$wt, c(0.75))'], ['\n  Data_Cars <- mtcars', 'quantile(Data_Cars$wt)']]"
R Examples,R Examples,https://www.w3schools.com/r/r_examples.asp,,,,,,[]
R Examples,R Compiler,https://www.w3schools.com/r/r_compiler.asp,"With our online R compiler, you can edit R code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you do not know R, we suggest that you read our R Tutorial from scratch.",R Compiler (Editor)|||R Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
R Examples,R Exercises,https://www.w3schools.com/r/r_exercises.asp,"We have gathered a variety of R exercises (with answers) for each R Chapter.|||Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start R Exercises ❯|||If you do not know R, we suggest that you read our R Tutorial from scratch.",,,,,[]
R Examples,R Quiz,https://www.w3schools.com/r/r_quiz.asp,"You can test your R skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about R.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the R Quiz ❯|||If you do not know R, we suggest that you read our R Tutorial from scratch.",,,,,[]
