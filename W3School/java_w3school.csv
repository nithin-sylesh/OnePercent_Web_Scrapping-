Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
Java Tutorial,Java HOME,https://www.w3schools.com/java/default.asp,"Java is a popular programming language.|||Java is used to develop mobile apps, web apps, desktop apps, games and much more.|||Our ""Try it Yourself"" editor makes it easy to learn Java. You can edit Java code and view the result in your browser.|||Try it Yourself »|||Click on the ""Run example"" button to see how it works.|||We recommend reading this tutorial, in the sequence listed in the left menu.|||Java is an object oriented language and some concepts may be new. Take breaks when needed, and goover the examples as many times as needed.|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise|||Test your Java skills with a quiz.|||Start Java Quiz|||Learn by examples! This tutorial supplements all explanations with clarifying examples.|||See All Java Examples|||Java Keywords|||Java String Methods|||Java Math Methods|||Download Java from the official Java web site:https://www.oracle.com|||Get certified by completing the  course",Examples in Each Chapter,,,,[]
Java Tutorial,Java Intro,https://www.w3schools.com/java/java_intro.asp,"Java is a popular programming language, created in 1995.|||It is owned by Oracle, and more than 3 billion devices run Java.|||It is used for:|||It is not necessary to have any prior programming experience.",What is Java?|||Why Use Java?,"Mobile applications (specially Android apps)@@@Desktop applications@@@Web applications@@@Web servers and application servers@@@Games@@@Database connection@@@And much, much more!|||Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)@@@It is one of the most popular programming language in the world@@@It is easy to learn and simple to use@@@It is open-source and free@@@It is secure, fast and powerful@@@It has a huge community support (tens of millions of developers)@@@Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs@@@As Java is close to C++ and C#, it makes it easy for programmers to switch to Java or vice versa",,,[]
Java Tutorial,Java Get Started,https://www.w3schools.com/java/java_getstarted.asp,"Some PCs might have Java already installed.|||To check if you have Java installed on a Windows PC, search in the start bar for Java or type the following in Command Prompt (cmd.exe):|||If Java is installed, you will see something like this (depending on version):|||If you do not have Java installed on your computer, you can download it for free at oracle.com.|||Note: In this tutorial, we will write Java code in a text editor. However, it is possible to write Java in an Integrated Development Environment, such as IntelliJ IDEA, Netbeans or Eclipse, which are particularly useful when managing larger collections of Java files.|||To install Java on Windows:|||Write the following in the command line (cmd.exe):|||If Java was successfully installed, you will see something like this (depending on version):|||In Java, every application begins with a class name, and that class must match the filename.|||Let's create our first Java file, called Main.java, which can be done in any text editor (like Notepad).|||The file should contain a ""Hello World"" message, which is written with the following code:|||Main.java|||Try it Yourself »|||Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code above.|||Save the code in Notepad as ""Main.java"". Open Command Prompt (cmd.exe), navigate to the directory where you saved your file, and type ""javac Main.java"":|||This will compile your code. If there are no errors in the code, the command prompt will take you to the next line. Now, type ""java Main"" to run the file:|||The output should read:|||Congratulations! You have written and executed your first Java program.",,,"Go to ""System Properties"" (Can be found on Control Panel > System and Security > System > Advanced System Settings)@@@Click on the ""Environment variables"" button under the ""Advanced"" tab@@@Then, select the ""Path"" variable in System variables and click on the ""Edit"" button@@@Click on the ""New"" button and add the path where Java is installed,   followed by \bin. By default, Java is installed in C:\Program   Files\Java\jdk-11.0.1 (If nothing else was specified when you installed it).   In that case, You will have to add a new path with: C:\Program   Files\Java\jdk-11.0.1\bin   Then, click ""OK"", and save the settings@@@At last, open Command Prompt (cmd.exe) and type java -version to see if Java is   running on your machine",,[]
Java Tutorial,Java Syntax,https://www.w3schools.com/java/java_syntax.asp,"In the previous chapter, we created a Java file called Main.java, and we used the following code to print ""Hello World"" to the screen:|||Main.java|||Try it Yourself »|||Every line of code that runs in Java must be inside a class.In our example, we named the class Main. A class should always start with an uppercase first letter.|||Note: Java is case-sensitive: ""MyClass"" and ""myclass"" has different meaning.|||The name of the java file must match the class name.When saving the file, save it using the class name and add "".java"" to the end of the filename. To run the example above on your computer, make sure that Java is properly installed: Go to the Get Started Chapter for how to install Java. The output should be:|||The main() method is required and you will see it in every Java program:|||Any code inside the main() method will be executed. You don't have to understand the keywords before and after main. You will get to know them bit by bit while reading this tutorial.|||For now, just remember that every Java program has a class name which must match the filename, and that every program must contain the main() method.|||Inside the main() method, we can use the println() method to print a line of text to the screen:|||Try it Yourself »|||Note: The curly braces {} marks the beginning and the end of a block of code.|||Note: Each code statement must end with a semicolon.|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise",,,,,[]
Java Tutorial,Java Comments,https://www.w3schools.com/java/java_comments.asp,"Comments can be used to explain Java code, and to make it more readable. It can also be used to prevent execution when testing alternative code.|||Single-line comments start with two forward slashes (//).|||Any text between // and the end of the line is ignored by Java (will not be executed).|||This example uses a single-line comment before a line of code:|||Try it Yourself »|||This example uses a single-line comment at the end of a line of code:|||Try it Yourself »|||Multi-line comments start with /* and ends with */.|||Any text between /* and */ will be ignored by Java.|||This example uses a multi-line comment (a comment block) to explain the code:|||Try it Yourself »|||It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.|||Insert the missing part to create two types of comments.|||Start the Exercise",Java Multi-line Comments,,,,[]
Java Tutorial,Java Variables,https://www.w3schools.com/java/java_variables.asp,"Variables are containers for storing data values. |||In Java, there are different types of variables, for example:|||To create a variable, you must specify the type and assign it a value:|||Where type is one of Java's types (such as int or String), and variableName is the name of the variable (such as x orname). The equal sign is used to assign values to the variable.|||To create a variable that should store text, look at the following example:|||Create a variable called name of type String and assign it the value ""John"":|||Try it Yourself »|||To create a variable that should store a number, look at the following example:|||Create a variable called myNum of type int and assign it the value 15:|||Try it Yourself »|||You can also declare a variable without assigning the value, and assign the value later:|||Try it Yourself »|||Note that if you assign a new value to an existing variable, it will overwrite the previous value:|||Change the value of myNum from 15 to 20:|||Try it Yourself »|||However, you can add the final keyword if you don't want others (or yourself) to overwrite existing values (this will declare the variable as ""final"" or ""constant"", which means unchangeable and read-only):|||Try it Yourself »|||A demonstration of how to declare variables of other types:|||You will learn more about data types in the next chapter.|||The println() method is often used to display variables.|||To combine both text and a variable, use the + character:|||Try it Yourself »|||You can also use the + character to add a variable to another variable:|||Try it Yourself »|||For numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):|||Try it Yourself »|||From the example above, you can expect:|||To declare more than one variable of the same type, use a comma-separated list:|||Try it Yourself »|||All Java variables must beidentified with unique names.|||These unique names are called identifiers.|||Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).|||Note: It is recommended to use descriptive names in order to create understandable and maintainable code:|||Try it Yourself »|||The general rules for naming variables are:|||Create a variable named carName and assign the value Volvo to it.|||Start the Exercise",,"String - stores text, such as ""Hello"". String values are  surrounded by double quotes@@@int - stores integers (whole numbers), without decimals, such as 123 or -123@@@float - stores floating point numbers, with decimals, such as 19.99 or -19.99@@@char - stores single characters, such as  'a' or 'B'. Char values are surrounded by single quotes@@@boolean - stores values with two states:  true or false|||x stores the value 5@@@y stores the value 6@@@Then we use the println() method to display the value of x + y,  which is 11|||Names can contain letters, digits, underscores, and dollar signs@@@Names must begin with a letter@@@Names should start with a lowercase letter and it cannot contain whitespace@@@Names can also begin with $ and _ (but we will not use it in this tutorial)@@@Names are case sensitive (""myVar"" and ""myvar"" are different variables)@@@Reserved words (like Java keywords, such as int or   boolean) cannot be used as names",,,[]
Java Tutorial,Java Data Types,https://www.w3schools.com/java/java_data_types.asp,"As explained in the previous chapter, a variable in Java must be a specified data type:|||Try it Yourself »|||Data types are divided into two groups:|||A primitive data type specifies the size and type of variable values, and it has no additional methods.|||There are eight primitive data types in Java:|||Primitive number types are divided into two groups:|||Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are byte, short, int and long. Which type you should use, depends on the numeric value.|||Floating point types represents numbers with a fractional part, containing one or more decimals. There are two types: float and double.|||Even though there are many numeric types in Java, the most used for numbers are int (for whole numbers) and double (for floating point numbers). However, we will describe them all as you continue to read.|||The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127:|||Try it Yourself »|||The short data type can store whole numbers from -32768 to 32767:|||Try it Yourself »|||The int data type can store whole numbers from -2147483648 to 2147483647.  In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.|||Try it Yourself »|||The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an ""L"":|||Try it Yourself »|||You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.|||The float data type can store fractional numbers from 3.4e−038 to 3.4e+038. Note that you should end the value with an ""f"":|||Try it Yourself »|||The double data type can store fractional numbers from 1.7e−308 to 1.7e+308. Note that you should end the value with a ""d"":|||Try it Yourself »|||Use float or double?|||The precision of a floating point value indicates how many digits the value can have after the decimal point.The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore it is safer to use double for most calculations.|||A floating point number can also be a scientific number with an ""e"" to indicate the power of 10:|||Try it Yourself »|||A boolean data type is declared with the boolean keyword and can only take the values true or false:|||Try it Yourself »|||Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter.|||The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':|||Try it Yourself »|||Alternatively, you can use ASCII values to display certain characters:|||Try it Yourself »|||Tip: A list of all ASCII values can be found in our ASCII Table Reference.|||The String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:|||Try it Yourself »|||The String type is so much used and integrated in Java, that some call it ""the special ninth type"".|||A String in Java is actually a non-primitive data type, because it refers to an object. The String object has methods that are used to perform certain operations on strings. Don't worry if you don't understand the term ""object"" just yet. We will learn more about strings and objects in a later chapter.|||Non-primitive data types are called reference types because they refer to objects.|||The main difference between primitive and non-primitive data types are:|||Examples of non-primitive types are Strings, Arrays, Classes, Interface, etc. You will learn more about these in a later chapter.|||Add the correct data type for the following variables:|||Start the Exercise",Long|||Floating Point Types|||Float|||Double,"Primitive data types - includes byte, short, int, long,  float, double, boolean and char@@@Non-primitive data types - such as String, Arrays and  Classes (you will learn more about these in a later chapter)|||Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer and is not defined by Java (except for String).@@@Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.@@@A primitive type has always a value, while non-primitive types can be null.@@@A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.@@@The size of a primitive type depends on the data type, while non-primitive types have all the same size.",,"byte|||1 byte|||Stores whole numbers from -128 to 127&&&short|||2 bytes|||Stores whole numbers from -32,768 to 32,767&&&int|||4 bytes|||Stores whole numbers from -2,147,483,648 to 2,147,483,647&&&long|||8 bytes|||Stores whole numbers from -9,223,372,036,854,775,808 to 
9,223,372,036,854,775,807&&&float|||4 bytes|||Stores fractional numbers. Sufficient for 
storing 6 to 7 decimal digits&&&double|||8 bytes|||Stores fractional numbers. Sufficient for 
storing 15 decimal digits&&&boolean|||1 bit|||Stores true or false values&&&char|||2 bytes|||Stores a single character/letter or ASCII values",[]
Java Tutorial,Java Type Casting,https://www.w3schools.com/java/java_type_casting.asp,"Type casting is when you assign a value of one primitive data type to another type.|||In Java, there are two types of casting:|||Widening casting is done automatically when passing a smaller size type to a larger size type:|||Try it Yourself »|||Narrowing casting must be done manually by placing the type in parentheses in front of the value:|||Try it Yourself »",,Widening Casting (automatically) - converting a smaller type to a larger type sizebyte -> short -> char -> int -> long -> float -> doubleNarrowing Casting (manually) - converting a larger type to a smaller size typedouble -> float -> long -> int -> char -> short -> byte,,,[]
Java Tutorial,Java Operators,https://www.w3schools.com/java/java_operators.asp,"Operators are used to perform operations on variables and values.|||In the example below, we use the+ operator to add together two values:|||Try it Yourself »|||Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:|||Try it Yourself »|||Java divides the operators into the following groups:|||Arithmetic operators are used to perform common mathematical operations.|||Assignment operators are used to assign values to variables.|||In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:|||Try it Yourself »|||The addition assignment operator (+=) adds a value to a variable:|||Try it Yourself »|||A list of all assignment operators:|||Comparison operators are used to compare two values:|||Logical operators are used to determine the logic between variables or values:|||Multiply 10 with 5, and print the result.|||Start the Exercise",Exercise:,Arithmetic operators@@@Assignment operators@@@Comparison operators@@@Logical operators@@@Bitwise operators,,"+|||Addition|||Adds together two values|||x + y|||Try it »&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »&&&/|||Division|||Divides one value by another|||x / y|||Try it »&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »&&&++|||Increment|||Increases the value of a variable by 1|||++x|||Try it »&&&--|||Decrement|||Decreases the value of a variable by 1|||--x|||Try it »$$$&&&=|||x = 5|||x = 5|||Try it »&&&+=|||x += 3|||x = x + 3|||Try it »&&&-=|||x -= 3|||x = x - 3|||Try it »&&&*=|||x *= 3|||x = x * 3|||Try it »&&&/=|||x /= 3|||x = x / 3|||Try it »&&&%=|||x %= 3|||x = x % 3|||Try it »&&&&=|||x &= 3|||x = x & 3|||Try it »&&&|=|||x |= 3|||x = x | 3|||Try it »&&&^=|||x ^= 3|||x = x ^ 3|||Try it »&&&>>=|||x >>= 3|||x = x >> 3|||Try it »&&&<<=|||x <<= 3|||x = x << 3|||Try it »$$$&&&==|||Equal to|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »$$$&& |||Logical and|||Returns true if both statements are true|||x < 5 &&  x < 10|||Try it »&&&|| |||Logical or|||Returns true if one of the statements is true|||x < 5 || x < 4|||Try it »&&&!|||Logical not|||Reverse the result, returns false if the result is true|||!(x < 5 && x < 10)|||Try it »",[]
Java Tutorial,Java Strings,https://www.w3schools.com/java/java_strings.asp,"Strings are used for storing text.|||A String variable contains a collection of characters surrounded by double quotes:|||Create a variable of type String and assign it a value:|||Try it Yourself »|||A String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with the length() method:|||Try it Yourself »|||There are many string methods available, for example toUpperCase() and toLowerCase():|||Try it Yourself »|||The indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):|||Try it Yourself »|||Java counts positions from zero.0 is the first position in a string, 1 is the second, 2 is the third ...|||The + operator can be used between strings to combine them. This is called concatenation:|||Try it Yourself »|||Note that we have added an empty text ("" "") to create a space between firstName and lastName on print.|||You can also use the concat() method to concatenate two strings:|||Try it Yourself »|||Because strings must be written within quotes, Java will misunderstand this string, and generate an error:|||The solution to avoid this problem, is to use the backslash escape character.|||The backslash (\) escape character turns special characters into string characters:|||The sequence \""  inserts a double quote in a string:ExampleString txt = ""We are the so-called \""Vikings\"" from the north."";Try it Yourself »The sequence \'  inserts a single quote in a string:ExampleString txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:ExampleString txt = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in Java:CodeResultTry it\nNew LineTry it »\rCarriage ReturnTry it »\tTabTry it »\bBackspaceTry it »\fForm FeedAdding Numbers and StringsWARNING!Java uses the + operator for both addition and concatenation.Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer/number)Try it Yourself »If you add two strings, the result will be a string concatenation:ExampleString x = ""10"";String y = ""20"";String z = x + y;   // z will be 1020 (a String)Try it Yourself »If you add a number and a string, the result will be a string concatenation:ExampleString x = ""10"";int y = 20;String z = x + y;   // z will be 1020 (a String)Try it Yourself »Complete String ReferenceFor a complete reference of String methods, go to our Java String Methods Reference.The reference contains descriptions and examples of all string methods.Test Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type String and assign it the value Hello. greeting = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||ExampleString txt = ""We are the so-called \""Vikings\"" from the north."";Try it Yourself »The sequence \'  inserts a single quote in a string:ExampleString txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:ExampleString txt = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in Java:CodeResultTry it\nNew LineTry it »\rCarriage ReturnTry it »\tTabTry it »\bBackspaceTry it »\fForm FeedAdding Numbers and StringsWARNING!Java uses the + operator for both addition and concatenation.Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer/number)Try it Yourself »If you add two strings, the result will be a string concatenation:ExampleString x = ""10"";String y = ""20"";String z = x + y;   // z will be 1020 (a String)Try it Yourself »If you add a number and a string, the result will be a string concatenation:ExampleString x = ""10"";int y = 20;String z = x + y;   // z will be 1020 (a String)Try it Yourself »Complete String ReferenceFor a complete reference of String methods, go to our Java String Methods Reference.The reference contains descriptions and examples of all string methods.Test Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type String and assign it the value Hello. greeting = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Try it Yourself »|||The sequence \'  inserts a single quote in a string:ExampleString txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:ExampleString txt = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in Java:CodeResultTry it\nNew LineTry it »\rCarriage ReturnTry it »\tTabTry it »\bBackspaceTry it »\fForm FeedAdding Numbers and StringsWARNING!Java uses the + operator for both addition and concatenation.Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer/number)Try it Yourself »If you add two strings, the result will be a string concatenation:ExampleString x = ""10"";String y = ""20"";String z = x + y;   // z will be 1020 (a String)Try it Yourself »If you add a number and a string, the result will be a string concatenation:ExampleString x = ""10"";int y = 20;String z = x + y;   // z will be 1020 (a String)Try it Yourself »Complete String ReferenceFor a complete reference of String methods, go to our Java String Methods Reference.The reference contains descriptions and examples of all string methods.Test Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type String and assign it the value Hello. greeting = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||ExampleString txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:ExampleString txt = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in Java:CodeResultTry it\nNew LineTry it »\rCarriage ReturnTry it »\tTabTry it »\bBackspaceTry it »\fForm FeedAdding Numbers and StringsWARNING!Java uses the + operator for both addition and concatenation.Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer/number)Try it Yourself »If you add two strings, the result will be a string concatenation:ExampleString x = ""10"";String y = ""20"";String z = x + y;   // z will be 1020 (a String)Try it Yourself »If you add a number and a string, the result will be a string concatenation:ExampleString x = ""10"";int y = 20;String z = x + y;   // z will be 1020 (a String)Try it Yourself »Complete String ReferenceFor a complete reference of String methods, go to our Java String Methods Reference.The reference contains descriptions and examples of all string methods.Test Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type String and assign it the value Hello. greeting = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Try it Yourself »|||The sequence \\  inserts a single backslash in a string:ExampleString txt = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in Java:CodeResultTry it\nNew LineTry it »\rCarriage ReturnTry it »\tTabTry it »\bBackspaceTry it »\fForm FeedAdding Numbers and StringsWARNING!Java uses the + operator for both addition and concatenation.Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer/number)Try it Yourself »If you add two strings, the result will be a string concatenation:ExampleString x = ""10"";String y = ""20"";String z = x + y;   // z will be 1020 (a String)Try it Yourself »If you add a number and a string, the result will be a string concatenation:ExampleString x = ""10"";int y = 20;String z = x + y;   // z will be 1020 (a String)Try it Yourself »Complete String ReferenceFor a complete reference of String methods, go to our Java String Methods Reference.The reference contains descriptions and examples of all string methods.Test Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type String and assign it the value Hello. greeting = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||ExampleString txt = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in Java:CodeResultTry it\nNew LineTry it »\rCarriage ReturnTry it »\tTabTry it »\bBackspaceTry it »\fForm FeedAdding Numbers and StringsWARNING!Java uses the + operator for both addition and concatenation.Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer/number)Try it Yourself »If you add two strings, the result will be a string concatenation:ExampleString x = ""10"";String y = ""20"";String z = x + y;   // z will be 1020 (a String)Try it Yourself »If you add a number and a string, the result will be a string concatenation:ExampleString x = ""10"";int y = 20;String z = x + y;   // z will be 1020 (a String)Try it Yourself »Complete String ReferenceFor a complete reference of String methods, go to our Java String Methods Reference.The reference contains descriptions and examples of all string methods.Test Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type String and assign it the value Hello. greeting = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Try it Yourself »|||Six other escape sequences are valid in Java:|||WARNING!|||Java uses the + operator for both addition and concatenation.|||Numbers are added. Strings are concatenated.|||If you add two numbers, the result will be a number:|||Try it Yourself »|||If you add two strings, the result will be a string concatenation:|||Try it Yourself »|||If you add a number and a string, the result will be a string concatenation:|||Try it Yourself »|||For a complete reference of String methods, go to our Java String Methods Reference.|||The reference contains descriptions and examples of all string methods.|||Fill in the missing part to create a greeting variable of type String and assign it the value Hello.|||Start the Exercise",,,,"\'|||'|||Single quote&&&\""|||""|||Double quote&&&\\|||\|||Backslash$$$\n|||New Line|||Try it »&&&\r|||Carriage Return|||Try it »&&&\t|||Tab|||Try it »&&&\b|||Backspace|||Try it »&&&\f|||Form Feed|||",[]
Java Tutorial,Java Math,https://www.w3schools.com/java/java_math.asp,"The Java Math class has many methods that allows you to perform mathematical tasks on numbers.|||The Math.max(x,y) method can be used to find the highest value of x andy:|||Try it Yourself »|||The Math.min(x,y) method can be used to find the lowest value of x and y:|||Try it Yourself »|||The Math.sqrt(x) method returns the square root of x:|||Try it Yourself »|||The Math.abs(x) method returns the absolute (positive) value of x:|||Try it Yourself »|||Math.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive):|||Try it Yourself »|||To get more control over the random number, e.g. you only want a random number between 0 and 100, you can use the following formula:|||Try it Yourself »|||For a complete reference of Math methods, go to our Java Math Methods Reference.|||Use the correct method to find the highest value of x and y.|||Start the Exercise",,,,,[]
Java Tutorial,Java Booleans,https://www.w3schools.com/java/java_booleans.asp,"Very often, in programming, you will need a data type that can only have one of two values, like:|||For this, Java has a boolean data type, which can take the values true or false.|||A boolean type is declared with the boolean keyword and can only take the values true or false:|||Try it Yourself »|||However, it is more common to return boolean values from boolean expressions, for conditional testing(see below).|||A Boolean expression is a Java expression that returns a Boolean value: true or false.|||You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:|||Try it Yourself »|||Or even easier:|||Try it Yourself »|||In the examples below, we use the equal to (==) operator to evaluate an expression:|||Try it Yourself »|||Try it Yourself »|||The Boolean value of an expression is the basis for all Java comparisons and conditions.|||You will learn more about conditions in the next chapter.|||Fill in the missing parts to print the values true and false:|||Start the Exercise",,YES / NO@@@ON / OFF@@@TRUE / FALSE,,,[]
Java Tutorial,Java If...Else,https://www.w3schools.com/java/java_conditions.asp,"Java supports the usual logical conditions from mathematics:|||You can use these conditions to perform different actions for different decisions.|||Java has the following conditional statements:|||Use the if statement to specify a block of Java code to be executed if a condition is true.|||Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.|||In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:|||Try it Yourself »|||We can also test variables:|||Try it Yourself »|||In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".|||Use the else statement to specify a block of code to be executed if the condition is false.|||Try it Yourself »|||In the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen ""Good evening"". If the time was less than 18, the program would print ""Good day"".|||Use the else if statement to specify a new condition if the first condition is false.|||Try it Yourself »|||In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the  else if statement, is also false, so we move on to the elsecondition since condition1 and condition2 is both false - and print to the screen ""Good evening"".|||However, if the time was 14, our program would print ""Good day.""|||There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:|||Instead of writing:|||Try it Yourself »|||You can simply write:|||Try it Yourself »|||Print ""Hello World"" if x is greater than y.|||Start the Exercise",,"Less than: a < b@@@Less than or equal to: a <= b@@@Greater than: a > b@@@Greater than or equal to: a >= b@@@Equal to a == b@@@Not Equal to: a != b|||Use if to specify a block of code to be executed, if a specified condition is true@@@Use else to specify a block of code to be executed, if the same condition is false@@@Use else if to specify a new condition to test, if the first condition is false@@@Use switch to specify many alternative blocks of code to be executed",,,[]
Java Tutorial,Java Switch,https://www.w3schools.com/java/java_switch.asp,"Use the switch statement to select one of many code blocks to be executed.|||This is how it works:|||The example below uses the weekday number to calculate the weekday name:|||Try it Yourself »|||When Java reaches a break keyword, it breaks out of the switch block.|||This will stop the execution of more code and case testing inside the block.|||When a match is found, and the job is done, it's time for a break. There is no need for more testing.|||A break can save a lot of execution time because it ""ignores"" the execution of all the rest of the code in the switch block.|||The default keyword specifies some code to run if there is no case match:|||Try it Yourself »|||Note that if the default statement is used as the last statement in a switch block, it does not need a break.|||Insert the missing parts to complete the following switch statement.|||Start the Exercise",The default Keyword,"The switch expression is evaluated once.@@@The value of the expression is compared with the values of each case.@@@If there is a match, the associated block of code is executed.@@@The break and default keywords are optional, and will be described later in this chapter",,,[]
Java Tutorial,Java While Loop,https://www.w3schools.com/java/java_while_loop.asp,"Loops can execute a block of code as long as a specified condition is reached.|||Loops are handy because they save time, reduce errors, and they make code more readable.|||The while loop loops through a block of code as long as a specified condition is true:|||In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:|||Try it Yourself »|||Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!|||The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.|||The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:|||Try it Yourself »|||Do not forget to increase the variable used in the condition, otherwise the loop will never end!|||Print i as long as i is less than 6.|||Start the Exercise",,,,,[]
Java Tutorial,Java For Loop,https://www.w3schools.com/java/java_for_loop.asp,"When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:|||Statement 1 is executed (one time) before the execution of the code block.|||Statement 2 defines the condition for executing the code block.|||Statement 3 is executed (every time) after the code block has been executed.|||The example below will print the numbers 0 to 4:|||Try it Yourself »|||Statement 1 sets a variable before the loop starts (int i = 0).|||Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.|||Statement 3 increases a value (i++) each time the code block in the loop has been executed.|||This example will only print even values between 0 and 10:|||Try it Yourself »|||There is also a ""for-each"" loop, which is used exclusively to loop through elements in an array:|||The following example outputs all elements in the cars array, using a ""for-each"" loop:|||Try it Yourself »|||Note: Don't worry if you don't understand the example above. You will learn more about Arrays in the Java Arrays chapter.|||Use a for loop to print ""Yes"" 5 times.|||Start the Exercise",,,,,[]
Java Tutorial,Java Break/Continue,https://www.w3schools.com/java/java_break.asp,"You have already seen the break statement used in an earlier chapter of this tutorial. It was used to ""jump out"" of a switch statement.|||The break statement can also be used to jump out of a loop.|||This example stops the loop when i is equal to 4:|||Try it Yourself »|||The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.|||This example skips the value of 4:|||Try it Yourself »|||You can also use break and continue in while loops:|||Try it Yourself »|||Try it Yourself »|||Stop the loop if i is 5.|||Start the Exercise",,,,,[]
Java Tutorial,Java Arrays,https://www.w3schools.com/java/java_arrays.asp,"Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.|||To declare an array, define the variable type with square brackets:|||We have now declared a variable that holds an array of strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:|||To create an array of integers, you could write:|||You access an array element by referring to the index number.|||This statement accesses the value of the first element in cars:|||Try it Yourself »|||Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.|||To change the value of a specific element, refer to the index number:|||Try it Yourself »||| To find out how many elements an array has, use the length property:|||Try it Yourself »|||You can loop through the array elements with the for loop, and use the length property to specify how many times the loop should run.|||The following example outputs all elements in the cars array:|||Try it Yourself »|||There is also a ""for-each"" loop, which is used exclusively to loop through elements in arrays:|||The following example outputs all elements in the cars array, using a ""for-each"" loop:|||Try it Yourself »|||The example above can be read like this: for each String element (called i - as in index) in cars, print out the value of i.|||If you compare the for loop and for-each loop, you will see that the for-each method is easier to write, it does not require a counter (using the length property), and it is more readable.|||A multidimensional array is an array of arrays.|||To create a two-dimensional array, add each array within its own set of curly braces:|||myNumbers is now an array with two arrays as its elements.|||To access the elements of the myNumbers array, specify two indexes: one for the array, and one for the element inside that array. This example accesses the third element (2) in the second array (1) of myNumbers:|||Try it Yourself »|||We can also use a for loop inside another for loop to get the elements of a two-dimensional array (we still have to point to the two indexes):|||Try it Yourself »|||Create an array of type String called cars.|||Start the Exercise",Java Arrays|||Multidimensional Arrays,,,,[]
Java Methods,Java Methods,https://www.w3schools.com/java/java_methods.asp,"A method is a block of code which only runs when it is called.|||You can pass data, known as parameters, into a method.|||Methods are used to perform certain actions, and they are also known as functions.|||Why use methods? To reuse code: define the code once, and use it many times.|||A method must be declared within a class. It is defined with the name of the method, followed by parentheses (). Java provides some pre-defined methods, such as System.out.println(), but you can also create your own methods to perform certain actions:|||Create a method inside Main:|||To call a method in Java, write the method's name followed by two parentheses () and a semicolon;|||In the following example, myMethod() is used to print a text (the action), when it is called:|||Inside main, call the myMethod() method:|||Try it Yourself »|||A method can also be called multiple times:|||Try it Yourself »|||In the next chapter, Method Parameters, you will learn how to pass data (parameters) into a method.|||Insert the missing part to call myMethod from main.|||Start the Exercise",,myMethod() is the name of the method@@@static means that the method belongs to the Main class and not an object of the Main class. You will learn more about objects and how to access methods through objects later in this tutorial.@@@void means that this method does not have a return value. You will learn more about return values later in this chapter,,,[]
Java Methods,Java Method Parameters,https://www.w3schools.com/java/java_methods_param.asp,"Information can be passed to methods as parameter. Parameters act as variables inside the method.|||Parameters are specified after the method name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma.|||The following example has a method that takes a String called fname as parameter.When the method is called, we pass along a first name,which is used inside the method to print the full name:|||Try it Yourself »|||When a parameter is passed to the method, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.|||You can have as many parameters as you like:|||Try it Yourself »|||Note that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.|||The void keyword, used in the examples above, indicates that the method should not return a value. If you want the method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method:|||Try it Yourself »|||This example returns the sum of a method's two parameters:|||Try it Yourself »|||You can also store the result in a variable (recommended, as it is easier to read and maintain):|||Try it Yourself »|||It is common to use if...else statements inside methods:|||Try it Yourself »|||Add a fname parameter of type String to myMethod, and output ""John Doe"":|||Start the Exercise",Return Values,,,,[]
Java Methods,Java Method Overloading,https://www.w3schools.com/java/java_methods_overloading.asp,"With method overloading, multiple methods can have the same name with differentparameters:|||Consider the following example, which has two methods that add numbers of different type:|||Try it Yourself »|||Instead of defining two methods that should do the same thing, it is better to overload one. |||In the example below, we overload the plusMethod method to work for both int and double:|||Try it Yourself »|||Note: Multiple methods can have the same name   as long as the number and/or type of parameters are different.",Method Overloading,,,,[]
Java Methods,Java Scope,https://www.w3schools.com/java/java_scope.asp,"In Java, variables are only accessible inside the region they are created. This is calledscope.|||Variables declared directly inside a method are available anywhere in the method following the line of code in which they were declared:|||Try it Yourself »|||A block of code refers to all of the code between curly braces {}. Variablesdeclared inside blocks of code are only accessible by the code between the curly braces, which follows the line in which the variable was declared:|||Try it Yourself »|||A block of code may exist on itsown or it can belong to an if, while or for statement. In the case of for statements,variables declared in the statement itself are also available inside the block's scope.",,,,,[]
Java Methods,Java Recursion,https://www.w3schools.com/java/java_recursion.asp,"Recursion is the technique of making a function call itself. This technique provides a wayto break complicated problems down into simple problems which are easier to solve.|||Recursion may be a bit difficult to understand. Thebest way to figure out how it works is to experiment with it.|||Adding two numbers together is easy to do, but adding a range of numbers is morecomplicated. In the following example, recursion is used to add a range of numberstogether by breaking it down into the simple task of adding two numbers:|||Use recursion to add all of the numbers up to 10.|||Try it Yourself »|||When the sum() function is called, it adds parameter k to the sum of all numbers smallerthan k and returns the result. When k becomes 0, the function just returns 0. Whenrunning, the program follows these steps:|||Since the function does not call itself when k is 0, the program stops there and returns theresult.|||Just as loops can run into the problem of infinite looping, recursive functions can run intothe problem of infinite recursion. Infinite recursion is when the function never stops callingitself. Every recursive function should have a halting condition, which is the conditionwhere the function stops calling itself. In the previous example, the halting condition iswhen the parameter k becomes 0.|||It is helpful to see a variety of different examples to better understand the concept. In thisexample, the function adds a range of numbers between a start and an end. The haltingcondition for this recursive function is when end is not greater than start:|||Use recursion to add all of the numbers between 5 to 10.|||Try it Yourself »",,,,,[]
Java Classes,Java OOP,https://www.w3schools.com/java/java_oop.asp,"OOP stands for Object-Oriented Programming.|||Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.|||Object-oriented programming has several advantages over procedural programming:|||Tip: The ""Don't Repeat Yourself"" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.|||Classes and objects are the two main aspects of object-oriented programming.|||Look at the following illustration to see the difference between class and objects:|||Fruit|||Apple|||Banana|||Mango|||Another example:|||Car|||Volvo|||Audi|||Toyota|||So, a class is a template for objects, and an object is an instance of a class.|||When the individual objects are created, they inherit all the variables and methods from the class.|||You will learn much more about classes and objects in the next chapter.",,"OOP is faster and easier to execute@@@OOP provides a clear structure for the programs@@@OOP helps to keep the Java code DRY ""Don't Repeat Yourself"", and makes   the   code easier to maintain, modify and debug@@@OOP makes it possible to create full reusable   applications with less code and shorter development time",,,[]
Java Classes,Java Classes/Objects,https://www.w3schools.com/java/java_classes.asp,"Java is an object-oriented programming language.|||Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake. |||A Class is like an object constructor, or a ""blueprint"" for creating objects.|||To create a class, use the keyword class:|||Create a class named ""Main"" with a variable x:|||Remember from the Java Syntax chapter that a class should always start with an uppercase first letter, and that the name of the java file should match the class name.|||In Java, an object is created from a class. We have already created the class named Main, so now we can use this to create objects.|||To create an object of Main, specify the class name, followed by the object name, and use the keyword new:|||Create an object called ""myObj"" and print the value of x:|||Try it Yourself »|||You can create multiple objects of one class:|||Create two objects of Main:|||Try it Yourself »|||You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)). |||Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory/folder:|||When both files have been compiled:|||Run the Second.java file:|||And the output will be:|||You will learn much more about classes and objects in the next chapters.|||Create an object of MyClass called myObj.|||Start the Exercise",Multiple Objects,Main.java@@@Second.java,,,[]
Java Classes,Java Class Attributes,https://www.w3schools.com/java/java_class_attributes.asp,"In the previous chapter, we used the term ""variable"" for x in the example (as shown below). It is actually an attribute of the class. Or you could say that class attributes are variables within a class:|||Create a class called ""Main"" with two attributes: x and y:|||Another term for class attributes is fields.|||You can access attributes by creating an object of the class, and by using the dot syntax (.):|||The following example will create an object of the Main class, with the name myObj. We use the x attribute on the object to print its value:|||Create an object called ""myObj"" and print the value of x:|||Try it Yourself »|||You can also modify attribute values:|||Set the value of x to 40:|||Try it Yourself »|||Or override existing values:|||Change the value of x to 25:|||Try it Yourself »|||If you don't want the ability to override existing values, declare the attribute as final:|||Try it Yourself »|||The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...).|||The final keyword is called a ""modifier"". You will learn more about these in the Java Modifiers Chapter.|||If you create multiple objects of one class, you can change the attribute values in one object, without affecting the attribute values in the other:|||Change the value of x to 25 in myObj2, and leave x in myObj1 unchanged:|||Try it Yourself »|||You can specify as many attributes as you want:|||Try it Yourself »|||The next chapter will teach you how to create class methods and how to access them with objects.",Multiple Objects,,,,[]
Java Classes,Java Class Methods,https://www.w3schools.com/java/java_class_methods.asp,"You learned from the Java Methods chapter that methods are declared within a class, and that they are used to perform certain actions:|||Create a method named myMethod() in Main:|||myMethod() prints a text (the action), when it is called. To call a method, write the method's name followed by two parentheses () and a semicolon;|||Inside main, call myMethod():|||Try it Yourself »|||You will often see Java programs that have either static or public attributes and methods.|||In the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:|||An example to demonstrate the differences between static and publicmethods:|||Try it Yourself »|||Note: You will learn more about these keywords (called modifiers) in the Java Modifiers chapter.|||Create a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program:|||Try it Yourself »|||1) We created a custom Main class with the class keyword.|||2) We created the fullThrottle() and speed() methods in the Main class.|||3) The fullThrottle() method and the speed() method will print out some text, when they are called.|||4) The speed() method accepts an int parameter called maxSpeed - we will use this in 8).|||5) In order to use the Main class and its methods, we need to create an object of the Main Class.|||6) Then, go to the main() method, which you know by now is a built-in Java method that runs your program (any code inside main is executed).|||7) By using the new keyword we created an object with the namemyCar.|||8) Then, we call the fullThrottle() and speed() methods on the myCar object, and run the program using the name of the object (myCar), followed by a dot (.), followed by the name of the method (fullThrottle(); and speed(200);). Notice that we add an int parameter of 200 inside the speed() method.|||The dot (.) is used to access the object's attributes and methods.|||To call a method in Java, write the method name followed by a set of parentheses (), followed by a semicolon (;).|||A class must have a matching filename (Main and Main.java).|||Like we specified in the Classes chapter, it is a good practice to create an object of a class and access it in another class.|||Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory:|||When both files have been compiled:|||Run the Second.java file:|||And the output will be:",Example,Main.java@@@Second.java,,,[]
Java Classes,Java Constructors,https://www.w3schools.com/java/java_constructors.asp,"A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes:|||Create a constructor:|||Try it Yourself »|||Note that the constructor name must match the class name, and it cannot have a return type (like void). |||Also note that the constructor is called when the object is created.|||All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes.|||Constructors can also take parameters, which is used to initialize attributes.|||The following example adds an int y parameter to the constructor. Inside the constructor we set x to y (x=y). When we call the constructor, we pass a parameter to the constructor (5), which will set the value of x to 5:|||Try it Yourself »|||You can have as many parameters as you want:|||Try it Yourself »",,,,,[]
Java Classes,Java Modifiers,https://www.w3schools.com/java/java_modifiers.asp,"By now, you are quite familiar with the public keyword that appears in almost all of our examples:|||The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.|||We divide modifiers into two groups:|||For classes, you can use either public or default:|||For attributes, methods and constructors, you can use the one of the following:|||For classes, you can use either final or abstract:|||For attributes and methods, you can use the one of the following:|||If you don't want the ability to override existing attribute values, declare attributes as final:|||Try it Yourself »|||A static method means that it can be accessed without creating an object of the class, unlike public:|||An example to demonstrate the differences between static and public methods:|||Try it Yourself »|||An abstract method belongs to an abstract class, and it does not have a body. The body is provided by the subclass:|||Try it Yourself »",Access Modifiers,"Access Modifiers - controls the access level@@@Non-Access Modifiers - do not control access level, but provides other functionality",,"public|||The class is accessible by any other class|||Try it »&&&default|||The class is only accessible by 
classes in the same package. This is used when you don't specify a modifier. You will learn more about packages in the Packages chapter|||Try it »$$$&&&public|||The code is accessible for all classes|||Try it »&&&private|||The code is only accessible within the declared class|||Try it »&&&default|||The code is only accessible in the same package. This is used when you don't specify a modifier. You will learn more about packages in the Packages chapter|||Try it »&&&protected|||The code is accessible in the same package and subclasses. You will learn more about subclasses and 
superclasses in the Inheritance chapter|||Try it »$$$&&&final|||The class cannot be inherited by other classes (You will learn more about inheritance in the Inheritance chapter)|||Try it »&&&abstract|||The class cannot be used to create objects (To access an abstract class, it must be inherited from another class. You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters)|||Try it »$$$final|||Attributes and methods cannot be overridden/modified&&&static|||Attributes and methods belongs to the class, rather than an object&&&abstract|||Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example 
abstract void run();. The body is provided by the 
subclass (inherited from). You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters&&&transient|||Attributes and methods are skipped when serializing the object containing them&&&synchronized|||Methods can only be accessed by one thread at a time&&&volatile|||The value of an attribute is not cached thread-locally, and is always read from the ""main memory""",[]
Java Classes,Java Encapsulation,https://www.w3schools.com/java/java_encapsulation.asp,"The meaning of Encapsulation, is to make sure that ""sensitive"" data is hidden from users. To achieve this, you must:declare class variables/attributes as privateprovide public get and set methods to access and update the value of a private variableGet and SetYou learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.The get method returns the variable value, and the set method sets the value.Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:Examplepublic class Person {  private String name; // private = restricted access  // Getter  public String getName() {    return name;  }  // Setter  public void setName(String newName) {    this.name = newName;  }}Example explainedThe get method returns the value of the variable name.The set method takes a parameter (newName) and assigns it to thename variable. The this keyword is used to refer to the current object.However, as the name variable is declared as private, we cannot access it from outside this class:Examplepublic class Main {  public static void main(String[] args) {    Person myObj = new Person();    myObj.name = ""John"";  // error    System.out.println(myObj.name); // error   }}Run Example »If the variable was declared as public, we would expect the following output:JohnHowever, as we try to access a private variable, we get an error:MyClass.java:4: error: name has private access in Person    myObj.name = ""John"";         ^MyClass.java:5: error: name has private access in Person    System.out.println(myObj.name);                  ^2 errorsInstead, we use the getName() and setName() methods to access and update the variable:Examplepublic class Main {  public static void main(String[] args) {    Person myObj = new Person();    myObj.setName(""John""); // Set the value of the name variable to ""John""    System.out.println(myObj.getName());  }}// Outputs ""John""Try it Yourself »Why Encapsulation?Better control of class attributes and methodsClass attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)Flexible: the programmer can change one part of the code without affecting other partsIncreased security of data❮ PreviousNext ❯|||You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.|||The get method returns the variable value, and the set method sets the value.|||Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:|||The get method returns the value of the variable name.|||The set method takes a parameter (newName) and assigns it to thename variable. The this keyword is used to refer to the current object.|||However, as the name variable is declared as private, we cannot access it from outside this class:|||Run Example »|||If the variable was declared as public, we would expect the following output:|||However, as we try to access a private variable, we get an error:|||Instead, we use the getName() and setName() methods to access and update the variable:|||Try it Yourself »",Encapsulation|||Why Encapsulation?,"declare class variables/attributes as private@@@provide public get and set methods to access and update the value of a private variable|||Better control of class attributes and methods@@@Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)@@@Flexible: the programmer can change one part of the code without affecting other parts@@@Increased security of data",,,[]
Java Classes,Java Packages / API,https://www.w3schools.com/java/java_packages.asp,"A package in Java is used to group related classes. Think of it asa folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:|||The Java API is a library of prewritten classes, that are free to use, included in theJava Development Environment.|||The library contains components for managing input, database programming, and much much more. The complete list can be found at Oracles website: https://docs.oracle.com/javase/8/docs/api/.|||The library is divided into packages and classes. Meaning you can either import a single class (along with its methods and attributes), or a whole package that contain all the classes that belong to the specified package.|||To use a class or a package from the library, you need to use the import keyword:|||If you find a class you want to use, for example, the Scanner class, which is used to get user input, write the following code:|||In the example above, java.util is a package, while Scanner is a class of the java.util package.|||To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read a complete line:|||Using the Scanner class to get user input:|||Run Example »|||There are many packages to choose from. In the previous example, we used the Scanner class from the java.util package. This package also contains date and time facilities, random-number generator and other utility classes.|||To import a whole package, end the sentence with an asterisk sign (*). The following example will import ALL the classes in the java.util package:|||Run Example »|||To create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:|||To create a package, use the package keyword:|||Run Example »|||Save the file as MyPackageClass.java, and compile it:|||Then compile the package:|||This forces the compiler to create the ""mypack"" package.|||The -d keyword specifies the destination for where to save the class file. You   can use any directory name, like c:/user (windows), or, if you want to keep   the package within the same directory, you can use the dot sign ""."", like in   the example above.|||Note: The package name should be written in lower case to avoid conflict with class names.|||When we compiled the package in the example above, a new folder was created, called ""mypack"".|||To run the MyPackageClass.java file, write the following:|||The output will be:",,Built-in Packages (packages from the Java API)@@@User-defined Packages (create your own packages),,,[]
Java Classes,Java Inheritance,https://www.w3schools.com/java/java_inheritance.asp,"In Java, it is possible to inherit attributes and methods from one class to another. We group the ""inheritance concept"" into two categories:|||To inherit from a class, use the extends keyword.|||In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):|||Try it Yourself »|||Did you notice the protected modifier in Vehicle?|||We set the brand attribute in Vehicle to a protected access modifier. If it was set to private, the Car class would not be able to access it.|||- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.|||Tip: Also take a look at the next chapter, Polymorphism, which uses inherited methods to perform different tasks.|||If you don't want other classes to inherit from a class, use the final keyword:|||If you try to access a final class, Java will generate an error:|||The output will be something like this:",,subclass (child) - the class that inherits from another class@@@superclass (parent) - the class being inherited from,,,[]
Java Classes,Java Polymorphism,https://www.w3schools.com/java/java_polymorphism.asp,"Polymorphism means ""many forms"", and it occurs when we have many classes that are related to each other by inheritance.|||Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.|||For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):|||Remember from the Inheritance chapter that we use the extends keyword to inherit from a class.|||Now we can create Pig and Dog objects and call the animalSound() method on both of them:|||Try it Yourself »|||- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.",,,,,[]
Java Classes,Java Inner Classes,https://www.w3schools.com/java/java_inner_classes.asp,"In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.|||To access the inner class, create an object of the outer class, and then create an object of the inner class:|||Try it Yourself »|||Unlike a ""regular"" class, an inner class can be private or protected. If you don't want outside objects to access the inner class, declare the class as private:|||If you try to access a private inner class from an outside class, an error occurs:|||Try it Yourself »|||An inner class can also be static, which means that you can access it without creating an object of the outer class:|||Try it Yourself »|||Note: just like static attributes and methods, a static inner class does not have access to members of the outer class.|||One advantage of inner classes, is that they can access attributes and methods of the outer class:|||Try it Yourself »",Private Inner Class,,,,[]
Java Classes,Java Abstraction,https://www.w3schools.com/java/java_abstract.asp,"Data abstraction is the process of hiding certain details and showing only essential information to the user.Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).|||The abstract keyword is a non-access modifier, used for classes and methods:Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).An abstract class can have both abstract and regular methods:abstract class Animal {  public abstract void animalSound();  public void sleep() {    System.out.println(""Zzz"");  }}From the example above, it is not possible to create an object of the Animal class:Animal myObj = new Animal(); // will generate an errorTo access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class:Remember from the Inheritance chapter that we use the extends keyword to inherit from a class.Example// Abstract classabstract class Animal {  // Abstract method (does not have a body)  public abstract void animalSound();  // Regular method  public void sleep() {    System.out.println(""Zzz"");  }}// Subclass (inherit from Animal)class Pig extends Animal {  public void animalSound() {    // The body of animalSound() is provided here    System.out.println(""The pig says: wee wee"");  }}class Main {  public static void main(String[] args) {    Pig myPig = new Pig(); // Create a Pig object    myPig.animalSound();    myPig.sleep();  }}Try it Yourself »Why And When To Use Abstract Classes and Methods?To achieve security - hide certain details and only show the important details of an object.Note: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter.❮ PreviousNext ❯|||An abstract class can have both abstract and regular methods:|||From the example above, it is not possible to create an object of the Animal class:|||To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class:|||Remember from the Inheritance chapter that we use the extends keyword to inherit from a class.|||Try it Yourself »|||To achieve security - hide certain details and only show the important details of an object.|||Note: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter.",,"Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).@@@@@@Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).",,,[]
Java Classes,Java Interface,https://www.w3schools.com/java/java_interface.asp,"Another way to achieve abstraction in Java, is with interfaces.|||An interface is a completely ""abstract class"" that is used to group related methods with empty bodies:|||To access the interface methods, the interface must be ""implemented"" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the ""implement"" class:|||Try it Yourself »|||1) To achieve security - hide certain details and only show the important details of an object (interface).|||2) Java does not support ""multiple inheritance"" (a class can only inherit from one superclass). However, it can be achieved   with interfaces, because the class can implement multiple interfaces.  Note: To implement multiple interfaces, separate them with a comma (see example below).|||To implement multiple interfaces, separate them with a comma:|||Try it Yourself »",Multiple Interfaces ,"Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an ""Animal"" object in the MyMainClass)@@@Interface methods do not have a body - the body is provided by the ""implement"" class@@@On implementation of an interface, you must override all of its methods@@@Interface methods are by default abstract and   public@@@Interface attributes are by default public,   static and final@@@An interface cannot contain a constructor (as it cannot be used to create objects)",,,[]
Java Classes,Java Enums,https://www.w3schools.com/java/java_enums.asp,"An enum is a special ""class"" that represents a group of constants (unchangeable variables, like final variables).|||To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters:|||You can access enum constants with the dot syntax:|||Enum is short for ""enumerations"", which means ""specifically listed"".|||You can also have an enum inside a class:|||The output will be:|||Enums are often used in switch statements to check for corresponding values:|||The output will be:|||The enum type has a values() method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum:|||The output will be:|||An enum can, just like a class, have attributes and methods. The only difference is that enum constants are public, static and final (unchangeable - cannot be overridden).|||An enum cannot be used to create objects, and it cannot extend other classes (but it can implement interfaces).|||Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.",Loop Through an Enum,,,,[['\n  Level myVar = Level.MEDIUM;']]
Java Classes,Java User Input,https://www.w3schools.com/java/java_user_input.asp,"The Scanner class is used to get user input, and it is found in the java.util package.|||To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read Strings:|||Run Example »|||If you don't know what a package is, read our Java Packages Tutorial.|||In the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:|||In the example below, we use different methods to read data of various types:|||Run Example »|||Note: If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like ""InputMismatchException"").|||You can read more about exceptions and how to handle errors in the Exceptions chapter.",,,,nextBoolean()|||Reads a boolean value from the user&&&nextByte()|||Reads a byte value from the user&&&nextDouble()|||Reads a double value from the user&&&nextFloat()|||Reads a float value from the user&&&nextInt()|||Reads a int value from the user&&&nextLine()|||Reads a String value from the user&&&nextLong()|||Reads a long value from the user&&&nextShort()|||Reads a short value from the user,[]
Java Classes,Java Date,https://www.w3schools.com/java/java_date.asp,"Java does not have a built-in Date class, but we can import the java.time package to work with the date and time API. The package includes many date and time classes. For example:|||If you don't know what a package is, read our Java Packages Tutorial.|||To display the current date, import the java.time.LocalDate class, and use its now() method:|||The output will be:|||To display the current time (hour, minute, second, and nanoseconds), import the java.time.LocalTime class, and use its now() method:|||The output will be:|||To display the current date and time, import the java.time.LocalDateTime class, and use its now() method:|||The output will be:|||The ""T"" in the example above is used to separate the date from the time. You can use the DateTimeFormatter class with the ofPattern() method in the same package to format or parse date-time objects. The following example will remove both the ""T"" and nanoseconds from the date-time:|||The output will be:|||The ofPattern() method accepts all sorts of values, if you want to display the date and time in a different format. For example:",,,,"LocalDate|||Represents a date (year, month, day (yyyy-MM-dd))&&&LocalTime|||Represents a time (hour, minute, second and nanoseconds (HH-mm-ss-ns))&&&LocalDateTime|||Represents both a date and a time (yyyy-MM-dd-HH-mm-ss-ns)&&&DateTimeFormatter|||Formatter for displaying and parsing date-time objects$$$yyyy-MM-dd|||""1988-09-29""|||Try it »&&&dd/MM/yyyy|||""29/09/1988""|||Try it »&&&dd-MMM-yyyy|||""29-Sep-1988""|||Try it »&&&E, MMM dd yyyy|||""Thu, Sep 29 1988""|||Try it »",[]
Java Classes,Java ArrayList,https://www.w3schools.com/java/java_arraylist.asp,"The ArrayList class is a resizable array, which can be found in the java.util package.|||The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one). While elements can be added and removed from an ArrayList whenever you want. The syntax is also slightly different:|||Create an ArrayList object called cars that will store strings:|||If you don't know what a package is, read our Java Packages Tutorial.|||The ArrayList class has many useful methods. For example, to add elements to the ArrayList, use the add() method:|||Try it Yourself »|||To access an element in the ArrayList, use the get() method and refer to the index number:|||Try it Yourself »|||Remember: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.|||To modify an element, use the set() method and refer to the index number:|||Try it Yourself »|||To remove an element, use the remove() method and refer to the index number:|||Try it Yourself »|||To remove all the elements in the ArrayList, use the clear() method:|||Try it Yourself »|||To find out how many elements an ArrayList have, use the size method:|||Try it Yourself »|||Loop through the elements of an ArrayList with a for loop, and use the size() method to specify how many times the loop should run:|||Try it Yourself »|||You can also loop through an ArrayList with the for-each loop:|||Try it Yourself »|||Elements in an ArrayList are actually objects. In the examples above, we created elements (objects) of type ""String"". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:|||Create an ArrayList to store numbers (add elements of type Integer):|||Try it Yourself »|||Another useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically:|||Sort an ArrayList of Strings:|||Try it Yourself »|||Sort an ArrayList of Integers:|||Try it Yourself »",Add Items|||Sort an ArrayList,,,,[]
Java Classes,Java LinkedList,https://www.w3schools.com/java/java_linkedlist.asp,"In the previous chapter, you learned about the ArrayList class. The LinkedList class is almost identical to the ArrayList:|||Try it Yourself »|||The LinkedList class is a collection which can contain many objects of the same type,just like the ArrayList.|||The LinkedList class has all of the same methods as the ArrayList class becausethey both implement the List interface. This means that you can add items, changeitems, remove items and clear the list in the same way.|||However, while the ArrayList class and the LinkedList class can be used in the same way,they are built very differently.|||The ArrayList class has a regular array inside it. When an element is added, it is placedinto the array. If the array is not big enough, a new, larger array is created to replace theold one and the old one is removed.|||The LinkedList stores its items in ""containers."" The list has a link to the first containerand each container has a link to the next container in the list. To add an element to the list,the element is placed into a new container and that container is linked to one of the othercontainers in the list.|||Use an ArrayList for storing and accessing data, and LinkedList  to manipulate data.|||For many cases, the ArrayList is more efficient as it is common to need access torandom items in the list, but the LinkedList provides several methods to do certainoperations more efficiently:",How the ArrayList works,,,addFirst()|||Adds an item to the beginning of the list.|||Try it »&&&addLast()|||Add an item to the end of the list|||Try it »&&&removeFirst()|||Remove an item from the beginning of the list.|||Try it »&&&removeLast()|||Remove an item from the end of the list|||Try it »&&&getFirst()|||Get the item at the beginning of the list|||Try it »&&&getLast()|||Get the item at the end of the list|||Try it »,[]
Java Classes,Java HashMap,https://www.w3schools.com/java/java_hashmap.asp,"In the ArrayList chapter, you learned that Arrays store items as an ordered collection, and you have to access them with an index number (int type).A HashMap however, store items in ""key/value"" pairs, and you can access them by an index of another type (e.g. a String).|||One object is used as a key (index) to another object (value). It can store different types: String keys and Integer values, or the same type, like: String keys and String values:|||Create a HashMap object called capitalCities that will store String keys and Stringvalues:|||The HashMap class has many useful methods. For example, to add items to it, use the put() method:|||Try it Yourself »|||To access a value in the HashMap, use the get() method and refer to its key:|||Try it Yourself »|||To remove an item, use the remove() method and refer to the key:|||Try it Yourself »|||To remove all items, use the clear() method:|||Try it Yourself »|||To find out how many items there are, use the size() method:|||Try it Yourself »|||Loop through the items of a HashMap with a for-each loop.|||Note: Use the keySet() method if you only want the keys, and use the values() method if you only want the values:|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||Keys and values in a HashMap are actually objects. In the examples above, we used objects of type ""String"". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:|||Create a HashMap object called people that will store String keys and Integervalues:|||Try it Yourself »",Add Items,,,,[]
Java Classes,Java HashSet,https://www.w3schools.com/java/java_hashset.asp,"A HashSet is a collection of items where every item is unique, and it is found in the java.util package:|||Create a HashSet object called cars that will store strings:|||The HashSet class has many useful methods. For example, to add items to it, use the add() method:|||Try it Yourself »|||Note: In the example above, even though BMW is added twice it only appears once in the setbecause every item in a set has to be unique.|||To check whether an item exists in a HashSet, use the contains() method:|||Try it Yourself »|||To remove an item, use the remove() method:|||Try it Yourself »|||To remove all items, use the clear() method:|||Try it Yourself »|||To find out how many items there are, use the size method:|||Try it Yourself »|||Loop through the items of an HashSet with a for-each loop:|||Try it Yourself »|||Items in an HashSet are actually objects. In the examples above, we created items (objects) of type ""String"". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:|||Use a HashSet that stores Integer objects:|||Try it Yourself »",Add Items,,,,[]
Java Classes,Java Iterator,https://www.w3schools.com/java/java_iterator.asp,"An Iterator is an object that can be used to loop through collections, like ArrayListand HashSet. It is called an ""iterator"" because ""iterating"" is the technical term for looping.|||To use an Iterator, you must import it from the java.util package.|||The iterator() method can be used to get an Iterator for any collection:|||Try it Yourself »|||To loop through a collection, use the hasNext() and next() methods of the Iterator:|||Try it Yourself »|||Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping.|||Use an iterator to remove numbers less than 10 from a collection:|||Try it Yourself »|||Note: Trying to remove items using a for loop or a for-each loop would not work correctlybecause the collection is changing size at the same time that the code is trying to loop.",,,,,[]
Java Classes,Java Wrapper Classes,https://www.w3schools.com/java/java_wrapper_classes.asp,"Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.|||The table below shows the primitive type and the equivalent wrapper class:|||Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects):|||Try it Yourself »|||To create a wrapper object, use the wrapper class instead of the primitive type. To get the value, you can just print the object:|||Try it Yourself »|||Since you're now working with objects, you can use certain methods to get information about the specific object.|||For example, the following methods are used to get the value associated with the corresponding wrapper object: intValue(), byteValue(), shortValue(), longValue(), floatValue(), doubleValue(), charValue(), booleanValue().|||This example will output the same result as the example above:|||Try it Yourself »|||Another useful method is the toString() method, which is used to convert wrapper objects to strings.|||In the following example, we convert an Integer to a String, and use the length() method of the String class to output the length of the ""string"":|||Try it Yourself »",,,,byte|||Byte&&&short|||Short&&&int|||Integer&&&long|||Long&&&float|||Float&&&double|||Double&&&boolean|||Boolean&&&char|||Character,[]
Java Classes,Java Exceptions,https://www.w3schools.com/java/java_try_catch.asp,"When executing Java code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.|||When an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).|||The try statement allows you to define a block of code to be tested for errors while it is being executed.|||The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.|||The try and catch keywords come in pairs:|||Consider the following example:|||This will generate an error, because myNumbers[10] does not exist.|||The output will be something like this:|||If an error occurs, we can use try...catch to catch the error and execute some code to handle it:|||The output will be:|||The finally statement lets you execute code, after try...catch, regardless of the result:|||The output will be:|||The throw statement allows you to create a custom error.|||The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, FileNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc:|||Throw an exception if age is below 18 (print ""Access denied""). If age is 18 or older, print ""Access granted"":|||The output will be:|||If age was 20, you would not get an exception:|||The output will be:|||Insert the missing parts to handle the error in the code below.|||Start the Exercise",Finally,,,,[]
Java Classes,Java RegEx,https://www.w3schools.com/java/java_regex.asp,"A regular expression is a sequence of characters that forms a search pattern.When you search for data in a text, you can use this search pattern to describe what youare searching for.|||A regular expression can be a single character, or a more complicated pattern.|||Regular expressions can be used to perform all types of text search and text replaceoperations.|||Java does not have a built-in Regular Expression class, but we can import the java.util.regex package to work with regular expressions. The package includes the following classes:|||Find out if there are any occurrences of the word ""w3schools"" in a sentence:|||Try it Yourself »|||In this example, The word ""w3schools"" is being searched for in a sentence.|||First, the pattern is created using the Pattern.compile() method. The first parameterindicates which pattern is being searched for and the second parameter has a flag toindicates that the search should be case-insensitive. The second parameter is optional.|||The matcher() method is used to search for the pattern in a string. It returns a Matcherobject which contains information about the search that was performed.|||The find() method returns true if the pattern was found in the string and false if it was notfound.|||Flags in the compile() method change how the search is performed. Here are a few ofthem:|||The first parameter of the Pattern.compile() method is the pattern. It describes whatis being searched for.|||Brackets are used to find a range of characters:|||Metacharacters are characters with a special meaning:|||Quantifiers define quantities:|||Note: If your expression needs to search for one of the special characters you can use abackslash ( \ ) to escape them. In Java, backslashes in strings need to be escapedthemselves, so two backslashes are needed to escape special characters.For example, to search for one or more question marks you can use the followingexpression: ""\\?""",What is a Regular Expression?,Pattern Class - Defines a pattern (to be used in a search)@@@Matcher Class - Used to search for the pattern@@@PatternSyntaxException Class - Indicates syntax error in a regular expression pattern|||Pattern.CASE_INSENSITIVE - The case of letters will be ignored when performinga search.@@@Pattern.LITERAL - Special characters in the pattern will not have any specialmeaning and will be treated as ordinary characters when performing a search.@@@Pattern.UNICODE_CASE - Use it together with the CASE_INSENSITIVE flag toalso ignore the case of letters outside of the English alphabet,,"[abc]|||Find one character from the options between the brackets&&&[^abc]|||Find one character NOT between the brackets&&&[0-9]|||Find one character from the range 0 to 9$$$&&&||||Find a match for any one of the patterns separated by | as in: cat|dog|fish&&&.|||Find just one instance of any character&&&^|||Finds a match as the beginning of a string as in: ^Hello&&&$|||Finds a match at the end of the string as in: World$&&&\d|||Find a digit&&&\s|||Find a whitespace character&&&\b|||Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b&&&\uxxxx|||Find the Unicode character specified by the hexadecimal number xxxx$$$n+|||Matches any string that contains at least one n&&&n*|||Matches any string that contains zero or more occurrences of n&&&n?|||Matches any string that contains zero or one occurrences of n&&&n{x}|||Matches any string that contains a sequence of X n's&&&n{x,y}|||Matches any string that contains a sequence of X to Y n's&&&n{x,}|||Matches any string that contains a sequence of at least X n's",[]
Java Classes,Java Threads,https://www.w3schools.com/java/java_threads.asp,"Threads allows a program to operate more efficiently by doing multiple things at the sametime.|||Threads can be used to perform complicated tasks in the background without interruptingthe main program.|||There are two ways to create a thread.|||It can be created by extending the Thread class and overriding its run() method:|||Another way to create a thread is to implement the Runnable interface:|||If the class extends the Thread class, the thread can be run by creating an instance of theclass and call its start() method:|||Try it Yourself »|||If the class implements the Runnable interface, the thread can be run by passing aninstance of the class to a Thread object's constructor and then calling the thread'sstart() method:|||Try it Yourself »|||Differences between ""extending"" and ""implementing"" Threads|||The major difference is that when a class extends the Thread class, you cannot extend any other class, but by implementing the Runnable interface, it is possible to extend from another class as well, like: class MyClass extends OtherClass implements Runnable.|||Because threads run at the same time as other parts of the program, there is no way toknow in which order the code will run. When the threads and main program are readingand writing the same variables, the values are unpredictable. The problems that resultfrom this are called concurrency problems.|||A code example where the value of the variable amount is unpredictable:|||Try it Yourself »|||To avoid concurrency problems, it is best to share as few attributes between threads aspossible. If attributes need to be shared, one possible solution is to use the isAlive()method of the thread to check whether the thread has finished running before using any attributes that the thread can change.|||Use isAlive() to prevent concurrency problems:|||Try it Yourself »",Java Threads,,,,[]
Java Classes,Java Lambda,https://www.w3schools.com/java/java_lambda.asp,"Lambda Expressions were added in Java 8.|||A lambda expression is a short block of code which takes in parameters and returns avalue. Lambda expressions are similar to methods, but they do not need a name and theycan be implemented right in the body of a method.|||The simplest lambda expression contains a single parameter and an expression:|||To use more than one parameter, wrap them in parentheses:|||Expressions are limited. They have to immediately return a value, and they cannot containvariables, assignments or statements such as if or for. In order to do more complexoperations, a code block can be used with curly braces. If the lambda expression needs toreturn a value, then the code block should have a return statement.|||Lambda expressions are usually passed as parameters to a function:|||Use a lamba expression in the ArrayList's forEach() method to printevery item in the list:|||Try it Yourself »|||Lambda expressions can be stored in variables if the variable's type is an interface whichhas only one method. The lambda expression should have the same number ofparameters and the same return type as that method. Java has many of these kinds ofinterfaces built in, such as the Consumer interface (found in the java.util package) used by lists.|||Use Java's Consumer interface to store a lambda expression in a variable:|||Try it Yourself »|||To use a lambda expression in a method, the method should have a parameter with asingle-method interface as its type. Calling the interface's method will run the lambdaexpression:|||Create a method which takes a lambda expression as a parameter:|||Try it Yourself »",,,,,[]
Java File Handling,Java Files,https://www.w3schools.com/java/java_files.asp,"File handling is an important part of any application.|||Java has several methods for creating, reading, updating, and deleting files.|||The File class from the java.io package, allows us to work with files.|||To use the File class, create an object of the class, and specify the filename or directory name: Exampleimport java.io.File;  // Import the File classFile myObj = new File(""filename.txt""); // Specify the filenameIf you don't know what a package is, read our Java Packages Tutorial.The File class has many useful methods for creating and getting information about files. For example:MethodTypeDescriptioncanRead()BooleanTests whether the file is readable or notcanWrite()BooleanTests whether the file is writable or notcreateNewFile()BooleanCreates an empty filedelete()BooleanDeletes a fileexists()BooleanTests whether the file existsgetName()StringReturns the name of the filegetAbsolutePath()StringReturns the absolute pathname of the filelength()LongReturns the size of the file in byteslist()String[]Returns an array of the files in the directorymkdir()BooleanCreates a directoryYou will learn how to create, write, read and delete files in the next chapters:Create/Write Files »Read Files »Delete Files »❮ PreviousNext ❯|||If you don't know what a package is, read our Java Packages Tutorial.|||The File class has many useful methods for creating and getting information about files. For example:|||You will learn how to create, write, read and delete files in the next chapters:",,,,canRead()|||Boolean|||Tests whether the file is readable or not&&&canWrite()|||Boolean|||Tests whether the file is writable or not&&&createNewFile()|||Boolean|||Creates an empty file&&&delete()|||Boolean|||Deletes a file&&&exists()|||Boolean|||Tests whether the file exists&&&getName()|||String|||Returns the name of the file&&&getAbsolutePath()|||String|||Returns the absolute pathname of the file&&&length()|||Long|||Returns the size of the file in bytes&&&list()|||String[]|||Returns an array of the files in the directory&&&mkdir()|||Boolean|||Creates a directory,[]
Java File Handling,Java Create/Write Files,https://www.w3schools.com/java/java_files_create.asp,"To create a file in Java, you can use the createNewFile() method. This method returns a boolean value: true if the file was successfully created, and false if the file already exists. Note that the method is enclosed in a try...catch block. This is necessary because it throws an IOException if an error occurs (if the file cannot be created for some reason):|||The output will be:|||To create a file in a specific directory (requires permission), specify the path of the file and use double backslashes to escape the ""\"" character (for Windows). On Mac and Linux you can just write the path, like: /Users/name/filename.txt|||Run Example »|||In the following example, we use the FileWriter class together with its write() method to write some text to the file we created in the example above. Note that when you are done writing to the file, you should close it with the close() method:|||The output will be:|||To read the file above, go to the Java Read Files chapter.",,,,,[]
Java File Handling,Java Read Files,https://www.w3schools.com/java/java_files_read.asp,"In the previous chapter, you learned how to create and write to a file.|||In the following example, we use the Scanner class to read the contents of the text file we created in the previous chapter:|||The output will be:|||To get more information about a file, use any of the File methods:|||The output will be:|||Note: There are many available classes in the Java API that can be used to read and write files in Java: FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream, etc. Which one to use depends on the Java version you're working with and whether you need to read bytes or characters, and the size of the file/lines etc.|||Tip: To delete a file, read out Java Delete Files chapter.",,,,,[]
Java File Handling,Java Delete Files,https://www.w3schools.com/java/java_files_delete.asp,"To delete a file in Java, use the delete() method:|||The output will be:|||You can also delete a folder. However, it must be empty:|||The output will be:",,,,,[]
Java How To,Add Two Numbers,https://www.w3schools.com/java/java_howto_add_two_numbers.asp,Learn how to add two numbers in Java:|||Learn how to add two numbers with user input:,,,,,[]
Java Reference,Java Keywords,https://www.w3schools.com/java/java_ref_keywords.asp,"Java has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers:|||Note: true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.",,,,"abstract|||A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)&&&assert|||For debugging&&&boolean|||A data type that can only store true and false values&&&break|||Breaks out of a loop or a switch block&&&byte|||A data type that can store whole numbers from -128 and 127&&&case|||Marks a block of code in switch statements&&&catch|||Catches exceptions generated by try statements&&&char|||A data type that is used to store a single character&&&class|||Defines a class&&&continue|||Continues to the next iteration of a loop&&&const|||Defines a constant. Not in use - use final instead&&&default|||Specifies the default block of code in a switch statement&&&do|||Used together with while to create a do-while loop&&&double|||A data type that can store whole numbers from 1.7e−308 to 1.7e+308&&&else|||Used in conditional statements&&&enum|||Declares an enumerated (unchangeable) type&&&exports|||Exports a package with a module. New in Java 9&&&extends|||Extends a class (indicates that a class is inherited from another class)&&&final|||A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)&&&finally|||Used with exceptions, a block of code that will be executed no matter if there is an exception or not&&&float|||A data type that can store whole numbers from 3.4e−038 to 3.4e+038&&&for|||Create a for loop&&&goto|||Not in use, and has no function&&&if|||Makes a conditional statement&&&implements|||Implements an interface&&&import|||Used to import a package, class or interface&&&instanceof|||Checks whether an object is an instance of a specific class or an interface&&&int|||A data type that can store whole numbers from -2147483648 to 2147483647&&&interface|||Used to declare a special type of class that only contains abstract methods&&&long|||A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808&&&module|||Declares a module. New in Java 9&&&native|||Specifies that a method is not implemented in the same Java source file (but in another language)&&&new|||Creates new objects&&&package|||Declares a package&&&private|||An access modifier used for attributes, methods and constructors, making them only accessible within the declared class&&&protected|||An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses&&&public|||An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class&&&requires|||Specifies required libraries inside a module. New in Java 9&&&return|||Finished the execution of a method, and can be used to return a value from a method&&&short|||A data type that can store whole numbers from -32768 to 32767&&&static|||A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class&&&strictfp|||Restrict the precision and rounding of floating point calculations&&&super|||Refers to superclass (parent) objects&&&switch|||Selects one of many code blocks to be executed&&&synchronized|||A non-access modifier, which specifies that methods can only be accessed by one thread at a time&&&this|||Refers to the current object in a method or constructor&&&throw|||Creates a custom error&&&throws|||Indicates what exceptions may be thrown by a method&&&transient|||A non-accesss modifier, which specifies that an attribute is not part of an object's persistent state&&&try|||Creates a try...catch statement&&&var|||Declares a variable. New in Java 10&&&void|||Specifies that a method should not have a return value&&&volatile|||Indicates that an attribute is not cached thread-locally, and is always read from the ""main memory""&&&while|||Creates a while loop",[]
Java Reference,"
abstract
boolean
break
byte
case
catch
char
class
continue
default
do
double
else
enum
extends
final
finally
float
for
if
implements
import
instanceof
int
interface
long
new
package
private
protected
public
return
short
static
super
switch
this
throw
throws
try
void
while
",https://www.w3schools.com/java/java_ref_string.asp,The String class has a set of built-in methods that you can use on strings.,,,,"charAt()|||Returns the character at the specified index (position)|||char&&&codePointAt()|||Returns the Unicode of the character at the specified index|||int&&&codePointBefore()|||Returns the Unicode of the character before the specified index|||int&&&codePointCount()|||Returns the number of Unicode values found in a string.|||int&&&compareTo()|||Compares two strings lexicographically|||int&&&compareToIgnoreCase()|||Compares two strings lexicographically, ignoring case differences|||int&&&concat()|||Appends a string to the end of another string|||String&&&contains()|||Checks whether a string contains a sequence of characters|||boolean&&&contentEquals()|||Checks whether a string contains the exact same sequence of characters 
    of the specified CharSequence or StringBuffer|||boolean&&&copyValueOf()|||Returns a String that represents the characters of the character array|||String&&&endsWith()|||Checks whether a string ends with the specified character(s)|||boolean&&&equals()|||Compares two strings. Returns true if the strings are equal, and false 
    if not|||boolean&&&equalsIgnoreCase()|||Compares two strings, ignoring case considerations|||boolean&&&format()|||Returns a formatted string using the specified locale, format string, and arguments|||String&&&getBytes()|||Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array|||byte[]&&&getChars()|||Copies characters from a string to an array of chars|||void&&&hashCode()|||Returns the hash code of a string|||int&&&indexOf()|||Returns the position of the first found occurrence of specified characters in a string|||int&&&intern()|||Returns the canonical representation for the string object|||String&&&isEmpty()|||Checks whether a string is empty or not|||boolean&&&lastIndexOf()|||Returns the position of the last found occurrence of specified characters in a string|||int&&&length()|||Returns the length of a specified string|||int&&&matches()|||Searches a string for a match against a regular expression, and returns the matches|||boolean&&&offsetByCodePoints()|||Returns the index within this String that is offset from the given index by codePointOffset code points|||int&&&regionMatches()|||Tests if two string regions are equal|||boolean&&&replace()|||Searches a string for a specified value, and returns a new string where the specified values are replaced|||String&&&replaceFirst()|||Replaces the first occurrence of a substring that matches the given regular expression with the given replacement|||String&&&replaceAll()|||Replaces each substring of this string that matches the given regular expression with the given replacement|||String&&&split()|||Splits a string into an array of substrings|||String[]&&&startsWith()|||Checks whether a string starts with specified characters|||boolean&&&subSequence()|||Returns a new character sequence that is a subsequence of this sequence|||CharSequence&&&substring()|||Returns a new string which is the substring of a specified string|||String&&&toCharArray()|||Converts this string to a new character array|||char[]&&&toLowerCase()|||Converts a string to lower case letters|||String&&&toString()|||Returns the value of a String object|||String&&&toUpperCase()|||Converts a string to upper case letters|||String&&&trim()|||Removes whitespace from both ends of a string|||String&&&valueOf()|||Returns the string representation of the specified value|||String",[]
Java Reference,Java String Methods,https://www.w3schools.com/java/java_ref_math.asp,The Java Math class has many methods that allows you to perform mathematical tasks on numbers.|||A list of all Math methods can be found in the table below:|||Note: All Math methods are static.,,,,"abs(x)|||Returns the absolute value of x|||double|float|int|long&&&acos(x)|||Returns the arccosine of x, in radians|||double&&&asin(x)|||Returns the arcsine of x, in radians|||double&&&atan(x)|||Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians|||double&&&atan2(y,x)|||Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).|||double&&&cbrt(x)|||Returns the cube root of x|||double&&&ceil(x)|||Returns the value of x rounded up to its nearest integer|||double&&&copySign(x, y)|||Returns the first floating point x with the sign of the second floating point y|||double&&&cos(x)|||Returns the cosine of x (x is in radians)|||double&&&cosh(x)|||Returns the hyperbolic cosine of a double value|||double&&&exp(x)|||Returns the value of Ex|||double&&&expm1(x)|||Returns ex -1|||double&&&floor(x)|||Returns the value of x rounded down to its nearest integer|||double&&&getExponent(x)|||Returns the unbiased exponent used in x|||int&&&hypot(x, y)|||Returns sqrt(x2 +y2) without intermediate overflow or underflow|||double&&&IEEEremainder(x, y)|||Computes the remainder operation on x and y as prescribed by the IEEE 754 standard|||double&&&log(x)|||Returns the natural logarithm (base E) of x|||double&&&log10(x)|||Returns the base 10 logarithm of x|||double&&&log1p(x)|||Returns the natural logarithm (base E) of the sum of x and 1|||double&&&max(x, y)|||Returns the number with the highest value|||double|float|int|long&&&min(x, y)|||Returns the number with the lowest value|||double|float|int|long&&&nextAfter(x, y)|||Returns the floating point number adjacent to x in the direction of y|||double|float&&&nextUp(x)|||Returns the floating point value adjacent to x in the direction of positive infinity|||double|float&&&pow(x, y)|||Returns the value of x to the power of y|||double&&&random()|||Returns a random number between 0 and 1|||double&&&round(x)|||Returns the value of x rounded to its nearest integer|||int&&&rint()|||Returns the double value that is closest to x and equal to a mathematical integer|||double&&&signum(x)|||Returns the sign of x|||double&&&sin(x)|||Returns the sine of x (x is in radians)|||double&&&sinh(x)|||Returns the hyperbolic sine of a double value|||double&&&sqrt(x)|||Returns the square root of x|||double&&&tan(x)|||Returns the tangent of an angle|||double&&&tanh(x)|||Returns the hyperbolic tangent of a double value|||double&&&toDegrees(x)|||Converts an angle measured in radians to an approx. equivalent angle measured in degrees|||double&&&toRadians(x)|||Converts an angle measured in degrees to an approx. angle measured in radians|||double&&&ulp(x)|||Returns the size of the unit of least precision (ulp) of x|||double|float",[]
Java Reference,Java Math Methods,https://www.w3schools.com/java/java_examples.asp,,,,,,[]
Java Examples,Java Examples,https://www.w3schools.com/java/java_compiler.asp,"With our online Java compiler, you can edit Java code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you don't know Java, we suggest that you read our Java Tutorial from scratch.",Java Compiler (Editor)|||Java Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
Java Examples,Java Compiler,https://www.w3schools.com/java/java_exercises.asp,"You can test your Java skills with W3Schools' Exercises.|||We have gathered a variety of Java exercises (with answers) for each Java Chapter.|||Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start Java Exercises ❯|||If you don't know Java, we suggest that you read our Java Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
Java Examples,Java Exercises,https://www.w3schools.com/java/java_quiz.asp,"You can test your Java skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about Java.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the Java Quiz ❯|||If you don't know Java, we suggest that you read our Java Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
Java Examples,Java Quiz,https://www.w3schools.com/java/java_exam.asp,"W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.|||Getting a certificate proves your commitment to upgrade your skills,gives you the credibility needed for more responsibilities, larger projects, and a higher salary.|||Get Your Certificate »",How Does It Work?,"Study for free at W3Schools.com@@@Study at your own speed@@@Test your skills with W3Schools online quizzes@@@Apply for your certificate by paying an exam fee@@@Take your exam online, at any time, and from any location",,"
Document Your Skills
Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.
Get a Certificate
Getting a certificate proves your commitment to upgrade your skills,
gives you the credibility needed for more responsibilities, larger projects, and a higher salary.

Get Your Certificate »

|||

",[]
