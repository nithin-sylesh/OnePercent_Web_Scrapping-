Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
JS Tutorial,JS HOME,https://www.w3schools.com/js/default.asp,"JavaScript is the world's most popular programming language.|||JavaScript is the programming language of the Web.|||JavaScript is easy to learn.|||This tutorial will teach you JavaScript from basic to advanced.|||With our ""Try it Yourself"" editor, you can edit the source code and view the result.||||||Try it Yourself »|||We recommend reading this tutorial, in the sequence listed in the menu.|||If you have a large screen, the menu will always be present on the left.|||If you have a small screen, open the menu by clicking the top menu sign ☰.|||Examples are better than 1000 words. Examples are often easier to understand than text explanations.|||This tutorial supplements all explanations with clarifying ""Try it Yourself"" examples.|||If you try all the examples, you will learn a lot about JavaScript, in a very short time!|||JavaScript is one of the 3 languages all web developers must learn:|||   1. HTML to define the content of web pages|||   2. CSS to specify the layout of web pages|||   3. JavaScript to program the behavior of web pages |||This tutorial covers every version of JavaScript:|||In this tutorial, the learning speed is your choice.|||Everything is up to you.|||If you are struggling, take a break, or re-read the material.|||Always make sure you understand all the ""Try-it-Yourself"" examples.|||The only way to become a clever programmer is to:Practice. Practice. Practice. Code. Code. Code !|||Create a variable called carName and assign the value Volvo to it.|||Start the Exercise|||You don't have to get or download JavaScript.|||JavaScript is already running in your browser on your computer,on your tablet, and on your smart-phone.|||JavaScript is free to use for everyone.|||W3Schools maintains a complete JavaScript reference, including all HTML and browser objects.|||The reference contains examples for all properties, methods and events, and is continuously updated according to the latest web standards.|||Test your JavaScript skills at W3Schools!|||Start JavaScript Quiz!|||Get certified by completing the  course",Commonly Asked Questions,"The Original JavaScript ES1 ES2 ES3 (1997-1999)@@@The First Main Revision ES5 (2009)@@@The Second Revision ES6 (2015)@@@The Yearly Additions (2016, 2017, 2018)|||How do I get JavaScript?@@@Where can I download JavaScript?@@@Is JavaScript Free?",,,"[['\n', <h2>My First JavaScript</h2>, '\n', <button onclick=""document.getElementById('demo').innerHTML=Date()"" type=""button"">
Click me to display Date and Time</button>, '\n', <p id=""demo""></p>, '\n']]"
JS Tutorial,JS Introduction,https://www.w3schools.com/js/js_intro.asp,"This page contains some examples of what JavaScript can do.|||One of many JavaScript HTML methods is getElementById().|||The example below ""finds"" an HTML element (with id=""demo""), and changes the element content (innerHTML) to ""Hello JavaScript"":|||JavaScript accepts both double and single quotes:|||In this example JavaScript changes the value of the src (source) attribute of an <img> tag:|||Try it Yourself »|||Changing the style of an HTML element, is a variant of changing an HTML attribute:|||Hiding HTML elements can be done by changing the display style:|||Showing hidden HTML elements can also be done by changing the display style:|||JavaScript and Java are completely different languages, both in concept and design.|||JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard  in 1997.|||ECMA-262 is the official name of the standard. ECMAScript is the official name of the language.",Did You Know?,,,,[]
JS Tutorial,JS Where To,https://www.w3schools.com/js/js_whereto.asp,"In HTML, JavaScript code is inserted between <script> and </script> tags.|||Try it Yourself »|||Old JavaScript examples may use a type attribute: <script type=""text/javascript"">.The type attribute is not required. JavaScript is the default scripting language in HTML.|||A JavaScript function is a block of JavaScript code, that can be executed when ""called"" for.|||For example, a function can be called when an event occurs, like when the user clicks a button.|||You will learn much more about functions and events in later chapters.|||You can place any number of scripts in an HTML document.|||Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.|||In this example, a JavaScript function is placed in the <head> section of an HTML page.|||The function is invoked (called) when a button is clicked:|||<h2>Demo JavaScript in Head</h2><p id=""demo"">A Paragraph</p><button type=""button"" onclick=""myFunction()"">Try it</button>|||</body></html>|||In this example, a JavaScript function is placed in the <body> section of an HTML page.|||The function is invoked (called) when a button is clicked:|||Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.|||Scripts can also be placed in external files:|||External scripts are practical when the same code is used in many different web pages. |||JavaScript files have the file extension .js.|||To use an external script, put the name of the script file in the src (source) attribute of a <script> tag:|||You can place an external script reference in <head> or <body> as you like.|||The script will behave as if it was located exactly where the <script> tag is located.|||External scripts cannot contain <script> tags.|||Placing scripts in external files has some advantages:|||To add several script files to one page  - use several script tags:|||An external script can be referenced in 3 different ways:|||This example uses a full URL to link to myScript.js: |||Try it Yourself »|||This example uses a file path to link to myScript.js:|||Try it Yourself »|||This example uses no path to link to myScript.js:|||Try it Yourself »|||You can read more about file paths in the chapter HTML File Paths.",,It separates HTML and code@@@It makes HTML and JavaScript easier to read and maintain@@@Cached JavaScript files can speed up page loads|||With a full URL (a full web address)@@@With a file path (like /js/)@@@Without any path,,,[]
JS Tutorial,JS Output,https://www.w3schools.com/js/js_output.asp,"JavaScript can ""display"" data in different ways:|||To access an HTML element, JavaScript can use the document.getElementById(id) method. |||The id attribute defines the HTML element. The innerHTML  property defines the HTML content:|||Changing the innerHTML property of an HTML elementis a common way to display data in HTML.|||For testing purposes, it is convenient to use document.write():|||Using document.write() after an HTML document is loaded, will delete all existing HTML:|||The document.write() method should only be used for testing.|||You can use an alert box to display data:|||You can skip the window keyword.|||In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object.This also means that specifying the window keyword is optional:|||For debugging purposes, you can call the console.log() methodin the browser to display data.|||You will learn more about debugging in a later chapter.|||JavaScript does not have any print object or print methods.|||You cannot access output devices from JavaScript.|||The only exception is that you can call the window.print() method inthe browser to print the content of the current window.",,"Writing into an HTML element, using innerHTML.@@@Writing into the HTML output using document.write().@@@Writing into an alert box, using window.alert().@@@Writing into the browser console, using console.log().",,,[]
JS Tutorial,JS Statements,https://www.w3schools.com/js/js_statements.asp,"A computer program is a list of ""instructions"" to be ""executed"" by a computer.|||In a programming language, these programming instructions are called statements.|||A JavaScript program is a list of programming statements.|||In HTML, JavaScript programs are executed by the web browser.|||JavaScript statements are composed of:|||Values, Operators, Expressions, Keywords, and Comments.|||This statement tells the browser to write ""Hello Dolly."" inside an HTML element with id=""demo"":|||Most JavaScript programs contain many JavaScript statements.|||The statements are executed, one by one, in the same order as they are written.|||JavaScript programs (and JavaScript statements) are often called JavaScript code.|||Semicolons separate JavaScript statements.|||Add a semicolon at the end of each executable statement: |||When separated by semicolons, multiple statements on one line are allowed:|||On the web, you might see examples without semicolons. Ending statements with semicolon is not required, but highly recommended.|||JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.|||The following lines are equivalent:|||A good practice is to put spaces around operators ( = + - * / ):|||For best readability, programmers often like to avoid code lines longer than 80 characters.|||If a JavaScript statement does not fit on one line, the best place to break it is after an operator:|||JavaScript statements can be grouped together in code blocks, inside curly brackets {...}.|||The purpose of code blocks is to define statements to be executed together.|||One place you will find statements grouped together in blocks, is in JavaScript functions:|||In this tutorial we use 2 spaces of indentation for code blocks.You will learn more about functions later in this tutorial.|||JavaScript statements often start with a keyword to identify the JavaScript action to be performed.|||Our Reserved Words Reference lists all JavaScript keywords.|||Here is a list of some of the keywords you will learn about in this tutorial: |||JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.",JavaScript White Space,,,var|||Declares a variable&&&let|||Declares a block variable&&&const|||Declares a block constant&&&if|||Marks a block of statements to be executed on a condition&&&switch|||Marks a block of statements to be executed in different cases&&&for|||Marks a block of statements to be executed in a loop&&&function|||Declares a function&&&return|||Exits a function&&&try|||Implements error handling to a block of statements,[]
JS Tutorial,JS Syntax,https://www.w3schools.com/js/js_syntax.asp,"JavaScript syntax is the set of rules, how JavaScript programs are constructed:|||The JavaScript syntax defines two types of values:|||Fixed values are called Literals.|||Variable values are called Variables.|||The two most important syntax rules for fixed values are:|||1. Numbers are written with or without decimals:|||2. Strings are text, written within double or single quotes:|||In a programming language, variables are used to store data values.|||JavaScript uses the keywords var,let and const to declare variables.|||An equal sign is used to assign values to variables.|||In this example, x is defined as a variable. Then, x is assigned (given) the value 6:|||JavaScript uses arithmetic operators ( + - * / ) to compute values: |||JavaScript uses an assignment operator ( = ) to assign values to variables: |||An expression is a combination of values, variables, and operators, which computes to a value.|||The computation is called an evaluation.|||For example, 5 * 10 evaluates to 50:|||Expressions can also contain variable values:|||The values can be of various types, such as numbers and strings.|||For example, ""John"" + "" "" + ""Doe"", evaluates to ""John Doe"":|||JavaScript keywords are used to identify actions to be performed.|||Thelet keyword tells the browser to create variables:|||Thevar keyword also tells the browser to create variables:|||In these examples, using varor let will produce the same result.|||You will learn more about varand let later in this tutorial.|||Not all JavaScript statements are ""executed"".|||Code after double slashes// or between /* and */ is treated as a comment.|||Comments are ignored, and will not be executed:|||You will learn more about comments in a later chapter.|||Identifiers are JavaScript names.|||Identifiers are used to name variables and keywords, and functions.|||The rules for legal names are the same in most programming languages.|||A JavaScript name must begin with:|||Subsequent characters may be letters, digits, underscores, or dollar signs.|||Numbers are not allowed as the first character in names.|||This way JavaScript can easily distinguish identifiers from numbers.|||All JavaScript identifiers are case sensitive.  |||The variables lastName and lastname, are two different variables:|||JavaScript does not interpret LET or Let as the keyword let.|||Historically, programmers have used different ways of joining multiple words into one variable name:|||Hyphens:|||first-name, last-name, master-card, inter-city.|||Hyphens are not allowed in JavaScript. They are reserved for subtractions.|||Underscore:|||first_name, last_name, master_card, inter_city.|||Upper Camel Case (Pascal Case):|||FirstName, LastName, MasterCard, InterCity.|||Lower Camel Case:JavaScript programmers tend to use camel case that starts with a lowercase letter:firstName, lastName, masterCard, interCity.JavaScript Character SetJavaScript uses the Unicode character set.Unicode covers (almost) all the characters, punctuations, and symbols in the world.For a closer look, please study our Complete Unicode Reference.❮ PreviousNext ❯|||Lower Camel Case:|||JavaScript programmers tend to use camel case that starts with a lowercase letter:|||firstName, lastName, masterCard, interCity.|||JavaScript uses the Unicode character set.|||Unicode covers (almost) all the characters, punctuations, and symbols in the world.|||For a closer look, please study our Complete Unicode Reference.",JavaScript Literals|||JavaScript and Camel Case,Fixed values@@@Variable values|||A letter (A-Z or a-z)@@@A dollar sign ($)@@@Or an underscore (_),,,[]
JS Tutorial,JS Comments,https://www.w3schools.com/js/js_comments.asp,"JavaScript comments can be used to explain JavaScript code, and to make it more readable.|||JavaScript comments can also be used to prevent execution, when testing alternative code.|||Single line comments start with //.|||Any text between // and the end of the line will be ignored by JavaScript (will not be executed).|||This example uses a single-line comment before each code line:|||This example uses a single line comment at the end of each line to explain the code:|||Multi-line comments start with /* and end with  */.|||Any text between /* and */ will be ignored by JavaScript.|||This example uses a multi-line comment (a comment block) to explain the code:|||It is most common to use single line comments.Block comments are often used for formal documentation.|||Using comments to prevent execution of code is suitable for code testing.|||Adding // in front of a code line changes the code lines from an executable line to a comment.|||This example uses // to prevent execution of one of the code lines:|||This example uses a comment block to prevent execution of multiple lines:",Multi-line Comments,,,,[]
JS Tutorial,JS Variables,https://www.w3schools.com/js/js_variables.asp,"Variables are containers for storing data (storing data values).|||In this example, x, y, and z,are variables, declared with the var keyword:|||In this example, x, y, and z,are variables, declared with the let keyword:|||In this example, x, y, and z,are undeclared variables:|||From all the examples above, you can guess:|||Always declare JavaScript variables with var,let,orconst.|||The var keyword is used in all JavaScript code from 1995 to 2015.|||The let and const keywords were added to JavaScript in 2015.|||If you want your code to run in older browser, you must use var.|||If you want a general rule: always declare variables with const.|||If you think the value of the variable can change, use let.|||In this example, price1, price2, and total, are variables:|||The two variables price1 and price2are declared with the const keyword.|||These are constant values and cannot be changed.|||The variable total is declared with the let keyword.|||This is a value that can be changed.|||Just like in algebra, variables hold values:|||Just like in algebra, variables are used in expressions:|||From the example above, you can guess that the total is calculated to be 11.|||Variables are containers for storing values.|||All JavaScript variables must beidentified with unique names.|||These unique names are called identifiers.|||Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).|||The general rules for constructing names for variables (unique identifiers) are:|||JavaScript identifiers are case-sensitive.|||In JavaScript, the equal sign (=) is an ""assignment"" operator, not an ""equal to"" operator.|||This is different from algebra. The following does not make sense in algebra:|||In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x.|||(It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.)|||The ""equal to"" operator is written like == in JavaScript.|||JavaScript variables can hold numbers like 100 and text values like ""John Doe"".|||In programming, text values are called text strings.|||JavaScript can handle many types of data, but for now, just think of numbers and strings. |||Strings are written inside double or single quotes. Numbers are written without quotes.|||If you put a number in quotes, it will be treated as a text string.|||Creating a variable in JavaScript is called ""declaring"" a variable. |||You declare a JavaScript variable with the var or the let keyword:|||After the declaration, the variable has no value (technically it is undefined).|||To assign a value to the variable, use the equal sign:|||You can also assign a value to the variable when you declare it:|||In the example below, we create a variable called carName and assign the value ""Volvo"" to it.|||Then we ""output"" the value inside an HTML paragraph with id=""demo"":|||It's a good programming practice to declare all variables at the beginning of a script.|||You can declare many variables in one statement.|||Start the statement with var and separate the variables by comma:|||A declaration can span multiple lines: |||In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.|||A variable declared without a value will have the value undefined.|||The variable carName will have the value undefined after the execution of this statement:|||If you re-declare a JavaScript variable declared with var, it will not lose its value.|||The variable carName will still have the value ""Volvo"" after the execution of these statements:|||You cannot re-declare a variable declared with let or const.|||This will not work:|||As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +: |||You can also add strings, but strings will be concatenated:|||Also try this:|||If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.|||Now try this:|||Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:|||Using the dollar sign is not very common in JavaScript,but professional programmers often use it as an alias for the main function in a JavaScript library.|||In the JavaScript library jQuery, for instance, the main function$ is used to select HTML elements.In jQuery $(""p""); means ""select all p elements"".|||Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:Examplelet _lastName = ""Johnson"";let _x = 2;let _100 = 5;Try it Yourself »Using the underscore is not very common in JavaScript,but a convention among professional programmers is to use it as an alias for""private (hidden)"" variables.Test Yourself With ExercisesExercise:Create a variable called carName and assign the value Volvo to it.var  = """";Submit Answer »Start the Exercise❮ PreviousNext ❯|||Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:|||Using the underscore is not very common in JavaScript,but a convention among professional programmers is to use it as an alias for""private (hidden)"" variables.|||Create a variable called carName and assign the value Volvo to it.|||Start the Exercise",4 Ways to Declare a JavaScript Variable:|||When to Use JavaScript const?,"Using var@@@Using let@@@Using const@@@Using nothing|||x stores the value 5@@@y stores the value 6@@@z stores the value 11|||Names can contain letters, digits, underscores, and dollar signs.@@@Names must begin with a letter@@@Names can also begin with $ and _ (but we will not use it in this tutorial)@@@Names are case sensitive (y and Y are different variables)@@@Reserved words (like JavaScript keywords) cannot be used as names",,,[]
JS Tutorial,JS Let,https://www.w3schools.com/js/js_let.asp,"The let keyword was introduced inES6 (2015).|||Variables defined with let cannot be Redeclared.|||Variables defined with let must be Declared before use.|||Variables defined with let have Block Scope.|||Variables defined with let cannot be redeclared.|||You cannot accidentally redeclare a variable.|||With let you can not do this:|||With var you can:|||Before ES6 (2015), JavaScript had only Global Scope and Function Scope.|||ES6 introduced two important new JavaScript keywords: let and const.|||These two keywords provide Block Scope in JavaScript.|||Variables declared inside a { } block cannot be accessed from outside the block:|||Variables declared with the var keyword can NOT have block scope.|||Variables declared inside a { } block can be accessed from outside the block. |||Redeclaring a variable using the var keyword can impose problems.|||Redeclaring a variable inside a block will also redeclare the variable outside the block:|||Redeclaring a variable using the let keyword can solve this problem.|||Redeclaring a variable inside a block will not redeclare the variable outside the block:|||The let keyword is not fully supported in Internet Explorer 11 or earlier.|||The following table defines the first browser versions with full support for the let keyword: |||Redeclaring a JavaScript variable with var is allowed anywhere in a program:|||With let, redeclaring a variable in the same block is NOT allowed:|||Redeclaring a variable with let, in another block, IS allowed:|||Variables defined with var are hoisted to the top and can be initialized at any time.Meaning: You can use the variable before it is declared:ExampleThis is OK:  carName = ""Volvo"";  var carName;Try it Yourself »If you want to learn more about hoisting, study the chapter JavaScript Hoisting.Variables defined with let are also hoisted to the top of the block, but not initialized.Meaning: Using a let variable before it is declared will result in a ReferenceError:ExamplecarName = ""Saab"";let carName = ""Volvo"";Try it Yourself »❮ PreviousNext ❯|||Meaning: You can use the variable before it is declared:|||This is OK:|||If you want to learn more about hoisting, study the chapter JavaScript Hoisting.Variables defined with let are also hoisted to the top of the block, but not initialized.Meaning: Using a let variable before it is declared will result in a ReferenceError:ExamplecarName = ""Saab"";let carName = ""Volvo"";Try it Yourself »❮ PreviousNext ❯|||Variables defined with let are also hoisted to the top of the block, but not initialized.|||Meaning: Using a let variable before it is declared will result in a ReferenceError:",Browser Support,,,"Chrome 49|||Edge 12|||Firefox 44|||Safari 11|||Opera 36&&&Mar, 2016|||Jul, 2015|||Jan, 2015|||Sep, 2017|||Mar, 2016",[]
JS Tutorial,JS Const,https://www.w3schools.com/js/js_const.asp,"The const keyword was introduced inES6 (2015).|||Variables defined with const cannot be Redeclared.|||Variables defined with const cannot be Reassigned.|||Variables defined with const have Block Scope.|||A const variable cannot be reassigned:|||JavaScript const variables must be assigned a value when they are declared:|||As a general rule, always declare a variable with const unless you know thatthe value will change.|||Use const when you declare:|||The keyword const is a little misleading.|||It does not define a constant value. It defines a constant reference to a value.|||Because of this you can NOT:|||But you CAN:|||You can change the elements of a constant array:|||But you can NOT reassign the array:|||You can change the properties of a constant object:|||But you can NOT reassign the object:|||The const keyword is not supported in Internet Explorer 10 or earlier.|||The following table defines the first browser versions with full support for the const keyword: |||Declaring a variable with const is similar to let when it comes to Block Scope.|||The x declared in the block, in this example, is not the same as the x declared outside the block:|||You can learn more about block scope in the chapter JavaScript Scope.|||Redeclaring a JavaScript var variable is allowed anywhere in a program:|||Redeclaring an existing var or letvariable to const, in the same scope, is not allowed:|||Reassigning an existing const variable, in the same scope, is not allowed:|||Redeclaring a variable with const, in another scope, or in another block, is allowed:|||Variables defined with var are hoisted to the top and can be initialized at any time.|||Meaning: You can use the variable before it is declared:|||This is OK:|||If you want to learn more about hoisting, study the chapter JavaScript Hoisting.Variables defined with const are also hoisted to the top,but not initialized.Meaning: Using a const variable before it is declared will result in a ReferenceError:Examplealert (carName);const carName = ""Volvo"";Try it Yourself »❮ PreviousNext ❯|||Variables defined with const are also hoisted to the top,but not initialized.|||Meaning: Using a const variable before it is declared will result in a ReferenceError:",When to use JavaScript const?,A new Array@@@A new Object@@@A new Function@@@A new RegExp|||Reassign a constant value@@@Reassign a constant array@@@Reassign a constant object|||But you CAN:@@@Change the elements of constant array@@@Change the properties of constant object,,"Chrome 49|||IE 11 / Edge|||Firefox 36|||Safari 10|||Opera 36&&&Mar, 2016|||Oct, 2013|||Feb, 2015|||Sep, 2016|||Mar, 2016",[]
JS Tutorial,JS Operators,https://www.w3schools.com/js/js_operators.asp,"Assign values to variables and add them together:|||The assignment operator (=) assigns a value to a variable.|||The addition operator (+) adds numbers:|||The multiplication operator (*) multiplies numbers.|||Arithmetic operators are used to perform arithmetic on numbers:|||Arithmetic operators are fully described in the JS Arithmetic chapter.|||Assignment operators assign values to JavaScript variables.|||The addition assignment operator (+=) adds a value to a variable.|||Assignment operators are fully described in the JS Assignment chapter.|||The + operator can also be used to add (concatenate) strings.|||The result of text3 will be:|||The += assignment operator can also be used to add (concatenate) strings:|||The result of text1 will be:|||When used on strings, the + operator is called the concatenation operator.|||Adding two numbers, will return the sum, but adding a number and a string will return a string:|||The result of x, y, and z will be:|||If you add a number and a string, the result will be a string!|||Comparison operators are fully described in the JS Comparisons chapter.|||Logical operators are fully described in the JS Comparisons chapter.|||Type operators are fully described in the JS Type Conversion chapter.|||Bit operators work on 32 bits numbers.|||The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.~00000000000000000000000000000101 will return 11111111111111111111111111111010|||Bitwise operators are fully described in the JS Bitwise chapter.|||Multiply 10 with 5, and alert the result.|||Start the Exercise",Exercise:,,,+|||Addition&&&-|||Subtraction&&&*|||Multiplication&&&**|||Exponentiation (ES2016)&&&/|||Division&&&%|||Modulus (Division Remainder)&&&++|||Increment&&&--|||Decrement$$$&&&=|||x = y|||x = y&&&+=|||x += y|||x = x + y&&&-=|||x -= y|||x = x - y&&&*=|||x *= y|||x = x * y&&&/=|||x /= y|||x = x / y&&&%=|||x %= y|||x = x % y&&&**=|||x **= y|||x = x ** y$$$&&&==|||equal to&&&===|||equal value and equal type&&&!=|||not equal&&&!==|||not equal value or not equal type&&&>|||greater than&&&<|||less than&&&>=|||greater than or equal to&&&<=|||less than or equal to&&&?|||ternary operator$$$&&&&&|||logical and&&&|||||logical or&&&!|||logical not$$$&&&typeof|||Returns the type of a variable&&&instanceof|||Returns true if an object is an instance of an object type$$$&|||AND|||5 & 1|||0101 & 0001|||0001||| 1&&&||||OR|||5 | 1|||0101 | 0001|||0101||| 5&&&~|||NOT|||~ 5||| ~0101|||1010||| 10&&&^|||XOR|||5 ^ 1|||0101 ^ 0001|||0100||| 4&&&<<|||left shift|||5 << 1|||0101 << 1|||1010||| 10&&&>>|||right shift|||5 >> 1|||0101 >> 1|||0010|||  2&&&>>>|||unsigned right shift|||5 >>> 1|||0101 >>> 1|||0010|||  2,[]
JS Tutorial,JS Arithmetic,https://www.w3schools.com/js/js_arithmetic.asp,"Arithmetic operators perform arithmetic on numbers (literals or variables).|||A typical arithmetic operation operates on two numbers.|||The two numbers can be literals:|||or variables:|||or expressions:|||The numbers (in an arithmetic operation) are called operands.|||The operation (to be performed between the two operands) is defined by an operator.|||The addition operator (+) adds numbers:|||The subtraction operator (-) subtracts numbers.|||The multiplication operator (*) multiplies numbers.|||The division operator (/) divides numbers.|||The modulus operator (%) returns the division remainder.|||In arithmetic, the division of two integers produces a quotientand a remainder.|||In mathematics, the result of a modulo operation is the remainder of an arithmetic division.|||The increment operator (++) increments numbers.|||The decrement operator (--) decrements numbers.|||The exponentiation operator (**) raises the first operand to the power of the second operand.|||x ** y produces the same result as Math.pow(x,y):|||Operator precedence describes the order in which operations are performed in an arithmetic expression.|||Is the result of example above the same as 150 * 3, or is it the same as 100 + 150?|||Is the addition or the multiplication done first?|||As in traditional school mathematics, the multiplication is done first.|||Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).|||And (as in school mathematics) the precedence can be changed by using parentheses:|||When using parentheses, the operations inside the parentheses are computed first. |||When many operations have the same precedence (like addition and subtraction), they are computed from left to right: |||Pale red entries indicates ECMAScript 2015 (ES6) or higher.|||Expressions in parentheses are fully computed before the value is used in the rest of the expression.|||Divide 10 by 2, and alert the result.|||Start the Exercise",Multiplying|||Remainder|||Exercise:,,,"+|||Addition&&&-|||Subtraction&&&*|||Multiplication&&&**|||Exponentiation (ES2016)&&&/|||Division&&&%|||Modulus (Remainder)&&&++|||Increment&&&--|||Decrement$$$&&&100|||+|||50$$$21|||( )|||Expression grouping|||(3 + 4)&&& ||| ||| ||| &&&20|||.|||Member|||person.name&&&20|||[]|||Member|||person[""name""]&&&20|||()|||Function call|||myFunction()&&&20|||new|||Create|||new Date()&&& ||| ||| ||| &&&18|||++|||Postfix Increment|||i++&&&18|||--|||Postfix Decrement|||i--&&& ||| ||| ||| &&&17|||++|||Prefix Increment|||++i&&&17|||--|||Prefix Decrement|||--i&&&17|||!|||Logical not|||!(x==y)&&&17|||typeof|||Type|||typeof x&&& ||| ||| ||| &&&16|||**|||Exponentiation (ES2016)|||10 ** 2&&& ||| ||| ||| &&&15|||*|||Multiplication|||10 * 5&&&15|||/|||Division|||10 / 5&&&15|||%|||Division Remainder|||10 % 5&&& ||| ||| ||| &&&14|||+|||Addition|||10 + 5&&&14|||-|||Subtraction|||10 - 5&&& ||| ||| ||| &&&13|||<<|||Shift left|||x << 2&&&13|||>>|||Shift right|||x >> 2&&&13|||>>>|||Shift right (unsigned)|||x >>> 2&&& ||| ||| ||| &&&12|||<|||Less than|||x < y &&&12|||<=|||Less than or equal|||x <= y&&&12|||>|||Greater than|||x > y&&&12|||>=|||Greater than or equal|||x >= y&&&12|||in|||Property in Object|||""PI"" in Math&&&12|||instanceof|||Instance of Object|||instanceof Array&&& ||| ||| ||| &&&11|||==|||Equal|||x == y&&&11|||===|||Strict equal|||x === y&&&11|||!=|||Unequal|||x != y&&&11|||!==|||Strict unequal|||x !== y&&& ||| ||| ||| &&&10|||&|||Bitwise AND|||x & y&&&9|||^|||Bitwise XOR|||x ^ y&&&8|||||||Bitwise OR|||x | y&&&7|||&&|||Logical AND|||x && y&&&6||||||||Logical OR|||x || y&&&5|||??|||Nullish Coalescing|||x ?? y&&&4|||? :|||Condition|||? ""Yes"" : ""No""&&& ||| ||| ||| &&&3|||+=|||Assignment|||x += y&&&3|||/=|||Assignment|||x /= y&&&3|||-=|||Assignment|||x -= y&&&3|||*=|||Assignment|||x *= y&&&3|||%=|||Assignment|||x %= y&&&3|||<<=|||Assignment|||x <<= y&&&3|||>>=|||Assignment|||x >>= y&&&3|||>>>=|||Assignment|||x >>>= y&&&3|||&=|||Assignment|||x &= y&&&3|||^=|||Assignment|||x ^= y&&&3||||=|||Assignment|||x |= y&&& ||| ||| ||| &&&2|||yield|||Pause Function|||yield x&&&1|||,|||Comma|||5 , 6",[]
JS Tutorial,JS Assignment,https://www.w3schools.com/js/js_assignment.asp,Assignment operators assign values to JavaScript variables.|||The **= operator is a part of ECMAScript 2016.|||The = assignment operator assigns a value to a variable.|||The += assignment operator adds a value to a variable.|||The -= assignment operator subtracts a value from a variable.|||The *= assignment operator multiplies a variable.|||The /= assignment divides a variable.|||The %= assignment operator assigns a remainder to a variable.|||Use the correct assignment operator that will result in x being 15 (same as x = x + y).|||Start the Exercise,Exercise:,,,=|||x = y|||x = y&&&+=|||x += y|||x = x + y&&&-=|||x -= y|||x = x - y&&&*=|||x *= y|||x = x * y&&&/=|||x /= y|||x = x / y&&&%=|||x %= y|||x = x % y&&&<<=|||x <<= y|||x = x << y&&&>>=|||x >>= y|||x = x >> y&&&>>>=|||x >>>= y|||x = x >>> y&&&&=|||x &= y|||x = x & y&&&^=|||x ^= y|||x = x ^ y&&&|=|||x |= y|||x = x | y&&&**=|||x **= y|||x = x ** y,[]
JS Tutorial,JS Data Types,https://www.w3schools.com/js/js_datatypes.asp,"JavaScript variables can hold different data types: numbers, strings, objects and more:|||In programming, data types is an important concept.|||To be able to operate on variables, it is important to know something about the type.|||Without data types, a computer cannot safely solve this:|||Does it make any sense to add ""Volvo"" to sixteen? Will it produce an error or will it produce a result?|||JavaScript will treat the example above as:|||When adding a number and a string, JavaScript will treat the number as a string.|||JavaScript evaluates expressions from left to right. Different sequences can produce different results:|||Result:|||Result:|||In the first example, JavaScript treats 16 and 4 as numbers, until it reaches ""Volvo"".|||In the second example, since the first operand is a string, all operands are treated as strings.|||JavaScript has dynamic types. This means that the same variable can be used to hold different data types:|||A string (or a text string) is a series of characters like ""John Doe"".|||Strings are written with quotes. You can use single or double quotes:|||You can use quotes inside a string, as long as they don't match the quotes surrounding the string:|||You will learn more about strings later in this tutorial.|||JavaScript has only one type of numbers.|||Numbers can be written with, or without decimals:|||Extra large or extra small numbers can be written with scientific (exponential) notation:|||You will learn more about numbers later in this tutorial.|||Booleans can only have two values: true or false.|||Booleans are often used in conditional testing.|||You will learn more about conditional testing later in this tutorial.|||JavaScript arrays are written with square brackets.|||Array items are separated by commas.|||The following code declares (creates) an array called cars, containing three items (car names):|||Array indexes are zero-based, which means the first item is [0], second is [1], and so on.|||You will learn more about arrays later in this tutorial.|||JavaScript objects are written with curly braces {}.|||Object properties are written as name:value pairs, separated by commas.|||The object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.|||You will learn more about objects later in this tutorial.|||You can use the JavaScript typeof operator to find the type of a JavaScript variable.|||The typeof operator returns the type of a variable or an expression:|||You will learn more about typeof later in this tutorial.|||In JavaScript, a variable without a value, has the value undefined. The type is also undefined.|||Any variable can be emptied, by setting the value to undefined. The type will also be undefined.|||An empty value has nothing to do with undefined.|||An empty string has both a legal value and a type.|||Use comments to describe the correct data type of the following variables:|||Start the Exercise",,,,,[]
JS Tutorial,JS Functions,https://www.w3schools.com/js/js_functions.asp,"A JavaScript function is a block of code designed to perform a particular task.|||A JavaScript function is executed when ""something"" invokes it (calls it).|||A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().|||Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).|||The parentheses may include parameter names separated by commas:(parameter1, parameter2, ...)|||The code to be executed, by the function, is placed inside curly brackets: {}|||Function parameters are listed inside the parentheses () in the function definition.|||Function arguments are the values received by the function when it is invoked.|||Inside the function, the arguments (the parameters) behave as local variables.|||A Function is much the same as a Procedure or a Subroutine, in other programming languages.|||The code inside the function will execute when ""something"" invokes (calls) the function:|||You will learn a lot more about function invocation later in this tutorial.|||When JavaScript reaches a return statement, the function will stop executing.|||If the function was invoked from a statement, JavaScript will ""return"" to execute the code after the invoking statement.|||Functions often compute a return value. The return value is ""returned"" back to the ""caller"":|||Calculate the product of two numbers, and return the result:|||The result in x will be:|||You can reuse code: Define the code once, and use it many times.|||You can use the same code many times with different arguments, to produce different results.|||Convert Fahrenheit to Celsius:|||Using the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.|||Accessing a function without () will return the function object instead of the function result.|||Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.|||Instead of using a variable to store the return value of a function:|||You can use the function directly, as a variable value:|||You will learn a lot more about functions later in this tutorial.|||Variables declared within a JavaScript function, become LOCAL to the function.|||Local variables can only be accessed from within the function.|||Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.|||Local variables are created when a function starts, and deleted when the function is completed.|||Execute the function named myFunction.|||Start the Exercise",Example|||Functions Used as Variable Values,When an event occurs (when a user clicks a button)@@@When it is invoked (called) from JavaScript code@@@Automatically (self invoked),,,[]
JS Tutorial,JS Objects,https://www.w3schools.com/js/js_objects.asp,"In real life, a car is an object. |||A car has properties like weight and color, and methods like start and stop:|||All cars have the same properties, but the property values differ from car to car.|||All cars have the same methods, but the methods are performed at different times.|||You have already learned that JavaScript variables are containers for data values.|||This code assigns a simple value (Fiat) to a variable named car: |||Objects are variables too. But objects can contain many values. |||This code assigns many values (Fiat, 500, white) to avariable named car:|||The values are written as name:value pairs (name and value separated by a colon).|||It is a common practice to declare objects with the const keyword.|||Learn more about using const with objects in the chapter: JS Const.|||You define (and create) a JavaScript object with an object literal:|||Spaces and line breaks are not important. An object definition can span multiple lines: |||The name:values pairs in JavaScript objects are called properties:|||You can access object properties in two ways: |||or|||JavaScript objects are containers for named values called properties.|||Objects can also have methods.|||Methods are actions that can be performed on objects.|||Methods are stored in properties as function definitions.|||A method is a function stored as a property.|||In the example above, this refers to the person object.|||I.E. this.firstName means the firstName property of this.|||I.E. this.firstName means the firstName property of person.|||In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||The JavaScript this Tutorial|||In a function definition, this refers to the ""owner"" of the function.|||In the example above, this is the person object that ""owns"" the fullName function.|||In other words, this.firstName means the firstName property of this object.|||Learn more about this in The JavaScript this Tutorial.|||You access an object method with the following syntax:|||If you access a method without the () parentheses, it will return the function definition:|||When a JavaScript variable is declared with the keyword ""new"", the variable is created as an object: |||Avoid String, Number, and Boolean objects. They complicate your code and slow down  execution speed.|||You will learn more about objects later in this tutorial.|||Alert ""John"" by extracting information from the person object.|||Start the Exercise",,,,"

|||
car.name = Fiat
car.model = 500
car.weight = 850kg
car.color = white
|||
car.start()
car.drive()
car.brake()
car.stop()$$$&&&firstName|||John&&&lastName|||Doe&&&age|||50&&&eyeColor|||blue$$$firstName|||John&&&lastName|||Doe&&&age|||50&&&eyeColor|||blue&&&fullName|||function() {return this.firstName + "" "" + this.lastName;}&&&In an object method, this refers to the object.&&&Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.",[]
JS Tutorial,JS Events,https://www.w3schools.com/js/js_events.asp,"HTML events are ""things"" that happen to HTML elements.|||When JavaScript is used in HTML pages, JavaScript can ""react"" on these events.|||An HTML event can be something the browser does, or something a user does.|||Here are some examples of HTML events:|||Often, when events happen, you may want to do something.|||JavaScript lets you execute code when events are detected.|||HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.|||With single quotes:|||With double quotes:|||In the following example, an onclick attribute (with code), is added to a <button> element:|||In the example above, the JavaScript code changes the content of the element with id=""demo"".|||In the next example, the code changes the content of its own element (using this.innerHTML): |||JavaScript code is often several lines long. It is more common to see event attributes calling functions:|||Here is a list of some common HTML events:|||The list is much longer: W3Schools JavaScript Reference HTML DOM Events.|||Event handlers can be used to handle and verify user input, user actions, and browser actions:|||Many different methods can be used to let JavaScript work with events:|||You will learn a lot more about events and event handlers in the HTML DOM chapters.|||The <button> element should do something when someone clicks on it. Try to fix it!|||Start the Exercise",Exercise:,An HTML web page has finished loading@@@An HTML input field was changed@@@An HTML button was clicked|||Things that should be done every time a page loads@@@Things that should be done when the page is closed@@@Action that should be performed when a user clicks a button@@@Content that should be verified when a user inputs data@@@And more ...|||HTML event attributes can execute JavaScript code directly@@@HTML event attributes can call JavaScript functions@@@You can assign your own event handler functions to HTML elements@@@You can prevent events from being sent or being handled@@@And more ...,,onchange|||An HTML element has been changed&&&onclick|||The user clicks an HTML element&&&onmouseover|||The user moves the mouse over an HTML element&&&onmouseout|||The user moves the mouse away from an HTML element&&&onkeydown|||The user pushes a keyboard key&&&onload|||The browser has finished loading the page,[]
JS Tutorial,JS Strings,https://www.w3schools.com/js/js_strings.asp,"JavaScript strings are for storing and manipulating text.|||A JavaScript string is zero or more characters written inside quotes.|||You can use single or double quotes:|||You can use quotes inside a string, as long as they don't match the quotes surrounding the string:|||To find the length of a string, use the built-in length property:|||Because strings must be written within quotes, JavaScript will misunderstand this string:|||The string will be chopped to ""We are the so-called "".|||The solution to avoid this problem, is to use the backslash escape character.|||The backslash (\) escape character turns special characters into string characters:|||The sequence \""  inserts a double quote in a string:Examplelet text = ""We are the so-called \""Vikings\"" from the north."";Try it Yourself »The sequence \'  inserts a single quote in a string:Examplelet text= 'It\'s alright.';Try it Yourself »The sequence \\  inserts a backslash in a string:Examplelet text = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in JavaScript:CodeResult\bBackspace\fForm Feed\nNew Line\rCarriage Return\tHorizontal Tabulator\vVertical TabulatorThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Code LinesFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:Exampledocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";Try it Yourself »You can also break up a code line within a text string with a single backslash:Exampledocument.getElementById(""demo"").innerHTML = ""Hello \Dolly!"";Try it Yourself »The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.A safer way to break up a string, is to use string addition:Exampledocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";Try it Yourself »You cannot break up a code line with a backslash:Exampledocument.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";Try it Yourself »JavaScript Strings as ObjectsNormally, JavaScript strings are primitive values, created from literals:let x = ""John"";But strings can also be defined as objects with the keyword new:let y = new String(""John"");Examplelet x = ""John"";let y = new String(""John"");Try it Yourself »Do not create Strings objects.The new keyword complicates the code and slows down execution speed.String objects can produce unexpected results: When using the == operator, x and y are equal:let x = ""John"";let y = new String(""John"");Try it Yourself »When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »Note the difference between (x==y) and (x===y).(x == y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »(x === y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »Comparing two JavaScript objects always returns false.Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.Test Yourself With ExercisesExercise:Use the length property to alert the length of txt.let txt = ""Hello World!"";let x = ;alert(x);Submit Answer »Start the Exercise❮ PreviousNext ❯|||Examplelet text = ""We are the so-called \""Vikings\"" from the north."";Try it Yourself »The sequence \'  inserts a single quote in a string:Examplelet text= 'It\'s alright.';Try it Yourself »The sequence \\  inserts a backslash in a string:Examplelet text = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in JavaScript:CodeResult\bBackspace\fForm Feed\nNew Line\rCarriage Return\tHorizontal Tabulator\vVertical TabulatorThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Code LinesFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:Exampledocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";Try it Yourself »You can also break up a code line within a text string with a single backslash:Exampledocument.getElementById(""demo"").innerHTML = ""Hello \Dolly!"";Try it Yourself »The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.A safer way to break up a string, is to use string addition:Exampledocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";Try it Yourself »You cannot break up a code line with a backslash:Exampledocument.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";Try it Yourself »JavaScript Strings as ObjectsNormally, JavaScript strings are primitive values, created from literals:let x = ""John"";But strings can also be defined as objects with the keyword new:let y = new String(""John"");Examplelet x = ""John"";let y = new String(""John"");Try it Yourself »Do not create Strings objects.The new keyword complicates the code and slows down execution speed.String objects can produce unexpected results: When using the == operator, x and y are equal:let x = ""John"";let y = new String(""John"");Try it Yourself »When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »Note the difference between (x==y) and (x===y).(x == y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »(x === y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »Comparing two JavaScript objects always returns false.Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.Test Yourself With ExercisesExercise:Use the length property to alert the length of txt.let txt = ""Hello World!"";let x = ;alert(x);Submit Answer »Start the Exercise❮ PreviousNext ❯|||The sequence \'  inserts a single quote in a string:Examplelet text= 'It\'s alright.';Try it Yourself »The sequence \\  inserts a backslash in a string:Examplelet text = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in JavaScript:CodeResult\bBackspace\fForm Feed\nNew Line\rCarriage Return\tHorizontal Tabulator\vVertical TabulatorThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Code LinesFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:Exampledocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";Try it Yourself »You can also break up a code line within a text string with a single backslash:Exampledocument.getElementById(""demo"").innerHTML = ""Hello \Dolly!"";Try it Yourself »The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.A safer way to break up a string, is to use string addition:Exampledocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";Try it Yourself »You cannot break up a code line with a backslash:Exampledocument.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";Try it Yourself »JavaScript Strings as ObjectsNormally, JavaScript strings are primitive values, created from literals:let x = ""John"";But strings can also be defined as objects with the keyword new:let y = new String(""John"");Examplelet x = ""John"";let y = new String(""John"");Try it Yourself »Do not create Strings objects.The new keyword complicates the code and slows down execution speed.String objects can produce unexpected results: When using the == operator, x and y are equal:let x = ""John"";let y = new String(""John"");Try it Yourself »When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »Note the difference between (x==y) and (x===y).(x == y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »(x === y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »Comparing two JavaScript objects always returns false.Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.Test Yourself With ExercisesExercise:Use the length property to alert the length of txt.let txt = ""Hello World!"";let x = ;alert(x);Submit Answer »Start the Exercise❮ PreviousNext ❯|||Examplelet text= 'It\'s alright.';Try it Yourself »The sequence \\  inserts a backslash in a string:Examplelet text = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in JavaScript:CodeResult\bBackspace\fForm Feed\nNew Line\rCarriage Return\tHorizontal Tabulator\vVertical TabulatorThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Code LinesFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:Exampledocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";Try it Yourself »You can also break up a code line within a text string with a single backslash:Exampledocument.getElementById(""demo"").innerHTML = ""Hello \Dolly!"";Try it Yourself »The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.A safer way to break up a string, is to use string addition:Exampledocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";Try it Yourself »You cannot break up a code line with a backslash:Exampledocument.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";Try it Yourself »JavaScript Strings as ObjectsNormally, JavaScript strings are primitive values, created from literals:let x = ""John"";But strings can also be defined as objects with the keyword new:let y = new String(""John"");Examplelet x = ""John"";let y = new String(""John"");Try it Yourself »Do not create Strings objects.The new keyword complicates the code and slows down execution speed.String objects can produce unexpected results: When using the == operator, x and y are equal:let x = ""John"";let y = new String(""John"");Try it Yourself »When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »Note the difference between (x==y) and (x===y).(x == y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »(x === y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »Comparing two JavaScript objects always returns false.Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.Test Yourself With ExercisesExercise:Use the length property to alert the length of txt.let txt = ""Hello World!"";let x = ;alert(x);Submit Answer »Start the Exercise❮ PreviousNext ❯|||The sequence \\  inserts a backslash in a string:Examplelet text = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in JavaScript:CodeResult\bBackspace\fForm Feed\nNew Line\rCarriage Return\tHorizontal Tabulator\vVertical TabulatorThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Code LinesFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:Exampledocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";Try it Yourself »You can also break up a code line within a text string with a single backslash:Exampledocument.getElementById(""demo"").innerHTML = ""Hello \Dolly!"";Try it Yourself »The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.A safer way to break up a string, is to use string addition:Exampledocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";Try it Yourself »You cannot break up a code line with a backslash:Exampledocument.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";Try it Yourself »JavaScript Strings as ObjectsNormally, JavaScript strings are primitive values, created from literals:let x = ""John"";But strings can also be defined as objects with the keyword new:let y = new String(""John"");Examplelet x = ""John"";let y = new String(""John"");Try it Yourself »Do not create Strings objects.The new keyword complicates the code and slows down execution speed.String objects can produce unexpected results: When using the == operator, x and y are equal:let x = ""John"";let y = new String(""John"");Try it Yourself »When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »Note the difference between (x==y) and (x===y).(x == y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »(x === y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »Comparing two JavaScript objects always returns false.Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.Test Yourself With ExercisesExercise:Use the length property to alert the length of txt.let txt = ""Hello World!"";let x = ;alert(x);Submit Answer »Start the Exercise❮ PreviousNext ❯|||Examplelet text = ""The character \\ is called backslash."";Try it Yourself »Six other escape sequences are valid in JavaScript:CodeResult\bBackspace\fForm Feed\nNew Line\rCarriage Return\tHorizontal Tabulator\vVertical TabulatorThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. Breaking Long Code LinesFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:Exampledocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";Try it Yourself »You can also break up a code line within a text string with a single backslash:Exampledocument.getElementById(""demo"").innerHTML = ""Hello \Dolly!"";Try it Yourself »The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.A safer way to break up a string, is to use string addition:Exampledocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";Try it Yourself »You cannot break up a code line with a backslash:Exampledocument.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";Try it Yourself »JavaScript Strings as ObjectsNormally, JavaScript strings are primitive values, created from literals:let x = ""John"";But strings can also be defined as objects with the keyword new:let y = new String(""John"");Examplelet x = ""John"";let y = new String(""John"");Try it Yourself »Do not create Strings objects.The new keyword complicates the code and slows down execution speed.String objects can produce unexpected results: When using the == operator, x and y are equal:let x = ""John"";let y = new String(""John"");Try it Yourself »When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »Note the difference between (x==y) and (x===y).(x == y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »(x === y) true or false?let x = new String(""John"");let y = new String(""John"");Try it Yourself »Comparing two JavaScript objects always returns false.Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.Test Yourself With ExercisesExercise:Use the length property to alert the length of txt.let txt = ""Hello World!"";let x = ;alert(x);Submit Answer »Start the Exercise❮ PreviousNext ❯|||Six other escape sequences are valid in JavaScript:|||The 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML. |||For best readability, programmers often like to avoid code lines longer than 80 characters.|||If a JavaScript statement does not fit on one line, the best place to break it is after an operator:|||You can also break up a code line within a text string with a single backslash:|||The \ method is not the preferred method. It might not have universal support.Some browsers do not allow spaces behind the \ character.|||A safer way to break up a string, is to use string addition:|||You cannot break up a code line with a backslash:|||Normally, JavaScript strings are primitive values, created from literals:|||But strings can also be defined as objects with the keyword new:|||Do not create Strings objects.|||The new keyword complicates the code and slows down execution speed.|||String objects can produce unexpected results:||| When using the == operator, x and y are equal:|||When using the === operator, x and y are not equal:let x = ""John"";let y = new String(""John"");Try it Yourself »|||Note the difference between (x==y) and (x===y).|||(x == y) true or false?|||(x === y) true or false?|||Comparing two JavaScript objects always returns false.|||For a complete String reference, go to our:|||Complete JavaScript String Reference.|||The reference contains descriptions and examples of all string properties and methods.|||Use the length property to alert the length of txt.|||Start the Exercise",,,,"\'|||'|||Single quote&&&\""|||""|||Double quote&&&\\|||\|||Backslash$$$\b|||Backspace&&&\f|||Form Feed&&&\n|||New Line&&&\r|||Carriage Return&&&\t|||Horizontal Tabulator&&&\v|||Vertical Tabulator",[]
JS Tutorial,JS String Methods,https://www.w3schools.com/js/js_string_methods.asp,"String methods help you to work with strings.|||Primitive values, like ""John Doe"", cannot have properties or methods (because they are not objects). |||But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.|||The length property returns the length of a string:|||There are 3 methods for extracting a part of a string:|||slice() extracts a part of a string and returns the extracted part in a new string.|||The method takes 2 parameters: the start position, and the end position (end not included).|||This example slices out a portion of a string from position 7 to position 12 (13-1):|||JavaScript counts positions from zero.|||First position is 0.|||Second position is 1.|||If a parameter is negative, the position is counted from the end of the string.|||This example slices out a portion of a string from position -12 to position -6: |||If you omit the second parameter, the method will slice out the rest of the string:|||or, counting from the end:|||substring() is similar to slice().|||The difference is that substring() cannot accept negative indexes.|||If you omit the second parameter, substring() will slice out the rest of the string.|||substr() is similar to slice().|||The difference is that the second parameter specifies the length of the extracted part.|||If you omit the second parameter, substr() will slice out the rest of the string.|||If the first parameter is negative, the position counts from the end of the string.|||The replace() method replaces a specified value with another value in a string:|||The replace() method does not change the string it is called on.|||The replace() method returns a new string.|||By default, the replace() method replaces only the first match:|||Try it Yourself »|||By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work:|||Try it Yourself »|||To replace case insensitive, use a regular expression with an /i flag (insensitive):|||Try it Yourself »|||Regular expressions are written without quotes.|||To replace all matches, use a regular expression with a /g flag (global match):|||Try it Yourself »|||You will learn a lot more about regular expressions in the chapter JavaScript Regular Expressions.|||A string is converted to upper case with toUpperCase():|||A string is converted to lower case with toLowerCase():|||concat() joins two or more strings:|||The concat() method can be used instead of the plus operator. These two lines do the same:|||All string methods return a new string. They don't modify the original string.|||Formally said:|||Strings are immutable: Strings cannot be changed, only replaced.|||The trim() method removes whitespace from both sides of a string:|||ECMAScript 2017 added two String methods: padStartand padEnd to support padding at the beginning and at the end of a string.|||padStart() is an ECMAScript 2017 feature.|||It is supported in all modern browsers:|||padStart() is not supported in Internet Explorer.|||padEnd() is an ECMAScript 2017 feature.|||It is supported in all modern browsers:|||padEnd() is not supported in Internet Explorer.|||There are 3 methods for extracting string characters:|||The charAt() method returns the character at a specified index (position) in a string:|||The charCodeAt() method returns the unicode of the character at a specified index in a string:|||The method returns a UTF-16 code (an integer between 0 and 65535).|||ECMAScript 5 (2009) allows property access [ ] on strings:|||Property access might be a little unpredictable: |||If you want to work with a string as an array, you can convert it to an array.|||A string can be converted to an array with the split() method:|||If the separator is omitted, the returned array will contain the whole string in index [0].|||If the separator is """", the returned array will be an array of single characters:|||For a complete String reference, go to our:|||Complete JavaScript String Reference.|||The reference contains descriptions and examples of all string properties and methods.|||Convert the text into an UPPERCASE text:|||Start the Exercise",Note|||Note,"slice(start, end)@@@substring(start, end)@@@substr(start, length)|||charAt(position)@@@charCodeAt(position)@@@Property access [ ]|||It makes strings look like arrays (but they are not)@@@If no character is found, [ ] returns undefined, while charAt() returns an empty string.@@@It is read only. str[0] = ""A"" gives no error (but does not work!)",,Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes,[]
JS Tutorial,JS String Search,https://www.w3schools.com/js/js_string_search.asp,"The indexOf() method returns the index of (the position of) the first occurrence of a specified text in a string:|||JavaScript counts positions from zero.|||0 is the first position in a string, 1 is the second, 2 is the third, ...|||The lastIndexOf() method returns the index of the last occurrence of a specified text in a string:|||Both indexOf(), and lastIndexOf() return -1if the text is not found:|||Both methods accept a second parameter as the starting position for the search:|||The lastIndexOf() methods searches backwards (from the end to the beginning), meaning:if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string.|||The search() method searches a string for a specified value and returns the position of the match:|||The two methods, indexOf() and search(), are equal?|||They accept the same arguments (parameters), and return the same value?|||The two methods are NOT equal. These are the differences:|||You will learn more about regular expressions in a later chapter.|||The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object.|||Search a string for ""ain"":|||Read more about regular expressions in the chapter JS RegExp.|||If a regular expression does not include the g modifier (to perform a global search),the match() method will return only the first match in the string.|||Perform a global, case-insensitive search for ""ain"":|||The includes() method returns true if a string contains a specified value.|||Check if a string includes ""world"", starting the search at position 12:|||includes() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||includes() is not supported in Internet Explorer.|||The startsWith() method returns trueif a string begins with a specified value, otherwise false:|||The startsWith() method is case sensitive.|||startsWith() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||startsWith() is not supported in Internet Explorer.|||The endsWith() method returns trueif a string ends with a specified value, otherwise false:|||Check if a string ends with ""Doe"":|||Check in the 11 first characters of a string ends with ""world"":|||Try it Yourself »|||The endsWith() method is case sensitive.|||endsWith() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||endsWith() is not supported in Internet Explorer.|||For a complete String reference, go to our:|||Complete JavaScript String Reference.|||The reference contains descriptions and examples of all string properties and methods.",JavaScript Search Methods|||JavaScript String match()|||Note,String indexOf()@@@String lastIndexOf()@@@String startsWith()@@@String endsWith()|||The search() method cannot take a second start position argument.@@@The indexOf() method cannot take powerful search values (regular expressions).,,"Returns:|||An Array, containing the matches, one item for each match, or null if no match is found&&&searchvalue|||Required. The string to search for&&&start|||Optional. Default 0. Position to start the search&&&Returns:|||Returns true if the string contains the value, otherwise false&&&JS Version:|||ES6 (2015)$$$&&&Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$&&&searchvalue|||Required. The value to search for.&&&start|||Optional. Default 0. The position to start the search.$$$&&&Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$&&&searchvalue|||Required. The value to search for.&&&length|||Optional. The length to search.$$$Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes",[]
JS Tutorial,JS String Templates,https://www.w3schools.com/js/js_string_templates.asp,"Synonyms:|||Template Literals use back-ticks (``) rather than the quotes ("""") to define a string:|||Try it Yourself »|||With template literals, you can use both single and double quotes inside a string:|||Try it Yourself »|||Template literals allows multiline strings:|||Try it Yourself »|||Template literals provide an easy way to interpolate variables and expressions into strings.|||The method is called string interpolation.|||The syntax is:|||Template literals allow variables in strings:|||Try it Yourself »|||Automatic replacing of variables with real values is called string interpolation.|||Template literals allow expressions in strings:|||Try it Yourself »|||Automatic replacing of expressions with real values is called string interpolation.|||Try it Yourself »|||Template Literals is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||Template Literals is not supported in Internet Explorer.|||For a complete String reference, go to our:|||Complete JavaScript String Reference.|||The reference contains descriptions and examples of all string properties and methods.",Multiline Strings,Template Literals@@@Template Strings@@@String Templates@@@Back-Tics Syntax,,Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes,[]
JS Tutorial,JS Numbers,https://www.w3schools.com/js/js_numbers.asp,"JavaScript has only one type of number.Numbers can be written with or without decimals.|||Try it Yourself »|||Extra large or extra small numbers can be written with scientific (exponent) notation:|||Try it Yourself »|||Unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.|||JavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard. This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:|||Integers (numbers without a period or exponent notation) are accurate up to 15 digits.|||The maximum number of decimals is 17.|||Floating point arithmetic is not always 100% accurate:|||Try it Yourself »|||To solve the problem above, it helps to multiply and divide:|||WARNING !!|||JavaScript uses the + operator for both addition and concatenation.|||Numbers are added. Strings are concatenated.|||If you add two numbers, the result will be a number:|||If you add two strings, the result will be a string concatenation:|||If you add a number and a string, the result will be a string concatenation:|||If you add a string and a number, the result will be a string concatenation:|||A common mistake is to expect this result to be 30:|||A common mistake is to expect this result to be 102030:|||The JavaScript interpreter works from left to right.|||First 10 + 20 is added because x and y are both numbers.|||Then 30 + ""30"" is concatenated because z is a string.|||JavaScript strings can have numeric content:|||JavaScript will try to convert strings to numbers in all numeric operations:|||This will work:|||Try it Yourself »|||This will also work:|||Try it Yourself »|||And this will work:|||Try it Yourself »|||But this will not work:|||Try it Yourself »|||In the last example JavaScript uses the + operator to concatenate the strings.|||NaN is a JavaScript reserved word indicating that a number is not a legal number.|||Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):|||Try it Yourself »|||However, if the string contains a numeric value , the result will be a number:|||You can use the global JavaScript function isNaN()to find out if a value is a not a number:|||Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:|||Or the result might be a concatenation like NaN5:|||NaN is a number: typeof NaN returns number:|||Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.|||Division by 0 (zero) also generates Infinity:|||Infinity is a number: typeof Infinity returns number.|||JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.|||Never write a number with a leading zero (like 07).Some JavaScript versions interpret numbers as octal if they are written with a leading zero.|||By default, JavaScript displays numbers as base 10 decimals.|||But you can use the toString() method to output numbers from base 2 to base 36.|||Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.|||Normally JavaScript numbers are primitive values created from literals:|||But numbers can also be defined as objects with the keyword new:|||Do not create Number objects.|||The new keyword complicates the code and slows down execution speed.|||Number Objects can produce unexpected results:|||When using the == operator, x and y are equal:|||When using the === operator, x and y are not equal.|||Note the difference between (x==y) and (x===y).|||(x == y) true or false?|||(x === y) true or false?|||Comparing two JavaScript objects always returns false.|||For a complete Number reference, visit our:|||Complete JavaScript Number Reference.|||The reference contains descriptions and examples of all Number  properties and methods.",Infinity,,,52 bits (0 - 51) |||11 bits (52 - 62)|||1 bit (63),[]
JS Tutorial,JS Number Methods,https://www.w3schools.com/js/js_number_methods.asp,"Number methods help you work with numbers.|||Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects). |||But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.|||The toString() method returns a number as a string.|||All number methods can be used on any type of numbers (literals, variables, or expressions):|||toExponential() returns a string, with a number rounded and written using exponential notation.|||A parameter defines the number of characters behind the decimal point:|||The parameter is optional. If you don't specify it, JavaScript will not round the number.|||toFixed() returns a string, with the number written with a specified number of decimals:|||toFixed(2) is perfect for working with money.|||toPrecision() returns a string, with a number written with a specified length:|||valueOf() returns a number as a number.|||In JavaScript, a number can be a primitive value (typeof = number) or an object (typeof = object).|||The valueOf() method is used internally in JavaScript to convert Number objects to primitive values.|||There is no reason to use it in your code.|||All JavaScript data types have a valueOf() and a toString() method.|||There are 3 JavaScript methods that can be used to convert variables to numbers:|||These methods are not number methods, but global JavaScript methods.|||JavaScript global methods can be used on all JavaScript data types.|||These are the most relevant methods, when working with numbers:|||Number() can be used to convert JavaScript variables to numbers:|||If the number cannot be converted, NaN (Not a Number) is returned.|||Number() can also convert a date to a number.|||The Number() method returns the number of milliseconds since 1.1.1970.|||The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:|||parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:|||If the number cannot be converted, NaN (Not a Number) is returned.|||parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned:|||If the number cannot be converted, NaN (Not a Number) is returned.|||MAX_VALUE returns the largest possible number in JavaScript.|||MIN_VALUE returns the lowest possible number in JavaScript.|||POSITIVE_INFINITY is returned on overflow:|||NEGATIVE_INFINITY is returned on overflow:|||NaN is a JavaScript reserved word indicating that a number is not a legal number.|||Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):|||Try it Yourself »|||Number properties belongs to the JavaScript's number object wrapper called Number.|||These properties can only be accessed as Number.MAX_VALUE.|||Using myNumber.MAX_VALUE, where myNumber is a variable, expression, or value, will return undefined:|||For a complete Number reference, visit our:|||Complete JavaScript Number Reference.|||The reference contains descriptions and examples of all Number  properties and methods.",,The Number() method@@@The parseInt() method@@@The parseFloat() method,,"Number()|||Returns a number, converted from its argument.&&&parseFloat()|||Parses its argument and returns a floating point number&&&parseInt()|||Parses its argument and returns an integer$$$MAX_VALUE|||Returns the largest number possible in JavaScript&&&MIN_VALUE|||Returns the smallest number possible in JavaScript&&&POSITIVE_INFINITY|||Represents infinity (returned on overflow)&&&NEGATIVE_INFINITY|||Represents negative infinity (returned on overflow)&&&NaN|||Represents a ""Not-a-Number"" value",[]
JS Tutorial,JS Arrays,https://www.w3schools.com/js/js_arrays.asp,"An array is a special variable, which can hold more than one value:|||If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:|||However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?|||The solution is an array!|||An array can hold many values under a single name, and you can access the values by referring to an index number.|||Using an array literal is the easiest way to create a JavaScript Array.|||Syntax: |||It is a common practice to declare arrays with the const keyword.|||Learn more about const with arrays in the chapter: JS Array Const.|||Spaces and line breaks are not important. A declaration can span multiple lines:|||You can also create an array, and then provide the elements:|||The following example also creates an Array, and assigns values to it:|||The two examples above do exactly the same.|||There is no need to use new Array().|||For simplicity, readability and execution speed, use the array literal method.|||You access an array element by referring to the index number:|||Note: Array indexes start with 0.|||[0] is the first element.[1] is the second element.|||This statement changes the value of the first element in cars:|||With JavaScript, the full array can be accessed by referring to the array name:|||Arrays are a special type of objects. The typeof operator in JavaScript returns ""object"" for arrays.|||But, JavaScript arrays are best described as arrays.|||Arrays use numbers to access its ""elements"". In this example, person[0] returns John:|||Objects use names to access its ""members"". In this example, person.firstName returns John:|||JavaScript variables can be objects. Arrays are special kinds of objects.|||Because of this, you can have variables of different types in the same Array.|||You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:|||The real strength of JavaScript arrays are the built-in array properties and methods:|||Array methods are covered in the next chapters.|||The length property of an array returns the length of an array (the number of array elements).|||The length property is always one more than the highest array index.|||One way to loop through an array, is using a for loop:|||You can also use the Array.forEach() function:|||The easiest way to add a new element to an array is using the push() method:|||New element can also be added to an array using the length property:|||WARNING !Adding elements with high indexes can create undefined ""holes"" in an array:|||Adding elements with high indexes can create undefined ""holes"" in an array:|||Many programming languages support arrays with named indexes.|||Arrays with named indexes are called associative arrays (or hashes).|||JavaScript does not support arrays with named indexes.|||In JavaScript, arrays always use numbered indexes.   |||WARNING !!If you use named indexes, JavaScript will redefine the array to an object.|||After that, some array methods and properties will produce incorrect results.|||In JavaScript, arrays use numbered indexes.   |||In JavaScript, objects use named indexes.|||Arrays are a special kind of objects, with numbered indexes.|||JavaScript has a built in array constructor new Array().|||But you can safely use [] instead.|||These two different statements both create a new empty array named points:|||These two different statements both create a new array containing 6 numbers:|||The new keyword can produce some unexpected results:|||is not the same as:|||A common question is: How do I know if a variable is an array?|||The problem is that the JavaScript operator typeof returns ""object"":|||The typeof operator returns object because a JavaScript array is an object. |||To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray():|||The instanceof operator returns true if an object is created by a given constructor:|||For a complete Array reference, go to our:|||Complete JavaScript Array Reference.|||The reference contains descriptions and examples of all Array properties and methods.|||Get the value ""Volvo"" from the cars array.|||Start the Exercise",Access the Full Array|||When to Use Arrays. When to use Objects.,JavaScript does not support associative arrays.@@@You should use objects when you want the element names to be strings (text).@@@You should use arrays when you want the element names to benumbers.,,,[]
JS Tutorial,JS Array Methods,https://www.w3schools.com/js/js_array_methods.asp,"The JavaScript method toString() converts an array to a string of (comma separated) array values.|||Result:|||The join() method also joins all array elements into a string.|||It behaves just like toString(), but in addition you can specify the separator:|||Result:|||When you work with arrays, it is easy to remove elements and add new elements.|||This is what popping and pushing is:|||Popping items out of an array, or pushing items into an array.|||The pop() method removes the last element from an array: |||The pop() method returns the value that was ""popped out"":|||The push() method adds a new element to an array (at the end):|||The push() method returns the new array length:|||Shifting is equivalent to popping, but working on the first element instead of the last.|||The shift() method removes the first array element and ""shifts"" all other elements to a lower index.|||The shift() method returns the value that was ""shifted out"":|||The unshift() method adds a new element to an array (at the beginning), and ""unshifts"" older elements: |||The unshift() method returns the new array length.|||Array elements are accessed using their index number:|||Array indexes start with 0:|||[0] is the first array element[1] is the second[2] is the third ...|||The length property provides an easy way to append a new element to an array:|||Array elements can be deleted using the JavaScript operator delete.|||Using delete leaves undefined holes in the array.|||Use pop() or shift() instead.|||The concat() method creates a new array by merging (concatenating) existing arrays:|||The concat() method does not change the existing arrays. It always returns a new array.|||The concat() method can take any number of array arguments:|||The concat() method can also take strings as arguments:|||The splice() method adds new items to an array.|||The slice() method slices out a piece of an array.|||The splice() method can be used to add new items to an array: |||The first parameter (2) defines the position where new elements should be added (spliced in).|||The second parameter (0) defines how many elements should beremoved.|||The rest of the parameters (""Lemon"" , ""Kiwi"") define the new elements to beadded.|||The splice() method returns an array with the deleted items: |||With clever parameter setting, you can use splice() to remove elements without leaving ""holes"" in the array: |||The first parameter (0) defines the position where new elements should be added (spliced in).|||The second parameter (1) defines how many elements should beremoved.|||The rest of the parameters are omitted. No new elements will be added.|||The slice() method slices out a piece of an array into a new array.|||This example slices out a part of an array starting from array element 1 (""Orange""):|||The slice() method creates a new array.|||The slice() method does not remove any elements from the source array.|||This example slices out a part of an array starting from array element 3 (""Apple""):|||The slice() method can take two arguments like slice(1, 3).|||The method then selects elements from the start argument, and up to (but not including) the end argument.|||If the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array.|||JavaScript automatically converts an array to a comma separated string when a primitive value is expected.|||This is always the case when you try to output an array. |||These two examples will produce the same result:|||All JavaScript objects have a toString() method.|||There are no built-in functions for finding the highest or lowest value in a JavaScript array.|||You will learn how you solve this problem in the next chapter of this tutorial.|||Sorting arrays are covered in the next chapter of this tutorial.|||For a complete Array reference, go to our:|||Complete JavaScript Array Reference.|||The reference contains descriptions and examples of all Array properties and methods.|||Use the correct Array method to remove the last item of the fruits array.|||Start the Exercise",,,,,[]
JS Tutorial,JS Array Sort,https://www.w3schools.com/js/js_array_sort.asp,"The sort() method sorts an array alphabetically: |||The reverse() method reverses the elements in an array.|||You can use it to sort an array in descending order: |||By default, the sort() function sorts values as strings.|||This works well for strings (""Apple"" comes before ""Banana"").|||However, if numbers are sorted as strings, ""25"" is bigger than ""100"", because ""2"" is bigger than ""1"".|||Because of this, the sort() method will produce incorrect result when sorting numbers.|||You can fix this by providing a compare function:|||Use the same trick to sort an array descending:|||The purpose of the compare function is to define an alternative sort order.|||The compare function should return a negative, zero, or positive value, depending on the arguments:|||When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.|||If the result is negative a is sorted beforeb.|||If the result is positive b is sorted before a.|||If the result is 0 no changes are done with the sort order of the two values.|||Example:|||The compare function compares all the values in the array, two values at a time (a, b).|||When comparing 40 and 100, the sort() method calls the compare function(40, 100).|||The function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.|||You can use this code snippet to experiment with numerically and alphabetically sorting:|||Try it Yourself »|||The above example, array.sort(), is not accurate, it will favor some numbers over the others.|||The most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1938!|||In JavaScript the method can be translated to this:|||Try it Yourself »|||There are no built-in functions for finding the max or min value in an array.|||However, after you have sorted an array, you can use the index to obtain the highest and lowest values.|||Sorting ascending:|||Sorting descending:|||Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.|||You can use Math.max.apply to find the highest number in an array:|||Try it Yourself »|||Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).|||You can use Math.min.apply to find the lowest number in an array:|||Try it Yourself »|||Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).|||The fastest solution is to use a ""home made"" method.|||This function loops through an array comparing each value with the highest value found: |||Try it Yourself »|||This function loops through an array comparing each value with the lowest value found: |||Try it Yourself »|||JavaScript arrays often contain objects:|||Even if objects have properties of different data types, the sort() method can be used to sort the array. |||The solution is to write a compare function to compare the property values:|||Comparing string properties is a little more complex:|||For a complete Array reference, go to our:|||Complete JavaScript Array Reference.|||The reference contains descriptions and examples of all Array properties and methods.|||Use the correct Array method to sort the fruits array alphabetically.|||Start the Exercise",Numeric Sort,,,,[]
JS Tutorial,JS Array Iteration,https://www.w3schools.com/js/js_array_iteration.asp,"Array iteration methods operate on every array item.|||The forEach() method calls a function (a callback function) once for each array element.|||Note that the function takes 3 arguments:|||The example above uses only the value parameter. The example can be rewritten to:|||The map() method creates a new array by performing a function on each array element.|||The map() method does not execute the function for array elements without values.|||The map() method does not change the original array.|||This example multiplies each array value by 2: |||Note that the function takes 3 arguments:|||When a callback function uses only the value parameter, the index and array parameters can be omitted: |||The filter() method creates a new array with array elements that passes a test.|||This example creates a new array from elements with a value larger than 18:|||Note that the function takes 3 arguments:|||In the example above, the callback function does not use the index and array parameters, so they can be omitted:|||The reduce() method runs a function on each array element to produce (reduce it to) a single value.|||The reduce() method works from left-to-right in the array. See also reduceRight().|||The reduce() method does not reduce the original array.|||This example finds the sum of all numbers in an array:|||Note that the function takes 4 arguments:|||The example above does not use the index and array parameters. It can be rewritten to:|||The reduce() method can accept an initial value:|||The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.|||The reduceRight() works from right-to-left in the array. See also reduce().|||The reduceRight() method does not reduce the original array.|||This example finds the sum of all numbers in an array:|||Note that the function takes 4 arguments:|||The example above does not use the index and array parameters. It can be rewritten to:|||The every() method check if all array values pass a test.|||This example check if all array values are larger than 18:|||Note that the function takes 3 arguments:|||When a callback function uses the first parameter only (value), the other parameters can be omitted:|||The some() method check if some array values pass a test.|||This example check if some array values are larger than 18:|||Note that the function takes 3 arguments:|||The indexOf() method searches an array for an element value and returns its position.|||Note: The first item has position 0, the second item has position 1, and so on.|||Search an array for the item ""Apple"":|||Array.indexOf() returns -1 if the item is not found.|||If the item is present more than once, it returns the position of the first occurrence.|||Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.|||Search an array for the item ""Apple"":|||The find() method returns the value of the first array element that passes a test function.|||This example finds (returns the value of) the first element that is larger than 18:|||Note that the function takes 3 arguments:|||find() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||find() is not supported in Internet Explorer.|||The findIndex() method returns the index of the first array element that passes a test function.|||This example finds the index of the first element that is larger than 18:|||Note that the function takes 3 arguments:|||findIndex() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||findIndex() is not supported in Internet Explorer.|||The Array.from() method returns an Array object from any object with a length property or any iterable object.|||Create an Array from a String:|||from() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||from() is not supported in Internet Explorer.|||The Array.keys() method returns an Array Iterator object with the keys of an array.|||Create an Array Iterator object, containing the keys of the array:|||keys() is an ES6  feature (JavaScript 2015).|||It is supported in all modern browsers:|||keys() is not supported in Internet Explorer.|||ECMAScript 2016 introduced Array.includes() to arrays.This allows us to check if an element is present in an array (including NaN, unlike indexOf).|||Array.includes() allows to check for NaN values. Unlike Array.indexOf().|||Array.includes() is not supported in Internet Explorer and Edge 12/13.|||The first browser versions with full support are:|||includes() is an ECMAScript 2016 feature.|||It is supported in all modern browsers:|||includes() is not supported in Internet Explorer.|||For a complete Array reference, go to our:|||Complete JavaScript Array Reference.|||The reference contains descriptions and examples of all Array properties and methods.",,The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself|||The total (the initial value / previously returned value)@@@The item value@@@The item index @@@The array itself|||The total (the initial value / previously returned value)@@@The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself,,"start|||Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.&&&item|||Required. The item to search for&&&start|||Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning$$$&&&Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$&&&Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$&&&Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$&&&Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$Chrome|||Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes",[]
JS Tutorial,JS Array Const,https://www.w3schools.com/js/js_array_const.asp,"in 2015, JavaScript introduced an important new keyword: const.|||It has become a common practice to declare arrays using const:|||An array declared with const cannot be reassigned:|||The keyword const is a little misleading.|||It does NOT define a constant array. It defines a constant reference to an array.|||Because of this, we can still change the elements of a constant array.|||You can change the elements of a constant array:|||The const keyword is not supported in Internet Explorer 10 or earlier.|||The following table defines the first browser versions with full support for the const keyword: |||JavaScript const variables must be assigned a value when they are declared:Meaning: An arrays declared with const must be initialized when it is declared.Using const without initializing the array is a syntax error:ExampleThis will not work:const cars;cars = [""Saab"", ""Volvo"", ""BMW""];Arrays declared with var can be initialized at any time.You can even use the array before it is declared:ExampleThis is OK:cars = [""Saab"", ""Volvo"", ""BMW""];var cars;Try it Yourself »Const Block ScopeAn array declared with const has Block Scope.An array declared in a block is not the same as an array declared outside the block:Exampleconst cars = [""Saab"", ""Volvo"", ""BMW""];// Here cars[0] is ""Saab""{  const cars = [""Toyota"", ""Volvo"", ""BMW""];   // Here cars[0] is ""Toyota""}// Here cars[0] is ""Saab""Try it Yourself »An array declared with var does not have block scope:Examplevar cars = [""Saab"", ""Volvo"", ""BMW""];// Here cars[0] is ""Saab""{  var cars = [""Toyota"", ""Volvo"", ""BMW""];   // Here cars[0] is ""Toyota""}// Here cars[0] is ""Toyota""Try it Yourself »You can learn more about Block Scope in the chapter: JavaScript Scope.Redeclaring ArraysRedeclaring an array declared with var is allowed anywhere in a program:Examplevar cars = [""Volvo"", ""BMW""];   // Allowedvar cars = [""Toyota"", ""BMW""];  // Allowedcars = [""Volvo"", ""Saab""];      // AllowedRedeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed:Examplevar cars = [""Volvo"", ""BMW""];     // Allowedconst cars = [""Volvo"", ""BMW""];   // Not allowed{  var cars = [""Volvo"", ""BMW""];   // Allowed  const cars = [""Volvo"", ""BMW""]; // Not allowed}Redeclaring or reassigning an existing const array, in the same scope, or in the same block, is not allowed:Exampleconst cars = [""Volvo"", ""BMW""];   // Allowedconst cars = [""Volvo"", ""BMW""];   // Not allowedvar cars = [""Volvo"", ""BMW""];     // Not allowedcars = [""Volvo"", ""BMW""];         // Not allowed{  const cars = [""Volvo"", ""BMW""]; // Allowed  const cars = [""Volvo"", ""BMW""]; // Not allowed  var cars = [""Volvo"", ""BMW""];   // Not allowed  cars = [""Volvo"", ""BMW""];       // Not allowed}Redeclaring an array with const, in another scope, or in another block, is allowed:Exampleconst cars = [""Volvo"", ""BMW""];   // Allowed{  const cars = [""Volvo"", ""BMW""]; // Allowed}{  const cars = [""Volvo"", ""BMW""]; // Allowed}Complete Array ReferenceFor a complete Array reference, go to our:Complete JavaScript Array Reference.The reference contains descriptions and examples of all Array properties and methods.❮ PreviousNext ❯|||Meaning: An arrays declared with const must be initialized when it is declared.|||Using const without initializing the array is a syntax error:|||This will not work:|||Arrays declared with var can be initialized at any time.|||You can even use the array before it is declared:|||This is OK:|||An array declared with const has Block Scope.|||An array declared in a block is not the same as an array declared outside the block:|||An array declared with var does not have block scope:|||You can learn more about Block Scope in the chapter: JavaScript Scope.|||Redeclaring an array declared with var is allowed anywhere in a program:|||Redeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed:|||Redeclaring or reassigning an existing const array, in the same scope, or in the same block, is not allowed:|||Redeclaring an array with const, in another scope, or in another block, is allowed:|||For a complete Array reference, go to our:|||Complete JavaScript Array Reference.|||The reference contains descriptions and examples of all Array properties and methods.",,,,"Chrome 49|||IE 11 / Edge|||Firefox 36|||Safari 10|||Opera 36&&&Mar, 2016|||Oct, 2013|||Feb, 2015|||Sep, 2016|||Mar, 2016",[]
JS Tutorial,JS Dates,https://www.w3schools.com/js/js_dates.asp,"JavaScript Date Object lets us work with dates:||||||By default, JavaScript will use the browser's time zone and display a date as a full text string:||||||You will learn much more about how to display dates, later in this tutorial.|||Date objects are created with the new Date() constructor.|||There are 4 ways to create a new date object:|||new Date() creates a new date object with the current date and time:|||Date objects are static. The computer time is ticking, but date objects are not.|||new Date(year, month, ...) creates a new date object with a specified date and time.|||7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):|||Note: JavaScript counts months from 0 to 11:|||January = 0.|||December = 11.|||Specifying a month higher than 11, will not result in an error but add the overflow to the next year:|||Specifying:|||Is the same as:|||Specifying a day higher than max, will not result in an error but add the overflow to the next month:|||Specifying:|||Is the same as:|||6 numbers specify year, month, day, hour, minute, second:|||5 numbers specify year, month, day, hour, and minute:|||4 numbers specify year, month, day, and hour:|||3 numbers specify year, month, and day:|||2 numbers specify year and month:|||You cannot omit month. If you supply only one parameter it will be treated as milliseconds.|||One and two digit years will be interpreted as 19xx:|||new Date(dateString) creates a new date object from a date string:|||Date strings are described in the next chapter.|||JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).|||Zero time is January 01, 1970 00:00:00 UTC.|||Now the time is:  milliseconds past January 01, 1970|||new Date(milliseconds) creates a new date object as zero time plus milliseconds:|||01 January 1970 plus 100 000 000 000 milliseconds is approximately 03 March 1973:|||January 01 1970 minus 100 000 000 000 milliseconds is approximately October 31 1966:|||One day (24 hours) is 86 400 000 milliseconds.|||When a Date object is created, a number of methods allow you to operate on it.|||Date methods allow you to get and set the year, month, day, hour, minute, second, and millisecond of date objects, using either local time or UTC (universal, or GMT) time.|||Date methods and time zones are covered in the next chapters.|||JavaScript will (by default) output dates in full text string format:|||When you display a date object in HTML, it is automatically converted to a string, with the toString() method.|||The toUTCString() method converts a date to a UTC string (a date display standard).|||The toDateString() method converts a date to a more readable format:|||The toISOString() method converts a Date object to a string, using the ISO standard format:|||For a complete Date reference, go to our:|||Complete JavaScript Date Reference.|||The reference contains descriptions and examples of all Date properties and methods.",JavaScript Date Output|||Displaying Dates,,,,[]
JS Tutorial,JS Date Formats,https://www.w3schools.com/js/js_date_formats.asp,"There are generally 3 types of JavaScript date input formats:|||The ISO format follows a strict standard in JavaScript.|||The other formats are not  so well defined and might be browser specific.|||Independent of input format, JavaScript will (by default) output dates in full text string format:|||ISO 8601 is the international standard for the representation of dates and times.|||The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:|||The computed date will be relative to your time zone.Depending on your time zone, the result above will vary between March 24 and March 25.|||ISO dates can be written without specifying the day (YYYY-MM):|||Time zones will vary the result above between February 28 and March 01.|||ISO dates can be written without month and day (YYYY):|||Time zones will vary the result above between December 31 2014 and January 01 2015.|||ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):|||Date and time is separated with a capital T.|||UTC time is defined with a capital letter Z.|||If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead: |||UTC (Universal Time Coordinated)  is the same as GMT (Greenwich Mean Time).|||Omitting T or Z in a date-time string can give different results in different browsers.|||When setting a date, without specifying the time zone, JavaScript will use the browser's time zone.|||When getting a date, without specifying the time zone, the result is converted to the browser's time zone.|||In other words: If a date/time is created in GMT (Greenwich Mean Time), the date/time will be converted to CDT (Central US Daylight Time) if a user browses from central US.|||Short dates are written with an ""MM/DD/YYYY"" syntax like this:|||In some browsers, months or days with no leading zeroes may produce an error: |||The behavior of ""YYYY/MM/DD"" is undefined.Some browsers will try to guess the format. Some will return NaN.|||The behavior of  ""DD-MM-YYYY"" is also undefined.Some browsers will try to guess the format. Some will return NaN.|||Long dates are most often written with a ""MMM DD YYYY"" syntax like this: |||Month and day can be in any order:|||And, month can be written in full (January), or abbreviated (Jan):|||Commas are ignored. Names are case insensitive:|||If you have a valid date string, you can use the Date.parse() method to convert it to milliseconds.|||Date.parse() returns the number of milliseconds between the date and January 1, 1970:|||You can then use the number of milliseconds to convert it to a date object:|||For a complete Date reference, go to our:|||Complete JavaScript Date Reference.|||The reference contains descriptions and examples of all Date properties and methods.",JavaScript Date Output,,,"ISO Date|||""2015-03-25""  (The International Standard)&&&Short Date|||""03/25/2015""&&&Long Date|||""Mar 25 2015"" or ""25 Mar 2015""",[]
JS Tutorial,JS Date Get Methods,https://www.w3schools.com/js/js_date_methods.asp,"These methods can be used for getting information from a date object:|||The getTime() method returns the number of milliseconds since January 1, 1970:|||The getFullYear() method returns the year of a date as a four digit number:|||The getMonth() method returns the month of a date as a number (0-11):|||In JavaScript, the first month (January) is month number 0, so December returns month number 11.|||You can use an array of names, and getMonth() to return the month as a name:|||The getDate() method returns the day of a date as a number (1-31):|||The getHours() method returns the hours of a date as a number (0-23):|||The getMinutes() method returns the minutes of a date as a number (0-59):|||The getSeconds() method returns the seconds of a date as a number (0-59):|||The getMilliseconds() method returns the milliseconds of a date as a number (0-999):|||The getDay() method returns the weekday of a date as a number (0-6):|||In JavaScript, the first day of the week (0) means ""Sunday"", even if some countries in the world consider the first day of the week to be ""Monday""|||You can use an array of names, and getDay() to return the weekday as a name:|||UTC date methods are used for working with UTC dates (Universal Time Zone dates):|||For a complete Date reference, go to our:|||Complete JavaScript Date Reference.|||The reference contains descriptions and examples of all Date properties and methods.|||Use the correct Date method to get the month (0-11) out of a date object.|||Start the Exercise",The getFullYear() Method,,,"getFullYear()|||Get the year as a four digit number (yyyy)&&&getMonth()|||Get the month as a number (0-11)&&&getDate()|||Get the day as a number (1-31)&&&getHours()|||Get the hour (0-23)&&&getMinutes()|||Get the minute (0-59)&&&getSeconds()|||Get the second (0-59)&&&getMilliseconds()|||Get the millisecond (0-999)&&&getTime()|||Get the time (milliseconds since January 1, 1970)&&&getDay()|||Get the weekday as a number (0-6)&&&Date.now()|||Get the time. ECMAScript 5.$$$getUTCDate()|||Same as getDate(), but returns the UTC date&&&getUTCDay()|||Same as getDay(), but returns the UTC day&&&getUTCFullYear()|||Same as getFullYear(), but returns the UTC year&&&getUTCHours()|||Same as getHours(), but returns the UTC hour&&&getUTCMilliseconds()|||Same as getMilliseconds(), but returns the UTC milliseconds&&&getUTCMinutes()|||Same as getMinutes(), but returns the UTC minutes&&&getUTCMonth()|||Same as getMonth(), but returns the UTC month&&&getUTCSeconds()|||Same as getSeconds(), but returns the UTC seconds",[]
JS Tutorial,JS Date Set Methods,https://www.w3schools.com/js/js_date_methods_set.asp,"Set Date methods let you set date values (years, months, days, hours, minutes, seconds, milliseconds) for a Date Object.|||Set Date methods are used for setting a part of a date:|||The setFullYear() method sets the year of a date object. In this example to 2020:|||The setFullYear() method can optionally set month and day:|||The setMonth() method sets the month of a date object (0-11):|||The setDate() method sets the day of a date object (1-31):|||The setDate() method can also be used to add days to a date:|||If adding days shifts the month or year, the changes are handled automatically by the Date object.|||The setHours() method sets the hours of a date object (0-23):|||The setMinutes() method sets the minutes of a date object (0-59):|||The setSeconds() method sets the seconds of a date object (0-59):|||Dates can easily be compared.|||The following example compares today's date with January 14, 2100:|||JavaScript counts months from 0 to 11. January is 0. December is 11.|||For a complete Date reference, go to our:|||Complete JavaScript Date Reference.|||The reference contains descriptions and examples of all Date properties and methods.|||Use the correct Date method to set the year of a date object to 2020.|||Start the Exercise",The setFullYear() Method,,,"setDate()|||Set the day as a number (1-31)&&&setFullYear()|||Set the year (optionally month and day)&&&setHours()|||Set the hour (0-23)&&&setMilliseconds()|||Set the milliseconds (0-999)&&&setMinutes()|||Set the minutes (0-59)&&&setMonth()|||Set the month (0-11)&&&setSeconds()|||Set the seconds (0-59)&&&setTime()|||Set the time (milliseconds since January 1, 1970)",[]
JS Tutorial,JS Math,https://www.w3schools.com/js/js_math.asp,"The JavaScript Math object allows you to perform mathematical tasks on numbers.|||Unlike other objects, the Math object has no constructor.|||The Math object is static.|||All methods and properties can be used without creating a Math object first.|||The syntax for any Math property is : Math.property.|||JavaScript provides 8 mathematical constants that can be accessed as Math properties:|||The syntax for Math any methods is : Math.method(number)|||There are 4 common methods to round a number to an integer:|||Math.round(x) returns the nearest integer:|||Math.ceil(x) returns the value of x rounded up to its nearest integer:|||Math.floor(x) returns the value of x rounded down to its nearest integer:|||Math.trunc(x) returns the integer part of x:|||Math.sign(x) returns if x is negative, null or positive:|||Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.|||Math.pow(x, y) returns the value of x to the power of y:|||Math.sqrt(x) returns the square root of x:|||Math.abs(x) returns the absolute (positive) value of x:|||Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).|||If you want to use degrees instead of radians, you have to convert degrees to radians:|||Angle in radians = Angle in degrees x PI / 180.|||Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).|||If you want to use degrees instead of radians, you have to convert degrees to radians:|||Angle in radians = Angle in degrees x PI / 180.|||Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:|||Math.random() returns a random number between 0 (inclusive), and 1 (exclusive):|||You will learn more about Math.random() in the next chapter of this tutorial.|||Math.log(x) returns the natural logarithm of x.|||The natural logarithm returns the time needed to reach a certain level of growth:|||Math.E and Math.log() are twins.|||How many times must we multiply Math.E to get 10?|||Math.log2(x) returns the base 2 logarithm of x.|||How many times must we multiply 2 to get 8?|||Math.log10(x) returns the base 10 logarithm of x.|||How many times must we multiply 10 to get 1000?|||For a complete reference, go to our Complete Math Object Reference.|||The reference contains descriptions and examples of all Math properties and methods.|||Use the correct Math method to create a random number.|||Start the Exercise",Math.sign(),,,"Math.round(x)|||Returns x rounded to its nearest integer&&&Math.ceil(x)|||Returns x rounded up to its nearest integer|||Math.floor(x)|||Returns x rounded down to its nearest integer|||Math.trunc(x)|||Returns the integer part of x (new in ES6)&&&Math.ceil(x)|||Returns x rounded up to its nearest integer&&&Math.floor(x)|||Returns x rounded down to its nearest integer|||Math.trunc(x)|||Returns the integer part of x (new in ES6)&&&Math.floor(x)|||Returns x rounded down to its nearest integer&&&Math.trunc(x)|||Returns the integer part of x (new in ES6)&&&Math.trunc(x)|||Returns the integer part of x (new in ES6)$$$abs(x)|||Returns the absolute value of x&&&acos(x)|||Returns the arccosine of x, in radians&&&acosh(x)|||Returns the hyperbolic arccosine of x&&&asin(x)|||Returns the arcsine of x, in radians&&&asinh(x)|||Returns the hyperbolic arcsine of x&&&atan(x)|||Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians&&&atan2(y, x)|||Returns the arctangent of the quotient of its arguments&&&atanh(x)|||Returns the hyperbolic arctangent of x&&&cbrt(x)|||Returns the cubic root of x&&&ceil(x)|||Returns x, rounded upwards to the nearest integer&&&cos(x)|||Returns the cosine of x (x is in radians)&&&cosh(x)|||Returns the hyperbolic cosine of x&&&exp(x)|||Returns the value of Ex&&&floor(x)|||Returns x, rounded downwards to the nearest integer&&&log(x)|||Returns the natural logarithm (base E) of x&&&max(x, y, z, ..., n)|||Returns the number with the highest value&&&min(x, y, z, ..., n)|||Returns the number with the lowest value&&&pow(x, y)|||Returns the value of x to the power of y&&&random()|||Returns a random number between 0 and 1&&&round(x)|||Rounds x to the nearest integer&&&sign(x)|||Returns if x is negative, null or positive (-1, 0, 1)&&&sin(x)|||Returns the sine of x (x is in radians)&&&sinh(x)|||Returns the hyperbolic sine of x&&&sqrt(x)|||Returns the square root of x&&&tan(x)|||Returns the tangent of an angle&&&tanh(x)|||Returns the hyperbolic tangent of a number&&&trunc(x)|||Returns the integer part of a number (x)",[]
JS Tutorial,JS Random,https://www.w3schools.com/js/js_random.asp,"Math.random() returns a random number between 0 (inclusive),  and 1 (exclusive):|||Math.random() always returns a number lower than 1.|||Math.random() used with Math.floor() can be used to return random integers.|||There is no such thing as JavaScript integers.|||We are talking about numbers with no decimals here.|||As you can see from the examples above, it might be a good idea to create a proper random functionto use for all random integer purposes.|||This JavaScript function always returns a random number between min (included) and max (excluded):|||This JavaScript function always returns a random number between min and max (both included):",,,,,[]
JS Tutorial,JS Booleans,https://www.w3schools.com/js/js_booleans.asp,"A JavaScript Boolean represents one of two values: true or false.|||Very often, in programming, you will need a data type that can only have one of two values, like|||For this, JavaScript has a Boolean data type. It can only take the values true or false.|||You can use the Boolean() function to find out if an expression (or a variable) is true:|||Or even easier:|||The chapter JS Comparisons gives a full overview of comparison operators.|||The chapter JS Conditions gives a full overview of conditional statements.|||Here are some examples:|||The Boolean value of an expression is the basis for all JavaScript comparisons and conditions.|||The Boolean value of 0 (zero) is false:|||The Boolean value of -0 (minus zero) is false:|||The Boolean value of """" (empty string) is false:|||The Boolean value of undefined is false:|||The Boolean value of null is false:|||The Boolean value of false is (you guessed it) false:|||The Boolean value of NaN is false:|||Normally JavaScript booleans are primitive values created from literals:|||But booleans can also be defined as objects with the keyword new:|||Do not create Boolean objects.|||The new keyword complicates the code and slows down execution speed.|||Boolean objects can produce unexpected results:||| When using the == operator, x and y are equal:||| When using the === operator, x and y are not equal:|||Note the difference between (x==y) and (x===y).|||(x == y) true of false?|||(x === y) true of false?|||Comparing two JavaScript objects always return false.|||For a complete reference, go to our Complete JavaScript Boolean Reference.|||The reference contains descriptions and examples of all Boolean properties and methods.",Comparisons and Conditions,YES / NO@@@ON / OFF@@@TRUE / FALSE,,"==|||equal to||| if (day == ""Monday"")&&&>|||greater than|||if (salary > 9000)&&&<|||less than||| if (age < 18)",[]
JS Tutorial,JS Comparisons,https://www.w3schools.com/js/js_comparisons.asp,"Comparison and Logical operators are used to test for true or false.|||Comparison operators are used in logical statements to determine equality or difference between variables or values. |||Given that x = 5, the table below explains the comparison operators:|||Comparison operators can be used in conditional statements to compare values and take action depending on the result:|||You will learn more about the use of conditional statements in the next chapter of this tutorial.|||Logical operators are used to determine the logic between variables or values.|||Given that x = 6 and y = 3, the table below explains the logical operators: |||JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.|||If the variable age is a value below 18, the value of the variable voteable will be ""Too young"", otherwise the value of voteable will be ""Old enough"".|||Comparing data of different types may give unexpected results.|||When comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.|||When comparing two strings, ""2"" will be greater than ""12"", because (alphabetically) 1 is less than 2.|||To secure a proper result, variables should be converted to the proper type before comparison:|||Choose the correct comparison operator to alert true, when x is greater than y.",Comparing Different Types,,,"==|||equal to|||x == 8|||false|||Try it »&&&x == 5|||true|||Try it »&&&x == ""5""|||true|||Try it »&&&===|||equal value and equal type|||x === 5|||true|||Try it »&&&x === ""5""|||false|||Try it »&&&!=|||not equal|||x != 8|||true|||Try it »&&&!==|||not equal value or not equal type|||x !== 5|||false|||
Try it »&&&x !== ""5""|||true|||
Try it »&&&x !== 8|||true|||
Try it »&&&>|||greater than|||x > 8|||false|||Try it »&&&<|||less than|||x < 8|||true|||Try it »&&&>=|||greater than or equal to|||x >= 8|||false|||Try it »&&&<=|||less than or equal to|||x <= 8|||true|||Try it »$$$&&&&&|||and||| (x < 10 && y > 1) is true|||Try it »&&&|||||or|||(x == 5 || y == 5) is false|||Try it »&&&!|||not||| !(x == y) is true|||Try it »$$$2 < 12|||true|||Try it »&&&2 < ""12""|||true|||Try it »&&&2 < ""John""|||false|||Try it »&&&2 > ""John""|||false|||Try it »&&&2 == ""John""|||false|||Try it »&&&""2"" < ""12""|||false|||Try it »&&&""2"" > ""12""|||true|||Try it »&&&""2"" == ""12""|||false|||Try it »",[]
JS Tutorial,JS Conditions,https://www.w3schools.com/js/js_if_else.asp,"Conditional statements are used to perform different actions based on different conditions.|||Very often when you write code, you want to perform different actions for different decisions.|||You can use conditional statements in your code to do this.|||In JavaScript we have the following conditional statements:|||The switch statement is described in the next chapter.|||Use the if statement to specify a block of JavaScript code to be executed if a condition is true.|||Note that if is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.|||Make a ""Good day"" greeting if the hour is less than 18:00:|||The result of greeting will be:|||Use the else statement to specify a block of code to be executed if the condition is false.|||If the hour is less than 18, create a ""Good day"" greeting, otherwise ""Good evening"":|||The result of greeting will be:|||Use the else if statement to specify a new condition if the first condition is false.|||If time is less than 10:00, create a ""Good morning"" greeting, if not, but time is less than 20:00, create a ""Good day"" greeting, otherwise a ""Good evening"":|||The result of greeting will be:|||Random linkThis example will write a link to either W3Schools or to the World Wildlife Foundation (WWF). By using a random number, there is a 50% chance for each of the links.|||Fix the if statement to alert ""Hello World"" if x is greater than y.|||Start the Exercise",,"Use if to specify a block of code to be executed, if a specified condition is true@@@Use else to specify a block of code to be executed, if the same condition is   false@@@Use else if to specify a new condition to test, if the first condition is false@@@Use switch to specify many alternative blocks of code to be executed",,,[]
JS Tutorial,JS Switch,https://www.w3schools.com/js/js_switch.asp,"The switch statement is used to perform different actions based on different conditions.|||Use the switch statement to select one of many code blocks to be executed.|||This is how it works:|||The getDay() method returns the weekday as a number between  0 and 6.|||(Sunday=0, Monday=1, Tuesday=2 ..)|||This example uses the weekday number to calculate the weekday name:|||The result of day will be:|||When JavaScript reaches a break keyword, it breaks out of the switch block.|||This will stop the execution inside the switch block.|||It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.|||Note: If you omit the break statement, the next case will be executed even if the evaluation does not match the case.|||The default keyword specifies the code to run if there is no case match:|||The getDay() method returns the weekday as a number between  0 and 6.|||If today is neither Saturday (6) nor Sunday (0), write a default message:|||The result of text will be:|||The default case does not have to be the last case in a switch block:|||If default is not the last case in the switch block, remember to end the default case with a break.|||Sometimes you will want different switch cases to use the same code.|||In this example case 4 and 5 share the same code block, and 0 and 6 share another code block:|||If multiple cases matches a case value, the first case is selected.|||If no matching cases are found, the program continues to the default label.|||If no default label is found, the program continues to the statement(s) after the switch.|||Switch cases use strict comparison (===).|||The values must be of the same type to match.|||A strict comparison can only be true if the operands are of the same type.|||In this example there will be no match for x: |||Create a switch statement that will alert ""Hello"" if fruits is ""banana"", and ""Welcome"" if fruits is ""apple"".|||Start the Exercise",The default Keyword,"The switch expression is evaluated once.@@@The value of the expression is compared with the values of each case.@@@If there is a match, the associated block of code is executed.@@@If there is no match, the default code block is executed.",,,[]
JS Tutorial,JS Loop For,https://www.w3schools.com/js/js_loop_for.asp,"Loops can execute a block of code a number of times.|||Loops are handy, if you want to run the same code over and over again, each time with a different value.|||Often this is the case when working with arrays:|||JavaScript supports different kinds of loops:|||The for loop has the following syntax:|||Statement 1 is executed (one time) before the execution of the code block.|||Statement 2 defines the condition for executing the code block.|||Statement 3 is executed (every time) after the code block has been executed.|||From the example above, you can read:|||Statement 1 sets a variable before the loop starts (let i = 0).|||Statement 2 defines the condition for the loop to run (i must be less than 5).|||Statement 3 increases a value (i++) each time the code block in the loop has been executed.|||Normally you will use statement 1 to initialize the variable used in the loop (let i = 0).|||This is not always the case, JavaScript doesn't care. Statement 1 is optional.|||You can initiate many values in statement 1 (separated by comma):|||And you can omit statement 1 (like when your values are set before the loop starts):|||Often statement 2 is used to evaluate the condition of the initial variable.|||This is not always the case, JavaScript doesn't care. Statement 2 is also optional.|||If statement 2 returns true, the loop will start over again, if it returns false, the loop will end.|||If you omit statement 2, you must provide a break inside the loop. Otherwise the loop will never end. This will crash your browser.Read about breaks in a later chapter of this tutorial.|||Often statement 3 increments the value of the initial variable.|||This is not always the case, JavaScript doesn't care, and statement 3 is optional.|||Statement 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.|||Statement 3 can also be omitted (like when you increment your values inside the loop): |||Using var in a loop:|||Using let in a loop:|||In the first example, using var, the variable declared in the loop redeclares the variable outside the loop. |||In the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop. |||When let is used to declare the i variable in a loop, the i variable will only be visible within the loop. |||The for/in loop and the for/of loop are explained in the next chapter.|||The while loop and the do/while are explained in the next chapters.|||Create a loop that runs from 0 to 9.|||Start the Exercise",,for - loops through a block of code a number of times@@@for/in - loops through the properties of an object@@@for/of - loops through the values of an   iterable object @@@while - loops through a block of code while a specified condition is true@@@do/while - also loops through a block of code while a specified condition is true,,,[]
JS Tutorial,JS Loop For In,https://www.w3schools.com/js/js_loop_forin.asp,"The JavaScript for in statement loops through the properties of an Object:|||The JavaScript for in statement can also loop over the properties of an Array:|||Do not use for in over an Array if the index order is important.|||The index order is implementation-dependent, and array values may not be accessed in the order you expect.|||It is better to use a for loop, a for of loop, or Array.forEach() when the order is important.|||The forEach() method calls a function (a callback function) once for each array element.|||Note that the function takes 3 arguments:|||The example above uses only the value parameter. It can be rewritten to:",Example Explained,The for in loop iterates over a person object@@@Each iteration returns a key (x)@@@The key is used to access the value of the key@@@The value of the key is person[x]|||The item value@@@The item index @@@The array itself,,,[]
JS Tutorial,JS Loop For Of,https://www.w3schools.com/js/js_loop_forof.asp,"The JavaScript for of statement loops through the values of an iterable object.|||It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:|||variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared withconst, let, or var.|||iterable - An object that has iterable properties.|||For/of was added to JavaScript in 2015 (ES6)|||Safari 7 was the first browser to support for of:|||For/of is not supported in Internet Explorer.|||The while loop and the do/while loop are explained in the next chapter.",,,,Chrome 38|||Edge 12|||Firefox 51|||Safari 7|||Opera 25&&&Oct 2014|||Jul 2015|||Oct 2016|||Oct 2013|||Oct 2014,[]
JS Tutorial,JS Loop While,https://www.w3schools.com/js/js_loop_while.asp,"Loops can execute a block of codeas long as a specified condition is true.|||The while loop loops through a block of code as long as a specified condition is true.|||In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:|||If you forget to increase the variable used in the condition, the loop will never end.This will crash your browser.|||The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.|||The example below uses a do while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:|||Do not forget to increase the variable used in the condition, otherwise the loop will never end!|||If you have read the previous chapter, about the for loop, you will discover that a while loop is much the same as a for loop, with statement 1 and statement 3 omitted.|||The loop in this example uses a for loop to collect the car names from the cars array:|||The loop in this example uses a while loop to collect the car names from the cars array:|||Create a loop that runs as long as i is less than 10.|||Start the Exercise",,,,,[]
JS Tutorial,JS Break,https://www.w3schools.com/js/js_break.asp,"The break statement ""jumps out"" of a loop.|||The continue statement ""jumps over"" one iteration in the loop.|||You have already seen the break statement used in an earlier chapter of this tutorial. It was used to ""jump out"" of a switch() statement.|||The break statement can also be used to jump out of a loop:|||In the example above, the break statement ends the loop (""breaks"" the loop)when the loop counter (i) is 3.|||The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.|||This example skips the value of 3: |||To label JavaScript statements you precede the statements with a label name and a colon:|||The break and the continue statements are the only JavaScript statements that can ""jump out of"" a code block.|||Syntax:|||The continue statement (with or without a label reference) can only be used to skip one loop iteration.|||The break statement, without a label reference, can only be used to jump out of a loop or a switch.|||With a label reference, the break statement can be used to jump out of any code block: |||A code block is a block of code between { and }.|||Make the loop stop when i is 5.|||Start the Exercise",,,,,[]
JS Tutorial,JS Iterables,https://www.w3schools.com/js/js_iterables.asp,Iterables are iterable objects (like Arrays).|||Iterables can be accessed with simple and efficient code.|||Iterables can be iterated over with for..of loops|||The JavaScript for..of statement loops through the elements of an iterable object.|||Iterating is easy to understand.|||It simply means looping over a sequence of elements.|||Here are some easy examples:|||You can use a for..of loop to iterate over the elements of a string:|||You can use a for..of loop to iterate over the elements of an Array:|||You can learn more details about Iterables in the chapter JS Object Iterables.|||You can use a for..of loop to iterate over the elements of a Set:|||Sets and Maps are covered in the next chapters.|||You can use a for..of loop to iterate over the elements of a Map:,,Iterating over a String@@@Iterating over an Array,,,[]
JS Tutorial,JS Sets,https://www.w3schools.com/js/js_sets.asp,"A JavaScript Set is a collection of unique values.|||Each value can only occur once in a Set.|||You can create a JavaScript Set by:|||Pass an Array to the new Set() constructor:|||Create a Set and add values:|||Create a Set and add variables:|||If you add equal elements, only the first will be saved:|||The forEach() method invokes (calls) a function for each Set element:|||The values() method returns a new iterator object containing all the values in a Set:|||Now you can use the Iterator object to access the elements:",,Passing an Array to new Set()@@@Create a new Set and use add() to add values@@@Create a new Set and use add() to add variables,,new Set()|||Creates a new Set&&&add()|||Adds a new element to the Set&&&delete()|||Removes an element from a Set&&&has()|||Returns true if a value exists in the Set&&&forEach()|||Invokes a callback for each element in the Set&&&values()|||Returns an iterator with all the values in a Set$$$size|||Returns the number of elements in a Set,[]
JS Tutorial,JS Maps,https://www.w3schools.com/js/js_maps.asp,"A Map holds key-value pairs where the keys can be any datatype.|||A Map remembers the original insertion order of the keys.|||You can create a JavaScript Map by:|||You can create a Map by passing an Array to the new Map() constructor:|||You can add elements to a Map with the set() method:|||The set() method can also be used to change existing Map values:|||The get() method gets the value of a key in a Map:|||The size property returns the number of elements in a Map:|||The delete() method removes a Map element:|||The has() method returns true if a key exists in a Map:|||The forEach() method calls a function for each key/value pair in a Map:|||The entries() method returns an iterator object with the [key, values] in a Map:|||JavaScript Maps are supported in all browsers, except Internet Explorer:",,Passing an Array to new Map()@@@Create a Map and use Map.set(),,"new Map()|||Creates a new Map&&&set()|||Sets the value for a key in a Map&&&get()|||Gets the value for a key in a Map&&&delete()|||Removes a Map element specified by the key&&&has()|||Returns true if a key exists in a Map&&&forEach()|||Calls a function for each key/value pair in a Map&&&entries()|||Returns an iterator with the [key, value] pairs in a Map$$$&&&size|||Returns the number of elements in a Map$$$&&&Not directly iterable|||Directly iterable&&&Do not have a size property|||Have a size property&&&Keys must be Strings (or Symbols)|||Keys can be any datatype&&&Keys are not well ordered|||Keys are ordered by insertion&&&Have default keys|||Do not have default keys$$$Chrome|||Edge|||Firefox|||Safari|||Opera",[]
JS Tutorial,JS Typeof,https://www.w3schools.com/js/js_typeof.asp,"In JavaScript there are 5 different data types that can contain values:|||There are 6 types of objects:|||And 2 data types that cannot contain values:|||You can use the typeof operator to find the data type of a JavaScript variable.|||Please observe:|||You cannot use typeof to determine if a JavaScript object is an array (or a date).|||A primitive data value is a single simple data value with no additional properties and methods.|||The typeof operator can return one of these primitive types:|||The typeof operator can return one of two complex types:|||The typeof operator returns ""object"" for objects, arrays, and null.|||The typeof operator does not return ""object"" for functions.|||The typeof operator returns ""object"" for arrays because in JavaScript arrays are objects.|||The typeofoperator is not a variable. It is an operator. Operators ( + - * / ) do not have any data type. |||But, the typeof operator always returns a string (containing the type of the operand).|||The constructor property returns the constructor function for all JavaScript variables.|||You can check the constructor property to find out if an object is an Array (contains the word ""Array""):|||Try it Yourself »|||Or even simpler, you can check if the object is an Array function:|||Try it Yourself »|||You can check the constructor property to find out if an object is a Date (contains the word ""Date""):|||Try it Yourself »|||Or even simpler, you can check if the object is a Date function:|||Try it Yourself »|||In JavaScript, a variable without a value, has the value undefined. The type is also undefined.|||Any variable can be emptied, by setting the value to undefined. The type will also be undefined.|||An empty value has nothing to do with undefined.|||An empty string has both a legal value and a type.|||In JavaScript null is ""nothing"". It is supposed to be something that doesn't exist.|||Unfortunately, in JavaScript, the data type of null is an object.|||You can consider it a bug in JavaScript that typeof null is an object. It should be null.|||You can empty an object by setting it to null:|||You can also empty an object by setting it to undefined:|||undefined and null are equal in value but different in type:",Null|||Difference Between Undefined and Null,string@@@number@@@boolean@@@object@@@function|||Object@@@Date@@@Array@@@String@@@Number@@@Boolean|||null@@@undefined|||The data type of NaN is number@@@The data type of an array is object@@@The data type of a date is object@@@The data type of null is object@@@The data type of an undefined variable is undefined     *@@@The data type of a variable that has not been assigned a value is     also undefined *|||string@@@number@@@boolean@@@undefined|||function@@@object,,,[]
JS Tutorial,JS Type Conversion,https://www.w3schools.com/js/js_type_conversion.asp,"JavaScript variables can be converted to a new variable and another data type:|||The global method Number() can convert strings to numbers.|||Strings containing numbers (like ""3.14"") convert to numbers (like 3.14).|||Empty strings convert to 0.|||Anything else converts to NaN (Not a Number).|||In the chapter Number Methods, you will find more methods that can be used to convert strings to numbers:|||The unary + operator can be used to convert a variable to a number:|||If the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number):|||The global method String() can convert numbers to strings.|||It can be used on any type of numbers, literals, variables, or expressions:|||The Number method toString() does the same.|||In the chapter Number Methods, you will find more methods that can be used to convert numbers to strings:|||The global method Number() can be used to convert dates to numbers.|||The date method getTime()  does the same.|||The global method String() can convert dates to strings.|||The Date method toString() does the same.|||In the chapter Date Methods, you will find more methods that can be used to convert dates to strings:|||The global method Number() can also convert booleans to numbers.|||The global method String() can convert booleans to strings.|||The Boolean method toString() does the same.|||When JavaScript tries to operate on a ""wrong"" data type, it will try to convert the value to a ""right"" type.|||The result is not always what you expect:|||JavaScript automatically calls the variable's toString() function when you try to ""output"" an object or a variable:|||Numbers and booleans are also converted, but this is not very visible:|||This table shows the result of converting different JavaScript values to Number, String, and Boolean:|||Values in quotes indicate string values.|||Red values indicate values (some) programmers might not expect.",JavaScript Type Conversion Table,Converting Strings to Numbers@@@Converting Numbers to Strings@@@Converting Dates to Numbers@@@Converting Numbers to Dates@@@Converting Booleans to Numbers@@@Converting Numbers to Booleans|||By the use of a JavaScript function@@@Automatically by JavaScript itself,,"Number()|||Returns a number, converted from its argument&&&parseFloat()|||Parses a string and returns a floating point number|||parseInt()|||Parses a string and returns an integer&&&parseFloat()|||Parses a string and returns a floating point number&&&parseInt()|||Parses a string and returns an integer$$$&&&toExponential()|||Returns a string, with a number rounded and written using exponential notation.&&&toFixed()|||Returns a string, with a number rounded and written with a specified number of decimals.&&&toPrecision()|||Returns a string, with a number written with a specified length$$$&&&getDate()|||Get the day as a number (1-31)&&&getDay()|||Get the weekday a number (0-6)&&&getFullYear()|||Get the four digit year (yyyy)&&&getHours()|||Get the hour (0-23)&&&getMilliseconds()|||Get the milliseconds (0-999)&&&getMinutes()|||Get the minutes (0-59)&&&getMonth()|||Get the month (0-11)&&&getSeconds()|||Get the seconds (0-59)&&&getTime()|||Get the time (milliseconds since January 1, 1970)$$$false|||0|||""false""|||false|||Try it »&&&true|||1|||""true""|||true|||Try it »&&&0|||0|||""0""|||false|||Try it »&&&1|||1|||""1""|||true|||Try it »&&&""0""|||0|||""0""|||true|||Try it »&&&""000""|||0|||""000""|||true|||Try it »&&&""1""|||1|||""1""|||true|||Try it »&&&NaN|||NaN|||""NaN""|||false|||Try it »&&&Infinity|||Infinity|||""Infinity""|||true|||Try it »&&&-Infinity|||-Infinity|||""-Infinity""|||true|||Try it »&&&""""|||0|||""""|||false|||Try it »&&&""20""|||20|||""20""|||true|||Try it »&&&""twenty""|||NaN|||""twenty""|||true|||Try it »&&&[ ]|||0|||""""|||true|||Try it »&&&[20]|||20|||""20""|||true|||Try it »&&&[10,20]|||NaN|||""10,20""|||true|||Try it »&&&[""twenty""]|||NaN|||""twenty""|||true|||Try it »&&&[""ten"",""twenty""]|||NaN|||""ten,twenty""|||true|||Try it »&&&function(){}|||NaN|||""function(){}""|||true|||Try it »&&&{ }|||NaN|||""[object Object]""|||true|||Try it »&&&null|||0|||""null""|||false|||Try it »&&&undefined|||NaN|||""undefined""|||false|||Try it »",[]
JS Tutorial,JS Bitwise,https://www.w3schools.com/js/js_bitwise.asp,"JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers. |||Before a bitwise operation is performed, JavaScript converts numbers to 32 bits signed integers.|||After the bitwise operation is performed, the result is converted back to 64 bits JavaScript numbers.|||The examples above uses 4 bits unsigned binary numbers. Because of this ~ 5 returns 10.|||Since JavaScript uses 32 bits signed integers, it will not return 10. It will return -6.|||00000000000000000000000000000101 (5)|||11111111111111111111111111111010 (~5 = -6)|||A signed integer uses the leftmost bit as the minus sign.|||When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.|||When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits are 1:|||When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:|||Bitwise AND returns 1 only if both bits are 1:|||Bitwise OR returns 1 if one of the bits are 1:|||Bitwise XOR returns 1 if the bits are different:|||This is a zero fill left shift. One or more zero bits are pushed in from the right,and the leftmost bits fall off:|||This is a sign preserving right shift. Copies of the leftmost bit are pushed in from the left, and the rightmost bits fall off:|||This is a zero fill right shift. One or more zero bits are pushed in from the left,and the rightmost bits fall off:|||Binary numbers with only one bit set is easy to understand:|||Setting a few more bits reveals the binary pattern:|||JavaScript binary numbers are stored in two's complement format.|||This means that a negative number is the bitwise NOT of the number plus 1:",,,,"&|||AND|||Sets each bit to 1 if both bits are 1&&&||||OR|||Sets each bit to 1 if one of two bits is 1&&&^|||XOR|||Sets each bit to 1 if only one of two bits is 1&&&~|||NOT|||Inverts all the bits&&&<<|||Zero fill left shift|||Shifts left by pushing zeros in from the right and let the leftmost bits fall off&&&>>|||Signed right shift|||Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits 
fall off&&&>>>|||Zero fill right shift|||Shifts right by pushing zeros in from the left, and let the rightmost bits fall off$$$&&&5 & 1|||1|||0101 & 0001||| 0001&&&5 | 1|||5|||0101 | 0001||| 0101&&&~ 5|||10||| ~0101||| 1010&&&5 << 1|||10|||0101 << 1||| 1010&&&5 ^ 1|||4|||0101 ^ 0001||| 0100&&&5 >> 1|||2|||0101 >> 1||| 0010&&&5 >>> 1|||2|||0101 >>> 1||| 0010$$$&&&0 & 0|||0&&&0 & 1|||0&&&1 & 0|||0&&&1 & 1|||1$$$&&&1111 & 0000|||0000&&&1111 & 0001|||0001&&&1111 & 0010|||0010&&&1111 & 0100|||0100$$$&&&0 | 0|||0&&&0 | 1|||1 &&&1 | 0|||1&&&1 | 1|||1$$$&&&1111 | 0000|||1111&&&1111 | 0001|||1111&&&1111 | 0010|||1111&&&1111 | 0100|||1111$$$&&&0 ^ 0|||0&&&0 ^ 1|||1 &&&1 ^ 0|||1&&&1 ^ 1|||0 $$$&&&1111 ^ 0000|||1111&&&1111 ^ 0001|||1110&&&1111 ^ 0010|||1101&&&1111 ^ 0100|||1011$$$&&&5|||00000000000000000000000000000101&&&1|||00000000000000000000000000000001&&&5 & 1|||00000000000000000000000000000001 (1)$$$&&&5|||00000000000000000000000000000101&&&1|||00000000000000000000000000000001&&&5 | 1|||00000000000000000000000000000101 (5)$$$&&&5|||00000000000000000000000000000101&&&1|||00000000000000000000000000000001&&&5 ^ 1|||00000000000000000000000000000100 (4)$$$&&&5|||00000000000000000000000000000101&&&~5|||11111111111111111111111111111010 (-6)$$$&&&5|||00000000000000000000000000000101&&&5 << 1|||00000000000000000000000000001010 (10)$$$&&&-5|||11111111111111111111111111111011&&&-5 >> 1|||11111111111111111111111111111101 (-3)$$$&&&5|||00000000000000000000000000000101&&&5 >>> 1|||00000000000000000000000000000010 (2)$$$&&&00000000000000000000000000000001|||1&&&00000000000000000000000000000010|||2&&&00000000000000000000000000000100|||4&&&00000000000000000000000000001000|||8&&&00000000000000000000000000010000|||16&&&00000000000000000000000000100000|||32&&&00000000000000000000000001000000|||64$$$&&&00000000000000000000000000000101|||5 (4 + 1)&&&00000000000000000000000000001101|||13 (8 + 4 + 1)&&&00000000000000000000000000101101|||45 (32 + 8 + 4 + 1)$$$00000000000000000000000000000101|||5&&&11111111111111111111111111111011|||-5&&&00000000000000000000000000000110|||6&&&11111111111111111111111111111010|||-6&&&00000000000000000000000000101000|||40&&&11111111111111111111111111011000|||-40",[]
JS Tutorial,JS RegExp,https://www.w3schools.com/js/js_regexp.asp,"A regular expression is a sequence of characters that forms a search pattern.|||The search pattern can be used for text search and text replace operations. |||A regular expression is a sequence of characters that forms a search pattern.|||When you search for data in a text, you can use this search pattern to describe what you are searching for.|||A regular expression can be a single character, or a more complicated pattern.|||Regular expressions can be used to perform all types of text search and text replace operations.|||Example explained:|||/w3schools/i  is a regular expression.|||w3schools  is a pattern (to be used in a search).|||i  is a modifier (modifies the search to be case-insensitive).|||In JavaScript, regular expressions are often used with the two string methods: search() and replace().|||The search() method uses an expression to search for a match, and returns the position of the match.|||The replace() method returns a modified string where the pattern is replaced.|||The search() method searches a string for a specified value and returns the position of the match:|||Use a string to do a search for ""W3schools"" in a string:|||The result in n will be:|||Try it Yourself »|||Use a regular expression to do a case-insensitive search for ""w3schools"" in a string:|||The result in n will be:|||Try it Yourself »|||The replace() method replaces a specified value with another value in a string:|||Use a case insensitive regular expression to replace Microsoft with W3Schools in a string:|||The result in res will be:|||Regular expression arguments (instead of string arguments) can be used in the methods above.Regular expressions can make your search much more powerful (case insensitive for example).|||Modifiers can be used to perform case-insensitive more global searches:|||Brackets are used to find a range of characters:|||Metacharacters are characters with a special meaning:|||Quantifiers define quantities:|||In JavaScript, the RegExp object is a regular expression object with predefined properties and methods.|||The test() method is a RegExp expression method.|||It searches a string for a pattern, and returns true or false, depending on the result.|||The following example searches a string for the character ""e"":|||Since there is an ""e"" in the string, the output of the code above will be:|||Try it Yourself »|||You don't have to put the regular expression in a variable first. The two lines above can be shortened to one:|||The exec() method is a RegExp expression method.|||It searches a string for a specified pattern, and returns the found text as an object. |||If no match is found, it returns an empty (null) object.|||The following example searches a string for the character ""e"":|||For a complete reference, go to our Complete JavaScript RegExp Reference.|||The reference contains descriptions and examples of all RegExp properties and methods.",What Is a Regular Expression?|||Using String Methods|||Example|||Example|||Using the RegExp Object,,,"i|||Perform case-insensitive matching|||Try it »&&&g|||Perform a global match (find all matches rather than stopping after the first match)|||Try it »&&&m|||Perform multiline matching|||Try it »$$$&&&[abc]|||Find any of the characters between the brackets|||Try it »|||[0-9]|||Find any of the digits between the brackets|||Try it »|||(x|y)|||Find any of the alternatives separated with ||||Try it »&&&[0-9]|||Find any of the digits between the brackets|||Try it »|||(x|y)|||Find any of the alternatives separated with ||||Try it »&&&(x|y)|||Find any of the alternatives separated with ||||Try it »$$$&&&\d|||Find a digit|||Try it »&&&\s|||Find a whitespace character|||Try it »&&&\b|||Find a match at the beginning of a word like this: \bWORD, or at the end of a word 
    like this: WORD\b|||
Try it »

Try it »
&&&\uxxxx|||Find the Unicode character specified by the hexadecimal number xxxx|||Try it »$$$n+|||Matches any string that contains at least one n|||Try it »&&&n*|||Matches any string that contains zero or more occurrences of n|||Try it »&&&n?|||Matches any string that contains zero or one occurrences of n|||Try it »",[]
JS Tutorial,JS Errors,https://www.w3schools.com/js/js_errors.asp,"The try statement defines a code block to run (to try).|||The catch statement defines a code block to handle any error.|||The finally statement defines a code block to run regardless of the result.|||The throw statement defines a custom error.|||When executing JavaScript code, different errors can occur. |||Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things.|||In this example we misspelled ""alert"" as ""adddlert"" to deliberately produce an error:|||JavaScript catches adddlert as an error, and executes the catch code to handle it.|||The try statement allows you to define a block of code to be tested for errors while it is being executed.|||The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.|||The JavaScript statements try and catch come in pairs:|||When an error occurs, JavaScript will normally stop and generate an error message.|||The technical term for this is: JavaScript will throw an exception (throw an error).|||JavaScript will actually create an Error object with two properties: name and message.|||The throw statement allows you to create a custom error.|||Technically you can throw an exception (throw an error).|||The exception can be a JavaScript String, a Number, a Boolean or an Object:|||If you use throw together with try and catch, you can control program flow and generate custom error messages.|||This example examines input. If the value is wrong, an exception (err) is thrown.|||The exception (err) is caught by the catch statement and a custom error message is displayed:|||The code above is just an example.|||Modern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes: |||You can read more about forms validation in a later chapter of this tutorial.|||The finally statement lets you execute code, after try and catch, regardless of the result:|||JavaScript has a built in error object that provides error information when an error occurs. |||The error object provides two useful properties: name and message.|||Six different values can be returned by the error name property:|||The six different values are described below.|||An EvalError indicates an error in the eval() function.|||Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead.|||A RangeError is thrown if you use a number that is outside the range of legal values.|||For example: You cannot set the number of significant digits of a number to 500. |||A ReferenceError is thrown if you use (reference) a variable that has not been declared:|||A SyntaxError is thrown if you try to evaluate code with a syntax error.|||A TypeError is thrown if you use a value that is outside the range of expected types:|||A URIError is thrown if you use illegal characters in a URI function:|||Mozilla and Microsoft defines some non-standard error object properties:|||fileName (Mozilla)lineNumber (Mozilla)columnNumber (Mozilla)stack (Mozilla)description (Microsoft)number (Microsoft)|||Do not use these properties in public web sites. They will not work in all browsers.|||For a complete reference of the Error object, go to our Complete JavaScript Error Reference.",,,,"name|||Sets or returns an error name&&&message|||Sets or returns an error message (a string)$$$EvalError|||An error has occurred in the eval() function&&&RangeError|||A number ""out of range"" has occurred&&&ReferenceError|||An illegal reference has occurred&&&SyntaxError|||A syntax error has occurred&&&TypeError|||A type error has occurred&&&URIError|||An error in encodeURI() has occurred",[]
JS Tutorial,JS Scope,https://www.w3schools.com/js/js_scope.asp,"Scope determines the accessibility (visibility) of variables.|||JavaScript has 3 types of scope:|||Before ES6 (2015), JavaScript had only Global Scope and Function Scope.|||ES6 introduced two important new JavaScript keywords: let and const.|||These two keywords provide Block Scope in JavaScript.|||Variables declared inside a { } block cannot be accessed from outside the block:|||Variables declared with the var keyword can NOT have block scope.|||Variables declared inside a { } block can be accessed from outside the block. |||Variables declared within a JavaScript function, become LOCAL to the function.|||Local variables have Function Scope:|||They can only be accessed from within the function.|||Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.|||Local variables are created when a function starts, and deleted when the function is completed.|||JavaScript has function scope: Each function creates a new scope. |||Variables defined inside a function are not accessible (visible) from outside the function.|||Variables declared with var, letand const are quite similar when declared inside a function.|||They all have Function Scope:|||A variable declared outside a function, becomes GLOBAL.|||A global variable has Global Scope:|||All scripts and functions on a web page can access it. |||Variables declared Globally (outside any function) haveGlobal Scope.|||Global variables can be accessed from anywhere in a JavaScript program. |||Variables declared with var, letand const are quite similar when declared outside a block.|||They all have Global Scope:|||In JavaScript, objects and functions are also variables.|||Scope determines the accessibility of variables, objects, and functions from different parts of the code.|||If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.|||This code example will declare a global variable carName, even if the value is assigned inside a function.|||All modern browsers support running JavaScript in ""Strict Mode"".|||You will learn more about how to use strict mode in a later chapter of this tutorial.|||In ""Strict Mode"", undeclared variables are not automatically global.|||With JavaScript, the global scope is the JavaScript environment. |||In HTML, the global scope is the window object.|||Global variables defined with the var keyword belong to the window object:|||Global variables defined with the let keyword do not belong to the window object:|||Do NOT create global variables unless you intend to.|||Your global variables (or functions) can overwrite window variables (or functions).Any function, including the window object, can overwrite your global variables and functions.|||The lifetime of a JavaScript variable starts when it is declared.|||Function (local) variables are deleted when the function is completed.|||In a web browser, global variables are deleted when you close the browser window (or tab).|||Function arguments (parameters) work as local variables inside functions.",,Block scope@@@Function scope@@@Global scope,,,[]
JS Tutorial,JS Hoisting,https://www.w3schools.com/js/js_hoisting.asp,"Hoisting is JavaScript's default behavior of moving declarations to the top.|||In JavaScript, a variable can be declared after it has been used.|||In other words; a variable can be used before it has been declared.|||Example 1 gives the same result as Example 2:|||To understand this, you have to understand the term ""hoisting"".|||Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).|||Variables defined with let and const are hoisted to the top of the block, but not initialized.Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.Using a let variable before it is declared will result in aReferenceError.The variable is in a ""temporal dead zone"" from the start of the block until it is declared:ExampleThis will result in a ReferenceError:carName = ""Volvo"";let carName;Try it Yourself »Using a const variable before it is declared, is a syntax errror,so the code will simply not run.ExampleThis code will not run.carName = ""Volvo"";const carName;Try it Yourself »Read more about let and const in JS Let / Const.JavaScript Initializations are Not HoistedJavaScript only hoists declarations, not initializations.Example 1 does not give the same result asExample 2:Example 1var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x + "" "" + y;           // Display x and yTry it Yourself »Example 2var x = 5; // Initialize xelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x + "" "" + y;           // Display x and yvar y = 7; // Initialize yTry it Yourself »Does it make sense that y is undefined in the last example?This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.Example 2 is the same as writing:Examplevar x = 5; // Initialize xvar y;     // Declare yelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x + "" "" + y;           // Display x and yy = 7;    // Assign 7 to y Try it Yourself »Declare Your Variables At the Top !Hoisting is (to many developers) an unknown or overlooked behavior of  JavaScript.If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of every scope.Since this is how JavaScript interprets the code, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are not declared.Study ""use strict"" in the next chapter.❮ PreviousNext ❯|||Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.Using a let variable before it is declared will result in aReferenceError.The variable is in a ""temporal dead zone"" from the start of the block until it is declared:ExampleThis will result in a ReferenceError:carName = ""Volvo"";let carName;Try it Yourself »Using a const variable before it is declared, is a syntax errror,so the code will simply not run.ExampleThis code will not run.carName = ""Volvo"";const carName;Try it Yourself »Read more about let and const in JS Let / Const.JavaScript Initializations are Not HoistedJavaScript only hoists declarations, not initializations.Example 1 does not give the same result asExample 2:Example 1var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x + "" "" + y;           // Display x and yTry it Yourself »Example 2var x = 5; // Initialize xelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x + "" "" + y;           // Display x and yvar y = 7; // Initialize yTry it Yourself »Does it make sense that y is undefined in the last example?This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.Example 2 is the same as writing:Examplevar x = 5; // Initialize xvar y;     // Declare yelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x + "" "" + y;           // Display x and yy = 7;    // Assign 7 to y Try it Yourself »Declare Your Variables At the Top !Hoisting is (to many developers) an unknown or overlooked behavior of  JavaScript.If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of every scope.Since this is how JavaScript interprets the code, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are not declared.Study ""use strict"" in the next chapter.❮ PreviousNext ❯|||Using a let variable before it is declared will result in aReferenceError.|||The variable is in a ""temporal dead zone"" from the start of the block until it is declared:|||Using a const variable before it is declared, is a syntax errror,so the code will simply not run.|||This code will not run.|||Read more about let and const in JS Let / Const.|||JavaScript only hoists declarations, not initializations.|||Example 1 does not give the same result asExample 2:|||Does it make sense that y is undefined in the last example?|||This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.|||Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.|||Example 2 is the same as writing:|||Hoisting is (to many developers) an unknown or overlooked behavior of  JavaScript.|||If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of every scope.Since this is how JavaScript interprets the code, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are not declared.Study ""use strict"" in the next chapter.❮ PreviousNext ❯|||To avoid bugs, always declare all variables at the beginning of every scope.Since this is how JavaScript interprets the code, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are not declared.Study ""use strict"" in the next chapter.❮ PreviousNext ❯|||Since this is how JavaScript interprets the code, it is always a good rule.|||JavaScript in strict mode does not allow variables to be used if they are not declared.Study ""use strict"" in the next chapter.",Example,,,,[]
JS Tutorial,JS Strict Mode,https://www.w3schools.com/js/js_strict.asp,"""use strict""; Defines that JavaScript code should be executed in ""strict mode"".|||The ""use strict"" directive was new in ECMAScript version 5.|||It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.|||The purpose of ""use strict"" is to indicate that the code should be executed in ""strict mode"".|||With strict mode, you can not, for example, use undeclared variables.|||All modern browsers support ""use strict"" except Internet Explorer 9 and lower:|||The numbers in the table specify the first browser version that fully supports the directive.|||You can use strict mode in all your programs. It helps you to write cleaner code,like preventing you from using undeclared variables.|||""use strict"" is just a string, so IE 9 will not throw an error even if it does not understand it.|||Strict mode is declared by adding ""use strict""; to the beginning of a script or a function.|||Declared at the beginning of a script, it has global scope (all code in the script will execute in strict mode):|||Declared inside a function, it has local scope (only the code inside the function is in strict mode):|||The syntax, for declaring strict mode, was designed to be compatible with older versions of JavaScript.|||Compiling a numeric literal (4 + 5;) or a string literal (""John Doe"";) in a JavaScript program has no side effects. It simply compiles to a non existing variable and dies.|||So ""use strict""; only matters to new compilers that ""understand"" the meaning of it.|||Strict mode makes it easier to write ""secure"" JavaScript.|||Strict mode changes previously accepted ""bad syntax"" into real errors.|||As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.|||In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties. |||In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.|||Using a variable, without declaring it, is not allowed:|||Try it Yourself »|||Objects are variables too.|||Using an object, without declaring it, is not allowed:|||Try it Yourself »|||Deleting a variable (or object) is not allowed.|||Try it Yourself »|||Deleting a function is not allowed.|||Try it Yourself »|||Duplicating a parameter name is not allowed:|||Try it Yourself »|||Octal numeric literals are not allowed:|||Try it Yourself »|||Octal escape characters are not allowed:|||Try it Yourself »|||Writing to a read-only property is not allowed:|||Try it Yourself »|||Writing to a get-only property is not allowed:|||Try it Yourself »|||Deleting an undeletable property is not allowed:|||Try it Yourself »|||The word eval cannot be used as a variable:|||Try it Yourself »|||The word arguments cannot be used as a variable:|||Try it Yourself »|||The with statement is not allowed:|||Try it Yourself »|||For security reasons, eval() is not allowed to create  variables in the scope from which it was called:|||Try it Yourself »|||The this keyword in functions behaves differently in strict mode.|||The this keyword refers to the object that called the function.|||If the object is not specified, functions in strict mode will return undefined and functions in normal mode will return the global object (window):|||Try it Yourself »|||Keywords reserved for future JavaScript versions can NOT be used as variable names in strict mode.|||These are:|||Try it Yourself »|||The ""use strict"" directive is only recognized at the beginning of a script or a function.",,implements@@@interface@@@let@@@package@@@private@@@protected@@@public@@@static@@@yield,,"""use strict""|||13.0|||10.0|||4.0|||6.0|||12.1",[]
JS Tutorial,JS this Keyword,https://www.w3schools.com/js/js_this.asp,"In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||When used in an object method, this refers to the object.|||In the example on top of this page, this refers to the person object.|||Because the fullName method is a method of the person object.|||When used alone, this refers to the global object.|||Because this is running in the global scope.|||In a browser window the global object is [object Window]:||| In strict mode, when used alone, this also refers to the global object:|||In a function, the global object is the default binding for this.|||In a browser window the global object is [object Window]:|||JavaScript strict mode does not allow default binding.|||So, when used in a function, in strict mode, this is undefined.|||In HTML event handlers, this refers to the HTML element that received the event:|||Try it Yourself »|||In these examples, this is the person object:|||i.e. this.firstName is the firstName property of this (the person object).|||The call() and apply() methods are predefined JavaScript methods.|||They can both be used to call an object method with another object as argument.|||The Function call() Method |||The Function apply() Method|||The Function bind() Method|||The example below calls person1.fullName with person2 as an argument, this refers to person2,even if fullName is a method of person1:|||Try it Yourself »|||With the bind() method, an object can borrow a method from another object.|||This example creates 2 objects (person and member).|||The member object borrows the fullname method from the person object:|||To determine which object this refers to; Use the following precedence of order.|||Is this in a function being called using bind()?|||Is this in a function is being called using apply()?|||Is this in a function is being called using call()?|||Is this in an object function (method)?Is this in a function in the global scope.❮ PreviousNext ❯|||Is this in a function in the global scope.",<b>this</b> in a Function (Default)|||<b>this</b> in a Function (Strict) ,,,"Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.$$$Precedence|||Object&&&1|||bind()&&&2|||apply() and call()&&&3|||Object method&&&4|||Global scope",[]
JS Tutorial,JS Arrow Function,https://www.w3schools.com/js/js_arrow_function.asp,"Arrow functions were introduced in ES6.|||Arrow functions allow us to write shorter function syntax:||||||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||It gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and thereturn keyword:|||Try it Yourself »|||Note: This works only if the function has only one statement.|||If you have parameters, you pass them inside the parentheses:|||Try it Yourself »|||In fact, if you have only one parameter, you can skip the parentheses as well:|||Try it Yourself »|||The handling of this is also different in arrow functions compared to regular functions.|||In short, with arrow functions there are no binding ofthis.|||In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.|||With arrow functions the this keyword always represents the object that defined the arrow function.|||Let us take a look at two examples to understand the difference.|||Both examples call a method twice, first when the page loads, and once again when the user clicks a button.|||The first example uses a regular function, and the second example uses an arrow function.|||The result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the ""owner"" of the function.|||With a regular function this represents the object that calls the function:|||Try it Yourself »|||With an arrow function this represents the owner of the function:|||Try it Yourself »|||Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions.|||The following table defines the first browser versions with full support for Arrow Functions in JavaScript: ","What About <code class=""w3-codespan"">this</code>?|||Example|||Browser Support",,,"Chrome 45|||Edge 12|||Firefox 22|||Safari 10|||Opera 32&&&Sep, 2015|||Jul, 2015|||May, 2013|||Sep, 2016|||Sep, 2015",[]
JS Tutorial,JS Classes,https://www.w3schools.com/js/js_classes.asp,"ECMAScript 2015, also known as ES6, introduced JavaScript Classes.|||JavaScript Classes are templates for JavaScript Objects.|||Use the keyword class to create a class.|||Always add a method named constructor():|||The example above creates a class named ""Car"".|||The class has two initial properties: ""name"" and ""year"".|||A JavaScript class is not an object.|||It is a template for JavaScript objects.|||When you have a class, you can use the class to create objects:|||Try it Yourself »|||The example above uses the Car class to create two Car objects.|||The constructor method is called automatically when a new object is created.|||The constructor method is a special method:|||If you do not define a constructor method, JavaScript will add an empty constructor method.|||Class methods are created with the same syntax as object methods.|||Use the keyword class to create a class.|||Always add a constructor() method.|||Then add any number of methods.|||Create a Class method named ""age"", that returns the Car age:|||Try it Yourself »|||You can send parameters to Class methods:|||Try it Yourself »|||The following table defines the first browser version with full support for Classes in JavaScript: |||You will learn a lot more about JavaScript Classes later in this tutorial.",Browser Support,"It has to have the exact name ""constructor""@@@It is executed automatically when a new object is created@@@It is used to initialize object properties",,"Chrome 49|||Edge 12|||Firefox 45|||Safari 9|||Opera 36&&&Mar, 2016|||Jul, 2015|||Mar, 2016|||Oct, 2015|||Mar, 2016",[]
JS Tutorial,JS JSON,https://www.w3schools.com/js/js_json.asp,"JSON is a format for storing and transporting data.|||JSON is often used when data is sent from a server to a web page. |||* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. Code for reading and generating JSON data can be written in any programming language.|||This JSON syntax defines an employees object: an array of 3 employee records (objects):|||The JSON format is syntactically identical to the code for creating JavaScript objects.|||Because of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.|||JSON data is written as name/value pairs, just like JavaScript object properties.|||A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:|||JSON names require double quotes. JavaScript names do not.|||JSON objects are written inside curly braces.|||Just like in JavaScript, objects can contain multiple name/value pairs:|||JSON arrays are written inside square brackets.|||Just like in JavaScript, an array can contain objects:|||In the example above, the object ""employees"" is an array. It contains three objects.|||Each object is a record of a person (with a first name and a last name).|||A common use of JSON is to read data from a web server, and display the data in a web page.|||For simplicity, this can be demonstrated using a string as input.|||First, create a JavaScript string containing JSON syntax:|||Then, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:|||Finally, use the new JavaScript object in your page:|||You can read more about JSON in our JSON tutorial.",What is JSON?|||JSON Syntax Rules,"JSON stands for JavaScript Object Notation@@@JSON is a lightweight data interchange format@@@JSON is language independent *@@@JSON is ""self-describing"" and easy to understand|||Data is in name/value pairs@@@Data is separated by commas@@@Curly braces hold objects@@@Square brackets hold arrays",,,[]
JS Tutorial,JS Debugging,https://www.w3schools.com/js/js_debugging.asp,"Errors can (will) happen, every time you write some new computer code.|||Programming code might contain syntax errors, or logical errors.|||Many of these errors are difficult to diagnose.|||Often, when programming code contains errors, nothing will happen. There are no error messages, and you will get no indications where to search for errors.|||Searching for (and fixing) errors in programming code is called code debugging.|||Debugging is not easy. But fortunately, all modern browsers have a built-in JavaScript debugger.|||Built-in debuggers can be turned on and off, forcing errors to be reported to the user.|||With a debugger, you can also set breakpoints (places where code execution can be stopped), and examine variables while the code is executing.|||Normally, otherwise follow the steps at the bottom of this page, you activate debugging in your browser with the F12 key, and select ""Console"" in the debugger menu.|||If your browser supports debugging, you can use console.log() to display JavaScript values in the debugger window:|||Tip: Read more about the console.log() method in our JavaScript Console Reference.|||In the debugger window, you can set breakpoints in the JavaScript code.|||At each breakpoint, JavaScript will stop executing, and let you examine JavaScript values.|||After examining values, you can resume the execution of code (typically with a play button).|||The debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function.|||This has the same function as setting a breakpoint in the debugger.|||If no debugging is available, the debugger statement has no effect.|||With the debugger turned on, this code will stop executing before it executes the third line.|||Normally, you activate debugging in your browser with F12, and select ""Console"" in the debugger menu.|||Otherwise follow these steps:|||Debugging is the process of testing, finding, and reducing bugs (errors) in computer programs.The first known computer bug was a real bug (an insect) stuck in the electronics.",Chrome|||Firefox|||Edge|||Opera|||Safari,"Open the browser.@@@From the menu, select ""More tools"".@@@From tools, choose ""Developer tools"".@@@Finally, select Console.|||Open the browser.@@@From the menu, select ""Web Developer"".@@@Finally, select ""Web Console"".|||Open the browser.@@@From the menu, select ""Developer Tools"".@@@Finally, select ""Console"".|||Open the browser.@@@From the menu, select ""Developer"".@@@From ""Developer"", select ""Developer tools"".@@@Finally, select ""Console"".|||Go to Safari, Preferences, Advanced in the main menu.@@@Check ""Enable Show Develop menu in menu bar"".@@@When the new option ""Develop"" appears in the menu:Choose ""Show Error  Console"".",,,[]
JS Tutorial,JS Style Guide,https://www.w3schools.com/js/js_conventions.asp,"Always use the same coding conventions for all your JavaScript projects.|||Coding conventions are style guidelines for programming. They typically cover:|||Coding conventions secure quality:|||Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.|||This page describes the general JavaScript code conventions used by W3Schools.You should also read the next chapter ""Best Practices"", and learn how to avoid coding pitfalls.|||At W3schools we use camelCase for identifier names (variables and functions).|||All names start with a letter.|||At the bottom of this page, you will find a wider discussion about naming rules.|||Always put spaces around operators ( = + - * / ), and after commas:|||Always use 2 spaces for indentation of code blocks:|||Do not use tabs (tabulators) for indentation. Different editors interpret tabs differently.|||General rules for simple statements:|||General rules for complex (compound) statements:|||General rules for object definitions:|||Short objects can be written compressed, on one line, using spaces only between properties, like this:|||For readability, avoid lines longer than 80 characters.|||If a JavaScript statement does not fit on one line, the best place to break it, is after an operator or a comma.|||Always use the same naming convention for all your code. For example:|||Should you use hyp-hens, camelCase, orunder_scores in variable names?|||This is a question programmers often discuss. The answer depends on who you ask:|||Hyphens in HTML and CSS:|||HTML5 attributes can start with data- (data-quantity, data-price).|||CSS uses hyphens in property-names (font-size).|||Hyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names.|||Underscores:|||Many programmers prefer to use underscores (date_of_birth), especially in SQL databases.|||Underscores are often used in PHP documentation.|||PascalCase:|||PascalCase is often preferred by C programmers.|||camelCase:|||camelCase is used by JavaScript itself, by jQuery, and other JavaScript libraries.|||Do not start names with a $ sign. It will put you in conflict with many JavaScript library names.|||Use simple syntax for loading external scripts (the type attribute is not necessary):|||A consequence of using ""untidy"" HTML styles, might result in JavaScript errors.|||These two JavaScript statements will produce different results:|||If possible, use the same naming convention (as JavaScript) in HTML. |||Visit the HTML Style Guide.|||HTML files should have a .html extension (.htm is allowed).CSS files should have a .css extension.JavaScript files should have a .js extension.Use Lower Case File NamesMost web servers (Apache, Unix) are case sensitive about file names:london.jpg cannot be accessed as London.jpg. Other web servers (Microsoft, IIS) are not case sensitive:london.jpg can be accessed as London.jpg or london.jpg.If you use a mix of upper and lower case, you have to be extremely consistent.If you move from a case insensitive, to a case sensitive server, even small errors can break your web site.To avoid these problems, always use lower case file names (if possible). PerformanceCoding conventions are not used by computers. Most rules have little impact on the execution of programs.Indentation and extra spaces are not significant in small scripts.For code in development, readability should be preferred. Larger production scripts should be minified.  ❮ PreviousNext ❯|||CSS files should have a .css extension.|||JavaScript files should have a .js extension.|||Most web servers (Apache, Unix) are case sensitive about file names:|||london.jpg cannot be accessed as London.jpg. |||Other web servers (Microsoft, IIS) are not case sensitive:|||london.jpg can be accessed as London.jpg or london.jpg.|||If you use a mix of upper and lower case, you have to be extremely consistent.|||If you move from a case insensitive, to a case sensitive server, even small errors can break your web site.|||To avoid these problems, always use lower case file names (if possible). |||Coding conventions are not used by computers. Most rules have little impact on the execution of programs.|||Indentation and extra spaces are not significant in small scripts.|||For code in development, readability should be preferred. Larger production scripts should be minified.  ",Statement Rules|||Object Rules|||Accessing HTML Elements|||File Extensions|||Performance,"Naming and declaration rules for variables and functions.@@@Rules for the use of white space, indentation, and comments.@@@Programming practices and principles|||Improves code readability@@@Make code maintenance easier|||Always end a simple statement with a semicolon.|||Put the opening bracket at the end of the first line.@@@Use one space before the opening bracket.@@@Put the closing bracket on a new line, without leading spaces.@@@Do not end a complex statement with a semicolon.|||Place the opening bracket on the same line as the object name.@@@Use colon plus one space between each property and its value.@@@Use quotes around string values, not around numeric values.@@@Do not add a comma after the last property-value pair.@@@Place the closing bracket on a new line, without  leading spaces.@@@Always end an object definition with a semicolon. |||Variable and function names written as camelCase@@@Global variables written in UPPERCASE (We don't, but it's quite common)@@@Constants (like PI) written in UPPERCASE",,,[]
JS Tutorial,JS Best Practices,https://www.w3schools.com/js/js_best_practices.asp,"Avoid global variables, avoid new, avoid ==, avoid eval()|||Minimize the use of global variables.|||This includes all data types, objects, and functions.|||Global variables and functions can be overwritten by other scripts.|||Use local variables instead, and learn how to use closures. |||All variables used in a function should be declared as local variables. |||Local variables must be declared with the var keyword or the let keyword,or the const keyword,otherwise they will become global variables.|||Strict mode does not allow undeclared variables.|||It is a good coding practice to put all declarations at the top of each script or function.|||This will:|||This also goes for loop variables:|||It is a good coding practice to initialize variables when you declare them.|||This will:|||Initializing variables provides an idea of the intended use (and intended data type).|||Declaring objects with const will prevent any accidental change of type:|||Declaring arrays with const will prevent any accidential change of type:|||JavaScript is loosely typed.|||A variable can contain all data types.|||A variable can change its data type:|||Beware that numbers can accidentally be converted to strings or NaN (Not a Number).|||When doing mathematical operations, JavaScript can convert numbers to strings:|||Subtracting a string from a string, does not generate an error but returns NaN (Not a Number):|||The == comparison operator always converts (to matching types) before comparison.|||The === operator forces comparison of values and type: |||If a function is called with a missing argument, the value of the missing argument is set toundefined.|||Undefined values can break your code. It is a good habit to assign default values to arguments.|||ECMAScript 2015 allows default parameters in the function definition:function (a=1, b=1) { /*function code*/  }|||Read more about function parameters and arguments at Function Parameters|||Always end your switch statements with a default. Even if you think there is no need for it.|||Always treat numbers, strings, or booleans as primitive values. Not as objects.|||Declaring these types as objects, slows down execution speed, and produces nasty side effects:|||Or even worse:|||The eval() function is used to run text as code. In almost all cases, it should not be necessary to use it.|||Because it allows arbitrary code to be run, it also represents a security problem.",Always Declare Local Variables|||Don't Use new Object()|||End Your Switches with Defaults,"Give cleaner code@@@Provide a single place to look for local variables@@@Make it easier to avoid unwanted (implied) global variables@@@Reduce the possibility of unwanted re-declarations|||Give cleaner code@@@Provide a single place to initialize variables@@@Avoid undefined values|||Use """" instead of new String()@@@Use 0 instead of new Number()@@@Use false instead of new Boolean()@@@Use {} instead of new Object()@@@Use [] instead of new Array()@@@Use /()/ instead of new RegExp()@@@Use function (){} instead of new Function()",,,[]
JS Tutorial,JS Mistakes,https://www.w3schools.com/js/js_mistakes.asp,"This chapter points out some common JavaScript mistakes.|||JavaScript programs may generate unexpected results if a programmer accidentally uses an assignment operator (=), instead of a comparison operator (==) in an if statement. |||This if statement returns false (as expected) because x is not equal to 10:|||This if statement returns true (maybe not as expected), because 10 is  true:|||This if statement returns false (maybe not as expected), because 0 is  false:|||An assignment always returns the value of the assignment.|||In regular comparison, data type does not matter. This if statement returns true:|||In strict comparison, data type does matter. This if statement returns false:|||It is a common mistake to forget that switch statements use strict comparison:|||This case switch will display an alert:|||This case switch will not display an alert:|||Addition is about adding numbers.|||Concatenation is about adding strings.|||In JavaScript both operations use the same + operator.|||Because of this, adding a number as a number will produce a different result from adding a number as a string:|||When adding two variables, it can be difficult to anticipate the result:|||All numbers in JavaScript are stored as 64-bits Floating point numbers (Floats).|||All programming languages, including JavaScript, have difficulties with precise floating point values:|||To solve the problem above, it helps to multiply and divide:|||JavaScript will allow you to break a statement into two lines:|||But, breaking a statement in the middle of a string will not work:|||You must use a ""backslash"" if you must break a statement in a string:|||Because of a misplaced semicolon, this code block will execute regardless of the value of x:|||It is a default JavaScript behavior to close a statement automatically at the end of a line.|||Because of this, these two examples will return the same result:|||JavaScript will also allow you to break a statement into two lines.|||Because of this, example 3 will also return the same result:|||But, what will happen if you break the return statement in two lines like this:|||The function will return undefined!|||Why? Because JavaScript thought you meant:|||If a statement is incomplete like:|||JavaScript will try to complete the statement by reading the next line:|||But since this statement is complete: |||JavaScript will automatically close it like this:|||This happens because closing (ending) statements with semicolon is optional in JavaScript.|||JavaScript will close the return statement at the end of the line, because it is a complete statement.|||Never break a return statement.|||Many programming languages support arrays with named indexes.|||Arrays with named indexes are called associative arrays (or hashes).|||JavaScript does not support arrays with named indexes.|||In JavaScript, arrays use numbered indexes:   |||In JavaScript, objects use named indexes. |||If you use a named index, when accessing an array, JavaScript will redefine the array to a standard object.|||After the automatic redefinition, array methods and properties will produce undefined or incorrect results:|||Trailing commas in object and array definition are legal in ECMAScript 5.|||WARNING !!|||Internet Explorer 8 will crash.|||JSON does not allow trailing commas.|||JavaScript objects, variables, properties, and methods can be undefined.|||In addition, empty JavaScript objects can have the value null.|||This can make it a little bit difficult to test if an object is empty.|||You can test if an object exists by testing if the type is  undefined:|||But you cannot test if an object is null, because this will throw an error if the object is undefined:|||To solve this problem, you must test if an object is not null, and not undefined.|||But this can still throw an error:|||Because of this, you must test for not undefined before you can test for not null:",Accidentally Using the Assignment Operator |||Expecting Loose Comparison|||Breaking a Return Statement,,,,[]
JS Tutorial,JS Performance,https://www.w3schools.com/js/js_performance.asp,"How to speed up your JavaScript code.|||Loops are often used in programming.|||Each statement in a loop, including the for statement, is executed for each iteration of the loop.|||Statements or assignments that can be placed outside the loop will make the loop run faster. |||The bad code accesses the length property of an array each time the loop is iterated.|||The better code accesses the length property outside the loop and makes the loop run faster.|||Accessing the HTML DOM is very slow, compared to other JavaScript statements.|||If you expect to access a DOM element several times, access it once, and use it as a local variable:|||Keep the number of elements in the HTML DOM small.|||This will always improve page loading, and speed up rendering (page display), especially on smaller devices.|||Every attempt to search the DOM (like getElementsByTagName) will benefit from a smaller DOM.|||Don't create new variables if you don't plan to save values.|||Often you can replace code like this:|||With this:|||Putting your scripts at the bottom of the page body lets the browser load the page first.|||While a script is downloading, the browser will not start any other downloads. In addition all parsing and rendering activity might be blocked.|||The HTTP specification defines that browsers should not download more than two components in parallel.|||An alternative is to use defer=""true"" in the script tag. The defer attribute specifies that the script should be executed after the page has finished parsing, but it only works for external scripts.|||If possible, you can add your script to the page by code, after the page has loaded:|||Avoid using the with keyword. It has a negative effect on speed. It also clutters up JavaScript scopes.|||The with keyword is not allowed in strict mode.",,,,,[]
JS Tutorial,JS Reserved Words,https://www.w3schools.com/js/js_reserved.asp,You can read more about the different JavaScript versions in the chapter JS Versions.|||Do not use these words as variables. ECMAScript 5/6 does not have full support in all browsers.|||JavaScript can be used as the programming language in many applications.|||In addition you should avoid using the name of all HTML event handlers.,"JavaScript Objects, Properties, and Methods|||Java Reserved Words|||HTML Event Handlers",,,break|||byte|||case|||catch&&&char|||class*|||const|||continue&&&debugger|||default|||delete|||do&&&double|||else|||enum*|||eval&&&export*|||extends*|||false|||final&&&finally|||float|||for|||function&&&goto|||if|||implements|||import*&&&in|||instanceof|||int|||interface&&&let*|||long|||native|||new&&&null|||package|||private|||protected&&&public|||return|||short|||static&&&super*|||switch|||synchronized|||this&&&throw|||throws|||transient|||true&&&try|||typeof|||var|||void&&&volatile|||while|||with|||yield&&&abstract|||boolean|||byte|||char&&&double|||final|||float|||goto&&&int|||long|||native|||short&&&synchronized|||throws|||transient|||volatile&&&Array|||Date|||eval|||function&&&hasOwnProperty|||Infinity|||isFinite|||isNaN&&&isPrototypeOf|||length|||Math|||NaN&&&name|||Number|||Object|||prototype&&&String|||toString|||undefined|||valueOf&&&getClass|||java|||JavaArray|||javaClass&&&JavaObject|||JavaPackage||||||&&&alert|||all|||anchor|||anchors&&&area|||assign|||blur|||button&&&checkbox|||clearInterval|||clearTimeout|||clientInformation&&&close|||closed|||confirm|||constructor&&&crypto|||decodeURI|||decodeURIComponent|||defaultStatus&&&document|||element|||elements|||embed&&&embeds|||encodeURI|||encodeURIComponent|||escape&&&event|||fileUpload|||focus|||form&&&forms|||frame|||innerHeight|||innerWidth&&&layer|||layers|||link|||location&&&mimeTypes|||navigate|||navigator|||frames&&&frameRate|||hidden|||history|||image&&&images|||offscreenBuffering|||open|||opener&&&option|||outerHeight|||outerWidth|||packages&&&pageXOffset|||pageYOffset|||parent|||parseFloat&&&parseInt|||password|||pkcs11|||plugin&&&prompt|||propertyIsEnum|||radio|||reset&&&screenX|||screenY|||scroll|||secure&&&select|||self|||setInterval|||setTimeout&&&status|||submit|||taint|||text&&&textarea|||top|||unescape|||untaint&&&window|||||||||&&&onblur|||onclick|||onerror|||onfocus&&&onkeydown|||onkeypress|||onkeyup|||onmouseover&&&onload|||onmouseup|||onmousedown|||onsubmit,[]
JS Versions,JS Versions,https://www.w3schools.com/js/js_versions.asp,"JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard  in 1997.|||ECMAScript is the official name of the language.|||ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6.|||Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).|||This tutorial covers every version of JavaScript:|||ECMAScript 1 - 6 is fully supported in all modern browsers.|||* Internet Explorer 9 does not support ECMAScript 5 ""use strict"".|||Internet Explorer does not support ECMAScript 2015.",Browser Support,"The Original JavaScript ES1 ES2 ES3 (1997-1999)@@@The First Main Revision ES5 (2009)@@@The Second Revision ES6 (2015)@@@Yearly Additions (2016, 2017, 2018)",,"ES1|||ECMAScript 1 (1997)|||First edition&&&ES2|||ECMAScript 2 (1998)|||Editorial changes&&&ES3|||ECMAScript 3 (1999)|||Added regular expressions
Added try/catch
Added switch
Added do-while&&&ES4|||ECMAScript 4|||Never released&&&ES5|||ECMAScript 5 (2009)
Read More
|||
Added ""strict mode""
Added JSON support
Added String.trim()
Added Array.isArray()
Added Array iteration methods
Allows trailing commas for object literals
&&&ES6|||ECMAScript 2015
Read More|||Added let and const
Added default parameter values
Added Array.find()
Added Array.findIndex()
&&&|||ECMAScript 2016
Read More|||Added exponential operator (**)
Added Array.includes()&&&|||ECMAScript 2017
Read More
|||Added string padding
Added Object.entries()
Added Object.values()
Added async functions
Added shared memory&&&|||ECMAScript 2018
Read More
|||
Added rest / spread properties
Added asynchronous iteration
Added Promise.finally()
Additions to RegExp
$$$&&&Chrome|||23|||Nov 2012&&&Firefox|||21|||May 2013&&&IE|||9*|||Mar 2011&&&IE / Edge|||10|||Sep 2012&&&Safari|||6|||Jul 2012&&&Opera|||15|||Jul 2013$$$&&&Chrome|||51|||May 2016&&&Firefox|||52|||Mar 2017&&&Edge|||14|||Aug 2016&&&Safari|||10|||Sep 2016&&&Opera|||38|||Jun 2016$$$Chrome|||52|||Jul 2016&&&Firefox|||54|||Jun 2017&&&Edge|||14|||Aug 2016&&&Safari|||10.1|||Mar 2017&&&Opera|||39|||Aug 2016",[]
JS Versions,JS 2009 (ES5),https://www.w3schools.com/js/js_es5.asp,"ECMAScript 2009, also known as ES5, was the first major revision to JavaScript.|||This chapter describes the most important features of ES5.|||ES5 is fully supported in all modern browsers:|||""use strict"" defines that the JavaScript code should be executed in ""strict mode"".|||With strict mode you can, for example, not use undeclared variables.|||You can use strict mode in all your programs. It helps you to write cleaner code,like preventing you from using undeclared variables.|||""use strict"" is just a string expression. Old browsers will not throw an error if they don't understand it.|||Read more in JS Strict Mode.|||The charAt() method returns the character at a specified index (position) in a string:|||ES5 allows property access on strings:|||Property access on string might be a little unpredictable.|||Read more in JS String Methods.|||The \ method might not have universal support.Older browsers might treat the spaces around the backslash differently. Some older browsers do not allow spaces behind the \ character.|||A safer way to break up a string literal, is to use string addition:|||ES5 allows reserved words as property names:|||The trim() method removes whitespace from both sides of a string.|||Read more in JS String Methods.|||The isArray() method checks whether an object is an array.|||Read more in JS Arrays.|||The forEach() method calls a function once for each array element.|||Learn more in JS Array Iteration Methods.|||This example multiplies each array value by 2: |||Learn more in JS Array Iteration Methods.|||This example creates a new array from elements with a value larger than 18:|||Learn more in JS Array Iteration Methods.|||This example finds the sum of all numbers in an array:|||Learn more in JS Array Iteration Methods.|||This example also finds the sum of all numbers in an array:|||Learn more in JS Array Iteration Methods.|||This example checks if all values are over 18:|||Learn more in JS Array Iteration Methods.|||This example checks if some values are over 18:|||Learn more in JS Array Iteration Methods.|||Search an array for an element value and returns its position.|||Learn more in JS Array Iteration Methods.|||lastIndexOf() is the same as indexOf(), but searches from the end of the array.|||Learn more in JS Array Iteration Methods.|||A common use of JSON is to receive data from a web server.|||Imagine you received this text string from a web server:|||The JavaScript function JSON.parse() is used to convert the text into a JavaScript object:|||Read more in our JSON Tutorial.|||A common use of JSON is to send data to a web server.|||When sending data to a web server, the data has to be a string.|||Imagine we have this object in JavaScript:|||Use the JavaScript function JSON.stringify() to convert it into a string.|||The result will be a string following the JSON notation.|||myJSON is now a string, and ready to be sent to a server:|||Read more in our JSON Tutorial.|||Date.now() returns the number of milliseconds since zero date (January 1. 1970 00:00:00 UTC).|||Date.now() returns the same as getTime() performed on a Date object.|||Learn more in JS Dates.|||The toISOString() method converts a Date object to a string, using the ISO standard format:|||toJSON() converts a Date object into a string, formatted as a JSON date.|||JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:|||ES5 lets you define object methods with a syntax that looks like getting or settinga property.|||This example creates a getter for a property called fullName:|||This example creates a setter and a getter for the language property:|||This example uses a setter to secure upper case updates of language:|||Learn more about Gettes and Setters in JS Object Accessors|||Object.defineProperty() is a new Object method in ES5.|||It lets you define an object property and/or change a property's value and/or metadata.|||Next example is the same code, except it hides the language property from enumeration:|||This example creates a setter and a getter to secure upper case updates of language:|||ES5 added a lot of new Object Methods to JavaScript:|||Learn more in Object ECMAScript5.|||ES5 allows trailing commas in object and array definitions:|||WARNING !!!|||JSON does not allow trailing commas.","ES5 Features|||Browser Support|||The ""use strict"" Directive|||Strings Over Multiple Lines|||Array map()","""use strict""@@@String[number] access@@@Multiline strings@@@String.trim()@@@Array.isArray()@@@Array forEach()@@@Array map()@@@Array filter()@@@Array reduce()@@@Array reduceRight()@@@Array every()@@@Array some()@@@Array indexOf()@@@Array lastIndexOf()@@@JSON.parse()@@@JSON.stringify()@@@Date.now()@@@Date toISOString()@@@Date toJSON()@@@Property getters and setters@@@Reserved words as property names@@@Object methods@@@Object defineProperty()@@@Function.bind()@@@Trailing commas",,Chrome|||IE|||Edge|||Firefox|||Safari|||Opera&&&Yes|||9.0|||Yes|||Yes|||Yes|||Yes,[]
JS Versions,JS 2015 (ES6),https://www.w3schools.com/js/js_es6.asp,"ECMAScript 2015 was the second major revision to JavaScript.|||ECMAScript 2015 is also known as ES6 and ECMAScript 6.|||This chapter describes the most important features of ES6.|||Safari 10 and Edge 14 were the first browsers to fully support ES6:|||The let keyword allows you to declare a variable with block scope.|||Read more about let in the chapter: JavaScript Let.|||The const keyword allows you to declare a constant (a JavaScript variable with a constant value).|||Constants are similar to let variables, except that the value cannot be changed.|||Read more about const in the chapter: JavaScript Const.|||Arrow functions allows a short syntax for writing function expressions.|||You don't need the function keyword, the return keyword, and the curly brackets.|||Arrow functions do not have their own this.They are not well suited for defining object methods.|||Arrow functions are not hoisted. They must be defined before they are used.|||Using constis safer than using var, because a function expression is always a constant value.|||You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:|||Learn more about Arrow Functions in the chapter: JavaScript Arrow Function.|||The JavaScript for/of statement loops through the values of an iterable objects.||| for/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more.|||The for/of loop has the following syntax:|||variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared withconst, let, or var.|||iterable - An object that has iterable properties.|||Learn more in the chapter: JavaScript Loop For/In/Of.|||Being able to use an Object as a key is an important Map feature.|||Learn more about Map objects in the the chapter: JavaScript Map().|||Learn more about Set objects in the the chapter: JavaScript Set().|||JavaScript Classes are templates for JavaScript Objects.|||Use the keyword class to create a class.|||Always add a method named constructor():|||The example above creates a class named ""Car"".|||The class has two initial properties: ""name"" and ""year"".|||A JavaScript class is not an object.|||It is a template for JavaScript objects.|||When you have a class, you can use the class to create objects:|||Try it Yourself »|||Learn more about classes in the the chapter: JavaScript Classes.|||A Promise is a JavaScript object that links ""Producing Code"" and ""Consuming Code"".|||""Producing Code"" can take some time and ""Consuming Code"" must wait for the result.|||Try it Yourself »|||Learn more about Promises in the the chapter: JavaScript Promises.|||A JavaScript Symbol is a primitive datatype just like Number, String, or Boolean.|||It represents a unique ""hidden"" identifier that no other code can accidentally access.|||For instance, if different coders want to add a person.id property to a person object belonging to a third-party code,they could mix each others values.|||Using Symbol() to create a unique identifiers, solves this problem:|||Symbols are always unique.|||If you create two symbols with the same description they will have different values.|||ES6 allows function parameters to have default values.|||The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:|||The includes() method returns true if a string contains a specified value,otherwise false:|||The startsWith() method returns trueif a string begins with a specified value, otherwise false:|||The endsWith() method returns trueif a string ends with a specified value, otherwise false:|||The Array.from() method returns an Array object from any object with a length property or any iterable object.|||Create an Array from a String:|||The keys() method returns an Array Iterator object with the keys of an array.|||Create an Array Iterator object, containing the keys of the array:|||The find() method returns the value of the first array element that passes a test function.|||This example finds (returns the value of ) the first element that is larger than 18:|||Note that the function takes 3 arguments:|||The findIndex() method returns the index of the first array element that passes a test function.|||This example finds the index of the first element that is larger than 18:|||Note that the function takes 3 arguments:|||ES6 added the following methods to the Math object:|||Math.trunc(x) returns the integer part of x:|||Math.sign(x) returns if x is negative, null or positive:|||Math.cbrt(x) returns the cube root of x:|||Math.log2(x) returns the base 2 logarithm of x:|||Math.log10(x) returns the base 10 logarithm of x:|||ES6 added the following properties to the Number object:|||ES6 added 2 new methods to the Number object:|||The Number.isInteger() method returns true if the argument is an integer.|||A safe integer is an integer that can be exactly represented as a double precision number.|||The Number.isSafeInteger() method returns true if the argument is a safe integer.|||Safe integers are all integers from -(253 - 1) to +(253 - 1).This is safe: 9007199254740991. This is not safe: 9007199254740992.|||ES6 added 2 new global number methods:|||The global isFinite() method returns false if the argument is Infinity or NaN.|||Otherwise it returns true:|||The global isNaN() method returns true if the argument is NaN. Otherwise it returns false:",New Features in ES6|||Browser Support for ES6 (2015)|||Default Parameter Values|||The Math.sign() Method,The let keyword@@@The const keyword@@@Arrow Functions@@@For/of@@@Map Objects@@@Set Objects@@@Classes@@@Promises@@@Symbol@@@Default Parameters@@@Function Rest Parameter@@@String.includes()@@@String.startsWith()@@@String.endsWith()@@@Array.from()@@@Array keys()@@@Array find()@@@Array findIndex()@@@New Math Methods@@@New Number Properties@@@New Number Methods@@@New Global Methods@@@Iterables Object.entries@@@JavaScript Modules|||The item value@@@The item index @@@The array itself|||The item value@@@The item index @@@The array itself|||Math.trunc()@@@Math.sign()@@@Math.cbrt()@@@Math.log2()@@@Math.log10()|||EPSILON@@@MIN_SAFE_INTEGER@@@MAX_SAFE_INTEGER|||Number.isInteger()@@@Number.isSafeInteger()|||isFinite()@@@isNaN(),,Chrome 58|||Edge 14|||Firefox 54|||Safari 10|||Opera 55&&&Jan 2017|||Aug 2016|||Mar 2017|||Jul 2016|||Aug 2018,[]
JS Versions,JS 2016,https://www.w3schools.com/js/js_2016.asp,"The JavaScript naming convention started with ES1, ES2, ES3, ES5 and ES6.|||But, ECMAScript 2016 and 2017 was not called ES7 and ES8.|||Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).|||This chapter introduces the new features in ECMAScript 2016:|||The exponentiation operator (**) raises the first operand to the power of the second operand.|||x ** y produces the same result as Math.pow(x, y):|||Chrome 52 and Edge 14 was the first browsers to fully support the Exponentiation Operator:|||ECMAScript 2016 introduced Array.prototype.includes to arrays.This allows us to check if an element is present in an array:|||All modern browsers support Array.prototype.includes:",,JavaScript Exponentiation (**)@@@JavaScript Exponentiation assignment (**=)@@@JavaScript Array.prototype.includes,,Chrome 52|||Edge 14|||Firefox 52|||Safari 10.1|||Opera 39&&&Jul 2016|||Aug 2016|||Mar 2017|||Mar 2017|||Aug 2016$$$Chrome 47|||Edge 14|||Firefox 43|||Safari 9|||Opera 34&&&Dec 2015|||Aug 2016|||Dec 2015|||Oct 2015|||Dec 2015,[]
JS Versions,JS 2017,https://www.w3schools.com/js/js_2017.asp,"The JavaScript naming convention started with ES1, ES2, ES3, ES5 and ES6.|||But, ECMAScript 2016 and 2017 was not called ES7 and ES8.|||Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).|||This chapter introduces the new features in ECMAScript 2017:|||ECMAScript 2017 added two String methods: padStartand padEnd to support padding at the beginning and at the end of a string.|||String Padding is not supported in Internet Explorer.|||Firefox and Safari were the first browsers with support for JavaScript string padding:|||ECMAScript 2017 adds a new Object.entries method to objects.|||The Object.entries() method returns an array of the key/value pairs in an object:|||Object.entries() makes it simple to use objects in loops:|||Object.entries() also makes it simple to convert objects to maps:|||Chrome and Firefox were the first browsers with support forObject.entries:|||Object.values are similar to Object.entries,but returns a single dimension array of the object values:|||Firefox and Chrome were the first browsers with support forObject.values:|||Try it Yourself »|||Firefox and Chrome were the first browsers with support for async JavaScript functions:",,JavaScript String padding@@@JavaScript Object.entries@@@JavaScript Object.values@@@JavaScript async functions@@@JavaScript shared memory,,Chrome 57|||Edge 15|||Firefox 48|||Safari 10|||Opera 44&&&Mar 2017|||Apr 2017|||Aug 2016|||Sep 2016|||Mar 2017$$$&&&Chrome 47|||Edge 14|||Firefox 47|||Safari 10.1|||Opera 41&&&Jun 2016|||Aug 2016|||Jun 2016|||Mar 2017|||Oct 2016$$$&&&Chrome 54|||Edge 14|||Firefox 47|||Safari 10.1|||Opera 41&&&Oct 2016|||Aug 2016|||Jun 2016|||Mar 2017|||Oct 2016$$$Chrome 55|||Edge 15|||Firefox 52|||Safari 11|||Opera 42&&&Dec 2016|||Apr 2017|||Mar 2017|||Sep 2017|||Dec 2016,[]
JS Versions,JS 2018,https://www.w3schools.com/js/js_2018.asp,"The JavaScript naming convention started with ES1, ES2, ES3, ES5 and ES6.|||But, ECMAScript 2016 and 2017 was not called ES7 and ES8.|||Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).|||This chapter introduces the new features in ECMAScript 2018:|||ECMAScript 2018 added asynchronous iterators and iterables.|||With asynchronous iterables, we can use the awaitkeyword in for/of loops.Examplefor await () {}Firefox and Safari were the first browsers with support for JavaScript asynchronous iteration:Chrome 63Edge 79Firefox 57Safari 11Opera 50Dec 2017Jan 2020Nov 2017Sep 2017Jan 2018JavaScript Promise.finallyECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally:Examplelet myPromise = new Promise();myPromise.then();myPromise.catch();myPromise.finally();Chrome and Firefox were the first browsers with support for Promise.finally:Chrome 63Edge 18Firefox 58Safari 11.1Opera 50Dec 2017Nov 2018Jan 2018Mar 2018Jan 2018JavaScript Object Rest PropertiesECMAScript 2018 added rest properties.This allows us to destruct an object and collect the leftovers onto a new object:Examplelet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };x; // 1y; // 2z; // { a: 3, b: 4 }Chrome, Firefox, ans Opera were the first browsers with support for object rest properties:Chrome 60Edge 79Firefox 55Safari 11.1Opera 47Jul 2017Jan 2020Aug 2017Mar 2018Aug 2017New JavaScript RegExp FeaturesECMAScript 2018 added 4 new RegExp features:Unicode Property Escapes (\p{...})Lookbehind Assertions (?<= ) and (?<! )Named Capture Groupss (dotAll) FlagChrome and Firefox were the first browsers with support for all the new RegExp features:Chrome 64Edge 79Firefox 78Safari 12Opera 51Jan 2018Jan 2020Jun 2020Sep 2018Feb 2018❮ PreviousNext ❯|||Firefox and Safari were the first browsers with support for JavaScript asynchronous iteration:|||ECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally:|||Chrome and Firefox were the first browsers with support for Promise.finally:|||ECMAScript 2018 added rest properties.|||This allows us to destruct an object and collect the leftovers onto a new object:|||Chrome, Firefox, ans Opera were the first browsers with support for object rest properties:|||ECMAScript 2018 added 4 new RegExp features:|||Chrome and Firefox were the first browsers with support for all the new RegExp features:",JavaScript Promise.finally,Asynchronous Iteration@@@Promise Finally@@@Object Rest Properties@@@New RegExp Features|||Unicode Property Escapes (\p{...})@@@Lookbehind Assertions (?<= ) and (?<! )@@@Named Capture Groups@@@s (dotAll) Flag,,Chrome 63|||Edge 79|||Firefox 57|||Safari 11|||Opera 50&&&Dec 2017|||Jan 2020|||Nov 2017|||Sep 2017|||Jan 2018$$$&&&Chrome 63|||Edge 18|||Firefox 58|||Safari 11.1|||Opera 50&&&Dec 2017|||Nov 2018|||Jan 2018|||Mar 2018|||Jan 2018$$$&&&Chrome 60|||Edge 79|||Firefox 55|||Safari 11.1|||Opera 47&&&Jul 2017|||Jan 2020|||Aug 2017|||Mar 2018|||Aug 2017$$$Chrome 64|||Edge 79|||Firefox 78|||Safari 12|||Opera 51&&&Jan 2018|||Jan 2020|||Jun 2020|||Sep 2018|||Feb 2018,[]
JS Versions,JS IE / Edge,https://www.w3schools.com/js/js_ie_edge.asp,"Internet Explorer is disabled in Windows 11|||Internet Explorer is ""replaced"" by Edge in Windows 10|||IE 11 goes out of support on June 15 2022|||Source ...|||Edge was the default browser for Windows 10.|||It was built with Microsoft's browser engine EdgeHTML and their Chakra JavaScript engine.|||The first versions of Edge (12-18), are now referred to as ""Edge Legacy"".The Microsoft support for Edge Legacy ended on March 9, 2021.Future Windows updates will replace Edge Legacy with The New Edge.Retirement dates published August 17, 2020:31-12-2020Azure DevOps Services stops supporting Edge Legacy09-03-2021End of Windows updates for Edge Legacy13-04-2021Future Windows updates will remove Edge LegacySource ...The New EdgeThe new Microsoft Edge is Chromium based with Blink and V8 engines.It was released in January 2020, and is available for Windows 7, 8, and 10.It can also be downloaded for macOS, iOS, and Android.The new Edge follows the Modern Lifecycle Policy (updates on an approx. six-week cycle).Developers Support?IE 11 is still a component of many Windows operating system and follows the Lifecycle Policyfor the product on which it is installed:SystemDefault BrowserWindows Embedded Compact 7Internet Explorer 7Windows Embedded Compact 2013Internet Explorer 7Windows 7Internet Explorer 11Windows 8.XInternet Explorer 11Windows 10Internet Explorer 11Windows Server 2012Internet Explorer 11Windows Server 2012 R2Internet Explorer 11Windows Server 2016Internet Explorer 11Windows Embedded Standard 7Internet Explorer 11Windows Embedded POSReady 7Internet Explorer 11Windows Thin PCInternet Explorer 11Windows Embedded 8 StandardInternet Explorer 11Windows 8.1 Industry UpdateInternet Explorer 11Older ApplicationsMany older PCs (like in public libraries) are still using Internet Explorer.Many legacy web applications are using Internet Explorer.Many legacy web applications are using Internet Explorer runtime DLLs.Many AJAX based applications are using Microsoft ActiveX components.In order to ease the migration from Internet Explorer,Microsoft Edge offers Internet Explorer Mode, providing backward compatibilityand enabling customers to continue to run legacy web applications.Government RecommendationsFurthermore, some governments recommends continuing to support IE11:www.gov.uk //// designing-for-different-browsers-and-devices❮ PreviousNext ❯|||The Microsoft support for Edge Legacy ended on March 9, 2021.|||Future Windows updates will replace Edge Legacy with The New Edge.|||Source ...|||The new Microsoft Edge is Chromium based with Blink and V8 engines.|||It was released in January 2020, and is available for Windows 7, 8, and 10.|||It can also be downloaded for macOS, iOS, and Android.|||The new Edge follows the Modern Lifecycle Policy (updates on an approx. six-week cycle).|||IE 11 is still a component of many Windows operating system and follows the Lifecycle Policyfor the product on which it is installed:|||Many older PCs (like in public libraries) are still using Internet Explorer.|||Many legacy web applications are using Internet Explorer.|||Many legacy web applications are using Internet Explorer runtime DLLs.|||Many AJAX based applications are using Microsoft ActiveX components.|||In order to ease the migration from Internet Explorer,Microsoft Edge offers Internet Explorer Mode, providing backward compatibilityand enabling customers to continue to run legacy web applications.|||Furthermore, some governments recommends continuing to support IE11:|||www.gov.uk //// designing-for-different-browsers-and-devices",Microsoft Edge Legacy,,,"Reported 15-06-2020:
Internet Explorer is ""replaced"" by Edge in Windows 10

Source ...
&&&Reported 15-06-2020:
IE 11 goes out of support on June 15 2022

Source ...
&&&30-11-2020|||MS Teams ends support for IE 11&&&31-12-2020|||Azure DevOps Services ends support for IE 11&&&31-03-2021|||Azure Portal ends support for IE 11&&&17-08-2021|||Microsoft ends support for IE 11 across web services:
Office 365 - OneDrive Outlook&&&15-06-2022|||Microsoft ends all support for IE 11&&&31-12-2020|||Azure DevOps Services stops supporting Edge Legacy&&&09-03-2021|||End of Windows updates for Edge Legacy&&&13-04-2021|||Future Windows updates will remove Edge Legacy$$$Windows Embedded Compact 7|||Internet Explorer 7&&&Windows Embedded Compact 2013|||Internet Explorer 7&&&Windows 7|||Internet Explorer 11&&&Windows 8.X|||Internet Explorer 11&&&Windows 10|||Internet Explorer 11&&&Windows Server 2012|||Internet Explorer 11&&&Windows Server 2012 R2|||Internet Explorer 11&&&Windows Server 2016|||Internet Explorer 11&&&Windows Embedded Standard 7|||Internet Explorer 11&&&Windows Embedded POSReady 7|||Internet Explorer 11&&&Windows Thin PC|||Internet Explorer 11&&&Windows Embedded 8 Standard|||Internet Explorer 11&&&Windows 8.1 Industry Update|||Internet Explorer 11",[]
JS Versions,JS History,https://www.w3schools.com/js/js_history.asp,"JavaScript was invented by Brendan Eich in 1995.|||It was developed for Netscape 2, and became the ECMA-262 standard in 1997.|||After Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser.Mozilla's latest version was 1.8.5. (Identical to ES5).|||Internet Explorer (IE4) was the first browser to support ECMA-262 Edition 1 (ES1).|||* Internet Explorer 9 did not support ES5 ""use strict"".|||** Internet Explorer 11 does not support ES6.|||In 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization,and a technical committee (TC39) was created to develop the language.|||ECMA-262 Edition 1 was released in June 1997.|||When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into2 very different camps:The ECMAScript 3.1 Camp:Microsoft and Yahoo who wanted an incremental upgrade from ES3.The ECMAScript 4 Camp:Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.August 13 2008, Brendan Eich wrote anemail:It's no secret that the JavaScript standards body, Ecma's Technical  Committee 39, has been split for over a year, with some members  favoring ES4, a major fourth edition to ECMA-262, and others  advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3)  specification. Now, I'm happy to report, the split is over.The solution was to work together:ECMAScript 4 was renamed to ES5ES5 should be an incremental upgrade of ECMAScript 3.Features of ECMAScript 4 should be picked up in later versions.TC39 should develop a new major release, bigger in scope than ES5.The planned new release (ES6) was codenamed ""Harmony"" (Because of the split it created?).ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fullycompliant by July 2013:Chrome 23IE10 / EdgeFirefox 21Safari 6Opera 15Nov 2012Sep 2012May 2013Jul 2012Jul 2013ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:Chrome 51Edge 14Firefox 52Safari 10Opera 38May 2016Aug 2016Mar 2017Sep 2016Jun 2016❮ PreviousNext ❯|||The ECMAScript 3.1 Camp:Microsoft and Yahoo who wanted an incremental upgrade from ES3.|||The ECMAScript 4 Camp:Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.|||August 13 2008, Brendan Eich wrote anemail:|||It's no secret that the JavaScript standards body, Ecma's Technical  Committee 39, has been split for over a year, with some members  favoring ES4, a major fourth edition to ECMA-262, and others  advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3)  specification. Now, I'm happy to report, the split is over.|||The solution was to work together:|||The planned new release (ES6) was codenamed ""Harmony"" (Because of the split it created?).|||ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fullycompliant by July 2013:|||ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:",,"ECMAScript 4 was renamed to ES5@@@ES5 should be an incremental upgrade of ECMAScript 3.@@@Features of ECMAScript 4 should be picked up in later versions.@@@TC39 should develop a new major release, bigger in scope than ES5.",,1995||| |||JavaScript was invented by Brendan Eich&&&1996||| |||Netscape 2 was released with JavaScript 1.0&&&1997||| |||JavaScript became an ECMA standard (ECMA-262)&&&1997|||ES1|||ECMAScript 1 was released&&&1997|||ES1|||IE 4 was the first browser to support ES1&&&1998|||ES2|||ECMAScript 2 was released&&&1998||| |||Netscape 42 was released with JavaScript 1.3&&&1999|||ES2|||IE 5 was the first browser to support ES2&&&1999|||ES3|||ECMAScript 3 was released&&&2000|||ES3|||IE 5.5 was the first browser to support ES3&&&2000||| |||Netscape 62 was released with JavaScript 1.5&&&2000||| |||Firefox 1 was released with JavaScript 1.5&&&2008|||ES4|||ECMAScript 4 was abandoned&&&2009|||ES5|||ECMAScript 5 was released&&&2011|||ES5|||IE 9 was the first browser to support ES5 *&&&2011|||ES5|||Firefox 4 was released with JavaScript 1.8.5&&&2012|||ES5|||Full support for ES5 in Safari 6&&&2012|||ES5|||Full support for ES5 in IE 10&&&2012|||ES5|||Full support for ES5 in Chrome 23&&&2013|||ES5|||Full support for ES5 in Firefox 21&&&2013|||ES5|||Full support for ES5 in Opera 15&&&2014|||ES5|||Full support for ES5 in all browsers&&&2015|||ES6|||ECMAScript 6 was released&&&2016|||ES6|||Full support for ES6 in Chrome 51&&&2016|||ES6|||Full support for ES6 in Opera 38&&&2016|||ES6|||Full support for ES6 in Edge 14&&&2016|||ES6|||Full support for ES6 in Safari 10&&&2015|||ES6|||Full support for ES6 in Firefox 52&&&2018|||ES6|||Full support for ES6 in all browsers **$$$&&&Chrome 23|||IE10 / Edge|||Firefox 21|||Safari 6|||Opera 15&&&Nov 2012|||Sep 2012|||May 2013|||Jul 2012|||Jul 2013$$$Chrome 51|||Edge 14|||Firefox 52|||Safari 10|||Opera 38&&&May 2016|||Aug 2016|||Mar 2017|||Sep 2016|||Jun 2016,[]
JS Objects,Object Definitions,https://www.w3schools.com/js/js_object_definition.asp,"In JavaScript, objects are king. If you understand objects, you understand JavaScript.|||In JavaScript, almost ""everything"" is an object.|||All JavaScript values, except primitives, are objects.|||A primitive value is a value that has no properties or methods.|||A primitive data type is data that has a primitive value.|||JavaScript defines 5 types of primitive data types:|||Primitive values are immutable (they are hardcoded and therefore cannot be changed).|||if x = 3.14, you can change the value of x. But you cannot change the value of 3.14.|||JavaScript variables can contain single values:|||JavaScript variables can also contain many values.|||Objects are variables too. But objects can contain many values. |||Object values are written as name : value pairs (name and value separated by a colon).|||A JavaScript object is a collection of named values|||It is a common practice to declare objects with the const keyword.|||The named values, in JavaScript objects, are called properties.|||Objects written as name value pairs are similar to:|||Methods are actions that can be performed on objects.|||Object properties can be both primitive values, other objects, and functions.|||An object method is an object property containing a function definition.|||JavaScript objects are containers for named values, called properties and methods.|||You will learn more about methods in the next chapters.|||With JavaScript, you can define and create your own objects.|||There are different ways to create new objects:|||This is the easiest way to create a JavaScript Object.|||Using an object literal, you both define and create an object in one statement.|||An object literal is a list of name:value pairs (like age:50) inside curly braces {}.|||The following example creates a new JavaScript object with four properties:|||Spaces and line breaks are not important. An object definition can span multiple lines:|||This example creates an empty JavaScript object, and then adds 4 properties:|||The following example create a new JavaScript objectusing new Object(), and then adds 4 properties:|||The examples above do exactly the same.|||But there is no need to use new Object().|||For readability, simplicity and execution speed, use the object literal method.|||Objects are mutable: They are addressed by reference, not by value.|||If person is an object, the following statement will not create a copy of person:|||The object x is not a copy of person. It is person. Both x and person are the same object.|||Any changes to x will also change person, because x and person are the same object. ",,"Booleans can be objects (if defined with the new keyword)@@@Numbers can be objects (if defined with the new keyword)@@@Strings can be objects (if defined with the new keyword)@@@Dates are always objects@@@Maths are always objects@@@Regular expressions are always objects@@@Arrays are always objects@@@Functions are always objects@@@Objects are always objects|||string@@@number@@@boolean@@@null@@@undefined|||Associative arrays in PHP@@@Dictionaries in Python@@@Hash tables in C@@@Hash maps in Java@@@Hashes in Ruby and Perl|||Create a single object, using an object literal.@@@Create a single object, with the keyword new.@@@Define an object constructor, and then create objects of the constructed type.@@@Create an object using Object.create().",,"""Hello""|||string|||""Hello"" is always ""Hello""&&&3.14|||number|||3.14 is always 3.14&&&true|||boolean|||true is always true&&&false|||boolean|||false is always false&&&null|||null (object)|||null is always null&&&undefined|||undefined|||undefined is always undefined$$$&&&firstName|||John&&&lastName|||Doe&&&age|||50&&&eyeColor|||blue$$$firstName|||John&&&lastName|||Doe&&&age|||50&&&eyeColor|||blue&&&fullName|||function() {return this.firstName + "" "" + this.lastName;}",[]
JS Objects,Object Properties,https://www.w3schools.com/js/js_object_properties.asp,"Properties are the most important part of any JavaScript object.|||Properties are the values associated with a JavaScript object.|||A JavaScript object is a collection of unordered properties.|||Properties can usually be changed, added, and deleted, but some are read only.|||The syntax for accessing the property of an object is:|||or|||or|||The expression must evaluate to a property name.|||The JavaScript for...in statement loops through the properties of an object.|||The block of code inside of the for...in loop will be executed once for each property.|||Looping through the properties of an object:|||You can add new properties to an existing object by simply giving it a value. |||Assume that the person object already exists -you can then give it new properties:|||The delete keyword deletes a property from an object:|||or delete person[""age""];|||The delete keyword deletes both the value of the property and the property itself.|||After deletion, the property cannot be used before it is added back again.|||The delete operator is designed to be used on object properties. It has no effect on variables or functions. |||The delete operator should not be used on predefined JavaScript object properties. It can crash your application.Nested ObjectsValues in an object can be another object:ExamplemyObj = {  name:""John"",  age:30,      cars: {    car1:""Ford"",        car2:""BMW"",    car3:""Fiat""    }}  You can access nested objects using the dot notation or the bracket notation:ExamplemyObj.cars.car2;Try it Yourself »or:ExamplemyObj.cars[""car2""];Try it Yourself »or:ExamplemyObj[""cars""][""car2""];Try it Yourself »or:Examplelet p1 = ""cars"";let p2 = ""car2"";myObj[p1][p2];Try it Yourself »Nested Arrays and ObjectsValues in objects can be arrays, and values in arrays can be objects:Exampleconst myObj =  {  name: ""John"",  age: 30,      cars: [    {name:""Ford"",   models:[""Fiesta"", ""Focus"", ""Mustang""]},      {name:""BMW"", models:[""320"", ""X3"", ""X5""]},        {name:""Fiat"", models:[""500"", ""Panda""]}    ]}To access arrays inside arrays, use a for-in loop for each array:Examplefor (let i in myObj.cars) {  x += ""<h1>"" + myObj.cars[i].name   + ""</h1>"";  for (let j in myObj.cars[i].models) {      x += myObj.cars[i].models[j];  }}Try it Yourself »Property AttributesAll properties have a name. In addition they also have a value.The value is one of the property's attributes.Other attributes are: enumerable, configurable, and writable.These attributes define how the property can be accessed (is it readable?, is it writable?)In JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable).( ECMAScript 5 has methods for both getting and setting all property attributes)Prototype PropertiesJavaScript objects inherit the properties of their prototype. The delete keyword does not delete inherited properties, but if you delete a prototype property, it will affect all objects inherited from the prototype.❮ PreviousNext ❯|||Values in an object can be another object:|||You can access nested objects using the dot notation or the bracket notation:|||or:|||or:|||or:|||Values in objects can be arrays, and values in arrays can be objects:|||To access arrays inside arrays, use a for-in loop for each array:|||All properties have a name. In addition they also have a value.|||The value is one of the property's attributes.|||Other attributes are: enumerable, configurable, and writable.|||These attributes define how the property can be accessed (is it readable?, is it writable?)|||In JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable).|||( ECMAScript 5 has methods for both getting and setting all property attributes)|||JavaScript objects inherit the properties of their prototype. |||The delete keyword does not delete inherited properties, but if you delete a prototype property, it will affect all objects inherited from the prototype.",,,,,[]
JS Objects,Object Methods,https://www.w3schools.com/js/js_object_methods.asp,"In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||The JavaScript this Tutorial|||JavaScript methods are actions that can be performed on objects.|||A JavaScript method is a property containing a function definition.|||Methods are functions stored as object properties.|||You access an object method with the following syntax:|||You will typically describe fullName() as a method of the person object, and fullName as a property. |||The fullName property will execute (as a function) when it is invoked with ().|||This example accesses the fullName() method of a person object:|||If you access the fullName property, without (), it will return the function definition:|||Adding a new method to an object is easy: |||This example uses the toUpperCase() method of the String object, to convert a text to uppercase:|||The value of x, after execution of the code above will be:",,,,"Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.$$$firstName|||John&&&lastName|||Doe&&&age|||50&&&eyeColor|||blue&&&fullName|||function() {return this.firstName + "" "" + this.lastName;}",[]
JS Objects,Object Display,https://www.w3schools.com/js/js_object_display.asp,"Displaying a JavaScript object will output [object Object].|||Some common solutions to display JavaScript objects are:Displaying the Object Properties by nameDisplaying the Object Properties in a LoopDisplaying the Object using Object.values()Displaying the Object using JSON.stringify()|||The properties of an object can be displayed as a string:|||The properties of an object can be collected in a loop:|||You must use person[x] in the loop.|||person.x will not work (Because x is a variable).|||Any JavaScript object can be converted to an array using Object.values():|||myArray is now a JavaScript array, ready to be displayed:|||Object.values() is supported in all major browsers since 2016.|||Any JavaScript object can be stringified (converted to a string) with the JavaScript functionJSON.stringify():|||myString is now a JavaScript string, ready to be displayed:|||The result will be a string following the JSON notation:|||{""name"":""John"",""age"":50,""city"":""New York""}|||JSON.stringify() is included in JavaScript and supported in all major browsers.|||JSON.stringify converts dates into strings:|||JSON.stringify will not stringify functions:|||This can be ""fixed"" if you convert the functions into strings before stringifying.|||It is also possible to stringify JavaScript arrays:|||The result will be a string following the JSON notation:|||[""John"",""Peter"",""Sally"",""Jane""]",,Displaying the Object Properties by name@@@Displaying the Object Properties in a Loop@@@Displaying the Object using Object.values()@@@Displaying the Object using JSON.stringify(),,54 (2016)|||14 (2016)|||47 (2016)|||10 (2016)|||41 (2016),[]
JS Objects,Object Accessors,https://www.w3schools.com/js/js_object_accessors.asp,"ECMAScript 5 (ES5 2009) introduced Getter and Setters.|||Getters and setters allow you to define Object Accessors (Computed Properties).|||This example uses a lang property to get the value of the language property.|||This example uses a lang property to set the value of the language property.|||What is the differences between these two examples?|||Example 1 access fullName as a function: person.fullName().|||Example 2 access fullName as a property: person.fullName.|||The second example provides a simpler syntax.|||JavaScript can secure better data quality when using getters and setters.|||Using the lang property, in this example, returns the value of the language property in upper case:|||Using the lang property, in this example, stores an upper case value in the language property:|||The Object.defineProperty() method can also be used to add Getters and Setters:",Why Using Getters and Setters?,It gives simpler syntax@@@It allows equal syntax for properties and methods@@@It can secure better data quality@@@It is useful for doing things behind-the-scenes,,,[]
JS Objects,Object Constructors,https://www.w3schools.com/js/js_object_constructors.asp,"It is considered good practice to name constructor functions with an upper-case first letter.|||In a constructor function this does not have a value.It is a substitute for the new object. The value of this will become the new object when a new object is created.|||The JavaScript this Tutorial|||The examples from the previous chapters are limited. They only create single objects.|||Sometimes we need a ""blueprint"" for creating many objects of the same ""type"".|||The way to create an ""object type"", is to use an object constructor function.|||In the example above, function Person() is an object constructor function.|||Objects of the same type are created by calling the constructor function with the new keyword:|||In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||The JavaScript this Tutorial|||Adding a new property to an existing object is easy: |||The property will be added to myFather. Not to myMother. (Not to any other person objects).|||Adding a new method to an existing object is easy: |||The method will be added to myFather. Not to myMother. (Not to any other person objects).|||You cannot add a new property to an object constructor the same way you add a new property to an existing object:|||To add a new property to a constructor, you must add it to the constructor function:|||This way object properties can have default values.|||Your constructor function can also define methods:|||You cannot add a new method to an object constructor the same way you add a new method to an existing object.|||Adding methods to an object constructor must be done inside the constructor function:|||The changeName() function assigns the value of name to the person's lastName property.|||JavaScript knows which person you are talking about by ""substituting"" this with myMother.|||JavaScript has built-in constructors for native objects:|||The Math() object is not in the list. Math is a global object. The new keyword cannot be used on Math.|||As you can see above, JavaScript has object versions of the primitive data types String, Number, and Boolean. But there is no reason to create complex objects. Primitive values are much faster:|||Use string literals """" instead of new String().|||Use number literals 50 instead of new Number().|||Use boolean literals true / false instead of new Boolean().|||Use object literals {} instead of new Object().|||Use array literals [] instead of new Array().|||Use pattern literals /()/ instead of new RegExp().|||Use function expressions () {} instead of new Function().|||Normally, strings are created as primitives: firstName = ""John""|||But strings can also be created as objects using the new keyword:firstName = new String(""John"")|||Learn why strings should not be created as object in the chapterJS Strings. |||Normally, numbers are created as primitives: x = 30|||But numbers can also be created as objects using the new keyword:x = new Number(30)|||Learn why numbers should not be created as object in the chapterJS Numbers. |||Normally, booleans are created as primitives: x = false|||But booleans can also be created as objects using the new keyword:x = new Boolean(false)|||Learn why booleans should not be created as object in the chapterJS Booleans. ",,,,"Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.",[]
JS Objects,Object Prototypes,https://www.w3schools.com/js/js_object_prototypes.asp,"All JavaScript objects inherit properties and methods from a prototype.|||In the previous chapter we learned how to use an object constructor:|||We also learned that you can not add a new property to an existing object constructor:|||To add a new property to a constructor, you must add it to the constructor function:|||All JavaScript objects inherit properties and methods from a prototype:|||The Object.prototype is on the top of the prototype inheritance chain:|||Date objects, Array objects, and Person objects inherit from Object.prototype.|||Sometimes you want to add new properties (or methods) to all existing objects of a given type.|||Sometimes you want to add new properties (or methods) to an object constructor.|||The JavaScript prototype property allows you to add new properties to object constructors:|||The JavaScript prototype property also allows you to add new methods to objects constructors:|||Only modify your own prototypes. Never modify the prototypes of  standard JavaScript objects.",,Date objects inherit from Date.prototype@@@Array objects inherit from Array.prototype@@@Person objects inherit from Person.prototype,,,[]
JS Objects,Object Iterables,https://www.w3schools.com/js/js_object_iterables.asp,"Iterable objects are objects that can be iterated over with for..of.|||Technically, iterables must implement the Symbol.iterator method.|||You can use a for..of loop to iterate over the elements of a string:|||You can use a for..of loop to iterate over the elements of an Array:|||The iterator protocol defines how to produce a sequence of values from an object.|||An object becomes an iterator when it implements a next() method.|||The next() method must return an object with two properties:value (the next value)done (true or false)valueThe value returned by the iterator(Can be omitted if done is true)donetrue if the iterator has completedfalse if the iterator has produced a new valueHome Made IterableThis iterable returns never ending: 10,20,30,40,.... Everytime next() is called:Example// Home Made Iterablefunction myNumbers() {  let n = 0;  return {    next: function() {      n += 10;      return {value:n, done:false};    }  };}// Create Iterableconst n = myNumbers();n.next(); // Returns 10n.next(); // Returns 20n.next(); // Returns 30Try it Yourself »The problem with a home made iterable:It does not support the JavaScript for..of statement.A JavaScript iterable is an object that has a Symbol.iterator.The Symbol.iterator is a function that returns a next() function.An iterable can be iterated over with the code: for (const x of iterable) { }Example// Create an ObjectmyNumbers = {};// Make it IterablemyNumbers[Symbol.iterator] = function() {  let n = 0;  done = false;  return {    next() {      n += 10;      if (n == 100) {done = true}      return {value:n, done:done};    }  };}Now you can use for..offor (const num of myNumbers) {  // Any Code Here}Try it Yourself »The Symbol.iterator method is called automatically by for..of.But we can also do it ""manually"":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {  const result = iterator.next();  if (result.done) break;  // Any Code Here}Try it Yourself »❮ PreviousNext ❯|||This iterable returns never ending: 10,20,30,40,.... Everytime next() is called:|||The problem with a home made iterable:|||It does not support the JavaScript for..of statement.|||A JavaScript iterable is an object that has a Symbol.iterator.|||The Symbol.iterator is a function that returns a next() function.|||An iterable can be iterated over with the code: for (const x of iterable) { }Example// Create an ObjectmyNumbers = {};// Make it IterablemyNumbers[Symbol.iterator] = function() {  let n = 0;  done = false;  return {    next() {      n += 10;      if (n == 100) {done = true}      return {value:n, done:done};    }  };}Now you can use for..offor (const num of myNumbers) {  // Any Code Here}Try it Yourself »The Symbol.iterator method is called automatically by for..of.But we can also do it ""manually"":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {  const result = iterator.next();  if (result.done) break;  // Any Code Here}Try it Yourself »❮ PreviousNext ❯|||Now you can use for..of|||The Symbol.iterator method is called automatically by for..of.But we can also do it ""manually"":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {  const result = iterator.next();  if (result.done) break;  // Any Code Here}Try it Yourself »❮ PreviousNext ❯|||But we can also do it ""manually"":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {  const result = iterator.next();  if (result.done) break;  // Any Code Here}Try it Yourself »❮ PreviousNext ❯",,value (the next value)@@@done (true or false),,"
true if the iterator has completed
false if the iterator has produced a new value",[]
JS Objects,Object Sets,https://www.w3schools.com/js/js_object_sets.asp,"A JavaScript Set is a collection of unique values.|||Each value can only occur once in a Set.|||A Set can hold any value of any data type.|||You can create a JavaScript Set by:|||Pass an Array to the new Set() constructor:|||Create a Set and add literal values:|||Create a Set and add variables:|||If you add equal elements, only the first will be saved:|||The forEach() method invokes a function for each Set element:|||The values() method returns an Iterator object containing all the values in a Set:|||Now you can use the Iterator object to access the elements:|||A Set has no keys.|||keys() returns the same asvalues().|||This makes Sets compatible with Maps.|||A Set has no keys.|||entries() returns [value,value] pairsinstead of [key,value] pairs.|||This makes Sets compatible with Maps:|||For a Set, typeof returns object:|||For a Set, instanceof Set returns true:",,Passing an Array to new Set()@@@Create a new Set and use add() to add values@@@Create a new Set and use add() to add variables,,"new Set()|||Creates a new Set&&&add()|||Adds a new element to the Set&&&delete()|||Removes an element from a Set&&&has()|||Returns true if a value exists&&&clear()|||Removes all elements from a Set&&&forEach()|||Invokes a callback for each element&&&values()|||Returns an Iterator with all the values in a Set&&&keys()|||Same as values()&&&entries()|||Returns an Iterator with the [value,value] pairs from a Set$$$size|||Returns the number elements in a Set",[]
JS Objects,Object Maps,https://www.w3schools.com/js/js_object_maps.asp,"A Map holds key-value pairs where the keys can be any datatype.|||A Map remembers the original insertion order of the keys.|||A Map has a property that represents the size of the map.|||You can create a JavaScript Map by:|||You can create a Map by passing an Array to the new Map() constructor:|||You can add elements to a Map with the set() method:|||The set() method can also be used to change existing Map values:|||The get() method gets the value of a key in a Map:|||The size property returns the number of elements in a Map:|||The delete() method removes a Map element:|||The clear() method removes all the elements from a Map:|||The has() method returns true if a key exists in a Map:|||typeof returns object:|||instanceof Map returns true:|||The forEach() method invokes a callback for each key/value pair in a Map:|||The keys() method returns an iterator object with the keys in a Map:|||The values method returns an iterator object with the values in a Map:|||The entries() method returns an iterator object with the [key,values] in a Map:|||Being able to use objects as keys is an important Map feature.|||Remember: The key is an object (apples), not a string (""apples""):|||JavaScript Maps are supported in all browsers, except Internet Explorer:",,Passing an Array to new Map()@@@Create a Map and use Map.set(),,"new Map()|||Creates a new Map object&&&set()|||Sets the value for a key in a Map&&&get()|||Gets the value for a key in a Map&&&clear()|||Removes all the elements from a Map&&&delete()|||Removes a Map element specified by a key&&&has()|||Returns true if a key exists in a Map&&&forEach()|||Invokes a callback for each key/value pair in a Map&&&entries()|||Returns an iterator object with the [key, value] pairs in a Map&&&keys()|||Returns an iterator object with the keys in a Map&&&values()|||Returns an iterator object of the values in a Map$$$&&&size|||Returns the number of Map elements$$$&&&Not directly iterable|||Directly iterable&&&Do not have a size property|||Have a size property&&&Keys must be Strings (or Symbols)|||Keys can be any datatype&&&Keys are not well ordered|||Keys are ordered by insertion&&&Have default keys|||Do not have default keys$$$Chrome|||Edge|||Firefox|||Safari|||Opera",[]
JS Objects,Object Reference,https://www.w3schools.com/js/js_object_es5.asp,ECMAScript 5 (2009) added a lot of new Object Methods to JavaScript.|||This example changes a property value:|||ES5 allows the following property meta data to be changed:|||ES5 allows getters and setters to be changed:|||This example makes language read-only:|||This example makes language not enumerable:|||This example list all properties of an object:|||This example list only the enumerable properties of an object:|||This example adds a new property to an object:|||The Object.defineProperty() method can also be used to add Getters and Setters:,,,,,[]
JS Functions,Function Definitions,https://www.w3schools.com/js/js_function_definition.asp,"JavaScript functions are defined with thefunction keyword.|||You can use a function declaration or a function expression.|||Earlier in this tutorial, you learned that functions are declared with the following syntax:|||Declared functions are not executed immediately. They are ""saved for later use"", and will be executed later, when they are invoked (called upon).|||Semicolons are used to separate executable JavaScript statements.Since a function declaration is not an executable statement, it is not common to end it with a semicolon.|||A JavaScript function can also be defined using an expression.|||A function expression can be stored in a variable:|||After a function expression has been stored in a variable, the variable can be used as a function:|||The function above is actually an anonymous function (a function without a name).|||Functions stored in variables do not need function names. They are always invoked (called) using the variable name.|||The function above ends with a semicolon because it is a part of an executable statement.|||As you have seen in the previous examples, JavaScript functions are defined with the function keyword.|||Functions can also be defined with a built-in JavaScript function constructor called Function().|||You actually don't have to use the function constructor. The example above is the same as writing:|||Most of the time, you can avoid using the new keyword in JavaScript.|||Earlier in this tutorial, you learned about ""hoisting"" (JavaScript Hoisting).|||Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope.|||Hoisting applies to variable declarations and to function declarations.|||Because of this, JavaScript functions can be called before they are declared:|||Functions defined using an expression are not hoisted.|||Function expressions can be made ""self-invoking"".|||A self-invoking expression is invoked (started) automatically, without being called.|||Function expressions will execute automatically if the expression is followed by ().|||You cannot self-invoke a function declaration.|||You have to add parentheses around the function to indicate that it is a function expression:|||The function above is actually an anonymous self-invoking function (function without name).|||JavaScript functions can be used as values:|||JavaScript functions can be used in expressions:|||The typeof operator in JavaScript returns ""function"" for functions.|||But, JavaScript functions can best be described as objects.|||JavaScript functions have both properties and methods.|||The arguments.length property returns the number of arguments received when the function was invoked:|||The toString() method returns the function as a string:|||A function defined as the property of an object, is called a method to the object.A function designed to create new objects, is called an object constructor.|||Arrow functions allows a short syntax for writing function expressions.|||You don't need the function keyword, the return keyword, and the curly brackets.|||Arrow functions do not have their own this.They are not well suited for defining object methods.|||Arrow functions are not hoisted. They must be defined before they are used.|||Using constis safer than using var, because a function expression is always constant value.|||You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:|||Arrow functions are not supported in IE11 or earlier.",,,,,[]
JS Functions,Function Parameters,https://www.w3schools.com/js/js_function_parameters.asp,"A JavaScript function does not perform any checking on parameter values (arguments).|||Earlier in this tutorial, you learned that functions can have parameters:|||Function parameters are the names listed in the function definition.|||Function arguments are the real values passed to (and received by) the function.|||JavaScript function definitions do not specify data types for parameters.|||JavaScript functions do not perform type checking on the passed arguments.|||JavaScript functions do not check the number of arguments received.|||If a function is called with missing arguments (less than declared), the missing values are set toundefined.|||Sometimes this is acceptable, but sometimes it is better to assign a default value to the parameter:|||ECMAScript 2015 allows default parameter values in the function declaration:function myFunction(x, y = 2) {  // function code}Try it Yourself »|||JavaScript functions have a built-in object called the arguments object.|||The argument object contains an array of the arguments used when the function was called (invoked).|||This way you can simply use a function to find (for instance) the highest value in a list of numbers:|||Or create a function to sum all input values:|||If a function is called with too many arguments (more than declared),these arguments can be reached using the arguments object.|||The parameters, in a function call, are the function's arguments.|||JavaScript arguments are passed by value: The function only gets to know the values, not the argument's locations.|||If a function changes an argument's value, it does not change the parameter's original value.|||Changes to arguments are not visible (reflected) outside the function.|||In JavaScript, object references are values.|||Because of this, objects will behave like they are passed by reference:|||If a function changes an object property, it changes the original value.|||Changes to object properties are visible (reflected) outside the function.",,,,,[]
JS Functions,Function Invocation,https://www.w3schools.com/js/js_function_invocation.asp,"The code inside a JavaScript function will execute when ""something"" invokes it.|||The code inside a function is not executed when the function is defined.|||The code inside a function is executed when the function is invoked.|||It is common to use the term ""call a function"" instead of ""invoke a function"".|||It is also common to say ""call upon a function"", ""start a function"", or ""execute a function"".|||In this tutorial, we will use invoke, because a JavaScript function can be invoked without being called.|||The function above does not belong to any object. But in JavaScript there is always a default global object.|||In HTML the default global object is the HTML page itself, so the function above ""belongs"" to the HTML page.|||In a browser the page object is the browser window. The function above automatically becomes a window function.|||This is a common way to invoke a JavaScript function, but not a very good practice.Global variables, methods, or functions can easily create name conflicts and bugs in the global object.|||myFunction() and window.myFunction() is the same function:|||In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||The JavaScript this Tutorial|||When a function is called without an owner object, the value of this becomes the global object.|||In a web browser the global object is the browser window.|||This example returns the window object as the value of this:|||Invoking a function as a global function, causes the value of this to be the global object.Using the window object as a variable can easily crash your program.|||In JavaScript you can define functions as object methods.|||The following example creates an object (myObject), with two properties (firstName and lastName), and a method (fullName):|||The fullName method is a function. The function belongs to the object. myObject is the owner of the function.|||The thing called this, is the object that ""owns"" the JavaScript code. In this case the value of this is myObject. |||Test it! Change the fullName method to return the value of this:|||Invoking a function as an object method, causes the value of this to be the object itself.|||If a function invocation is preceded with the new keyword, it is a constructor invocation.|||It looks like you create a new function, but since JavaScript functions are objects you actually create a new object:|||A constructor invocation creates a new object. The new object inherits the properties and methods from its constructor. |||The this keyword in the constructor does not have a value.The value of this will be the new object created when the function is invoked.",,,,"Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.",[]
JS Functions,Function Call,https://www.w3schools.com/js/js_function_call.asp,"With the call() method, you can write a method that can be used on different objects. |||In JavaScript all functions are object methods.|||If a function is not a method of a JavaScript object, it is a function of the global object (see previous chapter). |||The example below creates an object with 3 properties, firstName, lastName, fullName.|||In the example above, this refers to the person object.|||I.E. this.firstName means the firstName property of this.|||I.E. this.firstName means the firstName property of person.|||In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||The JavaScript this Tutorial|||The call() method is a predefined JavaScript method.|||It can be used to invoke (call) a method with an owner object as an argument (parameter).|||With call(), an object can use a method belonging to another object.|||This example calls the fullName method of person, using it on person1:|||Try it Yourself »|||This example calls the fullName method of person, using it onperson2:|||Try it Yourself »|||The call() method can accept arguments:|||Try it Yourself »",,,,"Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.",[]
JS Functions,Function Apply,https://www.w3schools.com/js/js_function_apply.asp,"With the apply() method, you can write a method that can be used on different objects.|||The apply() method is similar to the call() method (previous chapter).|||In this example the fullName method of person is applied on person1:|||Try it Yourself »|||The difference is:|||The call() method takes arguments separately.|||The apply() method takes arguments as an array.|||The apply() method is very handy if you want to use an array instead of an argument list.|||The apply() method accepts arguments in an array:|||Try it Yourself »|||Compared with the call() method:|||Try it Yourself »|||You can find the largest number (in a list of numbers) using the Math.max() method:|||Try it Yourself »|||Since JavaScript arrays do not have a max() method, you can apply the Math.max() method instead.|||Try it Yourself »|||The first argument (null) does not matter. It is not used in this example.|||These examples will give the same result:|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||In JavaScript strict mode, if the first argument of the apply() method is not an object,it becomes the owner (object) of the invoked function.In ""non-strict"" mode, it becomes the global object.",,,,,[]
JS Functions,Function Bind,https://www.w3schools.com/js/js_function_bind.asp,"With the bind() method, an object can borrow a method from another object.|||The example below creates 2 objects (person and member).|||The member object borrows the fullname method from the person object:|||Sometimes the bind() method has to be used to prevent loosing this.|||In the following example, the person object has a display method. In the display method, this refers to the person object:|||When a function is used as a callback, this is lost.|||This example will try to display the person name after 3 seconds, but it will display undefined instead:|||The bind() method solves this problem.|||In the following example, the bind() method is used to bind person.display to person.|||This example will display the person name after 3 seconds:|||In JavaScript, the this keyword refers to an object.|||Which object depends on how this is being invoked (used or called).|||The this keyword refers to different objects depending on how it is used:|||The JavaScript this Tutorial",,,,"Alone, this refers to the global object.&&&In a function, this refers to the global object.&&&In a function, in strict mode, this is undefined.&&&In an event, this refers to the element that received the event.&&&Methods like call(), apply(),
and bind() can refer this to any object.",[]
JS Functions,Function Closures,https://www.w3schools.com/js/js_function_closures.asp,"JavaScript variables can belong to the local orglobal scope.|||Global variables can be made local (private) with closures.|||A function can access all variables defined inside the function, like this:|||But a function can also access variables defined outside the function, like this:|||In the last example, a is a global variable. |||In a web page, global variables belong to the window object.|||Global variables can be used (and changed) by all scripts in the page (and in the window). |||In the first example, a is a local variable.|||A local variable can only be used inside the function where it is defined. It is hidden from other functions and other scripting code.|||Global and local variables with the same name are  different variables. Modifying one, does not modify the other. |||Variables created without a declaration keyword (var,let, or const) are always global, even if they are created inside a function.|||Global variables live until the page is discarded, like when you navigate to another page or close the window.|||Local variables have short lives. They are created when the function is invoked, and deleted when the function is finished.|||Suppose you want to use a variable for counting something, and you want this counter to be available to all functions.|||You could use a global variable, and a function to increase the counter:|||There is a problem with the solution above: Any code on the page can change the counter, without calling add().|||The counter should be local to the add() function, to prevent other code from changing it:|||It did not work because we display the global counter instead of the local counter.|||We can remove the global counter and access the local counter by letting the function return it:|||It did not work because we reset the local counter every time we call the function.||| A JavaScript inner function can solve this.|||All functions have access to the global scope.   |||In fact, in JavaScript, all functions have access to the scope ""above"" them.|||JavaScript supports nested functions. Nested functions have access to the scope ""above"" them. |||In this example, the inner function plus() has access to the counter variable in the parent function:|||This could have solved the counter dilemma, if we could reach the plus() function from the outside.|||We also need to find a way to execute counter = 0 only once.|||We need a closure.|||Remember self-invoking functions? What does this function do?|||The variable add is assigned to the return value of a self-invoking function.|||The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.|||This way add becomes a function. The ""wonderful"" part is that it can access the counter in the parent scope. |||This is called a JavaScript closure. It makes it possible for a function to have ""private"" variables.|||The counter is protected by the scope of the anonymous function, and can only be changed using the add function.|||A closure is a function having access to the parent scope, even after the parent function has closed.",,,,,[]
JS Classes,Class Intro,https://www.w3schools.com/js/js_class_intro.asp,"ECMAScript 2015, also known as ES6, introduced JavaScript Classes.|||JavaScript Classes are templates for JavaScript Objects.|||Use the keyword class to create a class.|||Always add a method named constructor():|||The example above creates a class named ""Car"".|||The class has two initial properties: ""name"" and ""year"".|||A JavaScript class is not an object.|||It is a template for JavaScript objects.|||When you have a class, you can use the class to create objects:|||Try it Yourself »|||The example above uses the Car class to create two Car objects.|||The constructor method is called automatically when a new object is created.|||The constructor method is a special method:|||If you do not define a constructor method, JavaScript will add an empty constructor method.|||Class methods are created with the same syntax as object methods.|||Use the keyword class to create a class.|||Always add a constructor() method.|||Then add any number of methods.|||Create a Class method named ""age"", that returns the Car age:|||Try it Yourself »|||You can send parameters to Class methods:|||Try it Yourself »|||The following table defines the first browser version with full support for Classes in JavaScript: |||The syntax in classes must be written in ""strict mode"".|||You will get an error if you do not follow the ""strict mode"" rules.|||In ""strict mode"" you will get an error if you use a variable without declaring it:|||Learn more about ""strict mode"" in: JS Strict Mode.",Browser Support,"It has to have the exact name ""constructor""@@@It is executed automatically when a new object is created@@@It is used to initialize object properties",,"Chrome 49|||Edge 12|||Firefox 45|||Safari 9|||Opera 36&&&Mar, 2016|||Jul, 2015|||Mar, 2016|||Oct, 2015|||Mar, 2016",[]
JS Classes,Class Inheritance,https://www.w3schools.com/js/js_class_inheritance.asp,"To create a class inheritance, use the extends keyword.|||A class created with a class inheritance inherits all the methods from another class:|||Create a class named ""Model"" which will inherit the methods from the ""Car"" class:|||Try it Yourself »|||The super() method refers to the parent class.|||By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.|||Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.|||Classes also allows you to use getters and setters.|||It can be smart to use getters and setters for your properties, especially if you want to do something special with the value before returning them, or before you set them.|||To add getters and setters in the class, use the get and set keywords.|||Create a getter and a setter for the ""carname"" property:|||Try it Yourself »|||Note: even if the getter is a method, you do not use parentheses when you want to get the property value.|||The name of the getter/setter method cannot be the same as the name of the property, in this case carname.|||Many programmers use an underscore character _ before the property name to separate the getter/setter from the actual property:ExampleYou can use the underscore character to separate the getter/setter from the actual property:  class Car {  constructor(brand) {    this._carname   = brand;  }  get carname() {      return this._carname;  }  set carname(x) {      this._carname = x;  }}let myCar = new Car(""Ford"");  document.getElementById(""demo"").innerHTML = myCar.carname;Try it Yourself »To use a setter, use the same syntax as when you set a property value, without parentheses:ExampleUse a setter to change the carname to ""Volvo"":  class Car {  constructor(brand) {    this._carname   = brand;  }  get carname() {      return this._carname;  }  set carname(x) {      this._carname = x;  }}let myCar = new Car(""Ford"");  myCar.carname = ""Volvo"";  document.getElementById(""demo"").innerHTML = myCar.carname;Try it Yourself »HoistingUnlike functions, and other JavaScript declarations, class declarations are not hoisted.That means that you must declare a class before you can use it:Example  //You cannot use the class yet.//myCar = new Car(""Ford"")//This would   raise an error.class Car {   constructor(brand) {    this.carname = brand;   }}//Now you can use the class:let myCar = new Car(""Ford"")Try it Yourself »Note: For other declarations, like functions, you will NOT get an error when you try to use it before it is declared, because the default behavior of JavaScript declarations are hoisting (moving the declaration to the top).❮ PreviousNext ❯|||Many programmers use an underscore character _ before the property name to separate the getter/setter from the actual property:|||You can use the underscore character to separate the getter/setter from the actual property:|||Try it Yourself »|||To use a setter, use the same syntax as when you set a property value, without parentheses:|||Use a setter to change the carname to ""Volvo"":|||Try it Yourself »|||Unlike functions, and other JavaScript declarations, class declarations are not hoisted.|||That means that you must declare a class before you can use it:|||Note: For other declarations, like functions, you will NOT get an error when you try to use it before it is declared, because the default behavior of JavaScript declarations are hoisting (moving the declaration to the top).",,,,,[]
JS Classes,Class Static,https://www.w3schools.com/js/js_class_static.asp,"Static class methods are defined on the class itself.|||You cannot call a static method on an object, only on an object class.||||||Try it Yourself »|||If you want to use the myCar object inside the static method, you can send it as a parameter:|||Try it Yourself »",,,,,[]
JS Async,JS Callbacks,https://www.w3schools.com/js/js_callback.asp,"""I will call back later!""|||A callback is a function passed as an argument to another function|||This technique allows a function to call another function|||A callback function can run after another function has finished|||JavaScript functions are executed in the sequence they are called.Not in the sequence they are defined.|||This example will end up displaying ""Goodbye"":|||Try it Yourself »|||This example will end up displaying ""Hello"":|||Try it Yourself »|||Sometimes you would like to have better control over when to execute a function.|||Suppose you want to do a calculation, and then display the result.|||You could call a calculator function (myCalculator), save the result,and then call another function (myDisplayer) to display the result:|||Try it Yourself »|||Or, you could call a calculator function (myCalculator),and let the calculator function call the display function (myDisplayer):|||Try it Yourself »|||The problem with the first example above, is that you have to call two functions to display the result.|||The problem with the second example, is that you cannot prevent the calculator function from displaying the result.|||Now it is time to bring in a callback.|||A callback is a function passed as an argument to another function.|||Using a callback, you could call the calculator function (myCalculator)with a callback, and let the calculator function run the callback after the calculation is finished:|||Try it Yourself »|||In the example above, myDisplayer is the name of a function.|||It is passed to myCalculator() as an argument.|||When you pass a function as an argument, remember not to use parenthesis.|||Right: myCalculator(5, 5, myDisplayer);|||Wrong: myCalculator(5, 5, myDisplayer());|||The examples above are not very exciting.|||They are simplified to teach you the callback syntax.|||Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load).|||Asynchronous functions are covered in the next chapter.",Sequence Control,,,,[]
JS Async,JS Asynchronous,https://www.w3schools.com/js/js_asynchronous.asp,"""I will finish later!""|||Functions running in parallel with other functions are called asynchronous|||A good example is JavaScript setTimeout()|||The examples used in the previous chapter, was very simplified.|||The purpose of the examples was to demonstrate the syntax of callback functions:|||Try it Yourself »|||In the example above, myDisplayer is the name of a function.|||It is passed to myCalculator() as an argument.|||In the real world, callbacks are most often used with asynchronous functions.|||A typical example is JavaScript setTimeout().|||When using the JavaScript function setTimeout(),you can specify a callback function to be executed on time-out:|||Try it Yourself »|||In the example above, myFunction is used as a callback.|||myFunction is passed to setTimeout() as an argument.|||3000 is the number of milliseconds before time-out, somyFunction() will be called after 3 seconds.|||When you pass a function as an argument, remember not to use parenthesis.|||Right: setTimeout(myFunction, 3000);|||Wrong: setTimeout(myFunction(), 3000);|||Instead of passing the name of a function as an argument to another function,you can always pass a whole function instead:|||Try it Yourself »|||In the example above, function(){ myFunction(""I love You !!!""); }is used as a callback. It is a complete function.The complete function is passed to setTimeout() as an argument.|||3000 is the number of milliseconds before time-out, somyFunction() will be called after 3 seconds.|||When using the JavaScript function setInterval(),you can specify a callback function to be executed for each interval:|||Try it Yourself »|||In the example above, myFunction is used as a callback.|||myFunction is passed to setInterval() as an argument.|||1000 is the number of milliseconds between intervals, somyFunction() will be called every second.|||If you create a function to load an external resource (like a script or a file),you cannot use the content before it is fully loaded.|||This is the perfect time to use a callback.|||This example loads an HTML file (mycar.html), and displays the HTML file in a web page,after the file is fully loaded:|||Try it Yourself »|||In the example above, myDisplayer is used as a callback.|||myDisplayer is passed to getFile() as an argument.|||Below is a copy of mycar.html:",,,,,[]
JS Async,JS Promises,https://www.w3schools.com/js/js_promise.asp,"""I Promise a Result!""|||""Producing code"" is code that can take some time|||""Consuming code"" is code that must wait for the result|||A Promise is a JavaScript object that links producing code and consuming code|||A JavaScript Promise object contains both the producing code and calls to the consuming code:|||When the producing code obtains the result, it should call one of the two callbacks:ResultCallSuccessmyResolve(result value)ErrormyReject(error object)Promise Object PropertiesA JavaScript Promise object can be:PendingFulfilledRejectedThe Promise object supports two properties: state and result.While a Promise object is ""pending"" (working), the result is undefined.When a Promise object is ""fulfilled"", the result is a value.When a Promise object is ""rejected"", the result is an error object.myPromise.statemyPromise.result""pending""undefined""fulfilled""a result value""rejected""an error objectYou cannot access the Promise properties state and result.You must use a Promise method to handle promises.Promise How ToHere is how to use a Promise:myPromise.then(  function(value) { /* code if successful */ },  function(error) { /* code if some error */ });Promise.then() takes two arguments, a callback for success and another for failure.Both are optional, so you can add a callback for success or failure only.Examplefunction myDisplayer(some) {  document.getElementById(""demo"").innerHTML = some;}let myPromise = new Promise(function(myResolve, myReject) {  let x = 0;// The producing code (this may take some time)  if (x == 0) {    myResolve(""OK"");  } else {    myReject(""Error"");  }});myPromise.then(  function(value) {myDisplayer(value);},  function(error) {myDisplayer(error);});Try it Yourself »JavaScript Promise ExamplesTo demonstrate the use of promises, we will use the callback examples from the previous chapter:Waiting for a TimeoutWaiting for a FileWaiting for a TimeoutExample Using CallbacksetTimeout(function() { myFunction(""I love You !!!""); }, 3000);function myFunction(value) {  document.getElementById(""demo"").innerHTML = value;}Try it Yourself »Example Using Promiselet myPromise = new Promise(function(myResolve, myReject) {  setTimeout(function() { myResolve(""I love You !!""); }, 3000);});myPromise.then(function(value) {  document.getElementById(""demo"").innerHTML = value;});Try it Yourself »Waiting for a fileExample using Callbackfunction getFile(myCallback) {  let req = new XMLHttpRequest();  req.open('GET', ""mycar.html"");  req.onload = function() {    if (req.status == 200) {      myCallback(req.responseText);    } else {      myCallback(""Error: "" + req.status);    }  }  req.send();}getFile(myDisplayer);Try it Yourself »Example using Promiselet myPromise = new Promise(function(myResolve, myReject) {     let req = new XMLHttpRequest();     req.open('GET', ""mycar.htm"");     req.onload = function() {           if (req.status == 200) {                 myResolve(req.response);           } else {                 myReject(""File not Found"");           }  };  req.send();});myPromise.then(     function(value) {myDisplayer(value);},     function(error) {myDisplayer(error);});Try it Yourself »Browser SupportECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.The following table defines the first browser version with full support for Promise objects:Chrome 33Edge 12Firefox 29Safari 7.1Opera 20Feb, 2014Jul, 2015Apr, 2014Sep, 2014Mar, 2014❮ PreviousNext ❯|||A JavaScript Promise object can be:|||The Promise object supports two properties: state and result.|||While a Promise object is ""pending"" (working), the result is undefined.|||When a Promise object is ""fulfilled"", the result is a value.|||When a Promise object is ""rejected"", the result is an error object.|||You cannot access the Promise properties state and result.|||You must use a Promise method to handle promises.|||Here is how to use a Promise:|||Promise.then() takes two arguments, a callback for success and another for failure.|||Both are optional, so you can add a callback for success or failure only.|||Try it Yourself »|||To demonstrate the use of promises, we will use the callback examples from the previous chapter:|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.|||The following table defines the first browser version with full support for Promise objects:",,Pending@@@Fulfilled@@@Rejected|||Waiting for a Timeout@@@Waiting for a File,,"Success|||myResolve(result value)&&&Error|||myReject(error object)$$$&&&""pending""|||undefined&&&""fulfilled""|||a result value&&&""rejected""|||an error object$$$Chrome 33|||Edge 12|||Firefox 29|||Safari 7.1|||Opera 20&&&Feb, 2014|||Jul, 2015|||Apr, 2014|||Sep, 2014|||Mar, 2014",[]
JS Async,JS Async/Await,https://www.w3schools.com/js/js_async.asp,"""async and await make promises easier to write""|||async makes a function return a Promise|||await makes a function wait for a Promise|||The keyword async before a function makes the function return a promise:|||Is the same as:|||Here is how to use the Promise:|||Try it Yourself »|||Or simpler, since you expect a normal value (a normal response, not an error):|||Try it Yourself »|||The keyword  await before a function makes the function wait for a promise:|||The await keyword can only be used inside anasync function.|||Let's go slowly and learn how to use it.|||Try it Yourself »|||The two arguments (resolve and reject) are pre-defined by JavaScript.|||We will not create them, but call one of them when the executor function is ready.|||Very often we will not need a reject function.|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||ECMAScript 2017 introduced the JavaScript keywordsasync and await.|||The following table defines the first browser version with full support for both:",,,,"Chrome 55|||Edge 15|||Firefox 52|||Safari 11|||Opera 42&&&Dec, 2016|||Apr, 2017|||Mar, 2017|||Sep, 2017|||Dec, 2016",[]
JS HTML DOM,DOM Intro,https://www.w3schools.com/js/js_htmldom.asp,"With the HTML DOM, JavaScript can access and change all the elements of an HTML document.|||When a web page is loaded, the browser creates a DocumentObject Model of the page. |||The HTML DOM model is constructed as a tree of Objects:|||With the object model, JavaScript gets all the power it needs to create dynamic HTML: |||In the next chapters of this tutorial you will learn:|||The DOM is a W3C (World Wide Web Consortium) standard.|||The DOM defines a standard for accessing documents:|||""The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.""|||The W3C DOM standard is separated into 3 different parts:|||The HTML DOM is a standard object model and programming interface for HTML. It defines:|||In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.",,JavaScript can change all the HTML elements in the page@@@JavaScript can change all the HTML attributes in the page@@@JavaScript can change all the CSS styles in the page@@@JavaScript can remove existing HTML elements and attributes@@@JavaScript can add new HTML elements and attributes@@@JavaScript can react to all existing HTML events in the page@@@JavaScript can create new HTML events in the page|||How to change the content of HTML elements@@@How to change the style (CSS) of HTML elements@@@How to react to HTML DOM events@@@How to add and delete HTML elements|||Core DOM - standard model for all document types@@@XML DOM - standard model for XML documents@@@HTML DOM - standard model for HTML documents|||The HTML elements as objectsThe properties of all HTML elements  The methods to access all HTML elementsThe events for all HTML elements,,,[]
JS HTML DOM,DOM Methods,https://www.w3schools.com/js/js_htmldom_methods.asp,"HTML DOM methods are actions you can perform (on HTML Elements).|||HTML DOM properties are values (of HTML Elements) that you can set or change.|||The HTML DOM can be accessed with JavaScript (and with other programming languages). |||In the DOM, all HTML elements are defined as objects.|||The programming interface is the properties and methods of each object.|||A property is a value that you can get or set (like changing the content of an HTML element).|||A method is an action you can do (like add or deleting an HTML element).|||The following example changes the content (the innerHTML) of the <p> element with id=""demo"":|||In the example above, getElementById is a method, while innerHTML is a property.|||The most common way to access an HTML element is to use the id of the element.|||In the example above the getElementById method used id=""demo"" to find the element.|||The easiest way to get the content of an element is by using the innerHTML property.|||The innerHTML property is useful for getting or replacing the content of HTML elements.|||The innerHTML property can be used to get or change any HTML element, including <html> and <body>.",,,,,[]
JS HTML DOM,DOM Document,https://www.w3schools.com/js/js_htmldom_document.asp,"The HTML DOM document object is the owner of all other objects in your web page.|||The document object represents your web page.|||If you want to access any element in an HTML page, you always start with accessing the document object.|||Below are some examples of how you can use the document object to access and manipulate HTML.|||The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.|||Later, in HTML DOM Level 3, more objects, collections, and properties were added.",,,,"document.getElementById(id)|||Find an element by element id&&&document.getElementsByTagName(name)|||Find elements by tag name&&&document.getElementsByClassName(name)|||Find elements by class name$$$&&&element.innerHTML =  new html content|||Change the inner HTML of an element&&&element.attribute = new value|||Change the attribute value of an HTML element&&&element.style.property = new style|||Change the style of an HTML element$$$&&&element.setAttribute(attribute, value)|||Change the attribute value of an HTML element$$$&&&document.createElement(element)|||Create an HTML element&&&document.removeChild(element)|||Remove an HTML element&&&document.appendChild(element)|||Add an HTML element&&&document.replaceChild(new, old)|||Replace an HTML element&&&document.write(text)|||Write into the HTML output stream$$$&&&document.getElementById(id).onclick = function(){code}|||Adding event handler code to an onclick event$$$document.anchors|||Returns all <a> elements that have a name attribute|||1&&&document.applets|||Deprecated|||1&&&document.baseURI|||Returns the absolute base URI of the document|||3&&&document.body|||Returns the <body> element |||1&&&document.cookie|||Returns the document's cookie|||1&&&document.doctype|||Returns the document's doctype|||3&&&document.documentElement|||Returns the <html> element |||3&&&document.documentMode|||Returns the mode used by the browser|||3&&&document.documentURI|||Returns the URI of the document |||3&&&document.domain|||Returns the domain name of the document server |||1&&&document.domConfig|||Obsolete.|||3&&&document.embeds|||Returns all <embed> elements|||3&&&document.forms|||Returns all <form> elements |||1&&&document.head|||Returns the <head> element|||3&&&document.images|||Returns all <img> elements |||1&&&document.implementation|||Returns the DOM implementation|||3&&&document.inputEncoding|||Returns the document's encoding (character set)|||3&&&document.lastModified|||Returns the date and time the document was updated|||3&&&document.links|||Returns all <area> and <a> elements that have a href attribute|||1&&&document.readyState|||Returns the (loading) status of the document|||3&&&document.referrer|||Returns the URI of the referrer (the linking document)|||1&&&document.scripts|||Returns all <script> elements|||3&&&document.strictErrorChecking|||Returns if error checking is enforced|||3&&&document.title|||Returns the <title> element |||1&&&document.URL|||Returns the complete URL of the document |||1",[]
JS HTML DOM,DOM Elements,https://www.w3schools.com/js/js_htmldom_elements.asp,"This page teaches you how to find and access HTML elements in an HTML page.|||Often, with JavaScript, you want to manipulate HTML elements.|||To do so, you have to find the elements first. There are several ways to do this:|||The easiest way to find an HTML element in the DOM, is by using the element id.|||This example finds the element with id=""intro"":|||If the element is found, the method will return the element as an object (in element).|||If the element is not found, element will contain null.|||This example finds all <p> elements:|||This example finds the element with id=""main"", and then finds all <p> elements inside ""main"":|||If you want to find all HTML elements with the same class name, use getElementsByClassName().|||This example returns a list of all elements with class=""intro"".|||If you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.|||This example returns a list of all <p> elements with class=""intro"".|||This example finds the form element with id=""frm1"", in the forms collection, and displays all element values:|||The following HTML objects (and object collections) are also accessible:|||Use the getElementById method to find the <p> element, and change its text to ""Hello"".|||Start the Exercise",Finding HTML Elements,Finding HTML elements by id@@@Finding HTML elements by tag name @@@Finding HTML elements by class name@@@Finding HTML elements by CSS selectors@@@Finding HTML elements by HTML object collections|||document.anchors@@@document.body@@@document.documentElement@@@document.embeds@@@document.forms@@@document.head@@@document.images@@@document.links@@@document.scripts@@@document.title,,,[]
JS HTML DOM,DOM HTML,https://www.w3schools.com/js/js_htmldom_html.asp,"The HTML DOM allows JavaScript to change the content of HTML elements.|||The easiest way to modify the content of an HTML element is by using the innerHTML property.|||To change the content of an HTML element, use this syntax:|||This example changes the content of a <p> element:|||Example explained:|||This example changes the content of an <h1> element:|||Example explained:|||To change the value of an HTML attribute, use this syntax: |||This example changes the value of the src attribute of an <img> element:|||Example explained:|||JavaScript can create dynamic HTML content:||||||In JavaScript, document.write() can be used to write directly to the HTML output stream:|||Never use document.write() after the document is loaded. It will overwrite the document.|||Use HTML DOM to change the value of the image's src attribute.|||Start the Exercise",,"The HTML document above contains a <p> element with id=""p1""@@@We use the HTML DOM to get the element with id=""p1""@@@A JavaScript changes the content (innerHTML) of that element to ""New   text!""|||The HTML document above contains an <h1> element with id=""id01""@@@We use the HTML DOM to get the element with id=""id01""@@@A JavaScript changes the content (innerHTML) of that element to ""New   Heading""|||The HTML document above contains an <img> element with id=""myImage""@@@We use the HTML DOM to get the element with id=""myImage""@@@A JavaScript changes the src attribute of that element from ""smiley.gif"" to ""landscape.jpg""",,,[]
JS HTML DOM,DOM Forms,https://www.w3schools.com/js/js_validation.asp,"HTML form validation can be done by JavaScript.|||If a form field (fname) is empty, this function alerts a message, and returns false, to prevent the form from being submitted:|||The function can be called when the form is submitted:|||JavaScript is often used to validate numeric input:|||Please input a number between 1 and 10||||||HTML form validation can be performed automatically by the browser:|||If a form field (fname) is empty, the required attribute prevents this form from being submitted: |||Automatic HTML form validation does not work in Internet Explorer 9 or earlier.|||Data validation is the process of ensuring that user input is clean, correct, and useful.|||Typical validation tasks are:|||Most often, the purpose of data validation is to ensure correct user input.|||Validation can be defined by many different methods, and deployed in many different ways.|||Server side validation is performed by a web server, after input has been sent to the server.|||Client side validation is performed by a web browser, before input is sent to a web server.|||HTML5 introduced a new HTML validation concept called constraint validation.|||HTML constraint validation is based on:|||For a full list, go to HTML Input Attributes.|||For a full list, go to CSS Pseudo Classes.",,has the user filled in all required fields?@@@has the user entered a valid date?@@@has the user entered text in a numeric field?|||Constraint validation HTML Input Attributes@@@Constraint validation CSS Pseudo Selectors@@@Constraint validation DOM Properties and Methods,,"disabled|||Specifies that the input element should be disabled&&&max|||Specifies the maximum value of an input element&&&min|||Specifies the minimum value of an input element&&&pattern|||Specifies the value pattern of an input element&&&required|||Specifies that the input field requires an element&&&type |||Specifies the type of an input element$$$:disabled|||Selects input elements with the ""disabled"" attribute specified&&&:invalid|||Selects input elements with invalid values&&&:optional|||Selects input elements with no ""required"" attribute specified&&&:required|||Selects input elements with the ""required"" attribute specified&&&:valid|||Selects input elements with valid values",[]
JS HTML DOM,DOM CSS,https://www.w3schools.com/js/js_htmldom_css.asp,"The HTML DOM allows JavaScript to change the style of HTML elements.|||To change the style of an HTML element, use this syntax:|||The following example changes the style of a <p> element:|||The HTML DOM allows you to execute code when an event occurs.|||Events are generated by the browser when ""things happen"" to HTML elements:|||You will learn more about events in the next chapter of this tutorial.|||This example changes the style of the HTML element with id=""id1"", when the user clicks a button:|||VisibilityHow to make an element invisible. Do you want to show the element or not?|||For all HTML DOM style properties, look at our completeHTML DOM Style Object Reference.|||Change the text color of the <p> element to ""red"".|||Start the Exercise",,An element is clicked on@@@The page has loaded@@@Input fields are changed,,,[]
JS HTML DOM,DOM Animations,https://www.w3schools.com/js/js_htmldom_animate.asp,"Learn to create HTML animations using JavaScript.|||To demonstrate how to create HTML animations with JavaScript, we will use a simple web page:|||All animations should be relative to a container element.|||The container element should be created with style = ""position: relative"".|||The animation element should be created with style = ""position: absolute"".|||JavaScript animations are done by programming gradual changes in an element's style.|||The changes are called by a timer. When the timer interval is small, the animation looks continuous.|||The basic code is:",Create an Animation Container|||Style the Elements,,,,[]
JS HTML DOM,DOM Events,https://www.w3schools.com/js/js_htmldom_events.asp,"HTML DOM allows JavaScript to react to HTML events:|||A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.|||To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:|||Examples of HTML events:|||In this example, the content of the <h1> element is changed when a user clicks on it:|||In this example, a function is called from the event handler:|||To assign events to HTML elements you can use event attributes.|||Assign an onclick event to a button element:|||In the example above, a function named displayDate will be executed when the button is clicked.|||The HTML DOM allows you to assign events to HTML elements using JavaScript: |||Assign an onclick event to a button element:|||In the example above, a function named displayDate is assigned to an HTML element with the id=""myBtn"".|||The function will be executed when the button is clicked.|||The onload and onunload events are triggered when the user enters or leaves the page.|||The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.|||The onload and onunload events can be used to deal with cookies.|||The onchange event is often used in combination with validation of input fields.|||Below is an example of how to use the onchange. The upperCase() function will be called when a user changes the content of an input field.|||The onmouseover and onmouseout events can be used to trigger a function when the user mouses over, or out of, an HTML element:|||Try it Yourself »|||The onmousedown, onmouseup, and onclick events are all parts of a mouse-click. First when a mouse-button is clicked, the onmousedown event is triggered, then, when the mouse-button is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.|||Try it Yourself »|||onmousedown and onmouseupChange an image when a user holds down the mouse button.|||onloadDisplay an alert box when the page has finished loading.|||onfocusChange the background-color of an input field when it gets focus.|||Mouse EventsChange the color of an element when the cursor moves over it.|||For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference.",,When a user clicks the mouse@@@When a web page has loaded@@@When an image has been loaded@@@When the mouse moves over an element@@@When an input field is changed@@@When an HTML form is submitted@@@When a user strokes a key ,,,[]
JS HTML DOM,DOM Event Listener,https://www.w3schools.com/js/js_htmldom_eventlistener.asp,"Add an event listener that fires when a user clicks a button:|||The addEventListener() method attaches an event handler to the specified element.|||The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.|||You can add many event handlers to one element.|||You can add many event handlers of the same type to one element, i.e two ""click"" events.|||You can add event listeners to any DOM object not only HTML elements. i.e the window object.|||The addEventListener() method makes it easier to control how the event reacts to bubbling.|||When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.|||You can easily remove an event listener by using the removeEventListener() method.|||The first parameter is the type of the event (like ""click"" or ""mousedown"" or any other HTML DOM Event.)|||The second parameter is the function we want to call when the event occurs. |||The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.|||Note that you don't use the ""on"" prefix for the event; use ""click"" instead of ""onclick"".|||Alert ""Hello World!"" when the user clicks on an element:|||You can also refer to an external ""named"" function:|||Alert ""Hello World!"" when the user clicks on an element:|||The addEventListener() method allows you to add many events to the same element, without overwriting existing events:|||You can add events of different types to the same element:|||The addEventListener() method allows you to add event listeners on any HTML DOM object such as HTML elements, the HTML document, the window object, or other objects that support events, like the xmlHttpRequest object.|||Add an event listener that fires when a user resizes the window:|||When passing parameter values, use an ""anonymous function"" that calls the specified function with the parameters:|||There are two ways of event propagation in the HTML DOM, bubbling and capturing.|||Event propagation is a way of defining the element order when an event occurs.If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's ""click"" event should be handled first?|||In bubbling the inner most element's event is handled first and then the outer:the <p> element's click event is handled first, then the <div> element's click event.|||In capturing the outer most element's event is handled first and then the inner:the <div> element's click event will be handled first, then the <p> element's click event.|||With the addEventListener() method you can specify the propagation type by using the ""useCapture"" parameter:|||The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.|||The removeEventListener() method removes event handlers that have been attached with the addEventListener() method:|||For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference.|||Use the eventListener to assign an onclick event to the <button> element.|||Start the Exercise",,,,,[]
JS HTML DOM,DOM Navigation,https://www.w3schools.com/js/js_htmldom_navigation.asp,"With the HTML DOM, you can navigate the node tree using node relationships.|||According to the W3C HTML DOM standard, everything in an HTML document is a node:|||With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.|||New nodes can be created, and all nodes can be modified or deleted. |||The nodes in the node tree have a hierarchical relationship to each other.|||The terms parent, child, and sibling are used to describe the relationships. |||From the HTML above you can read:|||and:|||You can use the following node properties to navigate between nodes with JavaScript:|||A common error in DOM processing is to expect an element node to contain text.|||The element node <title> (in the example above) does not contain text.|||It contains a text node with the value ""DOM Tutorial"". |||The value of the text node can be accessed by the node's innerHTML property:myTitle = document.getElementById(""demo"").innerHTML;Accessing the innerHTML property is the same as accessing the nodeValue of the first child:myTitle = document.getElementById(""demo"").firstChild.nodeValue;Accessing the first child can also be done like this:myTitle = document.getElementById(""demo"").childNodes[0].nodeValue;All the (3) following examples retrieves the text of an <h1> element and copies it into a <p> element:Example<html><body><h1 id=""id01"">My First Page</h1><p id=""id02""></p><script> document.getElementById(""id02"").innerHTML  = document.getElementById(""id01"").innerHTML;</script></body></html>Try it Yourself »Example<html><body><h1 id=""id01"">My First Page</h1><p id=""id02""></p><script> document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").firstChild.nodeValue;</script></body></html>Try it Yourself »Example<html><body><h1 id=""id01"">My First Page</h1><p id=""id02"">Hello!</p><script> document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").childNodes[0].nodeValue;</script></body></html>Try it Yourself »InnerHTMLIn this tutorial we use the innerHTML property to retrieve the content of an HTML element.However, learning the other methods above is useful for understanding the tree structure and the navigation of the DOM.DOM Root NodesThere are two special properties that allow access to the full document:document.body - The body of the documentdocument.documentElement - The full documentExample<html><body><h2>JavaScript HTMLDOM</h2><p>Displaying document.body</p><p id=""demo""></p><script>document.getElementById(""demo"").innerHTML = document.body.innerHTML;</script></body></html>Try it Yourself »Example<html><body><h2>JavaScript HTMLDOM</h2><p>Displaying document.documentElement</p><p id=""demo""></p><script>document.getElementById(""demo"").innerHTML = document.documentElement.innerHTML;</script></body></html>Try it Yourself »The nodeName PropertyThe nodeName property specifies the name of a node.nodeName is read-onlynodeName of an element node is the same as the tag namenodeName of an attribute node is the attribute namenodeName of a text node is always #textnodeName of the document node is always #documentExample  <h1 id=""id01"">My First Page</h1> <p id=""id02""></p><script>document.getElementById(""id02"").innerHTML  = document.getElementById(""id01"").nodeName;</script>Try it Yourself »Note: nodeName always contains the uppercase tag name of an HTML element.The nodeValue PropertyThe nodeValue property specifies the value of a node.nodeValue for element nodes is nullnodeValue for text nodes is the text itselfnodeValue for attribute nodes is the attribute valueThe nodeType PropertyThe nodeType property is read only. It returns the type of a node.Example <h1 id=""id01"">My First Page</h1> <p id=""id02""></p><script>document.getElementById(""id02"").innerHTML  = document.getElementById(""id01"").nodeType;</script>Try it Yourself »The most important nodeType properties are:NodeTypeExampleELEMENT_NODE1<h1 class=""heading"">W3Schools</h1>ATTRIBUTE_NODE2 class = ""heading"" (deprecated)TEXT_NODE3W3SchoolsCOMMENT_NODE8<!-- This is a comment -->DOCUMENT_NODE9The HTML document itself (the parent of <html>)DOCUMENT_TYPE_NODE10<!Doctype html>Type 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM.❮ PreviousNext ❯|||Accessing the innerHTML property is the same as accessing the nodeValue of the first child:|||Accessing the first child can also be done like this:|||All the (3) following examples retrieves the text of an <h1> element and copies it into a <p> element:|||In this tutorial we use the innerHTML property to retrieve the content of an HTML element.|||However, learning the other methods above is useful for understanding the tree structure and the navigation of the DOM.|||There are two special properties that allow access to the full document:|||The nodeName property specifies the name of a node.|||Note: nodeName always contains the uppercase tag name of an HTML element.|||The nodeValue property specifies the value of a node.|||The nodeType property is read only. It returns the type of a node.|||The most important nodeType properties are:|||Type 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM.",DOM Root Nodes,"The entire document is a document node@@@Every HTML element is an element node@@@The text inside HTML elements are text nodes@@@Every HTML attribute is an attribute node (deprecated)@@@All comments are comment nodes|||In a node tree, the top node is called the root (or root node)@@@Every node has exactly one parent, except the root (which has no parent)@@@A node can have a number of children@@@Siblings (brothers or sisters) are nodes with the same parent|||<html> is the root node@@@<html> has no parents @@@<html> is the parent of <head> and <body>@@@<head> is the first child of <html>@@@<body> is the last child of <html>|||<head> has one child: <title>@@@<title> has one child (a text node): ""DOM Tutorial""@@@<body> has two children: <h1> and <p>@@@<h1> has one child: ""DOM Lesson one""@@@<p> has one child: ""Hello world!""@@@<h1> and <p> are siblings|||parentNode@@@childNodes[nodenumber]@@@firstChild@@@lastChild@@@nextSibling@@@previousSibling|||document.body - The body of the document@@@document.documentElement - The full document|||nodeName is read-only@@@nodeName of an element node is the same as the tag name@@@nodeName of an attribute node is the attribute name@@@nodeName of a text node is always #text@@@nodeName of the document node is always #document|||nodeValue for element nodes is null@@@nodeValue for text nodes is the text itself@@@nodeValue for attribute nodes is the attribute value",,"ELEMENT_NODE|||1|||<h1 class=""heading"">W3Schools</h1>&&&ATTRIBUTE_NODE|||2||| class = ""heading"" (deprecated)&&&TEXT_NODE|||3|||W3Schools&&&COMMENT_NODE|||8|||<!-- This is a comment -->&&&DOCUMENT_NODE|||9|||The HTML document itself (the parent of <html>)&&&DOCUMENT_TYPE_NODE|||10|||<!Doctype html>",[]
JS HTML DOM,DOM Nodes,https://www.w3schools.com/js/js_htmldom_nodes.asp,"Adding and Removing Nodes (HTML Elements)|||To add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element. |||This code creates a new <p> element:|||To add text to the <p> element, you must create a text node first. This code creates a text node:|||Then you must append the text node to the <p> element:|||Finally you must append the new element to an existing element.|||This code finds an existing element:|||This code appends the new element to the existing element:|||The appendChild() method in the previous example, appended the new element as the last child of the parent.|||If you don't want that you can use the insertBefore() method: |||To remove an HTML element, use the remove() method:|||The HTML document contains a <div> element with two child nodes (two <p> elements):|||Find the element you want to remove:|||Then execute the remove() method on that element:|||The remove() method does not work in older browsers, see the example below on how to use removeChild() instead.|||For browsers that does not support the remove() method, you have to find the parent node to remove an element:|||This HTML document contains a <div> element with two child nodes (two <p> elements):|||Find the element with id=""div1"":|||Find the <p> element with id=""p1"":|||Remove the child from the parent:|||Here is a common workaround: Find the child you want to remove, and use its parentNode property to find the parent:|||To replace an element to the HTML DOM, use the replaceChild() method:",,,,,[]
JS HTML DOM,DOM Collections,https://www.w3schools.com/js/js_htmldom_collections.asp,"The getElementsByTagName() method returns an HTMLCollection object.|||An HTMLCollection object is an array-like list (collection) of HTML elements.|||The following code selects all <p> elements in a document:|||The elements in the collection can be accessed by an index number.|||To access the second <p> element you can write:|||Note: The index starts at 0.|||The length property defines the number of elements in an HTMLCollection:|||The length property is useful when you want to loop through the elements in a collection:|||Change the text color of all <p> elements:|||An HTMLCollection is NOT an array!|||An HTMLCollection may look like an array, but it is not.|||You can loop through the list and refer to the elements with a number (just like an array).|||However, you cannot use array methods like valueOf(), pop(), push(), or join() on an HTMLCollection.",,,,,[]
JS HTML DOM,DOM Node Lists,https://www.w3schools.com/js/js_htmldom_nodelist.asp,"A NodeList object is a list (collection) of nodes extracted from a document.|||A NodeList object is almost the same as an HTMLCollection object.|||Some (older) browsers return a NodeList object instead of an HTMLCollection for methods like getElementsByClassName().|||All browsers return a NodeList object for the property childNodes.  |||Most browsers return a NodeList object for the method querySelectorAll().|||The following code selects all <p> nodes in a document:|||The elements in the NodeList can be accessed by an index number.|||To access the second <p> node you can write:|||Note: The index starts at 0.|||The length property defines the number of nodes in a node list:|||The length property is useful when you want to loop through the nodes in a node list:|||Change the color of all <p> elements in a node list:|||An HTMLCollection (previous chapter) is a collection of HTML elements.|||A NodeList is a collection of document nodes.|||A NodeList and an HTML collection is very much the same thing. |||Both an HTMLCollection object and a NodeList object is an array-like list (collection) of objects.|||Both have a length property defining the number of items in the list (collection).|||Both provide an index (0, 1, 2, 3, 4, ...) to access each item like an array.|||HTMLCollection items can be accessed by their name, id, or index number.|||NodeList items can only be accessed by their index number.|||Only the NodeList object can contain attribute nodes and text nodes.|||A node list is not an array!|||A node list may look like an array, but it is not.|||You can loop through the node list and refer to its nodes like an array.|||However, you cannot use Array Methods, like valueOf(), push(), pop(), or join() on a node list.",,,,,[]
JS Browser BOM,JS Window,https://www.w3schools.com/js/js_window.asp,"The Browser Object Model (BOM) allows JavaScript to ""talk to"" the browser.|||There are no official standards for the Browser ObjectModel (BOM).|||Since modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM.|||The window object is supported by all browsers. It represents the browser's window.|||All global JavaScript objects, functions, and variables automatically become members of the window object.|||Global variables are properties of the window object.|||Global functions are methods of the window object.|||Even the document object (of the HTML DOM) is a property of the window object: |||is the same as:|||Two properties can be used to determine the size of the browser window.|||Both properties return the sizes in pixels:|||The browser window (the browser viewport) is NOT including toolbars and scrollbars.|||Some other methods:",,window.innerHeight - the inner height of the browser window (in pixels)@@@window.innerWidth - the inner width of the browser window (in pixels)|||window.open() - open a new window@@@window.close() - close the current window@@@window.moveTo() - move the current window@@@window.resizeTo() - resize the current window,,,[]
JS Browser BOM,JS Screen,https://www.w3schools.com/js/js_window_screen.asp,"The window.screen object contains information about the user's screen.|||The window.screen object can be written without the window prefix.|||Properties:|||The screen.width property returns the width of the visitor's screen in pixels.|||Display the width of the screen in pixels:|||Result will be:|||The screen.height property returns the height of the visitor's screen in pixels.|||Display the height of the screen in pixels:|||Result will be:|||The screen.availWidth property returns the width of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.|||Display the available width of the screen in pixels:|||Result will be:|||The screen.availHeight property returns the height of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.|||Display the available height of the screen in pixels:|||Result will be:|||The screen.colorDepth property returns the number of bits used to display one color.|||All modern computers use 24 bit or 32 bit hardware for color resolution:|||Older computers used 16 bits: 65,536 different ""High Colors"" resolution.|||Very old computers, and old cell phones used 8 bits: 256 different ""VGA colors"".|||Display the color depth of the screen in bits:|||Result will be:|||The #rrggbb (rgb) values used in HTML represents ""True Colors"" (16,777,216 different colors)|||The screen.pixelDepth property returns the pixel depth of the screen.|||Display the pixel depth of the screen in bits:|||Result will be:|||For modern computers, Color Depth and Pixel Depth are equal.",,"screen.width@@@screen.height@@@screen.availWidth@@@screen.availHeight@@@screen.colorDepth@@@screen.pixelDepth|||24 bits =      16,777,216 different ""True Colors""@@@32 bits = 4,294,967,296 different ""Deep Colors""",,,[]
JS Browser BOM,JS Location,https://www.w3schools.com/js/js_window_location.asp,The window.location object can be used to get the current page address (URL) and to redirect the browser to a new page.|||The window.location object can be written without the window prefix.|||Some examples:|||The window.location.href property returns the URL of the current page.|||Display the href (URL) of the current page:|||Result is:|||The window.location.hostname property returns the name of the internet host (of the current page).|||Display the name of the host:|||Result is:|||The window.location.pathname property returns the pathname of the current page.|||Display the path name of the current URL:|||Result is:|||The window.location.protocol property returns the web protocol of the page.|||Display the web protocol:|||Result is:|||The window.location.port property returns the number of the internet host port (of the current page).|||Display the name of the host:|||Result is:|||Most browsers will not display default port numbers (80 for http and 443 for https)|||The window.location.assign() method loads a new document.|||Load a new document:,,window.location.href returns the href (URL) of the current page@@@window.location.hostname returns the domain name of the web host@@@window.location.pathname returns the path and filename of the current page@@@window.location.protocol returns the web protocol used (http: or https:)@@@window.location.assign() loads a new document,,,[]
JS Browser BOM,JS History,https://www.w3schools.com/js/js_window_history.asp,"The window.history object contains the browsers history.|||The window.history object can be written without the window prefix.|||To protect the privacy of the users, there are limitations to how JavaScript can access this object.|||Some methods:|||The history.back() method loads the previous URL in the history list.|||This is the same as clicking the Back button in the browser.|||Create a back button on a page:|||The output of the code above will be:|||The history.forward() method loads the next URL in the history list.|||This is the same as clicking the Forward button in the browser.|||Create a forward button on a page:|||The output of the code above will be:",,history.back() - same as clicking back in the browser@@@history.forward() - same as clicking forward in the browser,,,[]
JS Browser BOM,JS Navigator,https://www.w3schools.com/js/js_window_navigator.asp,"The window.navigator object contains information about the visitor's browser.|||The window.navigator object can be written without the window prefix.|||Some examples:|||The cookieEnabled property returns true if cookies are enabled, otherwise false:|||The appName property returns the application name of the browser:|||Strange enough, ""Netscape"" is the application name for both IE11, Chrome, Firefox, and Safari.|||The appCodeName property returns the application code name of the browser:|||""Mozilla"" is the application code name for both Chrome, Firefox, IE, Safari, and Opera.|||The product property returns the product name of the browser engine:|||Do not rely on this. Most browsers returns ""Gecko"" as product name !!|||The appVersion property returns version information about the browser:|||The userAgent property returns the user-agent header sent by the browser to the server:|||The information from the navigator object can often be misleading, and should not be used to detect browser versions because:|||The platform property returns the browser platform (operating system):|||The language property returns the browser's language:|||The onLine property returns true if the browser is online:|||The javaEnabled() method returns true if Java is enabled:",Warning !!!|||Is Java Enabled?,"navigator.appName@@@navigator.appCodeName@@@navigator.platform|||Different browsers can use the same name@@@The navigator data can be changed by the browser owner@@@Some browsers misidentify themselves to bypass site tests@@@Browsers cannot report new operating systems, released later than the browser",,,[]
JS Browser BOM,JS Popup Alert,https://www.w3schools.com/js/js_popup.asp,"JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.|||An alert box is often used if you want to make sure information comes through to the user.|||When an alert box pops up, the user will have to click ""OK"" to proceed. |||The window.alert() method can be written without the window prefix.|||A confirm box is often used if you want the user to verify or accept something.|||When a confirm box pops up, the user will have to click either ""OK"" or ""Cancel"" to proceed. |||If the user clicks ""OK"", the box returns true. If the user clicks ""Cancel"", the box returnsfalse.|||The window.confirm() method can be written without the window prefix.|||A prompt box is often used if you want the user to input a value before entering a page.|||When a prompt box pops up, the user will have to click either ""OK"" or ""Cancel"" to proceed after entering an input value. |||If the user clicks ""OK"" the box returns the input value. If the user clicks ""Cancel"" the box returns null.|||The window.prompt() method can be written without the window prefix.|||To display line breaks inside a popup box, use a back-slash followed by the character n.",,,,,[]
JS Browser BOM,JS Timing,https://www.w3schools.com/js/js_timing.asp,"JavaScript can be executed in time-intervals.|||This is called timing events.|||The window object allows execution of code at specified time intervals.|||These time intervals are called timing events.|||The two key methods to use with JavaScript are:|||The setTimeout() and setInterval() are both methods of the HTML DOM Window object.|||The window.setTimeout() method can be written without the window prefix.|||The first parameter is a function to be executed.|||The second parameter indicates the number of milliseconds before execution. |||Click a button. Wait 3 seconds, and the page will alert ""Hello"":|||The clearTimeout() method stops the execution of the function specified in setTimeout().|||The window.clearTimeout() method can be written without the window prefix.|||The clearTimeout() method uses the variable returned from setTimeout():|||If the function has not already been executed, you can stop the execution by calling the clearTimeout() method:|||Same example as above, but with an added ""Stop"" button:|||The setInterval() method repeats a given function at every given time-interval.|||The window.setInterval() method can be written without the window prefix.|||The first parameter is the function to be executed.|||The second parameter indicates the length of the time-interval between each execution.|||This example executes a function called ""myTimer"" once every second (like a digital watch).|||Display the current time:|||There are 1000 milliseconds in one second.|||The clearInterval() method stops the executions of the function specified in the setInterval() method.|||The window.clearInterval() method can be written without the window prefix.|||The clearInterval() method uses the variable returned from setInterval():|||Same example as above, but we have added a ""Stop time"" button:|||Another simple timing|||A clock created with a timing event",,"setTimeout(function, milliseconds)Executes a function, after waiting a specified number of milliseconds.@@@@@@setInterval(function, milliseconds)Same as setTimeout(), but repeats the execution     of the function continuously.",,,[]
JS Browser BOM,JS Cookies,https://www.w3schools.com/js/js_cookies.asp,"Cookies let you store user information in web pages.|||Cookies are data, stored in small text files, on your computer.|||When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.|||Cookies were invented to solve the problem ""how to remember information about the user"":|||Cookies are saved in name-value pairs like:|||When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to ""remember"" information about users.|||None of the examples below will work if your browser has local cookies support turned off.|||JavaScript can create, read, and delete cookies with the document.cookie property.|||With JavaScript, a cookie can be created like this:|||You can also add an expiry date (in UTC time).By default, the cookie is deleted when the browser is closed:|||With a path parameter, you can tell the browser what path the cookie belongs to.By default, the cookie belongs to the current page.|||With JavaScript, cookies can be read like this:|||document.cookie will return all cookies in one string much like: cookie1=value; cookie2=value; cookie3=value;|||With JavaScript, you can change a cookie the same way as you create it:|||The old cookie is overwritten.|||Deleting a cookie is very simple.|||You don't have to specify a cookie value when you delete a cookie.|||Just set the expires parameter to a past date:|||You should define the cookie path to ensure that you delete the right cookie.|||Some browsers will not let you delete a cookie if you don't specify the path.|||The document.cookie property looks like a normal text string. But it is not.|||Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the name-value pair of it.|||If you set a new cookie, older cookies are not overwritten.The new cookie is added to document.cookie, so if you read document.cookie again you will get something like:|||cookie1 = value; cookie2 = value;|||Display All Cookies Create Cookie 1 Create Cookie 2Delete Cookie 1 Delete Cookie 2|||If you want to find the value of one specified cookie, you must write a JavaScript function that searches for the cookie value in the cookie string.|||In the example to follow, we will create a cookie that stores the name of a visitor.|||The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.|||The next time the visitor arrives at the same page, he/she will get a welcome message.|||For the example we will create 3 JavaScript functions:|||First, we create a function that stores the name of the visitor in a cookie variable:|||Example explained:|||The parameters of the function above are the name of the cookie (cname), the value of the cookie (cvalue), and the number of days until the cookie should expire (exdays).|||The function sets a cookie by adding together the cookiename, the cookie value, and the expires string.|||Then, we create a function that returns the value of a specified cookie:|||Function explained:|||Take the cookiename as parameter (cname).|||Create a variable (name) with the text to search for (cname + ""="").|||Decode the cookie string, to handle cookies with special characters, e.g. '$'|||Split document.cookie on semicolons into an array called ca (ca = decodedCookie.split(';')).|||Loop through the ca array (i = 0; i < ca.length; i++), and read out each value c = ca[i]).|||If the cookie is found (c.indexOf(name) == 0), return the value of the cookie (c.substring(name.length, c.length).|||If the cookie is not found, return """".|||Last, we create the function that checks if a cookie is set.|||If the cookie is set it will display a greeting.|||If the cookie is not set, it will display a prompt box, asking for the name of the user,and stores the username cookie for 365 days, by calling the setCookie function:|||The example above runs the checkCookie() function when the page loads.",,"When a user visits a web page, his/her name can be stored in a cookie.@@@Next time the user visits the page, the cookie ""remembers"" his/her name.",A function to set a cookie value@@@A function to get a cookie value@@@A function to check a cookie value,,[]
JS Web APIs,Web API Intro,https://www.w3schools.com/js/js_api_intro.asp,"A Web API is a developer's dream.|||API stands for Application Programming Interface.|||A Web API is an application programming interface for the Web.|||A Browser API can extend the functionality of a web browser.|||A Server API can extend the functionality of a web server.|||All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data.|||For example, the Geolocation API can return the coordinates of where the browser is located.|||Get the latitude and longitude of the user's position:|||Third party APIs are not built into your browser.|||To use these APIs, you will have to download the code from the Web.|||Examples:",,It can extend the functionality of the browser@@@It can greatly simplify complex functions@@@It can provide easy syntax to complex code|||YouTube API - Allows you to display videos on a web site.@@@Twitter API - Allows you to display Tweets on a web site.@@@Facebook API - Allows you to display Facebook info on a web site.,,,[]
JS Web APIs,Web Forms API,https://www.w3schools.com/js/js_validation_api.asp,"If an input field contains invalid data, display a message:|||The validity property of an input element contains a number of properties related to the validity of data: |||If the number in an input field is greater than 100 (the input's max attribute), display a message:|||If the number in an input field is less than 100 (the input's min attribute), display a message:",,,,"checkValidity()|||Returns true if an input element contains valid data.&&&setCustomValidity()|||Sets the validationMessage property of an input element.$$$&&&validity|||Contains boolean properties related to the validity of an input element.&&&validationMessage|||Contains the message a browser will display when the validity is false.&&&willValidate|||Indicates if an input element will be validated.$$$customError|||Set to true, if a custom validity message is set.&&&patternMismatch|||Set to true, if an element's value does not match its pattern attribute.&&&rangeOverflow|||Set to true, if an element's value is greater than its max attribute.&&&rangeUnderflow|||Set to true, if an element's value is less than its min attribute.&&&stepMismatch|||Set to true, if an element's value is invalid per its step attribute.&&&tooLong|||Set to true, if an element's value exceeds its maxLength attribute.&&&typeMismatch|||Set to true, if an element's value is invalid per its type attribute.&&&valueMissing|||Set to true, if an element (with a required attribute) has no value.&&&valid|||Set to true, if an element's value is valid.",[]
JS Web APIs,Web History API,https://www.w3schools.com/js/js_api_history.asp,"The Web History API provides easy methods to access the windows.history object.|||The window.history object contains the URLs (Web Sites) visited by the user.|||The Web History API is supported in all browsers:|||The back() method loads the previous URL in the windows.history list.|||It is the same as clicking the ""back arrow"" in your browser.|||Go Back|||The go() method loads a specific URL from the history list:|||Go Back 2 Pages",,,,Yes|||Yes|||Yes|||Yes|||Yes$$$&&&length|||Returns the number of URLs in the history list$$$back()|||Loads the previous URL in the history list&&&forward()|||Loads the next URL in the history list&&&go()|||Loads a specific URL from the history list,[]
JS Web APIs,Web Storage API,https://www.w3schools.com/js/js_api_web_storage.asp,"The Web Storage API is a simple syntax for storing and retrieving data in the browser.It is very easy to use:|||The Web Storage API is supported in all browsers:|||The localStorage object provides access to a local storage for a particular Web Site.It allows you to store, read, add, modify, and delete data items for that domain.|||The data is stored with no expiration date, and will not be deleted when the browser is closed.|||The data will be available for days, weeks, and years.|||The localStorage.setItem() method stores a data item in a storage.|||It takes a name and a value as parameters:|||The localStorage.getItem() method retrieves a data item from the storage.|||It takes a name as parameter:|||The sessionStorage object is identical to the localStorage object.|||The difference is that the sessionStorage object stores data for one session.|||The data is deleted when the browser is closed.|||The sessionStorage.setItem() method stores a data item in a storage.|||It takes a name and a value as parameters:|||The sessionStorage.getItem() method retrieves a data item from the storage.|||It takes a name as parameter:",The localStorage Object,,,"Chrome|||IE/Edge|||Firefox|||Safari|||Opera&&&Yes|||Yes|||Yes|||Yes|||Yes$$$&&&key(n)|||Returns the name of the nth key in the storage&&&length|||Returns the number of data items stored in the Storage object&&&getItem(keyname)|||Returns the value of the specified key name&&&setItem(keyname, value)|||Adds that key to the storage, or update that key's value if it already 
    exists&&&removeItem(keyname)|||Removes that key from the storage&&&clear()|||Empty all key out of the storage$$$window.localStorage|||Allows to save key/value pairs in a web browser. Stores the data with no 
    expiration date&&&window.sessionStorage|||Allows to save key/value pairs in a web browser. Stores the data for one 
    session",[]
JS Web APIs,Web Worker API,https://www.w3schools.com/js/js_api_web_workers.asp,"A web worker is a JavaScript running in the background, without affecting the performance of the page.|||When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.|||A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.|||The numbers in the table specify the first browser versions that fully support Web Workers:|||The example below creates a simple web worker that count numbers in the background:|||Start WorkerStop Worker|||Before creating a web worker, check whether the user's browser supports it:|||Now, let's create our web worker in an external JavaScript.|||Here, we create a script that counts. The script is stored in the ""demo_workers.js"" file:|||The important part of the code above is the postMessage() method - which is used to post a message back to the HTML page.|||Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.|||Now that we have the web worker file, we need to call it from an HTML page.|||The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in ""demo_workers.js"":|||Then we can send and receive messages from the web worker.|||Add an ""onmessage"" event listener to the web worker.|||When the web worker posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data.|||When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.|||To terminate a web worker, and free browser/computer resources, use the terminate() method:|||If you set the worker variable to undefined, after it has been terminated, you can reuse the code:|||We have already seen the Worker code in the .js file. Below is the code for the HTML page:|||Since web workers are in external files, they do not have access to the following JavaScript objects:",Browser Support,The window object@@@The document object@@@The parent object,,Chrome 4|||IE 10|||Firefox 3.5|||Safari 4|||Opera 11.5&&&Jan 2010|||Sep 2012|||Jun 2009|||Jun 2009|||Jun 2011,"[['\nCount numbers: ', <output id=""result""></output>, '\n', <p>
<button onclick=""startWorker()"">Start Worker</button>
<button onclick=""stopWorker()"">Stop Worker</button>
<script>
var w;
function startWorker()
{
if(typeof(Worker)!==""undefined"") {
  if(typeof(w)==""undefined"") {
    w=new Worker(""demo_workers.js"");
  }
  w.onmessage = function (event) {
    document.getElementById(""result"").innerHTML=event.data;
  };
} else {
  document.getElementById(""result"").innerHTML=""Sorry, your browser does not support Web Workers..."";
  }
}

function stopWorker()
{ 
w.terminate();
w = undefined;
}
</script>
</p>]]"
JS Web APIs,Web Fetch API,https://www.w3schools.com/js/js_api_fetch.asp,"The Fetch API interface allows web browser to make HTTP requests to web servers.|||😀 No need for XMLHttpRequest anymore.|||The numbers in the table specify the first browser versions that fully support Fetch API:|||The example below fetches a file and displays the content:|||Since Fetch is based on async and await, the example above might be easier to understand like this:|||Or even bettter: Use understandable names instead of x and y:",Browser Support,,,Chrome 42|||Edge 14|||Firefox 40|||Safari 10.1|||Opera 29&&&Apr 2015|||Aug 2016|||Aug 2015|||Mar 2017|||Apr 2015,[]
JS Web APIs,Web Geolocation API,https://www.w3schools.com/js/js_api_geolocation.asp,"The HTML Geolocation API is used to get the geographical position of a user.|||Since this can compromise privacy, the position is not available unless the user approves it.|||Try It|||Note: Geolocation is most accurate for devices with GPS, like smartphone.|||The Geolocation API is supported in all browsers:|||Note: As of Chrome 50, the Geolocation API will only work on secure contexts such as HTTPS. If your site is hosted on an non-secure origin (such as HTTP) the requests to get the users location will no longer function.|||The getCurrentPosition() method is used to return the user's position.|||The example below returns the latitude and longitude of the user's position:|||Example explained:|||The example above is a very basic Geolocation script, with no error handling.|||The second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location:|||To display the result in a map, you need access to a map service, like Google Maps.|||In the example below, the returned latitude and longitude is used to show the location in a Google Map (using a static image):|||This page has demonstrated how to show a user's position on a map.|||Geolocation is also very useful for location-specific information, like:|||The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available:|||The Geolocation object also has other interesting methods:|||The example below shows the watchPosition() method. You need an accurate GPS device to test this (like smartphone): ",Displaying the Result in a Map,"Check if Geolocation is supported@@@If supported, run the getCurrentPosition() method. If not, display a message to the user@@@If the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition)@@@The showPosition() function outputs the Latitude and Longitude|||Up-to-date local information@@@Showing Points-of-interest near the user@@@Turn-by-turn navigation (GPS)|||watchPosition() - Returns the current position of the user and continues to return updated position as the user moves (like the GPS in a car).@@@clearWatch() - Stops the watchPosition() method.",,Yes|||Yes|||Yes|||Yes|||Yes$$$coords.latitude|||The latitude as a decimal number (always returned)&&&coords.longitude|||The longitude as a decimal number (always returned)&&&coords.accuracy|||The accuracy of position (always returned)&&&coords.altitude|||The altitude in meters above the mean sea level (returned if available)&&&coords.altitudeAccuracy|||The altitude accuracy of position (returned if available)&&&coords.heading|||The heading as degrees clockwise from North (returned if available)&&&coords.speed|||The speed in meters per second (returned if available)&&&timestamp|||The date/time of the response (returned if available),[]
JS AJAX,AJAX Intro,https://www.w3schools.com/js/js_ajax_intro.asp,"AJAX is a developer's dream, because you can:|||Try it Yourself »|||The HTML page contains a <div> section and a <button>.|||The <div> section is used to display information from a server.|||The <button> calls a function (if it is clicked).|||The function requests data from a web server and displays it:|||AJAX = Asynchronous JavaScript AndXML.|||AJAX is not a programming language.|||AJAX just uses a combination of:|||AJAX is a misleading name. AJAX applications might use XML to transport data,but it is equally common to transport data as plain text or JSON text.|||AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.This means that it is possible to update parts of a web page, without reloading the whole page.||||||Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.|||The Fetch API interface allows web browser to make HTTP requests to web servers.|||If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.",,"Read data from a web server - after the page has loaded@@@Update a web page without reloading the page@@@Send data to a web server - in the background|||A browser built-in XMLHttpRequest object (to request data from a web server)@@@JavaScript and HTML DOM (to display or use the data)|||1. An event occurs in a web page (the page is loaded, a button is clicked)@@@2. An XMLHttpRequest object is created by JavaScript@@@3. The XMLHttpRequest object sends a request to a web server@@@4. The server processes the request@@@5. The server sends a response back to the web page@@@6. The response is read by JavaScript@@@7. Proper action (like page update) is performed by JavaScript ",,,"[['\n', <div id=""demo"">
<h2>Let AJAX change this text</h2>
<button onclick=""loadDoc()"" type=""button"">Change Content</button>
</div>, '\n']]"
JS AJAX,AJAX XMLHttp,https://www.w3schools.com/js/js_ajax_http.asp,"The keystone of AJAX is the XMLHttpRequest object.|||All modern browsers support the XMLHttpRequest object.|||The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.|||All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in XMLHttpRequest object.|||Syntax for creating an XMLHttpRequest object:|||A callback function is a function passed as a parameter to another function.|||In this case, the callback function should contain the code to execute when the response is ready.|||To send a request to a server, you can use the open() and send() methods of theXMLHttpRequest object:|||For security reasons, modern browsers do not allow access across domains.|||This means that both the web page and the XML file it tries to load, must be located on the same server.|||The examples on W3Schools all open XML files located on the W3Schools domain.|||If you want to use the example above on one of your own web pages,the XML files you load must be located on your own server.|||With the XMLHttpRequest object you can define a callback function to be executed when the request receives an answer.|||The function is defined in the onload property of the XMLHttpRequest object:|||If you have more than one AJAX task in a website, you should create one function for executing the XMLHttpRequest object, and one callback function for each AJAX task.|||The function call should contain the URL and what function to call when the response is ready.|||The readyState property holds the status of the XMLHttpRequest.|||The onreadystatechange property defines a callback function to be executed when the readyState changes.|||The status property and the statusText properties hold the status of the XMLHttpRequest object.|||The onreadystatechange function is called every time the readyState changes. |||When readyState is 4 and status is 200, the response is ready:|||The onreadystatechange event is triggered four times (1-4), one time for each change in the readyState.",Multiple Callback Functions,,Create an XMLHttpRequest object@@@Define a callback function@@@Open the XMLHttpRequest object@@@Send a Request to a server,"new XMLHttpRequest()|||Creates a new XMLHttpRequest object&&&abort()|||Cancels the current request&&&getAllResponseHeaders()|||Returns header information&&&getResponseHeader()|||Returns specific header information&&&open(method, url, async, user, psw)|||Specifies the requestmethod: the request type GET or POST
url: the file location
async: true (asynchronous) or false (synchronous)user: optional user namepsw: optional password&&&send()|||Sends the request to the serverUsed for GET requests&&&send(string)|||Sends the request to the server.Used for POST requests&&&setRequestHeader()|||Adds a label/value pair to the header to be sent$$$&&&onload|||Defines a function to be called when the request is recieved (loaded)&&&onreadystatechange|||Defines a function to be called when the readyState property changes&&&readyState|||Holds the status of the XMLHttpRequest.
 0: request not initialized 
 1: server connection established
 2: request received 
 3: processing request 
 4: request finished and response is ready &&&responseText|||Returns the response data as a string&&&responseXML|||Returns the response data as XML data&&&status|||Returns the status-number of a request200: ""OK""403: ""Forbidden""404: ""Not Found""
    For a complete list go to the Http 
    Messages Reference&&&statusText|||Returns the status-text (e.g. ""OK"" or ""Not Found"")$$$onreadystatechange|||Defines a function to be called when the readyState property changes&&&readyState|||Holds the status of the XMLHttpRequest. 
 0: request not initialized 
 1: server connection established
 2: request received 
 3: processing request 
 4: request finished and response is ready&&&status|||200: ""OK""403: ""Forbidden""
 404: ""Page not found""For a complete list go to the
    Http Messages Reference&&&statusText|||Returns the status-text (e.g. ""OK"" or ""Not Found"")",[]
JS AJAX,AJAX Request,https://www.w3schools.com/js/js_ajax_http_send.asp,"The XMLHttpRequest object is used to request data from a server.|||To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:|||The url parameter of the open() method, is an address to a file on a server:|||The file can be any kind of file, like .txt and .xml, or server scripting files like .asp and .php (which can perform  actions on the server before sending the response back).|||Server requests should be sent asynchronously.|||The async parameter of the open() method should be set to true:|||By sending asynchronously, the JavaScript does not have to wait for the server response, but can instead:|||The default value for the async parameter is async = true.|||You can safely remove the third parameter from your code.|||Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop.|||GET is simpler and faster than POST, and can be used in most cases.|||However, always use POST requests when:|||A simple GET request:|||In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:|||If you want to send information with the GET method, add the information to the URL:|||How the server uses the input and how the server responds to a request, is explained in a later chapter.|||A simple POST request:|||To POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method:|||To execute a synchronous request, change the third parameter in the open() method to false:|||Sometimes async = false are used for quick testing. You will also find synchronous requests in older JavaScript code.|||Since the code will wait for server completion, there is no need for an onreadystatechange function:|||Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop.|||Modern developer tools are encouraged to warn about using synchronous requests and may throw an InvalidAccessError exception when it occurs.",Asynchronous - True or False?,"execute other scripts while waiting for server response@@@deal with the response after the response is ready|||A cached file is not an option (update a file or database on the server).@@@Sending a large amount of data to the server (POST has no size limitations).@@@Sending user input (which can contain unknown characters), POST is more robust and secure than GET.",,"open(method, url, async)|||Specifies the type of request
method: the type of request: GET or POST
url: the server (file) location
async: true (asynchronous) or false (synchronous)&&&send()|||Sends the request to the server (used for GET)&&&send(string)|||Sends the request to the server (used for POST)$$$setRequestHeader(header, value)|||Adds HTTP headers to the request
header: specifies the header name
value: specifies the header value",[]
JS AJAX,AJAX Response,https://www.w3schools.com/js/js_ajax_http_response.asp,"The responseText property returns the server response as a JavaScript string, and you can use it accordingly:|||The XMLHttpRequest object has an in-built XML parser.|||The responseXML property returns the server response as an XML DOM object.|||Using this property you can parse the response as an XML DOM object:|||Request the file cd_catalog.xml and parse the response:|||The getAllResponseHeaders() method returns all header information from the server response.|||The getResponseHeader() method returns specific header information from the server response.",,,,responseText|||get the response data as a string&&&responseXML|||get the response data as XML data$$$getResponseHeader()|||Returns specific header information from the server resource&&&getAllResponseHeaders()|||Returns all the header information from the server resource,[]
JS AJAX,AJAX XML File,https://www.w3schools.com/js/js_ajax_xmlfile.asp,"AJAX can be used for interactive communication with an XML file.|||The following example will demonstrate how a web page can fetch information from an XML file with AJAX:|||Try it Yourself »|||When a user clicks on the ""Get CD info"" button above, the loadDoc() function is executed.|||The loadDoc() function creates an XMLHttpRequest object, adds the function to be executed when the server response is ready, and sends the request off to the server.|||When the server response is ready, an HTML table is built, nodes (elements) are extracted from the XML file, and it finally updates the element ""demo"" with the HTML table filled with XML data:|||The XML file used in the example above looks like this: ""cd_catalog.xml"".",,,,,"[['\n', <div id=""demo"">
<button onclick=""loadDoc('cd_catalog.xml')"">Get CD info</button>
</div>, '\n']]"
JS AJAX,AJAX PHP,https://www.w3schools.com/js/js_ajax_php.asp,"AJAX is used to create more interactive applications.|||The following example demonstrates how a web page can communicate with a web server while a user types characters in an input field:|||Start typing a name in the input field below:|||Suggestions: |||First name: |||In the example above, when a user types a character in the input field, a function called showHint() is executed.|||The function is triggered by the onkeyup event.|||Here is the code:|||Code explanation:|||First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.|||However, if the input field is not empty, do the following:|||The PHP file checks an array of names, and returns the corresponding name(s) to the browser:",,"Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a PHP file (gethint.php) on the server@@@Notice that q parameter is added gethint.php?q=""+str@@@The str variable holds the content of the input field",,,"[['\n', <p><b>Start typing a name in the input field below:</b></p>, '\n', <p>Suggestions: <span id=""txtHint""></span></p>, '\n', <p>First name: <input id=""txt1"" onkeyup=""showHint(this.value)"" size=""20"" type=""text""/></p>, '\n']]"
JS AJAX,AJAX ASP,https://www.w3schools.com/js/js_ajax_asp.asp,"AJAX is used to create more interactive applications.|||The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:|||Start typing a name in the input field below:|||Suggestions: |||First name: |||In the example above, when a user types a character in the input field, a function called showHint() is executed.|||The function is triggered by the onkeyup event.|||Here is the code:|||Code explanation:|||First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.|||However, if the input field is not empty, do the following:|||The ASP file checks an array of names, and returns the corresponding name(s) to the browser:",,"Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to an ASP file (gethint.asp) on the server@@@Notice that q parameter is added gethint.asp?q=""+str@@@The str variable holds the content of the input field",,,"[['\n', <p><b>Start typing a name in the input field below:</b></p>, '\n', <p>Suggestions: <span id=""txtHint""></span></p>, '\n', <p>First name: <input id=""txt1"" onkeyup=""showHintASP(this.value)"" type=""text""/></p>, '\n']]"
JS AJAX,AJAX Database,https://www.w3schools.com/js/js_ajax_database.asp,"AJAX can be used for interactive communication with a database.|||The following example will demonstrate how a web page can fetch information from a database with AJAX:|||Try it Yourself »|||When a user selects a customer in the dropdown list above, a function called showCustomer() is executed. The function is triggered by the onchange event:|||The showCustomer() function does the following:|||The page on the server called by the JavaScript above is a PHP file called ""getcustomer.php"".|||The source code in ""getcustomer.php"" runs a query against a database, and returns the result in an HTML table:",,Check if a customer is selected@@@Create an XMLHttpRequest object@@@Create the function to be executed when the server response is ready@@@Send the request off to a file on the server@@@Notice that a parameter (q) is added to the URL (with the content of the dropdown list),,,"[['\n', <form action="""">
<select name=""customers"" onchange=""showCustomer(this.value)"">
<option value="""">Select a customer:</option>
<option value=""ALFKI"">Alfreds Futterkiste</option>
<option value=""NORTS "">North/South</option>
<option value=""WOLZA"">Wolski Zajazd</option>
</select>
</form>, '\n', '\n', <div id=""txtHint"">Customer info will be listed here...</div>, '\n']]"
JS AJAX,AJAX Applications,https://www.w3schools.com/js/js_ajax_applications.asp,"This chapter demonstrates some HTML applications using XML, HTTP, DOM, and JavaScript.|||In this chapter we will use the XML file called ""cd_catalog.xml"".|||This example loops through each <CD> element, and displays the values of the <ARTIST> and the <TITLE> elements in an HTML table:|||For more information about using JavaScript and the XML DOM, go toDOM Intro.|||This example uses a function to display the first CD element in an HTML element with id=""showCD"":|||To navigate between the CDs in the example above, create a next() and previous() function:|||The last example shows how you can show album information when the user clicks on a CD:",,,,,[]
JS AJAX,AJAX Examples,https://www.w3schools.com/js/js_ajax_examples.asp,Examples explained|||Examples explained|||Examples explained|||Examples explained|||Examples explained|||Examples explained,,,,,[]
JS JSON,JSON Intro,https://www.w3schools.com/js/js_json_intro.asp,"JSON stands for JavaScript Object Notation|||JSON is a text format for storing and transporting data|||JSON is ""self-describing"" and easy to understand|||This example is a JSON string:|||It defines an object with 3 properties:|||Each property has a value.|||If you parse the JSON string with a JavaScript program, you can access the dataas an object:|||*The JSON syntax is derived from JavaScript object notation, but the JSON format is text only.|||Code for reading and generating JSON exists in many programming languages.|||The JSON format was originally specified byDouglas Crockford.|||The JSON format is syntactically similar to the code for creating JavaScript objects.Because of this, a JavaScript program can easily convert JSON data into JavaScript objects.|||Since the format is text only, JSON data can easily be sent between computers,and used by any programming language.|||JavaScript has a built in function for converting JSON strings into JavaScript objects:|||JSON.parse()|||JavaScript also has a built in function for converting an object into a JSON string:|||JSON.stringify()|||You can receive pure text from a server and use it as a JavaScript object.|||You can send a JavaScript object to a server in pure text format.|||You can work with data as JavaScript objects, with no complicated parsing and translations.|||When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.|||JSON makes it possible to store JavaScript objects as text.",What is JSON?,name@@@age@@@car|||JSON stands for JavaScript Object Notation@@@JSON is a lightweight data-interchange format@@@JSON is plain text written in JavaScript object notation@@@JSON is used to send data between computers@@@JSON is language independent *,,,[]
JS JSON,JSON Syntax,https://www.w3schools.com/js/js_json_syntax.asp,"The JSON syntax is a subset of the JavaScript syntax.|||JSON syntax is derived from JavaScript object notation syntax:|||JSON data is written as name/value pairs (aka key/value pairs).|||A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:|||JSON names require double quotes.|||The JSON format is almost identical to JavaScript objects.|||In JSON, keys must be strings, written with double quotes:|||In JavaScript, keys can be strings, numbers, or identifier names:|||JSON Values|||In JSON, values must be one of the following data types:|||In JavaScript values can be all of the above, plus any other valid JavaScript expression, including:|||In JSON, string values must be written with double quotes:|||In JavaScript, you can write string values with double or single quotes:|||Because JSON syntax is derived from JavaScript object notation, very little extra software is needed to work with JSON within JavaScript.|||With JavaScript you can create an object and assign data to it, like this:|||You can access a JavaScript object like this:|||It can also be accessed like this:|||Data can be modified like this:|||It can also be modified like this:|||You will learn how to convert JavaScript objects into JSON later in this tutorial. |||The same way JavaScript objects can be written as JSON, JavaScript arrays can also be written as JSON.|||You will learn more about objects and arrays later in this tutorial.",JSON Files,"Data is in name/value pairs@@@Data is separated by commas@@@Curly braces hold objects@@@Square brackets hold arrays|||a string@@@a number@@@an object@@@an array@@@a boolean@@@null|||a function@@@a date@@@undefined|||The file type for JSON files is "".json""@@@The MIME type for JSON text is ""application/json""",,,[]
JS JSON,JSON vs XML,https://www.w3schools.com/js/js_json_xml.asp,"Both JSON and XML can be used to receive data from a web server.|||The following JSON and XML examples both define an employees object, with an array of 3 employees:|||The biggest difference is:||| XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function. |||XML is much more difficult to parse than JSON.JSON is parsed into a ready-to-use JavaScript object.|||For AJAX applications, JSON is faster and easier than XML:|||Using XML|||Using JSON", JSON is Like XML Because|||JSON is Unlike XML Because,"Both JSON and XML are ""self describing"" (human readable)@@@Both JSON and XML are hierarchical (values within values)@@@Both JSON and XML can be parsed and used by lots of programming languages@@@Both JSON and XML can be fetched with an XMLHttpRequest |||JSON doesn't use end tag@@@JSON is shorter@@@JSON is quicker to read and write@@@JSON can use arrays|||Fetch an XML document@@@Use the XML DOM to loop through the document@@@Extract values and store in variables|||Fetch a JSON string@@@JSON.Parse the JSON string",,,[]
JS JSON,JSON Data Types,https://www.w3schools.com/js/js_json_datatypes.asp,"In JSON, values must be one of the following data types:|||JSON values cannot be one of the following data types:|||Strings in JSON must be written in double quotes.|||Numbers in JSON must be an integer or a floating point.|||Values in JSON can be objects.|||Objects as values in JSON must follow the JSON syntax.|||Values in JSON can be arrays.|||Values in JSON can be true/false.|||Values in JSON can be null.",JSON null,a string@@@a number@@@an object (JSON object)@@@an array@@@a boolean@@@null|||a function@@@a date@@@undefined,,,[]
JS JSON,JSON Parse,https://www.w3schools.com/js/js_json_parse.asp,"A common use of JSON is to exchange data to/from a web server.|||When receiving data from a web server, the data is always a string.|||Parse the data with JSON.parse(), and the data becomes a JavaScript object.|||Imagine we received this text from a web server:|||Use the JavaScript function JSON.parse() to convert text into a JavaScript object:|||Make sure the text is in JSON format, or else you will get a syntax error.|||Use the JavaScript object in your page:|||When using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.|||Date objects are not allowed in JSON.|||If you need to include a date, write it as a string.|||You can convert it back into a date object later:|||Convert a string into a date:|||Or, you can use the second parameter, of the JSON.parse() function, called reviver.|||The reviver parameter is a function that checks each property, before returning the value.|||Convert a string into a date, using the reviver function:|||Functions are not allowed in JSON.|||If you need to include a function, write it as a string.|||You can convert it back into a function later:|||Convert a string into a function:|||You should avoid using functions in JSON, the functions will lose their scope, and you would have to use eval() to convert them back into functions.",,,,,[]
JS JSON,JSON Stringify,https://www.w3schools.com/js/js_json_stringify.asp,"A common use of JSON is to exchange data to/from a web server.|||When sending data to a web server, the data has to be a string.|||Convert a JavaScript object into a string with JSON.stringify().|||Imagine we have this object in JavaScript:|||Use the JavaScript function JSON.stringify() to convert it into a string.|||The result will be a string following the JSON notation.|||myJSON is now a string, and ready to be sent to a server:|||You will learn how to send JSON to a server in the next chapters.|||It is also possible to stringify JavaScript arrays:|||Imagine we have this array in JavaScript:|||Use the JavaScript function JSON.stringify() to convert it into a string.|||The result will be a string following the JSON notation.|||myJSON is now a string, and ready to be sent to a server:|||You will learn how to send a JSON string to a server in the next chapters.|||When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.|||JSON makes it possible to store JavaScript objects as text.|||Storing data in local storage|||In JSON, date objects are not allowed. The JSON.stringify() function will convert any dates into strings.|||You can convert the string back into a date object at the receiver.|||In JSON, functions are not allowed as object values.|||The JSON.stringify() function will remove any functions from a JavaScript object, both the key and the value:|||This can be omitted if you convert your functions into strings before running the JSON.stringify() function.|||If you send functions using JSON, the functions will lose their scope, and the receiver would have to use eval() to convert them back into functions.",,,,,[]
JS JSON,JSON Objects,https://www.w3schools.com/js/js_json_objects.asp,"This is a JSON string:|||Inside the JSON string there is a JSON object literal:|||JSON object literals are surrounded by curly braces {}.|||JSON object literals contains key/value pairs.|||Keys and values are separated by a colon.|||Keys must be strings, and values must be a valid JSON data type:stringnumberobjectarraybooleannull|||Each key/value pair is separated by a comma.|||It is a common mistake to call a JSON object literal ""a JSON object"".|||JSON cannot be an object. JSON is a string format.|||The data is only JSON when it is in a string format. When it is converted to a JavaScript variable, it becomes a JavaScript object.|||You can create a JavaScript object from a JSON object literal:ExamplemyObj = {""name"":""John"", ""age"":30, ""car"":null};Try it Yourself »Normally, you create a JavaScript object by parsing a JSON string:ExamplemyJSON = '{""name"":""John"", ""age"":30, ""car"":null}';myObj = JSON.parse(myJSON);Try it Yourself »Accessing Object ValuesYou can access object values by using dot (.) notation:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);  x = myObj.name;Try it Yourself »You can also access object values by using bracket ([]) notation:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);  x = myObj[""name""];Try it Yourself »Looping an ObjectYou can loop through object properties with a for-in loop:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);let text = """";for (const x in myObj) {  text += x + "", "";}Try it Yourself »In a for-in loop, use the bracket notation to access the property values:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);let text = """";for (const x in myObj) {  text += myObj[x] + "", "";}Try it Yourself »❮ PreviousNext ❯|||Normally, you create a JavaScript object by parsing a JSON string:ExamplemyJSON = '{""name"":""John"", ""age"":30, ""car"":null}';myObj = JSON.parse(myJSON);Try it Yourself »Accessing Object ValuesYou can access object values by using dot (.) notation:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);  x = myObj.name;Try it Yourself »You can also access object values by using bracket ([]) notation:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);  x = myObj[""name""];Try it Yourself »Looping an ObjectYou can loop through object properties with a for-in loop:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);let text = """";for (const x in myObj) {  text += x + "", "";}Try it Yourself »In a for-in loop, use the bracket notation to access the property values:Exampleconst myJSON = '{""name"":""John"", ""age"":30, ""car"":null}';const myObj = JSON.parse(myJSON);let text = """";for (const x in myObj) {  text += myObj[x] + "", "";}Try it Yourself »❮ PreviousNext ❯|||You can access object values by using dot (.) notation:|||You can also access object values by using bracket ([]) notation:|||You can loop through object properties with a for-in loop:|||In a for-in loop, use the bracket notation to access the property values:",,string@@@number@@@object@@@array@@@boolean@@@null,,,[]
JS JSON,JSON Arrays,https://www.w3schools.com/js/js_json_arrays.asp,"This is a JSON string:|||Inside the JSON string there is a JSON array literal:|||Arrays in JSON are almost the same as arrays in JavaScript.|||In JSON, array values must be of type string, number, object, array, boolean or null.|||In JavaScript, array values can be all of the above, plus any other valid JavaScript expression, including functions, dates, and undefined.|||You can create a JavaScript array from a literal:ExamplemyArray = [""Ford"", ""BMW"", ""Fiat""];Try it Yourself »You can create a JavaScript array by parsing a JSON string:ExamplemyJSON = '[""Ford"", ""BMW"", ""Fiat""]';myArray = JSON.Parse(myJSON);Try it Yourself »Accessing Array ValuesYou access array values by index:ExamplemyArray[0];Try it Yourself »Arrays in ObjectsObjects can contain arrays:Example{""name"":""John"",""age"":30,""cars"":[""Ford"", ""BMW"", ""Fiat""]}You access array values by index:ExamplemyObj.cars[0];Try it Yourself »Looping Through an ArrayYou can access array values by using a for in loop:Examplefor (let i in myObj.cars) {    x   += myObj.cars[i];}Try it Yourself »Or you can use a for loop:Example  for (let i   = 0; i < myObj.cars.length; i++) {  x   += myObj.cars[i];}Try it Yourself »❮ PreviousNext ❯|||You can create a JavaScript array by parsing a JSON string:ExamplemyJSON = '[""Ford"", ""BMW"", ""Fiat""]';myArray = JSON.Parse(myJSON);Try it Yourself »Accessing Array ValuesYou access array values by index:ExamplemyArray[0];Try it Yourself »Arrays in ObjectsObjects can contain arrays:Example{""name"":""John"",""age"":30,""cars"":[""Ford"", ""BMW"", ""Fiat""]}You access array values by index:ExamplemyObj.cars[0];Try it Yourself »Looping Through an ArrayYou can access array values by using a for in loop:Examplefor (let i in myObj.cars) {    x   += myObj.cars[i];}Try it Yourself »Or you can use a for loop:Example  for (let i   = 0; i < myObj.cars.length; i++) {  x   += myObj.cars[i];}Try it Yourself »❮ PreviousNext ❯|||You access array values by index:|||Objects can contain arrays:|||You access array values by index:|||You can access array values by using a for in loop:|||Or you can use a for loop:",,,,,[]
JS JSON,JSON Server,https://www.w3schools.com/js/js_json_server.asp,"A common use of JSON is to exchange data to/from a web server.|||When receiving data from a web server, the data is always a string.|||Parse the data with JSON.parse(), and the data becomes a JavaScript object.|||If you have data stored in a JavaScript object, you can convert the object into JSON, and send it to a server:|||If you receive data in JSON format, you can easily convert it into a JavaScript object:|||You can request JSON from the server by using an AJAX request|||As long as the response from the server is written in JSON format, you can parse the string into a JavaScript object.|||Use the XMLHttpRequest to get data from the server:|||Take a look at json_demo.txt|||When using the JSON.parse() on JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.|||JSON returned from a server as an array:|||Take a look at json_demo_array.txt",,,,,[]
JS JSON,JSON PHP,https://www.w3schools.com/js/js_json_php.asp,"A common use of JSON is to read data from a web server, and display the data in a web page.|||This chapter will teach you how to exchange JSON data between the client and a PHP server.|||PHP has some built-in functions to handle JSON.|||Objects in PHP can be converted into JSON by using the PHP functionjson_encode():|||Here is a JavaScript on the client, using an AJAX call to request the PHP file from the example above:|||Use JSON.parse() to convert the result into a JavaScript object:|||Arrays in PHP will also be converted into JSON when using the PHP functionjson_encode():|||Here is a JavaScript on the client, using an AJAX call to request the PHP file from the array example above:|||Use JSON.parse() to convert the result into a JavaScript array:|||PHP is a server side programming language, and can be used to access a database.|||Imagine you have a database on your server, and you want to send a request to it from the client where you ask for the 10 first rows in a table called ""customers"".|||On the client, make a JSON object that describes the numbers of rows you want to return.|||Before you send the request to the server, convert the JSON object into a string and send it as a parameter to the url of the PHP page:|||Use JSON.stringify() to convert the JavaScript object into JSON:|||Take a look at the PHP file:|||When sending data to the server, it is often best to use the HTTP POST method.|||To send AJAX requests using the POST method, specify the method, and the correct header.|||The data sent to the server must now be an argument to the send() method:|||The only difference in the PHP file is the method for getting the transferred data.|||Use $_POST instead of $_GET:",Example|||Example|||Example explained:|||PHP File explained:,"Define an object containing a ""limit"" property and value.@@@Convert the object into a JSON string.@@@Send a request to the PHP file, with the JSON string as a parameter.@@@Wait until the request returns with the result (as JSON)@@@Display the result received from the PHP file.|||Convert the request into an object, using the PHP function  json_decode().@@@Access the database, and fill an array with the requested data.@@@Add the array to an object, and return the object as JSON using the json_encode() function.",,,[]
JS JSON,JSON HTML,https://www.w3schools.com/js/js_json_html.asp,JSON can very easily be translated into JavaScript.|||JavaScript can be used to make HTML in your web pages.|||Make an HTML table with data received as JSON:|||Make the HTML table based on the value of a drop down menu:Choose an option:CustomersProductsSuppliers|||Make an HTML drop down list with data received as JSON:,,,,,[]
JS JSON,JSON JSONP,https://www.w3schools.com/js/js_json_jsonp.asp,"JSONP is a method for sending JSON data without worrying about cross-domain issues.|||JSONP does not use the XMLHttpRequest object.|||JSONP uses the <script> tag instead.|||JSONP stands for JSON with Padding.|||Requesting a file from another domain can cause problems, due to cross-domain policy.|||Requesting an external script from another domain does not have this problem.|||JSONP uses this advantage, and request files using the script tag instead of the XMLHttpRequest object.|||The file on the server wraps the result inside a function call:|||The result returns a call to a function named ""myFunc"" with the JSON data as a parameter.|||Make sure that the function exists on the client.|||The function named ""myFunc"" is located on the client, and ready to handle JSON data:|||The example above will execute the ""myFunc"" function when the page is loading, based on where you put the script tag, which is not very satisfying.|||The script tag should only be created when needed:|||Create and insert the <script> tag when a button is clicked:|||The examples above are still very static.|||Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on the information it gets.|||The ""myFunc"" function will be called from the php file:|||When you have no control over the server file, how do you get the server file to call the correct function?|||Sometimes the server file offers a callback function as a parameter:|||The php file will call the function you pass as a callback parameter:",The Server File|||PHP File explained:,"Convert the request into an object, using the PHP function  json_decode().@@@Access the database, and fill an array with the requested data.@@@Add the array to an object.@@@Convert the array into JSON using the json_encode() function.@@@Wrap ""myFunc()"" around the return object.",,,[]
JS vs jQuery,jQuery Selectors,https://www.w3schools.com/js/js_jquery_selectors.asp,"jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.|||However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:|||Return the element with id=""id01"":|||Try it Yourself »|||Try it Yourself »|||Return all <p> elements:|||Try it Yourself »|||Try it Yourself »|||Return all elements with class=""intro"".|||Try it Yourself »|||Try it Yourself »|||Return a list of all <p> elements with class=""intro"".|||Try it Yourself »|||Try it Yourself »",jQuery vs JavaScript,,,,[]
JS vs jQuery,jQuery HTML,https://www.w3schools.com/js/js_jquery_elements.asp,"jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.|||However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:|||Set the inner text of an HTML element:|||Try it Yourself »|||Try it Yourself »|||Get the inner text of an HTML element:|||Try it Yourself »|||Try it Yourself »|||Set the HTML content of an element:|||Try it Yourself »|||Try it Yourself »|||Get the HTML content of an element:|||Try it Yourself »|||Try it Yourself »",jQuery vs JavaScript,,,,[]
JS vs jQuery,jQuery CSS,https://www.w3schools.com/js/js_jquery_css.asp,"jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.|||However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:|||Hide an HTML Element:|||Try it Yourself »|||Try it Yourself »|||Show an HTML Element:|||Try it Yourself »|||Try it Yourself »|||Change the font size of an HTML element:|||Try it Yourself »|||Try it Yourself »",jQuery vs JavaScript,,,,[]
JS vs jQuery,jQuery DOM,https://www.w3schools.com/js/js_jquery_dom.asp,"jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.|||However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:|||Remove an HTML element:|||Try it Yourself »|||Try it Yourself »|||Return the parent of an HTML element:|||Try it Yourself »|||Try it Yourself »",jQuery vs JavaScript,,,,[]
JS Graphics,JS Graphics,https://www.w3schools.com/js/js_graphics.asp,"JavaScript libraries to use for both Artificial Intelligence graphs and other charts:|||Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.|||Learn More ...Chart.jsChart.js comes with many built-in chart types:ScatterLineBarRadarPie and DoughnutPolar AreaBubbleLearn More ...Google ChartFrom simple line charts to complex tree maps,Google Chart provides a number of built-in chart types:Scatter ChartLine Chart Bar / Column ChartArea ChartPie ChartDonut ChartOrg ChartMap / Geo ChartLearn More ...❮ PreviousNext ❯|||Chart.js comes with many built-in chart types:|||Learn More ...Google ChartFrom simple line charts to complex tree maps,Google Chart provides a number of built-in chart types:Scatter ChartLine Chart Bar / Column ChartArea ChartPie ChartDonut ChartOrg ChartMap / Geo ChartLearn More ...❮ PreviousNext ❯|||From simple line charts to complex tree maps,Google Chart provides a number of built-in chart types:|||Learn More ...❮ PreviousNext ❯",,Plotly.js@@@Chart.js@@@Google Chart|||Scatter@@@Line@@@Bar@@@Radar@@@Pie and Doughnut@@@Polar Area@@@Bubble|||Scatter Chart@@@Line Chart @@@Bar / Column Chart@@@Area Chart@@@Pie Chart@@@Donut Chart@@@Org Chart@@@Map / Geo Chart,,,[]
JS Graphics,JS Canvas,https://www.w3schools.com/js/js_graphics_canvas.asp,HTML Canvas is perfect for Scatter Plots|||HTML Canvas is perfect for Line Graphs|||HTML Canvas is perfect for combining Scatter and Lines|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »,,,,,[]
JS Graphics,JS Plotly,https://www.w3schools.com/js/js_graphics_plotly.asp,"Plotly.js is a charting library thatcomes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||To display a pie instead of bars, change x and y to labels and values, and change the type to ""pie"":|||Try it Yourself »|||To display a donut instead of a pie, add a hole:|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »",,,,,[]
JS Graphics,JS Chart.js,https://www.w3schools.com/js/js_graphics_chartjs.asp,"Chart.js comes with the following built-in chart types:|||Chart.js is easy to use.|||First, add a link to the providing CDN (Content Delivery Network):|||Then, add a <canvas> to where you want to draw the chart:|||The canvas element must have a unique id.|||That's all!|||House Prices vs. Size|||Try it Yourself »|||House Prices vs. Size|||Try it Yourself »|||If you set the borderColor to zero, you can scatter plot the line graph:|||Try it Yourself »|||Try it Yourself »|||Try it Yourself »|||Same as Linear Graph. Just change the generateData parameter(s):|||Try it Yourself »|||Try it Yourself »|||Color only one bar:|||Try it Yourself »|||Same color all bars:|||Try it Yourself »|||Color Shades:|||Try it Yourself »|||Just change type from ""bar"" to ""horizontalBar"":|||Try it Yourself »|||Try it Yourself »|||Just change type from ""pie"" to ""doughnut"":|||Try it Yourself »",,Scatter@@@Line@@@Bar@@@Radar@@@Pie and Doughnut@@@Polar Area@@@Bubble,,,[]
JS Graphics,JS Google Chart,https://www.w3schools.com/js/js_graphics_google_chart.asp,"From simple line charts to complex hierarchical tree maps,the Google Chart gallery provides a large number of ready-to-use chart types:|||To use Google Chart in your web page, add a link to the charts loader:|||Google Chart is easy to use.|||Just add a <div> element to display the chart:|||The <div> element must have a unique id.|||Then load the Google Graph API:|||That's all!|||Try it Yourself »|||To scatter plot the same data, change google.visualization to ScatterChart:|||Try it Yourself »|||Try it Yourself »|||To convert a Bar Chart to a Pie chart, just replace:google.visualization.BarChartwith:google.visualization.PieChart|||Try it Yourself »|||To display the Pie in 3D, just add is3D: true to the options:|||Try it Yourself »",,Scatter Chart@@@Line Chart @@@Bar / Column Chart@@@Area Chart@@@Pie Chart@@@Donut Chart@@@Org Chart@@@Map / Geo Chart,Load the Visualization API and the corechart package@@@Set a callback function to call when the API is loaded,,[]
JS Graphics,JS D3.js,https://www.w3schools.com/js/js_graphics_d3js.asp,"D3.js is a JavaScript library for manipulating HTML based on data.|||To use D3.js in your web page, add a link to the library:|||D3.js is easy to use.|||This script selects the body element and appends a paragraph with the text ""Hello World!"":|||Try it Yourself »|||Try it Yourself »",,,,,[]
JS Examples,JS Examples,https://www.w3schools.com/js/js_examples.asp,Examples Explained|||Where to Explained|||Output Explained|||Syntax Explained|||Statements Explained|||Comments Explained|||Variables Explained|||Arithmetic Explained|||Assignment Explained|||Concatenation Explained|||Data types Explained|||Objects Explained|||Functions Explained|||Events Explained|||Strings Explained|||Numbers Explained|||Numbers Methods Explained|||Maths Explained|||Random Explained|||Dates Explained|||Arrays Explained|||Array Methods Explained|||Array Sort Explained|||Array Iteration Explained|||Type Conversion Explained|||Booleans Explained|||Comparisons Explained|||Conditionals Explained|||Loops Explained|||Errors Explained|||Regular Expressions Explained|||Objects Explained|||Object Properties Explained|||JSON Object Properties Explained|||JSON Arrays Explained|||JSON Parse Explained|||JSON Stringify Explained|||JSON PHP Explained|||JSON HTML Explained|||JSON JSONP Explained,,,,,[]
JS Examples,JS HTML DOM,https://www.w3schools.com/js/js_dom_examples.asp,Examples of using JavaScript to access and manipulate DOM objects.|||Document Object Explained,,,,,[]
JS Examples,JS HTML Input,https://www.w3schools.com/js/js_input_examples.asp,Examples of using JavaScript to access and manipulate HTML input objects.,,,,,[]
JS Examples,JS HTML Objects,https://www.w3schools.com/js/js_ex_dom.asp,Examples of using JavaScript to access and manipulate HTML objects.,,,,,[]
JS Examples,JS HTML Events,https://www.w3schools.com/js/js_events_examples.asp,Examples of using JavaScript to react to events|||Examples explained,,,,,[]
JS Examples,JS Browser,https://www.w3schools.com/js/js_ex_browser.asp,Examples of using JavaScript to access and manipulate the Browser objects.|||Window explained|||Screen explained|||Location explained|||History explained|||Navigator explained|||Popup explained|||Timing explained|||Cookies explained,,,,,[]
JS Examples,JS Editor,https://www.w3schools.com/js/js_editor.asp,"With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The ""Result Size"" returns the width and the height of the result window in pixels (even when you resize the browser window).|||You can control the size of a window with the bar in between the windows (draggable gutter).|||The icons are explained in the table below:",JavaScript Editor|||JavaScript Editor Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Save your code (and share it with others)&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
JS Examples,JS Exercises,https://www.w3schools.com/js/js_exercises.asp,"You can test your JavaScript skills with W3Schools' Exercises.|||We have gathered a variety of JavaScript exercises (with answers) for each JavaScript Chapter.|||Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start JavaScript Exercises ❯|||If you don't know JavaScript, we suggest that you read our JavaScript Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
JS Examples,JS Quiz,https://www.w3schools.com/js/js_quiz.asp,"You can test your JavaScript skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the JavaScript Quiz ❯|||If you don't know JavaScript, we suggest that you read our JavaScript Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
JS Examples,JS Certificate,https://www.w3schools.com/js/js_exam.asp,"W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.|||Getting a certificate proves your commitment to upgrade your skills,gives you the credibility needed for more responsibilities, larger projects, and a higher salary.|||Get Your Certificate »",How Does It Work?,"Study for free at W3Schools.com@@@Study at your own speed@@@Test your skills with W3Schools online quizzes@@@Apply for your certificate by paying an exam fee@@@Take your exam online, at any time, and from any location",,"
Document Your Skills
Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.
Get a Certificate
Getting a certificate proves your commitment to upgrade your skills,
gives you the credibility needed for more responsibilities, larger projects, and a higher salary.

Get Your Certificate »

|||

",[]
JS References,JavaScript Objects,https://www.w3schools.com/jsref/default.asp,"This section contains a complete JavaScript reference documentation.|||The references describe the properties and methods of all JavaScript objects, along with examples.|||The references describe the properties and methods of the Window object, along with examples.|||The references describe the properties and methods of each DOM object, along with examples.|||This references describes the most common Web APIs, along with examples.|||The references describe the properties and methods of each HTML object, along with examples.||||||Visit Our JavaScript Tutorial »",JavaScript Tutorial,,,,[]
JS References,HTML DOM Objects,https://www.w3schools.com/jsref/default.asp,"This section contains a complete JavaScript reference documentation.|||The references describe the properties and methods of all JavaScript objects, along with examples.|||The references describe the properties and methods of the Window object, along with examples.|||The references describe the properties and methods of each DOM object, along with examples.|||This references describes the most common Web APIs, along with examples.|||The references describe the properties and methods of each HTML object, along with examples.||||||Visit Our JavaScript Tutorial »",JavaScript Tutorial,,,,[]
