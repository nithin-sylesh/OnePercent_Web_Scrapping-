Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
React Tutorial,React Home,https://www.w3schools.com/react/default.asp,"React is a JavaScript library for building user interfaces.|||React is used to build single-page applications.|||React allows us to create reusable UI components.|||Our ""Show React"" tool makes it easy to demonstrate React. It shows both the code and the result.|||Run Example »|||Enter the correct ReactDOM method to render the React element to the DOM.|||Start the Exercise|||Test your React skills with a quiz.|||React Quiz|||To learn and test React, you should set up a React Environment on your computer.|||This tutorial uses the create-react-app.|||The create-react-app tool is an officially supported way to create React applications.|||Node.js is required to use create-react-app.|||Open your terminal in the directory you would like to create your application.|||Run this command to create a React application namedmy-react-app:|||create-react-app will set up everything you need to run a React application.|||Note:If you've previously installed create-react-app globally,it is recommended that you uninstall the package to ensure npx always uses the latest version ofcreate-react-app.To uninstall, run this command: npm uninstall -g create-react-app.|||Run this command to move to the my-react-app directory:|||Run this command to execute the React application my-react-app:|||A new browser window will pop up with your newly created React App! If not, open your browser and type localhost:3000 in the address bar.|||The result:|||You will learn more about the create-react-app in the React Get Started chapter.|||Before starting with React.JS, you should have intermediate experience in:|||You should also have some experience with the new JavaScript features introduced in ECMAScript 6 (ES6), you will learn about them in the React ES6 chapter.|||Get certified by completing the  course",Learning by Examples|||Create React App|||What You Should Already Know,HTML@@@CSS@@@JavaScript,,,[]
React Tutorial,React Intro,https://www.w3schools.com/react/react_intro.asp,"React, sometimes referred to as a frontend JavaScript framework, is a JavaScript library created by Facebook.|||React is a tool for building UI components.|||React creates a VIRTUAL DOM in memory.|||Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.|||React only changes what needs to be changed!|||React finds out what changes have been made, and changes only what needs to be changed. |||You will learn the various aspects of how React does this in the rest of this tutorial.|||Current version of React.JS is V17.0.2 (August 2021).|||Initial Release to the Public (V0.3.0) was in July 2013.|||React.JS was first used in 2011 for Facebook's Newsfeed feature. |||Facebook Software Engineer, Jordan Walke, created it.|||Current version of create-react-app is v4.0.3 (August 2021).|||create-react-app includes built tools such as webpack, Babel, and ESLint.",,,,,[]
React Tutorial,React Get Started,https://www.w3schools.com/react/react_getstarted.asp,"To use React in production, you need npm which is included with Node.js.|||To get an overview of what React is, you can write React code directly in HTML.|||But in order to use React in production, you need npm and Node.js installed.|||The quickest way start learning React is to write React directly in your HTML files.|||The easiest way to get started with creating HTML files is W3Schools Spaces!|||It is the perfect place to create, edit, and share your work with others!|||Get started for free ❯|||Start by including three scripts, the first two let us write React code in our JavaScripts, and the third, Babel, allows us to write JSX syntax and ES6 in older browsers.|||You will learn more about JSX in the React JSX chapter.|||Include three CDN's in your HTML file:|||Try it Yourself »|||This way of using React can be OK for testing purposes, but for production you will need to set up a React environment.|||If you have npx and Node.js installed, you can create a React application by using create-react-app.|||If you've previously installed create-react-app globally,it is recommended that you uninstall the package to ensure npx always uses the latest version of create-react-app.|||To uninstall, run this command: npm uninstall -g create-react-app.|||Run this command to create a React application namedmy-react-app:|||The create-react-app will set up everything you need to run a React application.|||Now you are ready to run your first real React application!|||Run this command to move to the my-react-app directory:|||Run this command to run the React application my-react-app:|||A new browser window will pop up with your newly created React App! If not, open your browser and type localhost:3000 in the address bar.|||The result:|||So far so good, but how do I change the content?|||Look in the my-react-app directory, and you will find a src folder. Inside thesrc folder there is a file called App.js, open it and it will look like this:|||/myReactApp/src/App.js:|||Try changing the HTML content and save the file.|||Notice that the changes are visible immediately after you save the file, you do not have to reload the browser!|||Replace all the content inside the <div  className=""App""> with a <h1> element.|||See the changes in the browser when you click Save.|||Notice that we have removed the imports we do not need (logo.svg and App.css).|||The result:|||Now you have a React Environment on your computer, and you are ready to learn more about React.|||In the rest of this tutorial we will use our ""Show React"" tool to explain the various aspects of React, and how they are displayed in the browser.|||If you want to follow the same steps on your computer, start by stripping down the src folder to only contain one file: index.js. You should also remove any unnecessary lines of code inside the index.js file to make them look like the example in the ""Show React"" tool below:|||Click the ""Run Example"" button to see the result.|||index.js:|||Run Example »|||Enter the correct ReactDOM method to render the React element to the DOM.|||Start the Exercise",Certified!|||Example,,,,[]
React Tutorial,React ES6,https://www.w3schools.com/react/react_es6.asp,"ES6 stands for ECMAScript 6.|||ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015.|||React uses ES6, and you should be familiar with some of the new features like:",Why Should I Learn ES6?,"Classes@@@Arrow Functions@@@Variables (let, const, var)@@@Array Methods like .map()@@@Destructuring@@@Modules@@@Ternary Operator@@@Spread Operator",,,[]
React Tutorial,React Render HTML,https://www.w3schools.com/react/react_render.asp,"React's goal is in many ways to render HTML in a web page.|||React renders HTML to the web page by using a function called ReactDOM.render().|||The ReactDOM.render() function takes two arguments, HTML code and an HTML element.|||The purpose of the function is to display the specified HTML code inside the specified HTML element.|||But render where?|||There is another folder in the root directory of your React project, named ""public"".In this folder, there is an index.html file.|||You'll notice a single <div>in the body of this file. This is where our React application will be rendered.|||Display a paragraph inside an element with the id of ""root"":|||The result is displayed in the <div id=""root""> element:|||Run Example »|||Note that the element id does not have to be called ""root"", but this is the standard convention.|||The HTML code in this tutorial uses JSX which allows you to write HTML tags inside the JavaScript code:|||Do not worry if the syntax is unfamiliar, you will learn more about JSX in the next chapter.|||Create a variable that contains HTML code and display it in the ""root"" node:|||Run Example »|||The root node is the HTML element where you want to display the result.|||It is like a container for content managed by React.|||It does NOT have to be a <div> element and it does NOT have to have the id='root':|||The root node can be called whatever you like:|||Display the result in the <header id=""sandy""> element:|||Run Example »",Certified!|||The Root Node,,,,[]
React Tutorial,React JSX,https://www.w3schools.com/react/react_jsx.asp,"JSX stands for JavaScript XML.|||JSX allows us to write HTML in React.|||JSX makes it easier to write and add HTML in React.|||JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/orappendChild() methods.|||JSX converts HTML tags into react elements.|||You are not required to use JSX, but JSX makes it easier to write React applications.|||Here are two examples. The first uses JSX and the second does not:|||JSX:|||Run Example »|||Without JSX:|||Run Example »|||As you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.|||JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.|||With JSX you can write expressions inside curly braces { }.|||The expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result:|||Execute the expression 5 + 5:|||Run Example »|||To write HTML on multiple lines, put the HTML inside parentheses:|||Create a list with three list items:|||Run Example »|||The HTML code must be wrapped in ONE top level element.|||So if you like to write two paragraphs, you must put them inside a parent element, like a div element.|||Wrap two paragraphs inside one DIV element:|||Run Example »|||JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.|||Alternatively, you can use a ""fragment"" to wrap multiple lines.This will prevent unnecessarily adding extra nodes to the DOM.|||A fragment looks like an empty HTML tag: <></>.|||Wrap two paragraphs inside a fragment:|||Run Example »|||JSX follows XML rules, and therefore HTML elements must be properly closed.|||Close empty elements with />|||Run Example »|||JSX will throw an error if the HTML is not properly closed.|||The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and theclass keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.|||Use attribute className instead.|||JSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.|||Use attribute className instead of class in JSX:|||Run Example »|||React supports if statements, but not inside JSX.|||To be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead:|||Write if statements outside of the JSX code:|||Write ""Hello"" if x is less than 10, otherwise ""Goodbye"":|||Run Example »|||Use ternary expressions instead:|||Write ""Hello"" if x is less than 10, otherwise ""Goodbye"":|||Run Example »|||Note that in order to embed a JavaScript expression inside JSX,the JavaScript must be wrapped with curly braces, {}.|||Render a <p> element without using JSX.|||Start the Exercise",Certified!|||Inserting a Large Block of HTML|||Elements Must be Closed,,,,[]
React Tutorial,React Components,https://www.w3schools.com/react/react_components.asp,"Components are like functions that return HTML elements.|||Components are independent and reusable bits of code.They serve the same purpose as JavaScript functions,but work in isolation and return HTML.|||Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.|||In older React code bases, you may find Class components primarily used.It is now suggested to use Function components along with Hooks,which were added in React 16.8. There is an optional section on Class components for your reference.|||When creating a React component, the component's name MUST start with an upper case letter.|||A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.|||The component also requires a render() method, this method returns HTML.|||Create a Class component called Car|||Here is the same example as above, but created using a Function component instead.|||A Function component also returns HTML, and behaves much the same way as a Class component,but Function components can be written using much less code,are easier to understand, and will be preferred in this tutorial.|||Create a Function component called Car|||Now your React application has a component called Car, which returns an <h2> element.|||To use this component in your application, use similar syntax as normal HTML:<Car />|||Display the Car component in the ""root"" element:|||Run Example »|||Components can be passed as props, which stands for properties.|||Props are like function arguments, and you send them into the component as attributes.|||You will learn more about props in the next chapter.|||Use an attribute to pass a color to the Car component, and use it in the render() function:|||Run Example »|||We can refer to components inside other components:|||Use the Car component inside the Garage component:|||Run Example »|||React is all about re-using code, and it is recommended to split your components into separate files.|||To do that, create a new file with a .js file extension and put the code inside it:|||Note that the filename must start with an uppercase character.|||This is the new file, we named it ""Car.js"":|||To be able to use the Car component, you have to import the file in your application.|||Now we import the ""Car.js"" file in the application, and we can use the Car component as if it was created here.|||Run Example »|||Name the following React component ""person"".|||Start the Exercise",Certified!,,,,[]
React Tutorial,React Class,https://www.w3schools.com/react/react_class.asp,"Before React 16.8, Class components were the only way to track state and lifecycle on a React component.Function components were considered ""state-less"".|||With the addition of Hooks, Function components are now almost equivalent to Class components.The differences are so minor that you will probably never need to use a Class component in React.|||Even though Function components are preferred, there are no current plans on removing Class components from React.|||This section will give you an overview of how to use Class components in React.|||Feel free to skip this section, and use Function Components instead.|||Components are independent and reusable bits of code.They serve the same purpose as JavaScript functions,but work in isolation and return HTML via a render() function.|||Components come in two types, Class components and Function components, in this chapter you will learn about Class components.|||When creating a React component, the component's name must start with an upper case letter.|||The component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.|||The component also requires a render() method, this method returns HTML.|||Create a Class component called Car|||Now your React application has a component called Car, which returns a <h2> element.|||To use this component in your application, use similar syntax as normal HTML:<Car />|||Display the Car component in the ""root"" element:|||Run Example »|||If there is a constructor() function in your component, this function will be called when the component gets initiated.|||The constructor function is where you initiate the component's properties.|||In React, component properties should be kept in an object calledstate.|||You will learn more about state later in this tutorial.|||The constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent component's constructor function, and your component has access to all the functions of the parent component (React.Component).|||Create a constructor function in the Car component, and add a color property:|||Use the color property in the render() function:|||Run Example »|||Another way of handling component properties is by using props.|||Props are like function arguments, and you send them into the component as attributes.|||You will learn more about props in the next chapter.|||Use an attribute to pass a color to the Car component, and use it in the render() function:|||Run Example »|||If your component has a constructor function,the props should always be passed to the constructor and also to the React.Component via the super() method.|||Run Example »|||We can refer to components inside other components:|||Use the Car component inside the Garage component:|||Run Example »|||React is all about re-using code, and it can be smart to insert some of your components in separate files.|||To do that, create a new file with a .js file extension and put the code inside it:|||Note that the file must start by importing React (as before), and it has to end with the statement export default Car;.|||This is the new file, we named it Car.js:|||To be able to use the Car component, you have to import the file in your application.|||Now we import the Car.js file in the application, and we can use the Car component as if it was created here.|||Run Example »|||React Class components have a built-in state object.|||You might have noticed that we used state earlier in the component constructor section.|||The state object is where you store property values that belongs to the component.|||When the state object changes, the component re-renders.|||The state object is initialized in the constructor:|||Specify the state object in the constructor method:|||The state object can contain as many properties as you like:|||Specify all the properties your component need:|||Refer to the state object anywhere in the component by using thethis.state.propertyname syntax:|||Refer to the state object in the   render() method:|||Run Example »|||To change a value in the state object, use the this.setState() method.|||When a value in the state object changes, the component will re-render, meaning that the output will change according to the new value(s).|||Add a button with an onClick event that   will change the color property:|||Run Example »|||Always use the setState() method to change the state object,it will ensure that the component knows its been updated and calls the render() method(and all the other lifecycle methods).|||Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.|||The three phases are: Mounting, Updating, andUnmounting.|||Mounting means putting elements into the DOM.|||React has four built-in methods that gets called, in this order, when mounting a component:|||The render() method is required and will always be called, the others are optional and will be called if you define them.|||The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.|||The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component).|||The constructor method is called, by   React, every time you make a component:|||Run Example »|||The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.|||This is the natural place to set the state object based on the initial props.It takes state as an argument, and returns an object with changes to thestate.The example below starts with the favorite color being ""red"", but thegetDerivedStateFromProps() method updates the favorite color based on thefavcol attribute:Example:The getDerivedStateFromProps method is called   right before the render method:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  static getDerivedStateFromProps(props, state) {    return {favoritecolor: props.favcol };  }  render() {    return (      <h1>My Favorite Color is {this.state.favoritecolor}</h1>    );  }}ReactDOM.render(<Header favcol=""yellow""/>, document.getElementById('root'));Run Example »renderThe render() method is required, and is the method that actually outputs the HTML to the DOM.Example:A simple component with a simple render()   method:class Header extends React.Component {  render() {    return (      <h1>This is the content of the Header component</h1>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »componentDidMountThe componentDidMount() method is called after the component is rendered.This is where you run statements that requires that the component is already placed in the DOM.Example:At first my favorite color is red, but give me a second, and it is yellow   instead:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  render() {    return (      <h1>My Favorite Color is {this.state.favoritecolor}</h1>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »UpdatingThe next phase in the lifecycle is when a component is updated.A component is updated whenever there is a change in the component'sstate or props.React has five built-in methods that gets called, in this order, when a component is updated:getDerivedStateFromProps()shouldComponentUpdate()render()getSnapshotBeforeUpdate()componentDidUpdate()The render() method is required and will always be called, the others are optional and will be called if you define them.getDerivedStateFromPropsAlso at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated.This is still the natural place to set the state object based on the initial props.The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:Example:If the component gets updated, the getDerivedStateFromProps() method is called:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  static getDerivedStateFromProps(props, state) {    return {favoritecolor: props.favcol };  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header favcol=""yellow""/>, document.getElementById('root'));Run Example »shouldComponentUpdateIn the shouldComponentUpdate() methodyou can return a Boolean value that specifies whether React should continue with the rendering or not.The default value is true.The example below shows what happens when the shouldComponentUpdate() method returns false:Example:Stop the component from rendering at any update:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  shouldComponentUpdate() {    return false;  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »Example:Same example as above, but this time the shouldComponentUpdate() method returns   true instead:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  shouldComponentUpdate() {    return true;  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »renderThe render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.The example below has a button that changes the favorite color to blue:Example:Click the button to make a change in the component's state:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »getSnapshotBeforeUpdateIn the getSnapshotBeforeUpdate() methodyou have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.If the getSnapshotBeforeUpdate() methodis present, you should also include the componentDidUpdate() method, otherwise you will get an error.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color ""red"".When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes ""yellow"".This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element.Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: Example:Use the   getSnapshotBeforeUpdate() method to find out   what the state object looked like before   the update:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  getSnapshotBeforeUpdate(prevProps, prevState) {    document.getElementById(""div1"").innerHTML =    ""Before the update, the favorite was "" + prevState.favoritecolor;  }  componentDidUpdate() {    document.getElementById(""div2"").innerHTML =    ""The updated favorite is "" + this.state.favoritecolor;  }  render() {    return (      <div>        <h1>My Favorite Color is {this.state.favoritecolor}</h1>        <div id=""div1""></div>        <div id=""div2""></div>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »componentDidUpdateThe componentDidUpdate methodis called after the component is updated in the DOM.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color ""red"".When the component has been mounted, a timer changes the state, and the color becomes ""yellow"".This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element:Example:The componentDidUpdate method is called   after the update has been rendered in the DOM:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  componentDidUpdate() {    document.getElementById(""mydiv"").innerHTML =    ""The updated favorite is "" + this.state.favoritecolor;  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <div id=""mydiv""></div>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »UnmountingThe next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.React has only one built-in method that gets called when a component is unmounted:componentWillUnmount()componentWillUnmountThe componentWillUnmount method is called when the component is about to be removed from the DOM.Example:Click the button to delete the header:class Container extends React.Component {  constructor(props) {    super(props);    this.state = {show: true};  }  delHeader = () => {    this.setState({show: false});  }  render() {    let myheader;    if (this.state.show) {      myheader = <Child />;    };    return (      <div>      {myheader}      <button type=""button"" onClick={this.delHeader}>Delete Header</button>      </div>    );  }}class Child extends React.Component {  componentWillUnmount() {    alert(""The component named Header is about to be unmounted."");  }  render() {    return (      <h1>Hello World!</h1>    );  }}ReactDOM.render(<Container />, document.getElementById('root'));Run Example »❮ PreviousNext ❯|||It takes state as an argument, and returns an object with changes to thestate.The example below starts with the favorite color being ""red"", but thegetDerivedStateFromProps() method updates the favorite color based on thefavcol attribute:Example:The getDerivedStateFromProps method is called   right before the render method:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  static getDerivedStateFromProps(props, state) {    return {favoritecolor: props.favcol };  }  render() {    return (      <h1>My Favorite Color is {this.state.favoritecolor}</h1>    );  }}ReactDOM.render(<Header favcol=""yellow""/>, document.getElementById('root'));Run Example »renderThe render() method is required, and is the method that actually outputs the HTML to the DOM.Example:A simple component with a simple render()   method:class Header extends React.Component {  render() {    return (      <h1>This is the content of the Header component</h1>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »componentDidMountThe componentDidMount() method is called after the component is rendered.This is where you run statements that requires that the component is already placed in the DOM.Example:At first my favorite color is red, but give me a second, and it is yellow   instead:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  render() {    return (      <h1>My Favorite Color is {this.state.favoritecolor}</h1>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »UpdatingThe next phase in the lifecycle is when a component is updated.A component is updated whenever there is a change in the component'sstate or props.React has five built-in methods that gets called, in this order, when a component is updated:getDerivedStateFromProps()shouldComponentUpdate()render()getSnapshotBeforeUpdate()componentDidUpdate()The render() method is required and will always be called, the others are optional and will be called if you define them.getDerivedStateFromPropsAlso at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated.This is still the natural place to set the state object based on the initial props.The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:Example:If the component gets updated, the getDerivedStateFromProps() method is called:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  static getDerivedStateFromProps(props, state) {    return {favoritecolor: props.favcol };  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header favcol=""yellow""/>, document.getElementById('root'));Run Example »shouldComponentUpdateIn the shouldComponentUpdate() methodyou can return a Boolean value that specifies whether React should continue with the rendering or not.The default value is true.The example below shows what happens when the shouldComponentUpdate() method returns false:Example:Stop the component from rendering at any update:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  shouldComponentUpdate() {    return false;  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »Example:Same example as above, but this time the shouldComponentUpdate() method returns   true instead:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  shouldComponentUpdate() {    return true;  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »renderThe render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.The example below has a button that changes the favorite color to blue:Example:Click the button to make a change in the component's state:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »getSnapshotBeforeUpdateIn the getSnapshotBeforeUpdate() methodyou have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.If the getSnapshotBeforeUpdate() methodis present, you should also include the componentDidUpdate() method, otherwise you will get an error.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color ""red"".When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes ""yellow"".This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element.Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: Example:Use the   getSnapshotBeforeUpdate() method to find out   what the state object looked like before   the update:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  getSnapshotBeforeUpdate(prevProps, prevState) {    document.getElementById(""div1"").innerHTML =    ""Before the update, the favorite was "" + prevState.favoritecolor;  }  componentDidUpdate() {    document.getElementById(""div2"").innerHTML =    ""The updated favorite is "" + this.state.favoritecolor;  }  render() {    return (      <div>        <h1>My Favorite Color is {this.state.favoritecolor}</h1>        <div id=""div1""></div>        <div id=""div2""></div>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »componentDidUpdateThe componentDidUpdate methodis called after the component is updated in the DOM.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color ""red"".When the component has been mounted, a timer changes the state, and the color becomes ""yellow"".This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element:Example:The componentDidUpdate method is called   after the update has been rendered in the DOM:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  componentDidUpdate() {    document.getElementById(""mydiv"").innerHTML =    ""The updated favorite is "" + this.state.favoritecolor;  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <div id=""mydiv""></div>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »UnmountingThe next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.React has only one built-in method that gets called when a component is unmounted:componentWillUnmount()componentWillUnmountThe componentWillUnmount method is called when the component is about to be removed from the DOM.Example:Click the button to delete the header:class Container extends React.Component {  constructor(props) {    super(props);    this.state = {show: true};  }  delHeader = () => {    this.setState({show: false});  }  render() {    let myheader;    if (this.state.show) {      myheader = <Child />;    };    return (      <div>      {myheader}      <button type=""button"" onClick={this.delHeader}>Delete Header</button>      </div>    );  }}class Child extends React.Component {  componentWillUnmount() {    alert(""The component named Header is about to be unmounted."");  }  render() {    return (      <h1>Hello World!</h1>    );  }}ReactDOM.render(<Container />, document.getElementById('root'));Run Example »❮ PreviousNext ❯|||The example below starts with the favorite color being ""red"", but thegetDerivedStateFromProps() method updates the favorite color based on thefavcol attribute:|||The getDerivedStateFromProps method is called   right before the render method:|||Run Example »|||The render() method is required, and is the method that actually outputs the HTML to the DOM.|||A simple component with a simple render()   method:|||Run Example »|||The componentDidMount() method is called after the component is rendered.|||This is where you run statements that requires that the component is already placed in the DOM.|||At first my favorite color is red, but give me a second, and it is yellow   instead:|||Run Example »|||The next phase in the lifecycle is when a component is updated.|||A component is updated whenever there is a change in the component'sstate or props.|||React has five built-in methods that gets called, in this order, when a component is updated:|||The render() method is required and will always be called, the others are optional and will be called if you define them.|||Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated.|||This is still the natural place to set the state object based on the initial props.The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:Example:If the component gets updated, the getDerivedStateFromProps() method is called:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  static getDerivedStateFromProps(props, state) {    return {favoritecolor: props.favcol };  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header favcol=""yellow""/>, document.getElementById('root'));Run Example »shouldComponentUpdateIn the shouldComponentUpdate() methodyou can return a Boolean value that specifies whether React should continue with the rendering or not.The default value is true.The example below shows what happens when the shouldComponentUpdate() method returns false:Example:Stop the component from rendering at any update:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  shouldComponentUpdate() {    return false;  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »Example:Same example as above, but this time the shouldComponentUpdate() method returns   true instead:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  shouldComponentUpdate() {    return true;  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »renderThe render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.The example below has a button that changes the favorite color to blue:Example:Click the button to make a change in the component's state:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  changeColor = () => {    this.setState({favoritecolor: ""blue""});  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <button type=""button"" onClick={this.changeColor}>Change color</button>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »getSnapshotBeforeUpdateIn the getSnapshotBeforeUpdate() methodyou have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.If the getSnapshotBeforeUpdate() methodis present, you should also include the componentDidUpdate() method, otherwise you will get an error.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color ""red"".When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes ""yellow"".This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element.Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element: Example:Use the   getSnapshotBeforeUpdate() method to find out   what the state object looked like before   the update:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  getSnapshotBeforeUpdate(prevProps, prevState) {    document.getElementById(""div1"").innerHTML =    ""Before the update, the favorite was "" + prevState.favoritecolor;  }  componentDidUpdate() {    document.getElementById(""div2"").innerHTML =    ""The updated favorite is "" + this.state.favoritecolor;  }  render() {    return (      <div>        <h1>My Favorite Color is {this.state.favoritecolor}</h1>        <div id=""div1""></div>        <div id=""div2""></div>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »componentDidUpdateThe componentDidUpdate methodis called after the component is updated in the DOM.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color ""red"".When the component has been mounted, a timer changes the state, and the color becomes ""yellow"".This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element:Example:The componentDidUpdate method is called   after the update has been rendered in the DOM:class Header extends React.Component {  constructor(props) {    super(props);    this.state = {favoritecolor: ""red""};  }  componentDidMount() {    setTimeout(() => {      this.setState({favoritecolor: ""yellow""})    }, 1000)  }  componentDidUpdate() {    document.getElementById(""mydiv"").innerHTML =    ""The updated favorite is "" + this.state.favoritecolor;  }  render() {    return (      <div>      <h1>My Favorite Color is {this.state.favoritecolor}</h1>      <div id=""mydiv""></div>      </div>    );  }}ReactDOM.render(<Header />, document.getElementById('root'));Run Example »UnmountingThe next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.React has only one built-in method that gets called when a component is unmounted:componentWillUnmount()componentWillUnmountThe componentWillUnmount method is called when the component is about to be removed from the DOM.Example:Click the button to delete the header:class Container extends React.Component {  constructor(props) {    super(props);    this.state = {show: true};  }  delHeader = () => {    this.setState({show: false});  }  render() {    let myheader;    if (this.state.show) {      myheader = <Child />;    };    return (      <div>      {myheader}      <button type=""button"" onClick={this.delHeader}>Delete Header</button>      </div>    );  }}class Child extends React.Component {  componentWillUnmount() {    alert(""The component named Header is about to be unmounted."");  }  render() {    return (      <h1>Hello World!</h1>    );  }}ReactDOM.render(<Container />, document.getElementById('root'));Run Example »❮ PreviousNext ❯|||The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:|||If the component gets updated, the getDerivedStateFromProps() method is called:|||Run Example »|||In the shouldComponentUpdate() methodyou can return a Boolean value that specifies whether React should continue with the rendering or not.|||The default value is true.|||The example below shows what happens when the shouldComponentUpdate() method returns false:|||Stop the component from rendering at any update:|||Run Example »|||Same example as above, but this time the shouldComponentUpdate() method returns   true instead:|||Run Example »|||The render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.|||The example below has a button that changes the favorite color to blue:|||Click the button to make a change in the component's state:|||Run Example »|||In the getSnapshotBeforeUpdate() methodyou have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.|||If the getSnapshotBeforeUpdate() methodis present, you should also include the componentDidUpdate() method, otherwise you will get an error.|||The example below might seem complicated, but all it does is this:|||When the component is mounting it is rendered with the favorite color ""red"".|||When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes ""yellow"".|||This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element.|||Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element:||| |||Use the   getSnapshotBeforeUpdate() method to find out   what the state object looked like before   the update:|||Run Example »|||The componentDidUpdate methodis called after the component is updated in the DOM.|||The example below might seem complicated, but all it does is this:|||When the component is mounting it is rendered with the favorite color ""red"".|||When the component has been mounted, a timer changes the state, and the color becomes ""yellow"".|||This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element:|||The componentDidUpdate method is called   after the update has been rendered in the DOM:|||Run Example »|||The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.|||React has only one built-in method that gets called when a component is unmounted:|||The componentWillUnmount method is called when the component is about to be removed from the DOM.|||Click the button to delete the header:|||Run Example »",Certified!|||Lifecycle of Components|||shouldComponentUpdate|||Example:,componentWillUnmount(),constructor()@@@getDerivedStateFromProps()@@@render()@@@componentDidMount()|||getDerivedStateFromProps()@@@shouldComponentUpdate()@@@render()@@@getSnapshotBeforeUpdate()@@@componentDidUpdate(),,[]
React Tutorial,React Props,https://www.w3schools.com/react/react_props.asp,"Props are arguments passed into React components.|||Props are passed to components via HTML attributes.|||props stands for properties.|||React Props are like function arguments in JavaScript and attributes in HTML.|||To send props into a component, use the same syntax as HTML attributes:|||Add a ""brand"" attribute to the Car element:|||The component receives the argument as a props object:|||Use the brand attribute in the component:|||Run Example »|||Props are also how you pass data from one component to another, as parameters.|||Send the ""brand"" property from the Garage component to the Car component:|||Run Example »|||If you have a variable to send, and not a string as in the example above, you just put the variable name inside curly brackets:|||Create a variable named carName and send it to the Car component:|||Run Example »|||Or if it was an object:|||Create an object named carInfo and send it to the Car component:|||Run Example »|||Note: React Props are read-only! You will get an error if you try to change their value.|||Create a variable named name and pass it to the Message component.|||Start the Exercise",Certified!,,,,[]
React Tutorial,React Events,https://www.w3schools.com/react/react_events.asp,"Just like HTML DOM events, React can perform actions based on user events.|||React has the same events as HTML: click, change, mouseover etc.|||React events are written in camelCase syntax:|||onClickinstead of onclick.|||React event handlers are written inside curly braces:|||onClick={shoot}  instead ofonClick=""shoot()"". |||Put the shoot function inside the  Football component:|||Run Example »|||To pass an argument to an event handler, use an arrow function.|||Send ""Goal!"" as a parameter to the shoot   function, using arrow   function:|||Run Example »|||Event handlers have access to the React event that triggered the function.|||In our example the event is the ""click"" event.|||Arrow Function: Sending the event object manually:|||Run Example »|||This will come in handy when we look at Form in a later chapter.|||Complete this statement to include a click event handler.|||Start the Exercise",Certified!,,,,[]
React Tutorial,React Conditionals,https://www.w3schools.com/react/react_conditional_rendering.asp,"In React, you can conditionally render components.|||There are several ways to do this.|||We can use the if JavaScript operator to decide which component to render.|||We'll use these two components:|||Now, we'll create another component that chooses which component to render based on a condition:|||Run Example »|||Try changing the isGoal attribute to true:|||Run Example »|||Another way to conditionally render a React component is by using the && operator.|||We can embed JavaScript expressions in JSX by using curly braces:|||Run Example »|||If cars.length  is equates to true,the expression after && will render.|||Try emptying the cars array:|||Run Example »|||Another way to conditionally render elements is by using a ternary operator.|||We will go back to the goal example.|||Return the MadeGoal component if  isGoal is true,   otherwise return the MissedGoal component:|||Run Example »|||To learn more, see the ternary operator section.|||Use the correct logical operator to complete the following component.|||Start the Exercise",Certified!,,,,[]
React Tutorial,React Lists,https://www.w3schools.com/react/react_lists.asp,"In React, you will render lists with some type of loop.|||The JavaScript map() array method is generally the preferred method.|||If you need a refresher on the map() method, check out the ES6 section.|||Let's render all of the cars from our garage:|||Run Example »|||When you run this code in your create-react-app, it will work but you will receive a warning that there is no ""key"" provided for the list items.|||Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.|||Keys need to be unique to each sibling. But they can be duplicated globally.|||Generally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key.|||Let's refactor our previous example to include keys:|||Run Example »|||Add the attribute that allows React to keep track of elements in lists.|||Start the Exercise",Certified!,,,,[]
React Tutorial,React Forms,https://www.w3schools.com/react/react_forms.asp,"Just like in HTML, React uses forms to allow users to interact with the web page.|||You add a form with React like any other element:|||Add a form that allows users to enter their name:|||Run Example »|||This will work as normal, the form will submit and the page will refresh.|||But this is generally not what we want to happen in React.|||We want to prevent this default behavior and let React control the form.|||Handling forms is about how you handle the data when it changes value or gets submitted.|||In HTML, form data is usually handled by the DOM.|||In React, form data is usually handled by the components.|||When the data is handled by the components, all the data is stored in the component state.|||You can control changes by adding event handlers in theonChange attribute.|||We can use the useState Hook to keep track of each inputs value and provide a ""single source of truth"" for the entire application.|||See the React Hooks section for more information on Hooks.|||Use the onChange Hook to manage the input:|||Run Example »|||You can control the submit action by adding an event handler in the onSubmit attribute for the <form>:|||Add a submit button and an event handler in the onSubmit attribute:|||Run Example »|||You can control the values of more than one input field by adding a name attribute to each element.|||We will initialize our state with an empty object.|||To access the fields in the event handler use theevent.target.name andevent.target.value syntax.|||To update the state, use square brackets [bracket notation] around the property name.|||Write a form with two input fields:|||Run Example »|||Note: We use the same event handler function for both input fields, we could write one event handler for each, but this gives us much cleaner code and is the preferred way in React.|||The textarea element in React is slightly different from ordinary HTML.|||In HTML the value of a textarea was the text between the start tag <textarea> and the end tag </textarea>.|||In React the value of a textarea is placed in a value attribute.We'll use the useState Hook to mange the value of the textarea:|||A simple textarea with some content:|||Run Example »|||A drop down list, or a select box, in React is also a bit different from HTML.|||in HTML, the selected value in the drop down list was defined with the selected attribute:|||In React, the selected value is defined with a valueattribute on the select tag:|||A simple select box, where the selected value ""Volvo"" is initialized in the constructor:|||Run Example »|||By making these slight changes to <textarea> and <select>, React is able to handle all input elements in the same way.",Certified!,,,,[]
React Tutorial,React Router,https://www.w3schools.com/react/react_router.asp,"Create React App doesn't include page routing.|||React Router is the most popular solution.|||To add React Router in your application, run this in the terminal from the root directory of the application:|||Note: This tutorial uses React Router v6.|||If you are upgrading from v5, you will need to use the @latest flag:|||To create an application with multiple page routes, let's first start with the file structure.|||Within the src folder, we'll create a folder namedpages with several files:|||src\pages\:|||Each file will contain a very basic React component.|||Now we will use our Router in our index.js file.|||Use React Router to route to pages based on URL:|||index.js:|||Run Example »|||We wrap our content first with <BrowserRouter>.|||Then we define our <Routes>.An application can have multiple <Routes>.Our basic example only uses one.|||<Route>s can be nested.The first <Route> has a path of /and renders the Layout component.|||The nested <Route>s inherit and add to the parent route.So the blogs path is combined with the parent and becomes/blogs.|||The Home component route does not have a path but has anindex attribute.That specifies this route as the default route for the parent route, which is /.|||Setting the path to * will act as a catch-all for any undefined URLs. This is great for a 404 error page.|||The Layout component has<Outlet> and <Link> elements.|||The <Outlet> renders the current route selected.|||<Link> is used to set the URL and keep track of browsing history.|||Anytime we link to an internal path, we will use <Link>instead of <a href="""">.|||The ""layout route"" is a shared component that inserts common content on all pages, such as a navigation menu.|||Layout.js:|||Home.js:|||Blogs.js:|||Contact.js:|||NoPage.js:",Folder Structure|||Certified!,Layout.js@@@Home.js@@@Blogs.js@@@Contact.js@@@NoPage.js,,,[]
React Tutorial,React Memo,https://www.w3schools.com/react/react_memo.asp,"Using memo will cause React to skip rendering a component if its props have not changed.|||This can improve performance.|||This section uses React Hooks. See the React Hooks section for more information on Hooks.|||In this example, the Todos component re-renders even when the todos have not changed.|||index.js:|||Todos.js:|||Run Example »|||When you click the increment button, the Todos component re-renders.|||If this component was complex, it could cause performance issues.|||To fix this, we can use memo.|||Use memoto keep the Todos component from needlessly re-rendering.|||Wrap the Todos component export in memo:|||index.js:|||Todos.js:|||Run Example »|||Now the Todos component only re-renders when the todos that are passed to it through props are updated.",Certified!,,,,[]
React Tutorial,React CSS Styling,https://www.w3schools.com/react/react_css_styling.asp,"There are many ways to style React with CSS, this tutorial will take a closer look at three common ways:|||To style an element with the inline style attribute, the value must be a JavaScript object:|||Insert an object with the styling information:|||Run Example »|||Note: In JSX, JavaScript expressions are written inside curly braces,and since JavaScript objects also use curly braces,the styling in the example above is written inside two sets of curly braces {{}}.|||Since the inline CSS is written in a JavaScript object, properties with hyphen separators, like background-color, must be written with camel case syntax:|||Use backgroundColor instead of   background-color:|||Run Example »|||You can also create an object with styling information, and refer to it in the style attribute:|||Create a style object named myStyle:|||Run Example »|||You can write your CSS styling in a separate file, just save the file with the .css file extension, and import it in your application.|||Create a new file called ""App.css"" and insert some CSS code in it:|||Note: You can call the file whatever you like, just remember the correct file extension.|||Import the stylesheet in your application:|||Run Example »|||Another way of adding styles to your application is to use CSS Modules.|||CSS Modules are convenient for components that are placed in separate files.|||The CSS inside a module is available only for the component that imported it, and you do not have to worry about name conflicts.|||Create the CSS module with the .module.css extension, example: my-style.module.css.|||Create a new file called ""my-style.module.css"" and insert some CSS code in it:|||Import the stylesheet in your component:|||Import the component in your application:|||Run Example »|||Add the following CSS styles inline to the <h1> elementcolor = ""purple""|||Start the Exercise",Certified!|||CSS Modules|||Car.js:,Inline styling@@@CSS stylesheets@@@CSS Modules,,,[]
React Tutorial,React Sass Styling,https://www.w3schools.com/react/react_sass_styling.asp,"Sass is a CSS pre-processor.|||Sass files are executed on the server and sends CSS to the browser.|||You can learn more about Sass in ourSass Tutorial.|||If you use the create-react-app in your project, you can easily install and use Sass in your React projects.|||Install Sass by running this command in your terminal:|||Now you are ready to include Sass files in your project!|||Create a Sass file the same way as you create CSS files, but Sass files have the file extension .scss|||In Sass files you can use variables and other Sass functions:|||Create a variable to define the color of the text:|||Import the Sass file the same way as you imported a CSS file:|||Run Example »",,,,,[]
React Hooks,What is a Hook?,https://www.w3schools.com/react/react_hooks.asp,"Hooks were added to React in version 16.8.|||Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.|||Although Hooks generally replace class components, there are no plans to remove classes from React.|||Hooks allow us to ""hook"" into React features such as state and lifecycle methods.|||Here is an example of a Hook. Don't worry if it doesn't make sense. We will go into more detail in the next section.|||Run Example »|||You must import Hooks from react.|||Here we are using the useState Hook to keep track of the application state.|||State generally refers to application data or properties that need to be tracked.|||There are 3 rules for hooks:|||Note: Hooks will not work in React class components.|||If you have stateful logic that needs to be reused in several components, you can build your own custom Hooks.|||We'll go into more detail in the Custom Hooks section.",Hook Rules|||Custom Hooks,Hooks can only be called inside React function components.@@@Hooks can only be called at the top level of a component.@@@Hooks cannot be conditional,,,[]
React Hooks,useState,https://www.w3schools.com/react/react_usestate.asp,"The React useState Hook allows us to track state in a function component.|||State generally refers to data or properites that need to be tracking in an application.|||To use the useState Hook, we first need to import it into our component.|||At the top of your component, import the useState Hook.|||Notice that we are destructuring useState from react as it is a named export.|||To learn more about destructuring, check out the ES6 section.|||We initialize our state by calling useState in our function component.|||useState accepts an initial state and returns two values:|||Initialize state at the top of the function component.|||Notice that again, we are destructuring the returned values from useState.|||The first value, color, is our current state.|||The second value, setColor, is the fuction that is used to update our state.|||These names are variables that can be named anything you would like.|||Lastly, we set the initial state to an empty string: useState("""")|||We can now include our state anywhere in our component.|||Use the state variable in the rendered component.|||Run Example »|||To update our state, we use our state updater function.|||We should never directly update state. Ex: color = ""red"" is not allowed.|||Use a button to update the state:|||Run Example »|||The useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these!|||We could create multiple state Hooks to track individual values.|||Create multiple state Hooks:|||Run Example »|||Or, we can just use one state and include an object instead!|||Create a single Hook that holds an object:|||Run Example »|||Since we are now tracking a single object,we need to reference that object and then the property of that object when rendering the component.(Ex: car.brand)|||When state is updated, the entire state gets overwritten.|||What if we only want to update the color of our car?|||If we only called setCar({color: ""blue""}), this would remove the brand, model, and year from our state.|||We can use the JavaScript spread operator to help us.|||Use the JavaScript spread operator to update only the color of the car:|||Run Example »|||Because we need the current value of state, we pass a function into our setCar function.This function receives the previous value.|||We then return an object, spreading the previousState and overwriting only the color.|||Complete this statement to keep track of a ""count"" variable using the useState Hook.|||Start the Exercise",Certified!|||Example:,The current state.@@@A function that updates the state.,,,[]
React Hooks,useEffect,https://www.w3schools.com/react/react_useeffect.asp,"The useEffect Hook allows you to perform side effects in your components.|||Some examples of side effects are: fetching data, directly updating the DOM, and timers.|||useEffect accepts two arguments. The second argument is optional.|||useEffect(<function>, <dependency>)|||Let's use a timer as an example.|||Use setTimeout() to count 1 second after initial render:|||Run Example »|||But wait!! I keeps counting even though it should only count once!|||useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect.|||This is not what we want. There are several ways to control when side effects run.|||We should always include the second parameter which accepts an array.We can optionally pass dependencies to useEffect in this array.|||So, to fix this issue, let's only run this effect on the initial render.|||Only run the effect on the initial render:|||Run Example »|||Here is an example of a useEffect Hook that is dependent on a variable. If the count variable updates, the effect will run again:|||Run Example »|||If there are multiple dependencies, they should be included in the useEffect dependency array.|||Some effects require cleanup to reduce memory leaks.|||Timeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed.|||We do this by including a return function at the end of the useEffect Hook.|||Clean up the timer at the end of the useEffect Hook:|||Run Example »|||Note: To clear the timer, we had to name it.|||What do you need to add to the second argument of a useEffect Hook to limit it to running only on the first render?|||Start the Exercise",Certified!,,,,[]
React Hooks,useContext,https://www.w3schools.com/react/react_usecontext.asp,"React Context is a way to manage state globally.|||It can be used together with the useState Hook to share state betweendeeply nested components more easily than with useState alone.|||State should be held by the highest parent component in the stack that requires access to the state.|||To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state.|||To do this without Context, we will need to pass the state as ""props"" through each nested component. This is called ""prop drilling"".|||Passing ""props"" through nested components:|||Run Example »|||Even though components 2-4 did not need the state, they had to pass the state along so that it could reach component 5.|||The solution is to create context.|||To create context, you must Import createContext and initialize it:|||Next we'll use the Context Provider to wrap the tree of components that need the state Context.|||Wrap child components in the Context Provider and supply the state value.|||Now, all components in this tree will have access to the user Context.|||In order to use the Context in a child component, we need to access it using the useContext Hook.|||First, include the useContext in the import statement:|||Then you can access the user Context in all components:|||Here is the full example using React Context:|||Run Example »",The Problem|||Certified!|||Example:,,,,[]
React Hooks,useRef,https://www.w3schools.com/react/react_useref.asp,"The useRef Hook allows you to persist values between renders.|||It can be used to store a mutable value that does not cause a re-render when updated.|||It can be used to access a DOM element directly.|||If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.|||To avoid this, we can use the useRef Hook.|||Use useRef to track application renders.|||Run Example »|||useRef() only returns one item. It returns an Object called current.|||When we initialize useRef we set the initial value: useRef(0).|||It's like doing this: const count = {current: 0}. We can access the count by using count.current.|||Run this on your computer and try typing in the input to see the application render count increase.|||In general, we want to let React handle all DOM manipulation.|||But there are some instances where useRef can be used without causing issues.|||In React, we can add a ref attribute to an element to access it directly in the DOM.|||Use useRef to focus the input:|||Run Example »|||The useRef Hook can also be used to keep track of previous state values.|||This is because we are able to persist useRef values between renders.|||Use useRef to keep track of previous state values:|||Run Example »|||This time we use a combination of useState, useEffect, and useRef to keep track of the previous state.|||In the useEffect, we are updating the useRef current value each time the inputValue is updated by entering text into the input field.",Does Not Cause Re-renders|||Certified!|||Accessing DOM Elements,,,,[]
React Hooks,useReducer,https://www.w3schools.com/react/react_usereducer.asp,"The useReducer Hook is similar to the useState Hook.|||It allows for custom state logic.|||If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.|||The useReducer Hook accepts two arguments.|||useReducer(<reducer>, <initialState>)|||The reducer function contains your custom state logic and the initialStatecan be a simple value but generally will contain an object.|||The useReducer Hook returns the current stateand a dispatchmethod.|||Here is an example of useReducer in a counter app:|||Run Example »|||This is just the logic to keep track of the todo complete status.|||All of the logic to add, delete, and complete a todo could be contained within a singleuseReducer Hook by adding more actions.",,,,,[]
React Hooks,useCallback,https://www.w3schools.com/react/react_usecallback.asp,"The React useCallback Hook returns a memoized callback function.|||Think of memoization as caching a value so that it does not need to be recalculated.|||This allows us to isolate resource intensive functions so that they will not automatically run on every render.|||The useCallback Hook only runs when one of its dependencies update.|||This can improve performance.|||The useCallback and useMemo Hooks are similar.The main difference is that useMemo returns a memoized value and useCallback returns a memoized function.You can learn more about useMemo in the useMemo chapter.|||One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.|||In this example, you might think that the Todos component will not re-render unless the todos change:|||This is a similar example to the one in the React.memo section.|||index.js|||Todos.js|||Run Example »|||Try running this and click the count increment button.|||You will notice that the Todos component re-renders even when the todos do not change.|||Why does this not work? We are using memo, so the Todos component should not re-render since neither the todos state nor the addTodo function are changing when the count is incremented.|||This is because of something called ""referential equality"".|||Every time a component re-renders, its functions get recreated. Because of this, the addTodo function has actually changed.|||To fix this, we can use the useCallback hook to prevent the function from being recreated unless necessary.|||Use the useCallback Hook to prevent the Todos component from re-rendering needlessly:|||index.js|||Todos.js|||Run Example »|||Now the Todos component will only re-render when the todos prop changes.",Certified!,,,,[]
React Hooks,useMemo,https://www.w3schools.com/react/react_usememo.asp,"The React useMemo Hook returns a memoized value.|||Think of memoization as caching a value so that it does not need to be recalculated.|||The useMemo Hook only runs when one of its dependencies update.|||This can improve performance.|||The useMemo and useCallback Hooks are similar.The main difference is that useMemo returns a memoized value anduseCallback returns a memoized function.You can learn more about useCallback in the useCallback chapter.|||The useMemo Hook can be used to keep expensive, resource intensive functions from needlessly running.|||In this example, we have an expensive function that runs on every render.|||When changing the count or adding a todo, you will notice a delay in execution.|||A poor performing function. The expensiveCalculation function runs on every render:|||Run Example »|||To fix this performance issue, we can use the useMemo Hook to memoize the expensiveCalculation function. This will cause the function to only run when needed.|||We can wrap the expensive function call with useMemo.|||The useMemoHook accepts a second parameter to declare dependencies. The expensive function will only run when its dependencies have changed.|||In the following example, the expensive function will only run when count is changed and not when todo's are added.|||Performance example using the useMemo Hook:|||Run Example »","Example:|||    &lt;h2&gt;Expensive Calculation&lt;/h|||Certified!|||Use <code class=""w3-codespan"">useMemo</code>|||    &lt;h2&gt;Expensive Calculation&lt;/h",,,,[]
React Hooks,Custom Hooks,https://www.w3schools.com/react/react_customhooks.asp,"Hooks are reusable functions.|||When you have component logic that needs to be used by multiple components, we can extract that logic to a custom Hook.|||Custom Hooks start with ""use"". Example: useFetch.|||In the following code, we are fetching data in our Home component and displaying it.|||We will use the JSONPlaceholder service to fetch fake data. This service is great for testing applications when there is no existing data.|||To learn more, check out the JavaScript Fetch API section.|||Use the JSONPlaceholder service to fetch fake ""todo"" items and display the titles on the page:|||index.js:|||Run Example »|||The fetch logic may be needed in other components as well, so we will extract that into a custom Hook.|||Move the fetch logic to a new file to be used as a custom Hook:|||useFetch.js:|||index.js:|||Run Example »|||We have created a new file called useFetch.js containing a function called useFetch which contains all of the logic needed to fetch our data.|||We removed the hard-coded URL and replaced it with a url variable that can be passed to the custom Hook.|||Lastly, we are returning our data from our Hook.|||In index.js, we are importing our useFetch Hook and utilizing it like any other Hook. This is where we pass in the URL to fetch data from.|||Now we can reuse this custom Hook in any component to fetch data from any URL.",,,,,[]
React Exercises,React Quiz,https://www.w3schools.com/react/react_quiz.asp,"You can test your React skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit. |||The test is not official, it's just a nice way to see how much you know, or don't know, about React.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the React Quiz ❯|||If you don't know React, we suggest that you read our React Tutorial from scratch.|||Get certified by completing the  exam",,,,,[]
React Exercises,React Exercises,https://www.w3schools.com/react/react_exercises.asp,"You can test your React skills with W3Schools' Exercises.|||We have gathered a variety of React exercises (with answers) for each React Chapter.|||Try to solve an exercise by filling in the missing parts of a code. If you're stuck, hit the ""Show Answer"" button to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start React Exercises ❯|||If you don't know React, we suggest that you read our React Tutorial from scratch.",Certified!,,,,[]
React Exercises,React Certificate,https://www.w3schools.com/react/react_exam.asp,"W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 40 000 certificates already issued!|||W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 40 000 certificates already issued!|||Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.|||Getting a certificate proves your commitment to upgrade your skills,gives you the credibility needed for more responsibilities, larger projects, and a higher salary.|||Get Your Certificate »",How Does It Work?,"Study for free at W3Schools.com@@@Study at your own speed@@@Test your skills with W3Schools online quizzes@@@Apply for your certificate by paying an exam fee@@@Take your exam online, at any time, and from any location",,"
Document Your Skills
Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.
Get a Certificate
Getting a certificate proves your commitment to upgrade your skills,
gives you the credibility needed for more responsibilities, larger projects, and a higher salary.

Get Your Certificate »

|||

",[]
