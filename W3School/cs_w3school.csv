Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
C# Tutorial,C# HOME,https://www.w3schools.com/cs/index.php,"C# (C-Sharp) is a programming language developed by Microsoft that runs on the .NET Framework.|||C# is used to develop web apps, desktop apps, mobile apps, games and much more.|||Our ""Try it Yourself"" tool makes it easy to learn C#. You can edit C# code and view the result in your browser.|||Try it Yourself »|||Click on the ""Run example"" button to see how it works.|||We recommend reading this tutorial, in the sequence listed in the left menu.|||Insert the missing part of the code below to output ""Hello World!"".|||Start the Exercise|||Learn by examples! This tutorial supplements all explanations with clarifying examples.|||See All C# Examples|||Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C#.|||Start C# Quiz|||Get certified by completing the  course",Examples in Each Chapter,,,,[]
C# Tutorial,C# Intro,https://www.w3schools.com/cs/cs_intro.php,"C# is pronounced ""C-Sharp"". |||It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.|||C# has roots from the C family, and the language is close to other popular languages like C++ and Java.|||The first version was released in year 2002. The latest version, C# 8, was released in September 2019.|||C# is used for:|||This tutorial will teach you the basics of C#.|||It is not necessary to have any prior programming experience.",Why Use C#?,"Mobile applications@@@Desktop applications@@@Web applications@@@Web services@@@Web sites@@@Games@@@VR@@@Database applications@@@And much, much more!|||It is one of the most popular programming language in the world@@@It is easy to learn and simple to use@@@It has a huge community support@@@C# is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs.@@@As C# is close to C, C++ and Java, it makes it easy for programmers to switch to C# or vice versa",,,[]
C# Tutorial,C# Get Started,https://www.w3schools.com/cs/cs_getstarted.php,"The easiest way to get started with C#, is to use an IDE.|||An IDE (Integrated Development Environment) is used to edit and compile code.|||In our tutorial, we will use Visual Studio Community, which is free to download from https://visualstudio.microsoft.com/vs/community/.|||Applications written in C# use the .NET Framework, so it makes sense to use Visual Studio, as the program, the framework, and the language, are all created by Microsoft.|||Once the Visual Studio Installer is downloaded and installed, choose the .NET workload and click on the Modify/Install button:|||After the installation is complete, click on the Launch button to get started with Visual Studio.|||On the start window, choose Create a new project:|||Then click on the ""Install more tools and features"" button:|||Choose ""Console App (.NET Core)"" from the list and click on the Next button:|||Enter a name for your project, and click on the Create button:|||Visual Studio will automatically generate some code for your project:|||The code should look something like this:|||Try it Yourself »|||Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.|||Run the program by pressing the F5 button on your keyboard (or click on ""Debug"" -> ""Start Debugging""). This will compile and execute your code. The result will look something to this:|||Congratulations! You have now written and executed your first C# program.|||When learning C# at W3Schools.com, you can use our ""Try it Yourself"" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward:|||Result:|||Try it Yourself »",Learning C# At W3Schools,,,,[]
C# Tutorial,C# Syntax,https://www.w3schools.com/cs/cs_syntax.php,"In the previous chapter, we created a C# file called Program.cs, and we used the following code to print ""Hello World"" to the screen:|||Result:|||Try it Yourself »|||Line 1: using System means that we can use classes from the System namespace.|||Line 2: A blank line. C# ignores white space. However, multiple lines makes the code more readable.|||Line 3: namespace is used to organize your code, and it is a container for classes and other namespaces.|||Line 4: The curly braces {} marks the beginning and the end of a block of code.|||Line 5: class is a container for data and methods, which brings functionality to your program. Every line of code that runs in C# must be inside a class. In our example, we named the class Program.|||Don't worry if you don't understand how using System, namespace and class works. Just think of it as something that (almost) always appears in your program, and that you will learn more about them in a later chapter.|||Line 7: Another thing that always appear in a C# program, is the Main method. Any code inside its curly brackets {} will be executed.You don't have to understand the keywords before and after Main. You will get to know them bit by bit while reading this tutorial.|||Line 9: Console is a class of the System namespace, which has a WriteLine() method that is used to output/print text. In our example it will output ""Hello World!"". |||If you omit the using System line, you would have to write System.Console.WriteLine() to print/output text.|||Note: Every C# statement ends with a semicolon ;.|||Note: C# is case-sensitive: ""MyClass"" and ""myclass"" has different meaning.|||Note: Unlike Java, the name of the C# file does not have to match the class name, but they often do (for better organization).When saving the file, save it using a proper name and add "".cs"" to the end of the filename. To run the example above on your computer, make sure that C# is properly installed: Go to the Get Started Chapter for how to install C#. The output should be:|||The most common method to output something in C# is WriteLine(), but you can also use Write().|||The difference is that WriteLine() prints the output on a new line each time, while Write() prints on the same line (note that you should remember to add spaces when needed, for better readability):|||Result:|||Try it Yourself »|||In this tutorial, we will only use WriteLine() as it makes it easier to read the output of code.|||Insert the missing part of the code below to output ""Hello World!"".|||Start the Exercise",,,,,[]
C# Tutorial,C# Comments,https://www.w3schools.com/cs/cs_comments.php,"Comments can be used to explain C# code, and to make it more readable. It can also be used to prevent execution when testing alternative code.|||Single-line comments start with two forward slashes (//).|||Any text between // and the end of the line is ignored by C# (will not be executed).|||This example uses a single-line comment before a line of code:|||Try it Yourself »|||This example uses a single-line comment at the end of a line of code:|||Try it Yourself »|||Multi-line comments start with /* and ends with */.|||Any text between /* and */ will be ignored by C#.|||This example uses a multi-line comment (a comment block) to explain the code:|||Try it Yourself »|||It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.|||Insert the missing parts to create two types of comments.|||Start the Exercise",C# Multi-line Comments,,,,[]
C# Tutorial,C# Variables,https://www.w3schools.com/cs/cs_variables.php,"Variables are containers for storing data values. |||In C#, there are different types of variables (defined with different keywords), for example:|||To create a variable, you must specify the type and assign it a value:|||Where type is a C# type (such as int or string), and variableName is the name of the variable (such as x orname). The equal sign is used to assign values to the variable.|||To create a variable that should store text, look at the following example:|||Create a variable called name of type string and assign it the value ""John"":|||Try it Yourself »|||To create a variable that should store a number, look at the following example:|||Create a variable called myNum of type int and assign it the value 15:|||Try it Yourself »|||You can also declare a variable without assigning the value, and assign the value later:|||Try it Yourself »|||Note that if you assign a new value to an existing variable, it will overwrite the previous value:|||Change the value of myNum to 20:|||Try it Yourself »|||However, you can add the const keyword if you don't want others (or yourself) to overwrite existing values (this will declare the variable as ""constant"", which means unchangeable and read-only):|||The const keyword is useful when you want a variable to always store the same value, so that others (or yourself) won't mess up your code. An example that is often referred to as a constant, is PI (3.14159...).|||Note: You cannot declare a constant variable without assigning the value. If you do, an error will occur: A const field requires a value to be provided.|||A demonstration of how to declare variables of other types:|||You will learn more about data types in the next chapter.|||The WriteLine() method is often used to display variable values to the console window.|||To combine both text and a variable, use the + character:|||Try it Yourself »|||You can also use the + character to add a variable to another variable:|||Try it Yourself »|||For numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):|||Try it Yourself »|||From the example above, you can expect:|||To declare more than one variable of the same type, use a comma-separated list:|||Try it Yourself »|||All C# variables must beidentified with unique names.|||These unique names are called identifiers.|||Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).|||Note: It is recommended to use descriptive names in order to create understandable and maintainable code:|||Try it Yourself »|||The general rules for naming variables are:|||Create a variable named myNum and assign the value 50 to it.|||Start the Exercise",,"int - stores integers (whole numbers), without decimals, such as 123 or -123@@@double - stores floating point numbers, with decimals, such as 19.99 or -19.99@@@char - stores single characters, such as 'a' or 'B'.  Char values are surrounded by single quotes@@@string - stores text, such as ""Hello World"".  String values are surrounded by double quotes@@@bool - stores values with two states:  true or false|||x stores the value 5@@@y stores the value 6@@@Then we use the WriteLine() method to display the value of x + y,  which is 11|||Names can contain letters, digits and the underscore character (_)@@@Names must begin with a letter@@@Names should start with a lowercase letter and it cannot contain whitespace@@@Names are case sensitive (""myVar"" and ""myvar"" are different variables)@@@Reserved words (like C# keywords, such as int or   double) cannot be used as names",,,[]
C# Tutorial,C# Data Types,https://www.w3schools.com/cs/cs_data_types.php,"As explained in the variables chapter, a variable in C# must be a specified data type:|||Try it Yourself »|||A data type specifies the size and type of variable values. It is important to use the correct data type for the corresponding variable; to avoid errors, to save time and memory, but it will also make your code more maintainable and readable. The most common data types are:|||Number types are divided into two groups:|||Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are int and long. Which type you should use, depends on the numeric value.|||Floating point types represents numbers with a fractional part, containing one or more decimals. Valid types are float and double.|||Even though there are many numeric types in C#, the most used for numbers are int (for whole numbers) and double (for floating point numbers). However, we will describe them all as you continue to read.|||The int data type can store whole numbers from -2147483648 to 2147483647.  In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.|||Try it Yourself »|||The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an ""L"":|||Try it Yourself »|||You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.|||The float data type can store fractional numbers from 3.4e−038 to 3.4e+038. Note that you should end the value with an ""F"":|||Try it Yourself »|||The double data type can store fractional numbers from 1.7e−308 to 1.7e+308. Note that you can end the value with a ""D"" (although not required):|||Try it Yourself »|||Use float or double?|||The precision of a floating point value indicates how many digits the value can have after the decimal point.The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore it is safer to use double for most calculations.|||A floating point number can also be a scientific number with an ""e"" to indicate the power of 10:|||Try it Yourself »|||A boolean data type is declared with the bool keyword and can only take the values true or false:|||Try it Yourself »|||Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter.|||The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':|||Try it Yourself »|||The string data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:|||Try it Yourself »|||Add the correct data type for the following variables:|||Start the Exercise",Long|||Floating Point Types|||Float,,,"int|||4 bytes|||Stores whole numbers from -2,147,483,648 to 2,147,483,647&&&long|||8 bytes|||Stores whole numbers from -9,223,372,036,854,775,808 to 
9,223,372,036,854,775,807&&&float|||4 bytes|||Stores fractional numbers. Sufficient for 
storing 6 to 7 decimal digits&&&double|||8 bytes|||Stores fractional numbers. Sufficient for 
storing 15 decimal digits&&&bool|||1 bit|||Stores true or false values&&&char|||2 bytes|||Stores a single character/letter, surrounded by single quotes&&&string|||2 bytes per character|||Stores a sequence of characters, surrounded by double quotes",[]
C# Tutorial,C# Type Casting,https://www.w3schools.com/cs/cs_type_casting.php,"Type casting is when you assign a value of one data type to another type.|||In C#, there are two types of casting:|||Implicit casting is done automatically when passing a smaller size type to a larger size type:|||Try it Yourself »|||Explicit casting must be done manually by placing the type in parentheses in front of the value:|||Try it Yourself »|||It is also possible to convert data types explicitly by using built-in methods, such as Convert.ToBoolean, Convert.ToDouble, Convert.ToString, Convert.ToInt32 (int) and Convert.ToInt64 (long):|||Try it Yourself »|||Many times, there's no need for type conversion. But sometimes you have to. Take a look at the next chapter, when working with user input, to see an example of this.",,Implicit Casting (automatically) - converting a smaller type to a larger type sizechar -> int -> long -> float -> doubleExplicit Casting (manually) - converting a larger type to a smaller size typedouble -> float -> long -> int -> char,,,[]
C# Tutorial,C# User Input,https://www.w3schools.com/cs/cs_user_input.php,"You have already learned that Console.WriteLine() is used to output (print) values. Now we will use Console.ReadLine() to get user input.|||In the following example, the user can input his or hers username, which is stored in the variable userName. Then we print the value of userName:|||Run example »|||The Console.ReadLine() method returns a string. Therefore, you cannot get information from another data type, such as int. The following program will cause an error:|||The error message will be something like this:|||Like the error message says, you cannot implicitly convert type 'string' to 'int'. |||Luckily, for you, you just learned from the previous chapter (Type Casting), that you can convert any type explicitly, by using one of the Convert.To methods:|||Run example »|||Note: If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like System.FormatException: 'Input string was not in a correct format.').|||You will learn more about Exceptions and how to handle errors in a later chapter.|||Fill in the missing parts to get user input, stored in the variable userName:|||Start the Exercise",,,,,[]
C# Tutorial,C# Operators,https://www.w3schools.com/cs/cs_operators.php,"Operators are used to perform operations on variables and values.|||In the example below, we use the+ operator to add together two values:|||Try it Yourself »|||Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:|||Try it Yourself »|||Arithmetic operators are used to perform common mathematical operations:|||Assignment operators are used to assign values to variables.|||In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:|||Try it Yourself »|||The addition assignment operator (+=) adds a value to a variable:|||Try it Yourself »|||A list of all assignment operators:|||Comparison operators are used to compare two values:|||Logical operators are used to determine the logic between variables or values:|||You will learn more about comparison and logical operators in the Booleans and If...Else chapters.|||Multiply 10 with 5, and print the result.|||Start the Exercise",Exercise:,,,"+|||Addition|||Adds together two values|||x + y|||Try it »&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »&&&/|||Division|||Divides one value by another|||x / y|||Try it »&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »&&&++|||Increment|||Increases the value of a variable by 1|||x++|||Try it »&&&--|||Decrement|||Decreases the value of a variable by 1|||x--|||Try it »$$$&&&=|||x = 5|||x = 5|||Try it »&&&+=|||x += 3|||x = x + 3|||Try it »&&&-=|||x -= 3|||x = x - 3|||Try it »&&&*=|||x *= 3|||x = x * 3|||Try it »&&&/=|||x /= 3|||x = x / 3|||Try it »&&&%=|||x %= 3|||x = x % 3|||Try it »&&&&=|||x &= 3|||x = x & 3|||Try it »&&&|=|||x |= 3|||x = x | 3|||Try it »&&&^=|||x ^= 3|||x = x ^ 3|||Try it »&&&>>=|||x >>= 3|||x = x >> 3|||Try it »&&&<<=|||x <<= 3|||x = x << 3|||Try it »$$$&&&==|||Equal to|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »$$$&& |||Logical and|||Returns true if both statements are true|||x < 5 &&  x < 10|||Try it »&&&|| |||Logical or|||Returns true if one of the statements is true|||x < 5 || x < 4|||Try it »&&&!|||Logical not|||Reverse the result, returns false if the result is true|||!(x < 5 && x < 10)|||Try it »",[]
C# Tutorial,C# Math,https://www.w3schools.com/cs/cs_math.php,"The C# Math class has many methods that allows you to perform mathematical tasks on numbers.|||The Math.Max(x,y) method can be used to find the highest value of x andy:|||Try it Yourself »|||The Math.Min(x,y) method can be used to find the lowest value of of x and y:|||Try it Yourself »|||The Math.Sqrt(x) method returns the square root of x:|||Try it Yourself »|||The Math.Abs(x) method returns the absolute (positive) value of x:|||Try it Yourself »|||Math.Round() rounds a number to the nearest whole number:|||Try it Yourself »|||Use the correct method to print the highest value of x and y.|||Start the Exercise",,,,,[]
C# Tutorial,C# Strings,https://www.w3schools.com/cs/cs_strings.php,"Strings are used for storing text.|||A string variable contains a collection of characters surrounded by double quotes:|||Create a variable of type string and assign it a value:|||Run example »|||A string in C# is actually an object, which contain properties and methods that can perform certain operations on strings. For example, the length of a string can be found with the Length property:|||Run example »|||There are many string methods available, for example ToUpper() and ToLower(), which returns a copy of the string converted to uppercase or lowercase:|||Run example »|||The + operator can be used between strings to combine them. This is called concatenation:|||Run example »|||Note that we have added a space after ""John"" to create a space between firstName and lastName on print.|||You can also use the string.Concat() method to concatenate two strings:|||Run example »|||Another option of string concatenation, is string interpolation, which substitutes values of variables into placeholders in a string. Note that you do not have to worry about spaces, like with concatenation:|||Run example »|||Also note that you have to use the dollar sign ($) when using the string interpolation method.|||String interpolation was introduced in C# version 6.|||You can access the characters in a string by referring to its index number inside square brackets [].|||This example prints the first character in myString:|||Run example »|||Note: String indexes start with 0: [0] is the first character. [1] is the second character, etc.|||This example prints the second character (1) in myString:|||Run example »|||You can also find the index position of a specific character in a string, by using the IndexOf() method:|||Run example »|||Another useful method is Substring(), which extracts the characters from a string, starting from the specified character position/index, and returns a new string. This method is often used together with IndexOf() to get the specific character position:|||Run example »|||Because strings must be written within quotes, C# will misunderstand this string, and generate an error:|||The solution to avoid this problem, is to use the backslash escape character.|||The backslash (\) escape character turns special characters into string characters:|||The sequence \""  inserts a double quote in a string:Examplestring txt = ""We are the so-called \""Vikings\"" from the north."";Try it Yourself »The sequence \'  inserts a single quote in a string:Examplestring txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:Examplestring txt = ""The character \\ is called backslash."";Try it Yourself »Other useful escape characters in C# are:CodeResultTry it\nNew LineTry it »\tTabTry it »\bBackspaceTry it »Adding Numbers and StringsWARNING!C# uses the + operator for both addition and concatenation.Remember: Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;  // z will be 30 (an integer/number)Run example »If you add two strings, the result will be a string concatenation:Examplestring x = ""10"";string y = ""20"";string z = x + y;  // z will be 1020 (a string)Run example »C# ExercisesTest Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type string and assign it the value Hello.  = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Examplestring txt = ""We are the so-called \""Vikings\"" from the north."";Try it Yourself »The sequence \'  inserts a single quote in a string:Examplestring txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:Examplestring txt = ""The character \\ is called backslash."";Try it Yourself »Other useful escape characters in C# are:CodeResultTry it\nNew LineTry it »\tTabTry it »\bBackspaceTry it »Adding Numbers and StringsWARNING!C# uses the + operator for both addition and concatenation.Remember: Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;  // z will be 30 (an integer/number)Run example »If you add two strings, the result will be a string concatenation:Examplestring x = ""10"";string y = ""20"";string z = x + y;  // z will be 1020 (a string)Run example »C# ExercisesTest Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type string and assign it the value Hello.  = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Try it Yourself »|||The sequence \'  inserts a single quote in a string:Examplestring txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:Examplestring txt = ""The character \\ is called backslash."";Try it Yourself »Other useful escape characters in C# are:CodeResultTry it\nNew LineTry it »\tTabTry it »\bBackspaceTry it »Adding Numbers and StringsWARNING!C# uses the + operator for both addition and concatenation.Remember: Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;  // z will be 30 (an integer/number)Run example »If you add two strings, the result will be a string concatenation:Examplestring x = ""10"";string y = ""20"";string z = x + y;  // z will be 1020 (a string)Run example »C# ExercisesTest Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type string and assign it the value Hello.  = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Examplestring txt = ""It\'s alright."";Try it Yourself »The sequence \\  inserts a single backslash in a string:Examplestring txt = ""The character \\ is called backslash."";Try it Yourself »Other useful escape characters in C# are:CodeResultTry it\nNew LineTry it »\tTabTry it »\bBackspaceTry it »Adding Numbers and StringsWARNING!C# uses the + operator for both addition and concatenation.Remember: Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;  // z will be 30 (an integer/number)Run example »If you add two strings, the result will be a string concatenation:Examplestring x = ""10"";string y = ""20"";string z = x + y;  // z will be 1020 (a string)Run example »C# ExercisesTest Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type string and assign it the value Hello.  = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Try it Yourself »|||The sequence \\  inserts a single backslash in a string:Examplestring txt = ""The character \\ is called backslash."";Try it Yourself »Other useful escape characters in C# are:CodeResultTry it\nNew LineTry it »\tTabTry it »\bBackspaceTry it »Adding Numbers and StringsWARNING!C# uses the + operator for both addition and concatenation.Remember: Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;  // z will be 30 (an integer/number)Run example »If you add two strings, the result will be a string concatenation:Examplestring x = ""10"";string y = ""20"";string z = x + y;  // z will be 1020 (a string)Run example »C# ExercisesTest Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type string and assign it the value Hello.  = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Examplestring txt = ""The character \\ is called backslash."";Try it Yourself »Other useful escape characters in C# are:CodeResultTry it\nNew LineTry it »\tTabTry it »\bBackspaceTry it »Adding Numbers and StringsWARNING!C# uses the + operator for both addition and concatenation.Remember: Numbers are added. Strings are concatenated.If you add two numbers, the result will be a number:Exampleint x = 10;int y = 20;int z = x + y;  // z will be 30 (an integer/number)Run example »If you add two strings, the result will be a string concatenation:Examplestring x = ""10"";string y = ""20"";string z = x + y;  // z will be 1020 (a string)Run example »C# ExercisesTest Yourself With ExercisesExercise:Fill in the missing part to create a greeting variable of type string and assign it the value Hello.  = ;Submit Answer »Start the Exercise❮ PreviousNext ❯|||Try it Yourself »|||Other useful escape characters in C# are:|||WARNING!|||C# uses the + operator for both addition and concatenation.|||Remember: Numbers are added. Strings are concatenated.|||If you add two numbers, the result will be a number:|||Run example »|||If you add two strings, the result will be a string concatenation:|||Run example »|||Fill in the missing part to create a greeting variable of type string and assign it the value Hello.|||Start the Exercise","Example|||Insert, Replace and Remove",,,"\'|||'|||Single quote&&&\""|||""|||Double quote&&&\\|||\|||Backslash$$$\n|||New Line|||Try it »&&&\t|||Tab|||Try it »&&&\b|||Backspace|||Try it »",[]
C# Tutorial,C# Booleans,https://www.w3schools.com/cs/cs_booleans.php,"Very often, in programming, you will need a data type that can only have one of two values, like:|||For this, C# has a bool data type, which can take the values true or false.|||A boolean type is declared with the bool keyword and can only take the values true or false:|||Try it Yourself »|||However, it is more common to return boolean values from boolean expressions, for conditional testing(see below).|||A Boolean expression is a C# expression that returns a Boolean value: True or False.|||You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:|||Try it Yourself »|||Or even easier:|||Try it Yourself »|||In the examples below, we use the equal to (==) operator to evaluate an expression:|||Try it Yourself »|||Try it Yourself »|||The boolean value of an expression is the basis for all C# comparisons and conditions.|||You will learn more about conditions in the next chapter.|||Fill in the missing parts to print the values True and False:|||Start the Exercise",,YES / NO@@@ON / OFF@@@TRUE / FALSE,,,[]
C# Tutorial,C# If...Else,https://www.w3schools.com/cs/cs_conditions.php,"C# supports the usual logical conditions from mathematics:|||You can use these conditions to perform different actions for different decisions.|||C# has the following conditional statements:|||Use the if statement to specify a block of C# code to be executed if a condition is True.|||Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.|||In the example below, we test two values to find out if 20 is greater than 18. If the condition is True, print some text:|||Try it Yourself »|||We can also test variables:|||Try it Yourself »|||In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".|||Use the else statement to specify a block of code to be executed if the condition is False.|||Try it Yourself »|||In the example above, time (20) is greater than 18, so the condition is False. Because of this, we move on to the else condition and print to the screen ""Good evening"". If the time was less than 18, the program would print ""Good day"".|||Use the else if statement to specify a new condition if the first condition is False.|||Try it Yourself »|||In the example above, time (22) is greater than 10, so the first condition is False. The next condition, in the  else if statement, is also False, so we move on to the elsecondition since condition1 and condition2 is both False - and print to the screen ""Good evening"".|||However, if the time was 14, our program would print ""Good day.""|||There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:|||Instead of writing:|||Try it Yourself »|||You can simply write:|||Try it Yourself »|||Print ""Hello World"" if x is greater than y.|||Start the Exercise",,"Less than: a < b@@@Less than or equal to: a <= b@@@Greater than: a > b@@@Greater than or equal to: a >= b@@@Equal to a == b@@@Not Equal to: a != b|||Use if to specify a block of code to be executed, if a specified condition is true@@@Use else to specify a block of code to be executed, if the same condition is false@@@Use else if to specify a new condition to test, if the first condition is false@@@Use switch to specify many alternative blocks of code to be executed",,,[]
C# Tutorial,C# Switch,https://www.w3schools.com/cs/cs_switch.php,"Use the switch statement to select one of many code blocks to be executed.|||This is how it works:|||The example below uses the weekday number to calculate the weekday name:|||Try it Yourself »|||When C# reaches a break keyword, it breaks out of the switch block.|||This will stop the execution of more code and case testing inside the block.|||When a match is found, and the job is done, it's time for a break. There is no need for more testing.|||A break can save a lot of execution time because it ""ignores"" the execution of all the rest of the code in the switch block.|||The default keyword is optional and specifies some code to run if there is no case match:|||Try it Yourself »|||Insert the missing parts to complete the following switch statement.|||Start the Exercise",The default Keyword,"The switch expression is evaluated once@@@The value of the expression is compared with the values of each case@@@If there is a match, the associated block of code is executed@@@The break and default keywords will be described later in this chapter",,,[]
C# Tutorial,C# While Loop,https://www.w3schools.com/cs/cs_while_loop.php,"Loops can execute a block of code as long as a specified condition is reached.|||Loops are handy because they save time, reduce errors, and they make code more readable.|||The while loop loops through a block of code as long as a specified condition is True:|||In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:|||Try it Yourself »|||Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!|||The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.|||The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:|||Try it Yourself »|||Do not forget to increase the variable used in the condition, otherwise the loop will never end!|||Print i as long as i is less than 6.|||Start the Exercise",,,,,[]
C# Tutorial,C# For Loop,https://www.w3schools.com/cs/cs_for_loop.php,"When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:|||Statement 1 is executed (one time) before the execution of the code block.|||Statement 2 defines the condition for executing the code block.|||Statement 3 is executed (every time) after the code block has been executed.|||The example below will print the numbers 0 to 4:|||Try it Yourself »|||Statement 1 sets a variable before the loop starts (int i = 0).|||Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.|||Statement 3 increases a value (i++) each time the code block in the loop has been executed.|||This example will only print even values between 0 and 10:|||Try it Yourself »|||There is also a foreach loop, which is used exclusively to loop through elements in an array:|||The following example outputs all elements in the cars array, using a foreach loop:|||Try it Yourself »|||Note: Don't worry if you don't understand the example above. You will learn more about Arrays in the C# Arrays chapter.|||Use a for loop to print ""Yes"" 5 times:|||Start the Exercise",,,,,[]
C# Tutorial,C# Break/Continue,https://www.w3schools.com/cs/cs_break.php,"You have already seen the break statement used in an earlier chapter of this tutorial. It was used to ""jump out"" of a switch statement.|||The break statement can also be used to jump out of a loop.|||This example jumps out of the loop when i is equal to 4:|||Try it Yourself »|||The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.|||This example skips the value of 4:|||Try it Yourself »|||You can also use break and continue in while loops:|||Try it Yourself »|||Try it Yourself »",,,,,[]
C# Tutorial,C# Arrays,https://www.w3schools.com/cs/cs_arrays.php,"Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.|||To declare an array, define the variable type with square brackets:|||We have now declared a variable that holds an array of strings.|||To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:|||To create an array of integers, you could write:|||You access an array element by referring to the index number.|||This statement accesses the value of the first element in cars:|||Try it Yourself »|||Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.|||To change the value of a specific element, refer to the index number:|||Try it Yourself »|||To find out how many elements an array has, use the Length property:|||Try it Yourself »|||You can loop through the array elements with the for loop, and use the Length property to specify how many times the loop should run.|||The following example outputs all elements in the cars array:|||Try it Yourself »|||There is also a foreach loop, which is used exclusively to loop through elements in an array:|||The following example outputs all elements in the cars array, using a foreach loop:|||Try it Yourself »|||The example above can be read like this: for eachstring element (called i - as in index) in cars, print out the value of i.|||If you compare the for loop and foreach loop, you will see that the foreach method is easier to write, it does not require a counter (using the Length property), and it is more readable.|||There are many array methods available, for example Sort(), which sorts an array alphabetically or in an ascending order:|||Try it Yourself »|||Other useful array methods, such as Min, Max, and Sum, can be found in the System.Linq namespace:|||Try it Yourself »|||You will learn more about other namespaces in a later chapter.|||If you are familiar with C#, you might have seen arrays created with the new keyword, and perhaps you have seen arrays with a specified size as well. In C#, there are different ways to create an array:|||It is up to you which option you choose. In our tutorial, we will often use the last option, as it is faster and easier to read.|||However, you should note that if you declare an array and initialize it later, you have to use the new keyword:|||Try it Yourself »|||Create an array of type string called cars.|||Start the Exercise",Create an Array|||System.Linq Namespace,,,,[]
C# Methods,C# Methods,https://www.w3schools.com/cs/cs_methods.php,"A method is a block of code which only runs when it is called.|||You can pass data, known as parameters, into a method.|||Methods are used to perform certain actions, and they are also known as functions.|||Why use methods? To reuse code: define the code once, and use it many times.|||A method is defined with the name of the method, followed by parentheses (). C# provides some pre-defined methods, which you already are familiar with, such as Main(), but you can also create your own methods to perform certain actions:|||Create a method inside the Program class:|||Note: In C#, it is good practice to start with an uppercase letter when naming methods, as it makes the code easier to read.|||To call (execute) a method, write the method's name followed by two parentheses () and a semicolon;|||In the following example, MyMethod() is used to print a text (the action), when it is called:|||Inside Main(), call the myMethod() method:|||Try it Yourself »|||A method can be called multiple times:|||Try it Yourself »|||Create a method named MyMethod and call it inside Main().|||Start the Exercise",,MyMethod() is the name of the method@@@static means that the method belongs to the Program class and not an object of the Program class. You will learn more about objects and how to access methods through objects later in this tutorial.@@@void means that this method does not have a return value. You will learn more about return values later in this chapter,,,[]
C# Methods,C# Method Parameters,https://www.w3schools.com/cs/cs_method_parameters.php,"Information can be passed to methods as parameter. Parameters act as variables inside the method.|||They are specified after the method name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma.|||The following example has a method that takes a string called fname as parameter.When the method is called, we pass along a first name,which is used inside the method to print the full name:|||Try it Yourself »|||When a parameter is passed to the method, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.|||You can also use a default parameter value, by using the equals sign (=).If we call the method without an argument, it uses the default value (""Norway""):|||Try it Yourself »|||A parameter with a default value, is often known as an ""optional parameter"". From the example above, country is an optional parameter and ""Norway"" is the default value.|||You can have as many parameters as you like:|||Try it Yourself »|||Note that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.|||The void keyword, used in the examples above, indicates that the method should not return a value. If you want the method to return a value, you can use a primitive data type (such as int or double) instead of void, and use the return keyword inside the method:|||Try it Yourself »|||This example returns the sum of a method's two parameters:|||Try it Yourself »|||You can also store the result in a variable (recommended, as it is easier to read and maintain):|||Try it Yourself »|||It is also possible to send arguments with the key: value syntax.|||That way, the order of the arguments does not matter:|||Try it Yourself »|||Named arguments are especially useful when you have multiple parameters with default values, and you only want to specify one of them when you call it:|||Try it Yourself »",Default Parameter Value|||Return Values,,,,[]
C# Methods,C# Method Overloading,https://www.w3schools.com/cs/cs_method_overloading.php,"With method overloading, multiple methods can have the same name with differentparameters:|||Consider the following example, which have two methods that add numbers of different type:|||Try it Yourself »|||Instead of defining two methods that should do the same thing, it is better to overload one. |||In the example below, we overload the PlusMethod method to work for both int and double:|||Try it Yourself »|||Note: Multiple methods can have the same name   as long as the number and/or type of parameters are different.",Method Overloading,,,,[]
C# Classes,C# OOP,https://www.w3schools.com/cs/cs_oop.php,"OOP stands for Object-Oriented Programming.|||Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.|||Object-oriented programming has several advantages over procedural programming:|||Tip: The ""Don't Repeat Yourself"" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.|||Classes and objects are the two main aspects of object-oriented programming.|||Look at the following illustration to see the difference between class and objects:|||Fruit|||Apple|||Banana|||Mango|||Another example:|||Car|||Volvo|||Audi|||Toyota|||So, a class is a template for objects, and an object is an instance of a class.|||When the individual objects are created, they inherit all the variables and methods from the class.|||You will learn much more about classes and objects in the next chapter.",,"OOP is faster and easier to execute@@@OOP provides a clear structure for the programs@@@OOP helps to keep the C# code DRY ""Don't Repeat Yourself"", and makes   the   code easier to maintain, modify and debug@@@OOP makes it possible to create full reusable   applications with less code and shorter development time",,,[]
C# Classes,C# Classes/Objects,https://www.w3schools.com/cs/cs_classes.php,"You learned from the previous chapter that C# is an object-oriented programming language.|||Everything in C# is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.|||A Class is like an object constructor, or a ""blueprint"" for creating objects.|||To create a class, use the class keyword:|||Create a class named ""Car"" with a variable color:|||When a variable is declared directly in a class, it is often referred to as afield (or attribute).|||It is not required, but it is a good practice to start with an uppercase first letter when naming classes. Also, it is common that the name of the C# file and the class matches, as it makes our code organized. However it is not required (like in Java).|||An object is created from a class. We have already created the class named Car, so now we can use this to create objects.|||To create an object of Car, specify the class name, followed by the object name, and use the keyword new:|||Create an object called ""myObj"" and use it to print the value of color:|||Try it Yourself »|||Note that we use the dot syntax (.) to access variables/fields inside a class (myObj.color). You will learn more about fields in the next chapter.|||You can create multiple objects of one class:|||Create two objects of Car:|||Try it Yourself »|||You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the fields and methods, while the other class holds the Main() method (code to be executed)). |||Try it Yourself »|||Did you notice the public keyword? It is called an access modifier, which specifies that the color variable/field of Car is accessible for other classes as well, such as Program.|||You will learn much more about access modifiers and classes/objects in the next chapters.",Multiple Objects,prog2.cs@@@prog.cs,,,[]
C# Classes,C# Class Members,https://www.w3schools.com/cs/cs_class_members.php,"Fields and methods inside classes are often referred to as ""Class Members"":|||Create a Car class with three class members:two fields and one method.|||In the previous chapter, you learned that variables inside a class are called fields, and that you can access them by creating an object of the class, and by using the dot syntax (.).|||The following example will create an object of the Car class, with the name myObj. Then we print the value of the fields color and maxSpeed:|||Try it Yourself »|||You can also leave the fields blank, and modify them when creating the object:|||Try it Yourself »|||This is especially useful when creating multiple objects of one class:|||Try it Yourself »|||You learned from the C# Methods chapter that methods are used to perform certain actions.|||Methods normally belongs to a class, and they define how an object of a class behaves.|||Just like with fields, you can access methods with the dot syntax. However, note that the method must be public. And remember that we use the name of the method followed by two parantheses () and a semicolon ; to call (execute) the method:|||Try it Yourself »|||Why did we declare the method as public, and not static, like in the examples from the C# Methods Chapter?|||The reason is simple: a static method can be accessed without creating an object of the class, while public methods can only be accessed by objects.|||Remember from the last chapter, that we can use multiple classes for better organization (one for fields and methods, and another one for execution). This is recommended:|||Try it Yourself »|||The public keyword is called an access modifier, which specifies that the fields of Car are accessible for other classes as well, such as Program.|||You will learn more about Access Modifiers in a later chapter.|||Tip: As you continue to read, you will also learn more about other class members, such as constructors and properties.",Use Multiple Classes,,,,[]
C# Classes,C# Constructors,https://www.w3schools.com/cs/cs_constructors.php,"A constructor is a special method that is used to initialize objects. The advantage of a constructor, is that it is called when an object of a class is created. It can be used to set initial values for fields:|||Create a constructor:|||Try it Yourself »|||Note that the constructor name must match the class name, and it cannot have a return type (like void or int). |||Also note that the constructor is called when the object is created.|||All classes have constructors by default: if you do not create a class   constructor yourself, C# creates one for you. However, then you are not able   to set initial values for fields.|||Constructors save time! Take a look at the last example on this page to really understand why.|||Constructors can also take parameters, which is used to initialize fields.|||The following example adds a string modelName parameter to the constructor. Inside the constructor we set model to modelName (model=modelName). When we call the constructor, we pass a parameter to the constructor (""Mustang""), which will set the value of model to ""Mustang"":|||Try it Yourself »|||You can have as many parameters as you want:|||Try it Yourself »|||Tip: Just like other methods, constructors can be overloaded by using different numbers of parameters.|||When you consider the example from the previous chapter, you will notice that constructors are very useful, as they help reducing the amount of code:|||Without constructor:|||Try it Yourself »|||With constructor:|||Try it Yourself »",,,,,[]
C# Classes,C# Access Modifiers,https://www.w3schools.com/cs/cs_access_modifiers.php,"By now, you are quite familiar with the public keyword that appears in many of our examples:|||The public keyword is an access modifier, which is used to set the access level/visibility for classes, fields, methods and properties.|||C# has the following access modifiers:|||There's also two combinations: protected internal and private protected.|||For now, lets focus on public and private modifiers.|||If you declare a field with a private access modifier, it can only be accessed within the same class:|||The output will be:|||Try it Yourself »|||If you try to access it outside the class, an error will occur:|||The output will be:|||Try it Yourself »|||If you declare a field with a public access modifier, it is accessible for all classes:|||The output will be:|||Try it Yourself »|||To control the visibility of class members (the security level of each individual class and class member).|||To achieve ""Encapsulation"" - which is the process of making sure that ""sensitive"" data is hidden from users. This is done by declaring fields as private. You will learn more about this in the next chapter.|||Note: By default, all members of a class are private if you don't specify an access modifier:",,,,"public|||The code is accessible for all classes&&&private|||The code is only accessible within the same class&&&protected|||The code is accessible within the same class, or in a class that is 
inherited from that class. You will learn more about inheritance in a later chapter&&&internal|||The code is only accessible within its own assembly, but not from another assembly. 
You will learn more about this in a later chapter",[]
C# Classes,C# Properties,https://www.w3schools.com/cs/cs_properties.php,"Before we start to explain properties, you should have a basic understanding of ""Encapsulation"".|||The meaning of Encapsulation, is to make sure that ""sensitive"" data is hidden from users. To achieve this, you must:declare fields/variables as privateprovide public get and set methods, through properties, to access and update the value of a private fieldPropertiesYou learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, sometimes we need to access them - and it can be done with properties.A property is like a combination of a variable and a method, and it has two methods: a get and a set method:Exampleclass Person{  private string name; // field  public string Name   // property  {    get { return name; }   // get method    set { name = value; }  // set method  }}Example explainedThe Name property is associated with the name field. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.The get method returns the value of the variable name.The set method assigns a value to thename variable. The value keyword represents the value we assign to the property.If you don't fully understand it, take a look at the example below.Now we can use the Name property to access and update the private field of the Person class:Exampleclass Person{  private string name; // field  public string Name   // property  {    get { return name; }    set { name = value; }  }}class Program{  static void Main(string[] args)  {    Person myObj = new Person();    myObj.Name = ""Liam"";    Console.WriteLine(myObj.Name);  }}The output will be:LiamTry it Yourself »Automatic Properties (Short Hand)C# also provides a way to use short-hand / automatic properties, where you do not have to define the field for the property, and you only have to write get; and set; inside the property.The following example will produce the same result as the example above. The only difference is that there is less code:ExampleUsing automatic properties:class Person{  public string Name  // property  { get; set; }}class Program{  static void Main(string[] args)  {    Person myObj = new Person();    myObj.Name = ""Liam"";    Console.WriteLine(myObj.Name);  }}The output will be:LiamTry it Yourself »Why Encapsulation?Better control of class members (reduce the possibility of yourself (or others) to mess up the code)Fields can be made read-only (if you only use the get method), or write-only (if you only use the set method)Flexible: the programmer can change one part of the code without affecting other partsIncreased security of data❮ PreviousNext ❯|||You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, sometimes we need to access them - and it can be done with properties.|||A property is like a combination of a variable and a method, and it has two methods: a get and a set method:|||The Name property is associated with the name field. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.|||The get method returns the value of the variable name.|||The set method assigns a value to thename variable. The value keyword represents the value we assign to the property.|||If you don't fully understand it, take a look at the example below.|||Now we can use the Name property to access and update the private field of the Person class:|||The output will be:|||Try it Yourself »|||C# also provides a way to use short-hand / automatic properties, where you do not have to define the field for the property, and you only have to write get; and set; inside the property.|||The following example will produce the same result as the example above. The only difference is that there is less code:|||Using automatic properties:|||The output will be:|||Try it Yourself »",Properties and Encapsulation|||Why Encapsulation?,"declare fields/variables as private@@@provide public get and set methods, through properties, to access and update the value of a private field|||Better control of class members (reduce the possibility of yourself (or others) to mess up the code)@@@Fields can be made read-only (if you only use the get method), or write-only (if you only use the set method)@@@Flexible: the programmer can change one part of the code without affecting other parts@@@Increased security of data",,,[]
C# Classes,C# Inheritance,https://www.w3schools.com/cs/cs_inheritance.php,"In C#, it is possible to inherit fields and methods from one class to another. We group the ""inheritance concept"" into two categories:|||To inherit from a class, use the : symbol.|||In the example below, the Car class (child) inherits the fields and methods from the Vehicle class (parent):|||Run example »|||- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.|||Tip: Also take a look at the next chapter, Polymorphism, which uses inherited methods to perform different tasks.|||If you don't want other classes to inherit from a class, use the sealed keyword:|||If you try to access a sealed class, C# will generate an error:|||The error message will be something like this:",,Derived Class (child) - the class that inherits from another class@@@Base Class (parent) - the class being inherited from,,,[]
C# Classes,C# Polymorphism,https://www.w3schools.com/cs/cs_polymorphism.php,"Polymorphism means ""many forms"", and it occurs when we have many classes that are related to each other by inheritance.|||Like we specified in the previous chapter; Inheritance lets us inherit fields and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.|||For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):|||Remember from the Inheritance chapter that we use the : symbol to inherit from a class.|||Now we can create Pig and Dog objects and call the animalSound() method on both of them:|||The output will be:|||Try it Yourself »|||The output from the example above was probably not what you expected. That is because the base class method overrides the derived class method, when they share the same name.|||However, C# provides an option to override the base class method, by adding the virtual keyword to the method inside the base class, and by using the override keyword for each derived class methods:|||The output will be:|||Try it Yourself »|||- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.",,,,,[]
C# Classes,C# Abstraction,https://www.w3schools.com/cs/cs_abstract.php,"Data abstraction is the process of hiding certain details and showing only essential information to the user.Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).|||The abstract keyword is used for classes and methods:Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).An abstract class can have both abstract and regular methods:abstract class Animal {  public abstract void animalSound();  public void sleep()   {    Console.WriteLine(""Zzz"");  }}From the example above, it is not possible to create an object of the Animal class:Animal myObj = new Animal(); // Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class.Remember from the Inheritance chapter that we use the : symbol to inherit from a class, and that we use the override keyword to override the base class method.Example// Abstract classabstract class Animal{  // Abstract method (does not have a body)  public abstract void animalSound();  // Regular method  public void sleep()  {    Console.WriteLine(""Zzz"");  }}// Derived class (inherit from Animal)class Pig : Animal{  public override void animalSound()  {    // The body of animalSound() is provided here    Console.WriteLine(""The pig says: wee wee"");  }}class Program{  static void Main(string[] args)  {    Pig myPig = new Pig(); // Create a Pig object    myPig.animalSound();  // Call the abstract method    myPig.sleep();  // Call the regular method  }}Try it Yourself »Why And When To Use Abstract Classes and Methods?To achieve security - hide certain details and only show the important details of an object.Note: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter.❮ PreviousNext ❯|||An abstract class can have both abstract and regular methods:|||From the example above, it is not possible to create an object of the Animal class:|||To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class.|||Remember from the Inheritance chapter that we use the : symbol to inherit from a class, and that we use the override keyword to override the base class method.|||Try it Yourself »|||To achieve security - hide certain details and only show the important details of an object.|||Note: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter.",,"Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).@@@@@@Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).",,,[]
C# Classes,C# Interface,https://www.w3schools.com/cs/cs_interface.php,"Another way to achieve abstraction in C#, is with interfaces.|||An interface is a completely ""abstract class"", which can only contain abstract methods and properties (with empty bodies):|||It is considered good practice to start with the letter ""I"" at the beginning of an interface, as it makes it easier for yourself and others to remember that it is an interface and not a class.|||By default, members of an interface are abstract and public.|||Note: Interfaces can contain properties and methods, but   not fields.|||To access the interface methods, the interface must be ""implemented"" (kinda like inherited) by another class. To implement an interface, use the : symbol (just like with inheritance). The body of the interface method is provided by the ""implement"" class. Note that you do not have to use the override keyword when implementing an interface:|||Try it Yourself »|||1) To achieve security - hide certain details and only show the important details of an object (interface).|||2) C# does not support ""multiple inheritance"" (a class can only inherit from one   base class). However, it can be achieved   with interfaces, because the class can implement multiple interfaces.  Note: To implement multiple interfaces, separate them with a comma (see example below).|||To implement multiple interfaces, separate them with a comma:|||Try it Yourself »",Multiple Interfaces ,"Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an ""IAnimal"" object in the Program class)@@@Interface methods do not have a body - the body is provided by the ""implement"" class@@@On implementation of an interface, you must override all of its methods@@@Interfaces can contain properties and methods, but not   fields/variables@@@Interface members are by default abstract and   public@@@An interface cannot contain a constructor (as it cannot be used to create objects)",,,[]
C# Classes,C# Enums,https://www.w3schools.com/cs/cs_enums.php,"An enum is a special ""class"" that represents a group of constants (unchangeable/read-only variables).|||To create an enum, use the enum keyword (instead of class or interface), and separate the enum items with a comma:|||You can access enum items with the dot syntax:|||Enum is short for ""enumerations"", which means ""specifically listed"".|||You can also have an enum inside a class:|||The output will be:|||By default, the first item of an enum has the value 0. The second has the value 1, and so on.|||To get the integer value from an item, you must explicitly convert the item to an int:|||The output will be:|||You can also assign your own enum values, and the next items will update the number accordingly:|||The output will be:|||Enums are often used in switch statements to check for corresponding values:|||The output will be:|||Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.",Enum Values,,,,[]
C# Classes,C# Files,https://www.w3schools.com/cs/cs_files.php,"The File class from the System.IO namespace, allows us to work with files:|||The File class has many useful methods for creating and getting information about files. For example:|||For a full list of File methods, go to Microsoft .Net File Class Reference.|||In the following example, we use the WriteAllText() method to create a file named ""filename.txt"" and write some content to it. Then we use the ReadAllText() method to read the contents of the file:|||The output will be:",,,,"AppendText()|||Appends text at the end of an existing file&&&Copy()|||Copies a file&&&Create()|||Creates or overwrites a file&&&Delete()|||Deletes a file&&&Exists()|||Tests whether the file exists&&&ReadAllText()|||Reads the contents of a file&&&Replace()|||Replaces the contents of a file with the contents of another file&&&WriteAllText()|||Creates a new file and writes the contents to it. If the file already exists, it will be overwritten.",[]
C# Classes,C# Exceptions,https://www.w3schools.com/cs/cs_exceptions.php,"When executing C# code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.|||When an error occurs, C# will normally stop and generate an error message. The technical term for this is: C# will throw an exception (throw an error).|||The try statement allows you to define a block of code to be tested for errors while it is being executed.|||The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.|||The try and catch keywords come in pairs:|||Consider the following example, where we create an array of three integers:|||This will generate an error, because myNumbers[10] does not exist.|||The error message will be something like this:|||If an error occurs, we can use try...catch to catch the error and execute some code to handle it.|||In the following example, we use the variable inside the catch block (e) together with the built-in Message property, which outputs a message that describes the exception:|||The output will be:|||You can also output your own error message:|||The output will be:|||The finally statement lets you execute code, after try...catch, regardless of the result:|||The output will be:|||The throw statement allows you to create a custom error.|||The throw statement is used together with an exception class. There are many exception classes available in C#: ArithmeticException, FileNotFoundException, IndexOutOfRangeException, TimeOutException, etc:|||The error message displayed in the program will be:|||If age was 20, you would not get an exception:|||The output will be:",Finally,,,,[]
C# How To,Add Two Numbers,https://www.w3schools.com/cs/cs_howto_add_two_numbers.php,Learn how to add two numbers in C#:|||Try it Yourself »,,,,,[]
C# Examples,C# Examples,https://www.w3schools.com/cs/cs_examples.php,,,,,,[]
C# Examples,C# Compiler,https://www.w3schools.com/cs/cs_compiler.php,"With our online C# compiler, you can edit C# code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you don't know C#, we suggest that you read our C# Tutorial from scratch.",C# Compiler (Editor)|||C# Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
C# Examples,C# Exercises,https://www.w3schools.com/cs/cs_exercises.php,"You can test your C# skills with W3Schools' Exercises.|||We have gathered a variety of C# exercises (with answers) for each C# Chapter.|||Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start C# Exercises ❯|||If you don't know C#, we suggest that you read our C# Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
C# Examples,C# Quiz,https://www.w3schools.com/cs/cs_quiz.php,"You can test your C# skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about C#.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the C# Quiz ❯|||If you don't know C#, we suggest that you read our C# Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
