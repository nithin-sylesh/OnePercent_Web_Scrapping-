Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
Node.js Tutorial,Node.js HOME,https://www.w3schools.com/nodejs/default.asp,"Node.js is an open source server environment.|||Node.js allows you to run JavaScript on the server.|||Our ""Show Node.js"" tool makes it easy to learn Node.js, it shows both the code and the result.|||Click on the ""Run example"" button to see how it works.|||In this tutorial there will be some examples that are better explained by displaying the result in the command line interface.|||When this happens, The ""Show Node.js"" tool will show the result in a black screen on the right:|||Click on the ""Run example"" button to see how it works.|||Node.js has a set of built-in modules.|||Built-in Modules|||Download Node.js from the official Node.js web site:https://nodejs.org",Examples Running in the Command Line Interface|||Node.js Reference,,,,"[[""\n  var http = require('http');"", 'http.createServer(function (req, res) {', ""\xa0\xa0res.writeHead(200, {'Content-Type': 'text/plain'});"", ""\xa0\xa0res.end('Hello World!');"", '}).listen(8080); '], [""\nconsole.log('This example is different!');"", ""\nconsole.log('The result is displayed in the Command Line Interface'); ""]]"
Node.js Tutorial,Node.js Intro,https://www.w3schools.com/nodejs/nodejs_intro.asp,"Node.js uses asynchronous programming!|||A common task for a web server can be to open a file on the server and return the content to the client.|||Here is how PHP or ASP handles a file request:|||Here is how Node.js handles a file request:|||Node.js eliminates the waiting, and simply continues with the next request. |||Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.",What is Node.js?|||What Can Node.js Do?|||What is a Node.js File?,"Node.js is an open source server environment@@@Node.js is free@@@Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)@@@Node.js uses JavaScript on the server|||Node.js can generate dynamic page content@@@Node.js can create, open, read, write, delete, and close files on the server@@@Node.js can collect form data@@@Node.js can add, delete, modify data in your database|||Node.js files contain tasks that will be executed on certain events@@@A typical event is someone trying to access a port on the server@@@Node.js files must be initiated on the server before having any effect@@@Node.js files have extension "".js""","Sends the task to the computer's file system.@@@Waits while the file system opens and reads the   file.@@@Returns the content to the client.@@@Ready to handle the next request.|||Sends the task to the computer's file system.@@@Ready to handle the next request.@@@When the file system has opened and read the file, the server returns the content to the client.",,[]
Node.js Tutorial,Node.js Get Started,https://www.w3schools.com/nodejs/nodejs_get_started.asp,"The official Node.js website has installation instructions for Node.js:https://nodejs.org|||Once you have downloaded and installed Node.js on your computer, let's try to display ""Hello World"" in a web browser.|||Create a Node.js file named ""myfirst.js"", and add the following code:|||myfirst.js|||Save the file on your computer: C:\Users\Your Name\myfirst.js|||The code tells the computer to write ""Hello World!"" if anyone (e.g. a web browser) tries to access your computer on port 8080.|||For now, you do not have to understand the code. It will be explained later.|||Node.js files must be initiated in the ""Command Line Interface"" program of your computer.|||How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for ""Command Prompt"", or simply write ""cmd"" in the search field.|||Navigate to the folder that contains the file ""myfirst.js"", the command line interface window should look something like this:|||The file you have just created must be initiated by Node.js before any action can take place.|||Start your command line interface, write node myfirst.js and hit enter:|||Initiate ""myfirst.js"":|||Now, your computer works as a server!|||If anyone tries to access your computer on port 8080, they will get a ""Hello World!"" message in return!|||Start your internet browser, and type in the address: http://localhost:8080",,,,,"[[""\n  var http = require('http');"", 'http.createServer(function (req, res) {', ""\xa0\xa0res.writeHead(200, {'Content-Type': 'text/html'});"", ""\n  \xa0 \n  res.end('Hello World!');"", '}).listen(8080);']]"
Node.js Tutorial,Node.js Modules,https://www.w3schools.com/nodejs/nodejs_modules.asp,"Consider modules to be the same as JavaScript libraries.|||A set of functions you want to include in your application.|||Node.js has a set of built-in modules which you can use without any further installation.|||Look at our Built-in Modules Reference for a complete list of modules.|||To include a module, use the require() function with the name of the module:|||Now your application has access to the HTTP module, and is able to create a server:|||You can create your own modules, and easily include them in your applications.|||The following example creates a module that returns a date and time object:|||Create a module that returns the current date and time:|||Use the exports keyword to make properties and methods available outside the module file.|||Save the code above in a file called ""myfirstmodule.js""|||Now you can include and use the module in any of your Node.js files.|||Use the module ""myfirstmodule"" in a Node.js file:|||Notice that we use ./ to locate the module, that means that the module is located in the same folder as the Node.js file.|||Save the code above in a file called ""demo_module.js"", and initiate the file:|||Initiate demo_module.js:|||If you have followed the same steps on your computer, you will see the same result as the example: http://localhost:8080",What is a Module in Node.js?|||Built-in Modules|||Include Modules|||Create Your Own Modules|||Example|||Include Your Own Module|||Example,,,,"[[""\n  var http = require('http');""], ['\n  http.createServer(function (req, res) {', ""\xa0 \n  res.writeHead(200, {'Content-Type': 'text/html'});"", ""\xa0 \n  res.end('Hello World!');"", '}).listen(8080);'], ['\n  exports.myDateTime = function () {', '\xa0\xa0return Date();', '};'], [""\n  var http = require('http');"", '\n', <strong>var dt = require('./myfirstmodule');<br/></strong>, '\n  http.createServer(function (req, res) {', ""\xa0 \n  res.writeHead(200, {'Content-Type': 'text/html'});"", '\xa0\n  res.write(""The date and time are currently: "" + ', <strong>dt.myDateTime()</strong>, ');', '\n  \xa0  \n  res.end();', '\n  }).listen(8080);']]"
Node.js Tutorial,Node.js HTTP Module,https://www.w3schools.com/nodejs/nodejs_http.asp,"Node.js has a built-in module called HTTP, which allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP).|||To include the HTTP module, use therequire() method:|||The HTTP module can create an HTTP server that listens to server ports and gives a response back to the client.|||Use the createServer() method to create an HTTP server:|||The function passed into the http.createServer() method, will be executed when someone tries to access the computer on port 8080.|||Save the code above in a file called ""demo_http.js"", and initiate the file:|||Initiate demo_http.js:|||If you have followed the same steps on your computer, you will see the same result as the example: http://localhost:8080|||If the response from the HTTP server is supposed to be displayed as HTML, you should include an HTTP header with the correct content type:|||The first argument of the res.writeHead() method is the status code, 200 means that all is OK, the second argument is an object containing the response headers.|||The function passed into the http.createServer() has a req argument that represents the request from the client, as an object (http.IncomingMessage object).|||This object has a property called ""url"" which holds the part of the url that comes after the domain name:|||demo_http_url.js|||Save the code above in a file called ""demo_http_url.js"" and initiate the file:|||Initiate demo_http_url.js:|||If you have followed the same steps on your computer, you should see two different results when opening these two addresses:|||http://localhost:8080/summer|||Will produce this result:|||http://localhost:8080/winter|||Will produce this result:|||There are built-in modules to easily split the query string into readable parts, such as the URL module.|||Split the query string into readable parts:|||Save the code above in a file called ""demo_querystring.js"" and initiate the file:|||Initiate demo_querystring.js:|||The address:|||http://localhost:8080/?year=2017&month=July|||Will produce this result:|||Read more about the URL module in the Node.js URL Module chapter.",The Built-in HTTP Module|||Node.js as a Web Server|||Split the Query String,,,,"[[""\n  var http = require('http');""], [""\n  var http = require('http');"", '//create a server object:', 'http.createServer(function \n  (req, res) {', ""\xa0 res.write('Hello World!'); //write a response to the \n  client"", '\xa0 res.end(); //end the response', '}).listen(8080); //the \n  server object listens on port 8080'], [""\n  var http = require('http');"", 'http.createServer(function \n  (req, res) {', <strong>Â  res.writeHead(200, 
  {'Content-Type': 'text/html'});<br/></strong>, ""\xa0 res.write('Hello \n  World!');"", '\xa0 res.end();', '}).listen(8080);'], [""\n  var http = require('http');"", 'http.createServer(function \n  (', <strong>req</strong>, ', res) {', ""\xa0\xa0res.writeHead(200, {'Content-Type': 'text/html'});"", '\n  \xa0 res.write(', <strong>req.url</strong>, ');', '\xa0 \n  res.end();', '}).listen(8080);'], [""\n    var http = require('http');"", <strong>var url = require('url');<br/>
</strong>, '\n    http.createServer(function (req, res) {', ""\xa0 res.writeHead(200, \n    {'Content-Type': 'text/html'});"", <strong>Â  var q = url.parse(req.url, 
    true).query;<br/></strong>, '\xa0 var txt = ', <strong>q.year</strong>, ' + "" "" + \n    ', <strong>q.month</strong>, ';', '\xa0 res.end(txt);', '\n    }).listen(8080);', '\n']]"
Node.js Tutorial,Node.js File System,https://www.w3schools.com/nodejs/nodejs_filesystem.asp,"The Node.js file system module allows you to work with the file system on your computer.|||To include the File System module, use the require() method:|||Common use for the File System module:|||The fs.readFile() method is used to read files on your computer.|||Assume we have the following HTML file (located in the same folder as Node.js):|||demofile1.html|||Create a Node.js file that reads the HTML file, and return the content:|||Save the code above in a file called ""demo_readfile.js"", and initiate the file:|||Initiate demo_readfile.js:|||If you have followed the same steps on your computer, you will see the same result as the example: http://localhost:8080|||The File System module has methods for creating new files:|||The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created:|||Create a new file using the appendFile() method:|||The fs.open() method takes a ""flag"" as the second argument, if the flag is ""w"" for ""writing"", the specified file is opened for writing. If the file does not exist, an empty file is created:|||Create a new, empty file using the open() method:|||The fs.writeFile() method replaces the specified file and content if it exists. If the file does not exist, a new file, containing the specified content, will be created:|||Create a new file using the writeFile() method:|||The File System module has methods for updating files:|||The fs.appendFile() method appends the specified content at the end of the specified file:|||Append ""This is my text."" to the end of the file ""mynewfile1.txt"":|||The fs.writeFile() method replaces the specified file and content:|||Replace the content of the file ""mynewfile3.txt"":|||To delete a file with the File System module,Â  use the fs.unlink() method.|||The fs.unlink() method deletes the specified file:|||Delete ""mynewfile2.txt"":|||To rename a file with the File System module,Â  use the fs.rename() method.|||The fs.rename() method renames the specified file:|||Rename ""mynewfile1.txt"" to ""myrenamedfile.txt"":|||You can also use Node.js to upload files to your computer.|||Read how in our Node.js Upload Files chapter.",Node.js as a File Server|||Create Files|||Update Files|||Delete Files|||Rename Files,Read files@@@Create files@@@Update files@@@Delete files@@@Rename files|||fs.appendFile()@@@fs.open()@@@fs.writeFile()|||fs.appendFile()@@@fs.writeFile(),,,"[[""\n  var fs = require('fs');""], [""\n  var http = require('http');"", ""var fs = require('fs');"", 'http.createServer(function \n  (req, res) {', <strong>Â  fs.readFile('demofile1.html', function(err, data) {<br/>
</strong>, ""\xa0\xa0\xa0 \n  res.writeHead(200, {'Content-Type': 'text/html'});"", '\xa0\xa0\xa0 res.write(data);', '\xa0\xa0\xa0 \n  return res.end();', '\xa0 });', '}).listen(8080);'], [""\n  var fs = require('fs');"", ""fs.appendFile('mynewfile1.txt', 'Hello \n  content!', function (err) {"", '\xa0 if (err) throw err;', ""\xa0 console.log('Saved!');"", '\n  });'], [""\n  var fs = require('fs');"", ""fs.open('mynewfile2.txt', 'w', function (err, \n  file) {"", '\xa0 if (err) throw err;', ""\xa0 console.log('Saved!');"", '});'], [""\n  var fs = require('fs');"", ""fs.writeFile('mynewfile3.txt', 'Hello \n  content!', function (err) {"", '\xa0 if (err) throw err;', ""\xa0 \n  console.log('Saved!');"", '});'], [""\n  var fs = require('fs');"", ""fs.appendFile('mynewfile1.txt', ' This is my \n  text.', function (err) {"", '\xa0 if (err) throw err;', ""\xa0 console.log('Updated!');"", '\n  });'], [""\n  var fs = require('fs');"", ""fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {"", '\xa0 if (err) throw err;', ""\xa0 \n  console.log('Replaced!');"", '});'], [""\n  var fs = require('fs');"", ""fs.unlink('mynewfile2.txt', function (err) {"", '\xa0 \n  if (err) throw err;', ""\xa0 console.log('File deleted!');"", '});'], [""\n  var fs = require('fs');"", ""fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {"", '\xa0 \n  if (err) throw err;', ""\xa0 console.log('File Renamed!');"", '});']]"
Node.js Tutorial,Node.js URL Module,https://www.w3schools.com/nodejs/nodejs_url.asp,"The URL module splits up a web address into readable parts.|||To include the URL module, use the require() method:|||Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties:|||Split a web address into readable parts:|||Now we know how to parse the query string, and in the previous chapter we learned how to make Node.js behave as a file server. Let us combine the two, and serve the file requested by the client.|||Create two html files and save them in the same folder as your node.js files.|||summer.html|||winter.html|||Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error:|||demo_fileserver.js:|||Remember to initiate the file:|||Initiate demo_fileserver.js:|||If you have followed the same steps on your computer, you should see two different results when opening these two addresses:|||http://localhost:8080/summer.html|||Will produce this result:|||I love the sun!|||http://localhost:8080/winter.html|||Will produce this result:|||I love the snow!",The Built-in URL Module,,,,"[[""\n  var url = require('url');""], [""\n  var url = require('url');"", ""\n  var adr = 'http://localhost:8080/default.htm?year=2017&month=february';"", '\n  var q = url.parse(adr, true);', ""\n  console.log(q.host); //returns 'localhost:8080'"", ""\n  console.log(q.pathname); //returns '/default.htm'"", ""console.log(q.search); //returns '?year=2017&month=february'"", ""\n  var qdata = q.query; //returns an object: { year: 2017, month: 'february' }"", ""\n  console.log(qdata.month); //returns 'february'"", '\n'], [""\n  var http = require('http');"", ""var url = require('url');"", ""var fs = require('fs');"", '\n', 'http.createServer(function \n  (req, res) {', '\xa0 var q = url.parse(req.url, true);', '\xa0 var \n    filename = ""."" + q.pathname;', '\xa0 fs.readFile(filename, \n    function(err, data) {', '\xa0\xa0\xa0 if (err) {', ""\xa0\xa0\xa0\xa0\xa0 res.writeHead(404, {'Content-Type': 'text/html'});"", '\xa0\xa0\xa0\xa0\xa0 \n    return res.end(""404 Not Found"");', '\xa0\xa0\xa0 }\xa0 ', ""\xa0\xa0\xa0 res.writeHead(200, {'Content-Type': 'text/html'});"", '\xa0\xa0\xa0 res.write(data);', '\xa0\xa0\xa0 \n    return res.end();', '\xa0 });', '}).listen(8080);']]"
Node.js Tutorial,Node.js NPM,https://www.w3schools.com/nodejs/nodejs_npm.asp,"NPM is a package manager for Node.js packages, or modules if you like.|||www.npmjs.com hosts thousands of free packages to download and use.|||The NPM program is installed on your computer when you install Node.js|||NPM is already ready to run on your computer!|||A package in Node.js contains all the files you need for a module.|||Modules are JavaScript libraries you can include in your project.|||Downloading a package is very easy.|||Open the command line interface and tell NPM to download the package you want.|||I want to download a package called ""upper-case"":|||Download ""upper-case"":|||Now you have downloaded and installed your first package!|||NPM creates a folder named ""node_modules"", where the package will be placed. All packages you install in the future will be placed in this folder.|||My project now has a folder structure like this:|||C:\Users\My Name\node_modules\upper-case|||Once the package is installed, it is ready to use.|||Include the ""upper-case"" package the same way you include any other module:|||Create a Node.js file that will convert the output ""Hello World!"" into upper-case letters:|||Save the code above in a file called ""demo_uppercase.js"", and initiate the file:|||Initiate demo_uppercase:|||If you have followed the same steps on your computer, you will see the same result as the example: http://localhost:8080",What is NPM?|||What is a Package?,,,,"[[""\n  var uc = require('upper-case');""], [""\n  var http = require('http');"", ""var uc = require('upper-case');"", 'http.createServer(function \n  (req, res) {', ""\xa0\xa0res.writeHead(200, {'Content-Type': 'text/html'});"", '\n  \xa0 res.write(', <strong>uc.upperCase(""Hello 
  World!"")</strong>, ');', '\xa0 \n  res.end();', '}).listen(8080);']]"
Node.js Tutorial,Node.js Events,https://www.w3schools.com/nodejs/nodejs_events.asp,"Node.js is perfect for event-driven applications.|||Every action on a computer is an event. Like when a connection is made or a file is opened.|||Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file:|||Node.js has a built-in module, called ""Events"", where you can create-, fire-, and listen for- your own events.|||To include the built-in Events module use the require() method. In addition, all event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:|||You can assign event handlers to your own events with the EventEmitter object.|||In the example below we have created a function that will be executed when a ""scream"" event is fired.|||To fire an event, use the emit() method.",,,,,"[[""\n  var fs = require('fs');"", ""var rs = fs.createReadStream('./demofile.txt');"", ""\n  rs.on('open', function () {"", ""\xa0 console.log('The file is open');"", '\n  });'], [""\n  var events = require('events');"", 'var eventEmitter = new events.EventEmitter();'], [""\n  var events = require('events');"", 'var eventEmitter = new events.EventEmitter();', '\n', '//Create an event handler:', 'var myEventHandler = function () {', ""\xa0 \n  console.log('I hear a scream!');"", '}', '//Assign the event handler to an \n  event:', ""eventEmitter.on('scream', myEventHandler);"", ""//Fire the \n  'scream' event:"", ""eventEmitter.emit('scream');""]]"
Node.js Tutorial,Node.js Upload Files,https://www.w3schools.com/nodejs/nodejs_uploadfiles.asp,"There is a very good module for working with file uploads, called ""Formidable"".|||The Formidable module can be downloaded and installed using NPM:|||After you have downloaded the Formidable module, you can include the module in any application:|||Now you are ready to make a web page in Node.js that lets the user upload files to your computer:|||Create a Node.js file that writes an HTML form, with an upload field:|||This code will produce an HTML form:|||Include the Formidable module to be able to parse the uploaded file once it reaches the server.|||When the file is uploaded and parsed, it gets placed on a temporary folder on your computer.|||The file will be uploaded, and placed on a temporary folder:|||When a file is successfully uploaded to the server, it is placed on a temporary folder.|||The path to this directory can be found in the ""files"" object, passed as the third argument in the parse() method's callback function.|||To move the file to the folder of your choice, use the File System module, and rename the file:|||Include the fs module, and move the file to the current folder:",The Formidable Module|||Step 2: Parse the Uploaded File|||Step 3: Save the File|||Example,,,,"[[""\n  var formidable = require('formidable');""], [""\n  var http = require('http');"", 'http.createServer(function \n  (req, res) {', ""\xa0 res.writeHead(200, {'Content-Type': 'text/html'});"", '\xa0 res.write(\'<form \n  action=""fileupload"" method=""post"" enctype=""multipart/form-data"">\');', '\xa0 res.write(\'<input \n  type=""file"" name=""filetoupload""><br>\');', '\xa0 res.write(\'<input \n  type=""submit"">\');', ""\xa0 res.write('</form>');"", '\xa0 \n  return res.end();', '}).listen(8080);'], [""\n  var http = require('http');"", <strong>var formidable = require('formidable');<br/>
</strong>, 'http.createServer(function \n  (req, res) {', <strong>Â  if (req.url == '/fileupload') {<br/>Â Â Â  
  var form = new formidable.IncomingForm();<br/>Â Â Â  form.parse(req, 
  function (err, fields, files) {<br/>Â Â Â Â Â  res.write('File 
  uploaded');<br/>Â Â Â Â Â  res.end();<br/>Â Â Â  });<br/>
</strong>, '\xa0 \n  } else {', ""\xa0 \xa0 res.writeHead(200, {'Content-Type': 'text/html'});"", '\xa0 \xa0 res.write(\'<form \n  action=""fileupload"" method=""post"" enctype=""multipart/form-data"">\');', '\xa0 \xa0 res.write(\'<input \n  type=""file"" name=""filetoupload""><br>\');', '\xa0 \xa0 res.write(\'<input \n  type=""submit"">\');', ""\xa0 \xa0 res.write('</form>');"", '\xa0 \xa0 \n  return res.end();', '\xa0 }', '}).listen(8080);'], [""\n  var http = require('http');"", ""var formidable = require('formidable');"", '\n', <strong>var fs = require('fs');<br/></strong>, 'http.createServer(function \n  (req, res) {', ""\xa0 if (req.url == '/fileupload') {"", '\xa0\xa0\xa0 \n  var form = new formidable.IncomingForm();', '\xa0\xa0\xa0 form.parse(req, \n  function (err, fields, files) {', <strong>Â Â Â Â Â  var 
  oldpath = files.filetoupload.filepath;<br/>Â Â Â Â Â  var 
  newpath = 'C:/Users/<em>Your Name</em>/' + files.filetoupload.originalFilename;<br/>Â Â Â Â Â  
  fs.rename(oldpath, newpath, function (err) {<br/>Â Â Â Â Â Â Â  if (err) throw 
  err;<br/>Â Â Â Â Â Â Â  res.write('File uploaded 
  and moved!');<br/>Â  Â Â Â Â Â  res.end();<br/>Â Â Â Â Â  
  });<br/></strong>, '\xa0});', '\xa0 \n  } else {', ""\xa0 \xa0 res.writeHead(200, {'Content-Type': 'text/html'});"", '\xa0 \xa0 res.write(\'<form \n  action=""fileupload"" method=""post"" enctype=""multipart/form-data"">\');', '\xa0 \xa0 res.write(\'<input \n  type=""file"" name=""filetoupload""><br>\');', '\xa0 \xa0 res.write(\'<input \n  type=""submit"">\');', ""\xa0 \xa0 res.write('</form>');"", '\xa0 \xa0 \n  return res.end();', '\xa0 }', '}).listen(8080);']]"
Node.js Tutorial,Node.js Email,https://www.w3schools.com/nodejs/nodejs_email.asp,"The Nodemailer module makes it easy to send emails from your computer.|||The Nodemailer module can be downloaded and installed using npm:|||After you have downloaded the Nodemailer module, you can include the module in any application:|||Now you are ready to send emails from your server.|||Use the username and password from your selected email provider to send an email. This tutorial will show you how to use your Gmail account to send an email:|||And that's it! Now your server is able to send emails.|||To send an email to more than one receiver, add them to the ""to"" property of the mailOptions object, separated by commas:|||Send email to more than one address:|||To send HTML formatted text in your email, use the ""html"" property instead of the ""text"" property:|||Send email containing HTML:",The Nodemailer Module,,,,"[[""\n  var nodemailer = require('nodemailer');""], [""\n  var nodemailer = require('nodemailer');"", 'var transporter = \n  nodemailer.createTransport({', ""\xa0 service: 'gmail',"", '\xa0 auth: {', ""\xa0\xa0\xa0 \n  user: '"", <em>youremail@gmail.com</em>, ""',"", ""\xa0\xa0\xa0 \n  pass: '"", <em>yourpassword</em>, ""'"", '\xa0 }', '});', 'var mailOptions = {', ""\xa0 \n  from: '"", <em>youremail@gmail.com</em>, ""',"", ""\xa0 \n  to: '"", <em>myfriend@yahoo.com</em>, ""',"", ""\xa0 subject: 'Sending Email using Node.js',"", ""\xa0 text: \n  'That was easy!'"", '};', 'transporter.sendMail(mailOptions, \n  function(error, info){', '\xa0 if (error) {', '\xa0\xa0\xa0 console.log(error);', '\xa0 } else {', ""\n  \xa0\xa0\xa0\n  console.log('Email sent: ' + info.response);"", '\xa0 }', '});'], ['\n  var mailOptions = {', ""\xa0 \n  from: '"", <em>youremail</em>, ""@gmail.com',"", <strong>Â  
  to: </strong>, ""'"", <em><strong>myfriend@yahoo.com</strong></em>, <strong>, </strong>, ' ', <em>
<strong>myotherfriend@yahoo.com</strong></em>, <strong>',<br/>
</strong>, ""\xa0 subject: 'Sending Email using Node.js',"", ""\xa0 text: \n'That was easy!'"", '}'], ['\n  var mailOptions = {', ""\xa0 \n  from: '"", <em>youremail</em>, ""@gmail.com',"", ""\xa0 \n  to: '"", <em>myfriend@yahoo.com</em>, ""',"", ""\n\xa0 subject: 'Sending Email using Node.js',"", <strong>Â  html: 
'&lt;h1&gt;Welcome&lt;/h1&gt;&lt;p&gt;That was easy!&lt;/p&gt;'<br/></strong>, '}']]"
Node.js MySQL,MySQL Get Started,https://www.w3schools.com/nodejs/nodejs_mysql.asp,"Node.js can be used in database applications.|||One of the most popular databases is MySQL.|||To be able to experiment with the code examples, you should have MySQL installed on your computer.|||You can download a free MySQL database at https://www.mysql.com/downloads/.|||Once you have MySQL up and running on your computer, you can access it by using Node.js.|||To access a MySQL database with Node.js, you need a MySQL driver. This tutorial will use the ""mysql"" module, downloaded from NPM.|||To download and install the ""mysql"" module, open the Command Terminal and execute the following:|||Now you have downloaded and installed a mysql database driver.|||Node.js can use this module to manipulate the MySQL database:|||Start by creating a connection to the database.|||Use the username and password from your MySQL database.|||demo_db_connection.js|||Save the code above in a file called ""demo_db_connection.js"" and run the file:|||Run ""demo_db_connection.js""|||Which will give you this result:|||Now you can start querying the database using SQL statements.|||Use SQL statements to read from (or write to) a MySQL database. This is also called ""to query"" the database.|||The connection object created in the example above, has a method for querying the database:|||The query method takes an sql statements as a parameter and returns the result.|||Learn how to read, write, delete, and update a database in the next chapters.|||Read more about SQL statements in our SQL Tutorial.",MySQL Database,,,,"[[""\n  var mysql = require('mysql');""], [""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '""', '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '});'], ['\n  con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '\n', <strong>Â 
  con.query(</strong>, <em><strong>sql</strong></em>, <strong>, function (err, result) {<br/>Â Â Â  if (err) throw err;<br/>Â  Â  console.log(""Result: 
  "" + result);<br/>Â  });<br/></strong>, '});']]"
Node.js MySQL,MySQL Create Database,https://www.w3schools.com/nodejs/nodejs_mysql_create_db.asp,"To create a database in MySQL, use the ""CREATE DATABASE"" statement:|||Create a database named ""mydb"":|||Save the code above in a file called ""demo_create_db.js"" and run the file:|||Run ""demo_create_db.js""|||Which will give you this result:",,,,,"[[""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '""', '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '\xa0 \n  con.query(""', <strong>CREATE DATABASE mydb</strong>, '"", function (err, result) {', '\n  \xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(""Database \n  created"");', '\xa0 });', '});']]"
Node.js MySQL,MySQL Create Table,https://www.w3schools.com/nodejs/nodejs_mysql_create_table.asp,"To create a table in MySQL, use the ""CREATE TABLE"" statement.|||Make sure you define the name of the database when you create the connection:|||Create a table named ""customers"":|||Save the code above in a file called ""demo_create_table.js"" and run the file:|||Run ""demo_create_table.js""|||Which will give you this result:|||When creating a table, you should also create a column with a unique key for each record.|||This can be done by defining a column as ""INT AUTO_INCREMENT PRIMARY KEY"" which will insert a unique number for each record. Starting at 1, and increased by one for each record.|||Create primary key when creating the table:|||If the table already exists, use the ALTER TABLE keyword:|||Create primary key on an existing table:",Primary Key,,,,"[[""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '"",', '\n', <strong>Â  database: ""mydb""</strong>, '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '\xa0 \n  var sql = ""', <strong>CREATE TABLE customers (name VARCHAR(255), 
  address VARCHAR(255)</strong>, ')"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 if (err) \n  throw err;', '\xa0\xa0\xa0 console.log(""Table created"");', '\xa0 });', '});'], [""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '"",', '\n  \xa0 database: ""mydb""', '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '\xa0 \n  var sql = ""CREATE TABLE customers (', <strong>id INT AUTO_INCREMENT PRIMARY 
  KEY</strong>, ', name VARCHAR(255), \n  address VARCHAR(255))"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 if (err) \n  throw err;', '\xa0\xa0\xa0 console.log(""Table created"");', '\xa0 });', '});'], [""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '"",', '\n  \xa0 database: ""mydb""', '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '\xa0 \n  var sql = ""', <strong>ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT 
  PRIMARY KEY</strong>, '"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 if (err) \n  throw err;', '\xa0\xa0\xa0 console.log(""Table altered"");', '\xa0 });', '});']]"
Node.js MySQL,MySQL Insert Into,https://www.w3schools.com/nodejs/nodejs_mysql_insert.asp,"To fill a table in MySQL, use the ""INSERT INTO"" statement.|||Insert a record in the ""customers"" table:|||Save the code above in a file called ""demo_db_insert.js"", and run the file:|||Run ""demo_db_insert.js""|||Which will give you this result:|||To insert more than one record, make an array containing the values, and insert a question mark in the sql, which will be replaced by the value array:INSERT INTO customers (name, address) VALUES ?|||Fill the ""customers"" table with data:|||Save the code above in a file called ""demo_db_insert_multple.js"", and run the file:|||Run ""demo_db_insert_multiple.js""|||Which will give you this result:|||When executing a query, a result object is returned.|||The result object contains information about how the query  affected the table.|||The result object returned from the example above looks like this:|||The values of the properties can be displayed like this:|||Return the  number of affected rows:|||Which will produce this result:|||For tables with an auto increment id field, you can get the id of the row you just inserted by asking the result object.|||Note: To be able to get the inserted id, only one row can be inserted.|||Insert a record in the ""customers"" table, and return the ID:|||Save the code above in a file called ""demo_db_insert_id.js"", and run the file:|||Run ""demo_db_insert_id.js""|||Which will give you something like this in return:",The Result Object,,,,"[[""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '"",', '\n  \xa0 database: ""mydb""', '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Connected!"");', '\n', <strong>Â  var sql = ""INSERT INTO customers (name, address) 
  VALUES ('Company Inc', 'Highway 37')"";<br/></strong>, '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(""1 record inserted"");', '\xa0 });', '});'], [""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 \n  password: ""', <em>yourpassword</em>, '"",', '\xa0 database: ""mydb""', '});', '\n  con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  console.log(""Connected!"");', '\xa0 var sql = ""INSERT INTO customers (name, \n  address) VALUES ?"";', '\xa0 var values = [', ""\xa0\xa0\xa0 ['John', \n  'Highway 71'],"", ""\xa0\xa0\xa0 ['Peter', 'Lowstreet 4'],"", ""\xa0\xa0\xa0 \n  ['Amy', 'Apple st 652'],"", ""\xa0\xa0\xa0 ['Hannah', 'Mountain 21'],"", ""\xa0\xa0\xa0 \n  ['Michael', 'Valley 345'],"", ""\xa0\xa0\xa0 ['Sandy', 'Ocean blvd 2'],"", ""\xa0\xa0\xa0 \n  ['Betty', 'Green Grass 1'],"", ""\xa0\xa0\xa0 ['Richard', 'Sky st 331'],"", ""\xa0\xa0\xa0 \n  ['Susan', 'One way 98'],"", ""\xa0\xa0\xa0 ['Vicky', 'Yellow Garden 2'],"", ""\xa0\xa0\xa0 \n  ['Ben', 'Park Lane 38'],"", ""\xa0\xa0\xa0 ['William', 'Central st 954'],"", ""\xa0\xa0\xa0 \n  ['Chuck', 'Main Road 989'],"", ""\xa0\xa0\xa0 ['Viola', 'Sideway 1633']"", '\xa0 \n  ];', '\xa0 con.query(sql,', <strong> [values]</strong>, ', function (err, result) \n  {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(""Number \n  of records inserted: "" + result.affectedRows);', '\xa0 });', '});'], ['\n  {', '\xa0 fieldCount: 0,', '\xa0 affectedRows: 14,', '\xa0 insertId: 0,', '\xa0 \n  serverStatus: 2,', '\xa0 warningCount: 0,', ""\xa0 message: '\\'Records:14\xa0 \n  Duplicated: 0\xa0 Warnings: 0',"", '\xa0 protocol41: true,', '\xa0 \n  changedRows: 0', '}'], [""\n  var mysql = require('mysql');"", 'var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""', <em>yourusername</em>, '"",', '\xa0 password: ""', <em>yourpassword</em>, '"",', '\n  \xa0 database: ""mydb""', '\n  });', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 var sql = ""INSERT INTO customers (name, address) \n  VALUES (\'Michelle\', \'Blue Village 1\')"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(""1 record inserted, \n  ID: "" + ', <strong>result.insertId</strong>, ');', '\xa0 });', '});']]"
Node.js MySQL,MySQL Select From,https://www.w3schools.com/nodejs/nodejs_mysql_select.asp,"To select data from a table in MySQL, use the ""SELECT"" statement.|||Select all records from the ""customers"" table, and display the result object:|||SELECT * will return all columns|||Save the code above in a file called ""demo_db_select.js"" and run the file:|||Run ""demo_db_select.js""|||Which will give you this result:|||To select only some of the columns in a table, use the ""SELECT"" statement followed by the column name.|||Select name and address from the ""customers"" table, and display the return object:|||Save the code above in a file called ""demo_db_select2.js"" and run the file:|||Run ""demo_db_select2.js""|||Which will give you this result:|||As you can see from the result of the example above, the result object is an array containing each row as an object.|||To return e.g. the address of the third record, just refer to the third array object's address property:|||Return the address of the third record:|||Which will produce this result:|||The third parameter of the callback function is an array containing information about each field in the result.|||Select all records from the ""customers"" table, and display the fields object:|||Save the code above in a file called ""demo_db_select_fields.js"" and run the file:|||Run ""demo_db_select_fields.js""|||Which will give you this result:|||As you can see from the result of the example above, the fields object is an array containing information about each field as an object.|||To return e.g. the name of the second field, just refer to the second array item's name property:|||Return the name of the second field:|||Which will produce this result:",Example|||The Result Object,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""', <strong>SELECT * FROM customers</strong>, '"", function (err, result, fields) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""', <strong>SELECT name, address FROM customers</strong>, '"", function (err, result, fields) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""SELECT name, address FROM customers"", function (err, \n  result, ', <strong>fields</strong>, ') {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(', <strong>fields</strong>, ');', '\xa0 });', '\n  });']]"
Node.js MySQL,MySQL Where,https://www.w3schools.com/nodejs/nodejs_mysql_where.asp,"When selecting records from a table, you can filter the selection by using the ""WHERE"" statement:|||Select record(s) with the address ""Park Lane 38"":|||Save the code above in a file called ""demo_db_where.js"" and run the file:|||Run ""demo_db_where.js""|||Which will give you this result:|||You can also select the records that starts, includes, or ends with a given letter or phrase.|||Use the '%' wildcard to represent zero, one or multiple characters:|||Select records where the address starts with the letter 'S':|||Save the code above in a file called ""demo_db_where_s.js"" and run the file:|||Run ""demo_db_where_s.js""|||Which will give you this result:|||When query values are variables provided by the user, you should escape the values.|||This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.|||The MySQL module has methods to escape query values:|||Escape query values by using the mysql.escape() method:|||You can also use a ? as a placeholder for the values you want to escape.|||In this case, the variable is sent as the second parameter in the query() method:|||Escape query values by using the placeholder ? method:|||If you have multiple placeholders, the array contains multiple values, in that order:|||Multiple placeholders:",Escaping Query Values|||Example,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""SELECT * FROM customers ', <strong>WHERE address = 'Park Lane 38'</strong>, '"", function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""SELECT * FROM customers WHERE address ', <strong>LIKE 'S%'</strong>, '"", function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var adr = 'Mountain 21';"", ""var sql = 'SELECT * FROM customers WHERE address = \n  ' + mysql.escape(adr);"", 'con.query(sql, function (err, result) {', '\xa0 \n  if (err) throw err;', '\xa0 console.log(result);', '});'], [""\n  var adr = 'Mountain 21';"", ""var sql = 'SELECT * FROM customers WHERE address = \n  ?';"", 'con.query(sql,', <strong> [adr]</strong>, ', function (err, result) {', '\xa0 \n  if (err) throw err;', '\xa0 console.log(result);', '});'], [""\n  var name = 'Amy';"", ""var adr = 'Mountain 21';"", ""var sql = 'SELECT * FROM \n  customers WHERE name = ? OR address = ?';"", 'con.query(sql,', <strong> [name, adr]</strong>, ', function (err, result) {', '\xa0 \n  if (err) throw err;', '\xa0 console.log(result);', '});']]"
Node.js MySQL,MySQL Order By,https://www.w3schools.com/nodejs/nodejs_mysql_orderby.asp,"Use the ORDER BY statement to sort the result in ascending or descending order.|||The ORDER BY keyword sorts the result ascending by default. To sort the result in descending order, use the DESC keyword.|||Sort the result alphabetically by name:|||Save the code above in a file called ""demo_db_orderby.js"" and run the file:|||Run ""demo_db_orderby.js""|||Which will give you this result:|||Use the DESC keyword to sort the result in a descending order.|||Sort the result reverse alphabetically by name:|||Save the code above in a file called ""demo_db_orderby_desc.js"" and run the file:|||Run ""demo_db_orderby_desc.js""|||Which will give you this result:",Sort the Result|||Example|||ORDER BY DESC|||Example,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""SELECT * FROM customers ', <strong>ORDER BY name</strong>, '"", function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  con.query(""SELECT * FROM customers ', <strong>ORDER BY name DESC</strong>, '"", function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });']]"
Node.js MySQL,MySQL Delete,https://www.w3schools.com/nodejs/nodejs_mysql_delete.asp,"You can delete records from an existing table by using the ""DELETE FROM"" statement:|||Delete any record with the address ""Mountain 21"":|||Notice the WHERE clause in the DELETE syntax: The WHERE clause specifies which record or records that should be deleted. If you omit the WHERE clause, all records will be deleted!|||Save the code above in a file called ""demo_db_delete.js"" and run the file:|||Run ""demo_db_delete.js""|||Which will give you this result:|||When executing a query, a result object is returned.|||The result object contains information about how the query  affected the table.|||The result object returned from the example above looks like this:|||The values of the properties can be displayed like this:|||Return the  number of affected rows:|||Which will produce this result:",The Result Object,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', <strong>Â  
  var sql = ""DELETE FROM customers WHERE address = 'Mountain 21'"";<br/></strong>, '\xa0 \n  con.query(', <strong>sql,</strong>, ' function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(""Number of records \n  deleted: "" + result.affectedRows);', '\xa0 });', '\n  });'], ['\n  {', '\xa0 fieldCount: 0,', '\xa0 affectedRows: 1,', '\xa0 insertId: 0,', '\xa0 \n  serverStatus: 34,', '\xa0 warningCount: 0,', ""\xa0 message: '',"", '\xa0 protocol41: true,', '\xa0 \n  changedRows: 0', '}']]"
Node.js MySQL,MySQL Drop Table,https://www.w3schools.com/nodejs/nodejs_mysql_drop_table.asp,"You can delete an existing table by using the ""DROP TABLE"" statement:|||Delete the table ""customers"":|||Save the code above in a file called ""demo_db_drop_table.js"" and run the file:|||Run ""demo_db_drop_table.js""|||Which will give you this result:|||If the the table you want to delete is already deleted, or for any other reason does not exist, you can use the IF EXISTS keyword to avoid getting an error.|||Delete the table ""customers"" if it exists:|||Save the code above in a file called ""demo_db_drop_table_if.js"" and run the file:|||Run ""demo_db_drop_table_if.js""|||If the table exist, the result object will look like this:|||If the table does not exist, the result object will look like this:|||As you can see the only differnce is that the warningCount property is set to 1 if the table does not exist.",,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', <strong>Â  
  var sql = ""DROP TABLE customers"";<br/></strong>, '\xa0 \n  con.query(', <strong>sql,</strong>, ' function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(""Table deleted"");', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', <strong>Â  
  var sql = ""DROP TABLE IF EXISTS customers"";<br/></strong>, '\xa0 \n  con.query(', <strong>sql,</strong>, ' function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });']]"
Node.js MySQL,MySQL Update,https://www.w3schools.com/nodejs/nodejs_mysql_update.asp,"You can update existing records in a table by using the ""UPDATE"" statement:|||Overwrite the address column from ""Valley 345"" to ""Canyon 123"":|||Notice the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated!|||Save the code above in a file called ""demo_db_update.js"" and run the file:|||Run ""demo_db_update.js""|||Which will give you this result:|||When executing a query, a result object is returned.|||The result object contains information about how the query  affected the table.|||The result object returned from the example above looks like this:|||The values of the properties can be displayed like this:|||Return the  number of affected rows:|||Which will produce this result:",The Result Object,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', <strong>Â  
  var sql = ""UPDATE customers SET address = 'Canyon 123' WHERE address = 
  'Valley 345'"";<br/></strong>, '\xa0 \n  con.query(', <strong>sql,</strong>, ' function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result.affectedRows + "" \n  record(s) updated"");', '\xa0 });', '\n  });'], ['\n  {', '\xa0 fieldCount: 0,', '\xa0 affectedRows: 1,', '\xa0 insertId: 0,', '\xa0 \n  serverStatus: 34,', '\xa0 warningCount: 0,', ""\xa0 message: '(Rows \n  matched: 1 Changed: 1 Warnings: 0',"", '\xa0 protocol41: true,', '\xa0 \n  changedRows: 1', '}']]"
Node.js MySQL,MySQL Limit,https://www.w3schools.com/nodejs/nodejs_mysql_limit.asp,"You can limit the number of records returned from the query, by using the ""LIMIT"" statement:|||Select the 5 first records in the ""customers"" table:|||Save the code above in a file called ""demo_db_limit.js"" and run the file:|||Run ""demo_db_limit.js""|||Which will give you this result:|||If you want to return five records, starting from the third record, you can use the ""OFFSET"" keyword:|||Start from position 3, and return the next 5 records:|||Note: ""OFFSET 2"", means starting from the third position, not the second!|||Save the code above in a file called ""demo_db_offset.js"" and run the file:|||Run ""demo_db_offset.js""|||Which will give you this result:|||You can also write your SQL statement like this ""LIMIT 2, 5"" which returns the same as the offset example above:|||Start from position 3, and return the next 5 records:|||Note: The numbers are reversed: ""LIMIT 2, 5"" is the   same as ""LIMIT 5 OFFSET 2""",,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  var sql = ""SELECT * FROM customers ', <strong>LIMIT 5</strong>, '"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  var sql = ""SELECT * FROM customers ', <strong>LIMIT 5 OFFSET 2</strong>, '"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });'], [""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 \n  var sql = ""SELECT * FROM customers ', <strong>LIMIT 2, 5</strong>, '"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });']]"
Node.js MySQL,MySQL Join,https://www.w3schools.com/nodejs/nodejs_mysql_join.asp,"You can combine rows from two or more tables, based on a related column between them, by using a JOIN statement.|||Consider you have a ""users"" table and a ""products"" table:|||These two tables can be combined by using users' favorite_product field and products' id field.|||Select records with a match in both tables:|||Note: You can use INNER JOIN instead of JOIN. They will   both give you the same result.|||Save the code above in a file called ""demo_db_join.js"" and run the file:|||Run ""demo_db_join.js""|||Which will give you this result:|||As you can see from the result above, only the records with a match in both tables are returned.|||If you want to return all users, no matter if they have a favorite product or not, use the LEFT JOIN statement:|||Select all users and their favorite product:|||Which will give you this result:|||If you want to return all products, and the users who have them as their favorite, even if no user have them as their favorite, use the RIGHT JOIN statement:|||Select all products and the user who have them as their favorite:|||Which will give you this result:|||Note: Hannah and Michael, who have no favorite product, are not included in the result.",,,,,"[[""\n  var mysql = require('mysql');"", '\n  var con = mysql.createConnection({', '\xa0 \n  host: ""localhost"",', '\xa0 user: ""yourusername"",', '\xa0 \n  password: ""yourpassword"",', '\xa0 database: ""mydb""', '});', '\n', 'con.connect(function(err) {', '\xa0 if (err) throw err;', '\xa0 var \n  sql = ""SELECT users.name AS user, products.name AS favorite FROM users ', <strong>
  JOIN products ON 
  users.favorite_product = products.id</strong>, '"";', '\xa0 \n  con.query(sql, function (err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0 });', '\n  });']]"
Node.js MongoDB,MongoDB Get Started,https://www.w3schools.com/nodejs/nodejs_mongodb.asp,"Node.js can be used in database applications.|||One of the most popular NoSQL database is MongoDB.|||To be able to experiment with the code examples, you will need access to a MongoDB database.|||You can download a free MongoDB database athttps://www.mongodb.com.|||Or get started right away with a MongoDB cloud service at https://www.mongodb.com/cloud/atlas.|||Let us try to access a MongoDB database with Node.js.|||To download and install the official MongoDB driver, open the Command Terminal and execute the following:|||Download and install mongodb package:|||Now you have downloaded and installed a mongodb database driver.|||Node.js can use this module to manipulate MongoDB databases:",,,,,"[[""\n  var mongo = require('mongodb');""]]"
Node.js MongoDB,MongoDB Create Database,https://www.w3schools.com/nodejs/nodejs_mongodb_create_db.asp,"To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.|||MongoDB will create the database if it does not exist, and make a connection to it.|||Create a database called ""mydb"":|||Save the code above in a file called ""demo_create_mongo_db.js"" and run the file:|||Run ""demo_create_mongo_db.js""|||Which will give you this result:|||Important: In MongoDB, a database is not created until it   gets content!|||MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).",,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/mydb"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 console.log(""Database \n  created!"");', '\xa0 db.close();', '});']]"
Node.js MongoDB,MongoDB Create Collection,https://www.w3schools.com/nodejs/nodejs_mongodb_createcollection.asp,"A collection in MongoDB is the same as a table in MySQL|||To create a collection in MongoDB, use the createCollection() method:|||Create a collection called ""customers"":|||Save the code above in a file called ""demo_mongodb_createcollection.js"" and run the file:|||Run ""demo_mongodb_createcollection.js""|||Which will give you this result:|||Important: In MongoDB, a collection is not created until it   gets content!|||MongoDB waits until you have inserted a document before it actually creates the collection.",,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n  \xa0 dbo.createCollection(""customers"", \n  function(err, res) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(""Collection created!"");', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Insert,https://www.w3schools.com/nodejs/nodejs_mongodb_insert.asp,"To insert a record, or document as it is called in MongoDB, into a collection, we use the insertOne() method.|||A document in MongoDB is the same as a record in MySQL|||The first parameter of the insertOne() method is an object containing the name(s) and value(s) of each field in the document you want to insert.|||It also takes a callback function where you can work with any errors, or the result of the insertion:|||Insert a document in the ""customers"" collection:|||Save the code above in a file called ""demo_mongodb_insert.js"" and run the file:|||Run ""demo_mongodb_insert.js""|||Which will give you this result:|||Note: If you try to insert documents in a collection that do not exist, MongoDB will create the collection automatically.|||To insert multiple documents into a collection in MongoDB, we use the insertMany() method.|||The first parameter of the insertMany() method is an array of objects, containing the data you want to insert.|||It also takes a callback function where you can work with any errors, or the result of the insertion:|||Insert multiple documents in the ""customers"" collection:|||Save the code above in a file called ""demo_mongodb_insert_multiple.js"" and run the file:|||Run ""demo_mongodb_insert_multiple.js""|||Which will give you this result:|||When executing the insertMany() method, a result object is returned.|||The result object contains information about how the insertion affected the database.|||The object returned from the example above looked like this:|||The values of the properties can be displayed like this:|||Return the number of inserted documents:|||Which will produce this result:|||If you do not specify an _id field, then MongoDB will add one for you and assign a unique id for each document.|||In the example above no _id field was specified, and as you can see from the result object, MongoDB assigned a unique _id for each document.|||If you do specify the _id field, the value must be unique for each document:|||Insert three records in a ""products"" table, with specified _id fields:|||Save the code above in a file called ""demo_mongodb_insert_id.js"" and run the file:|||Run ""demo_mongodb_insert_id.js""|||Which will give you this result:",Insert Multiple Documents|||Example|||The Result Object,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  var myobj = { name: ""Company \n  Inc"", address: ""Highway 37"" };', '\xa0 dbo.collection(""customers"").insertOne(myobj, function(err, res) {', '\n  \xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(""1 \n  document \n  inserted"");', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  var myobj = [', ""\xa0\xa0\xa0 { name: 'John', address: 'Highway 71'},"", ""\xa0\xa0\xa0 \n  { name: 'Peter', address: 'Lowstreet 4'},"", ""\xa0\xa0\xa0 { name: 'Amy', \n  address: 'Apple st 652'},"", ""\xa0\xa0\xa0 { name: 'Hannah', address: \n  'Mountain 21'},"", ""\xa0\xa0\xa0 { name: 'Michael', address: 'Valley \n  345'},"", ""\xa0\xa0\xa0 { name: 'Sandy', address: 'Ocean blvd 2'},"", ""\xa0\xa0\xa0 \n  { name: 'Betty', address: 'Green Grass 1'},"", ""\xa0\xa0\xa0 { name: \n  'Richard', address: 'Sky st 331'},"", ""\xa0\xa0\xa0 { name: 'Susan', \n  address: 'One way 98'},"", ""\xa0\xa0\xa0 { name: 'Vicky', address: \n  'Yellow Garden 2'},"", ""\xa0\xa0\xa0 { name: 'Ben', address: 'Park Lane \n  38'},"", ""\xa0\xa0\xa0 { name: 'William', address: 'Central st 954'},"", ""\xa0\xa0\xa0 \n  { name: 'Chuck', address: 'Main Road 989'},"", ""\xa0\xa0\xa0 { name: \n  'Viola', address: 'Sideway 1633'}"", '\xa0 ];', '\xa0 dbo.collection(""customers"").insertMany(myobj, \n  function(err, res) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 \n  console.log(""Number of documents inserted: "" + res.insertedCount);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], ['\n  {', '\xa0 result: { ok: 1, n: 14 },', '\xa0 ops: [', ""\xa0\xa0\xa0 { \n  name: 'John', address: 'Highway 71', _id: 58fdbf5c0ef8a50b4cdd9a84 },"", ""\xa0\xa0\xa0 \n  { name: 'Peter', address: 'Lowstreet 4', _id: 58fdbf5c0ef8a50b4cdd9a85 },"", ""\xa0\xa0\xa0 \n  { name: 'Amy', address: 'Apple st 652', _id: 58fdbf5c0ef8a50b4cdd9a86 },"", ""\xa0\xa0\xa0 \n  { name: 'Hannah', address: 'Mountain 21', _id: 58fdbf5c0ef8a50b4cdd9a87 },"", ""\xa0\xa0\xa0 \n  { name: 'Michael', address: 'Valley 345', _id: 58fdbf5c0ef8a50b4cdd9a88 },"", ""\xa0\xa0\xa0 \n  { name: 'Sandy', address: 'Ocean blvd 2', _id: 58fdbf5c0ef8a50b4cdd9a89 },"", ""\xa0\xa0\xa0 \n  { name: 'Betty', address: 'Green Grass 1', _id: 58fdbf5c0ef8a50b4cdd9a8a },"", ""\xa0\xa0\xa0 \n  { name: 'Richard', address: 'Sky st 331', _id: 58fdbf5c0ef8a50b4cdd9a8b },"", ""\xa0\xa0\xa0 \n  { name: 'Susan', address: 'One way 98', _id: 58fdbf5c0ef8a50b4cdd9a8c },"", ""\xa0\xa0\xa0 \n  { name: 'Vicky', address: 'Yellow Garden 2', _id: 58fdbf5c0ef8a50b4cdd9a8d },"", ""\xa0\xa0\xa0 \n  { name: 'Ben', address: 'Park Lane 38', _id: 58fdbf5c0ef8a50b4cdd9a8e },"", ""\xa0\xa0\xa0 \n  { name: 'William', address: 'Central st 954', _id: 58fdbf5c0ef8a50b4cdd9a8f },"", ""\xa0\xa0\xa0 \n  { name: 'Chuck', address: 'Main Road 989', _id: 58fdbf5c0ef8a50b4cdd9a90 },"", ""\xa0\xa0\xa0 \n  { name: 'Viola', address: 'Sideway 1633', _id: 58fdbf5c0ef8a50b4cdd9a91 } ],"", '\xa0 \n  insertedCount: 14,', '\xa0 insertedIds: [', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a84,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a85,', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a86,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a87,', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a88,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a89,', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a8a,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a8b,', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a8c,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a8d,', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a8e,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a8f ', '\xa0\xa0\xa0 \n  58fdbf5c0ef8a50b4cdd9a90,', '\xa0\xa0\xa0 58fdbf5c0ef8a50b4cdd9a91 ]', '\n  }'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  var myobj = [', '\xa0\xa0\xa0 { ', <strong>_id: 154</strong>, "", name: \n  'Chocolate Heaven'},"", '\xa0\xa0\xa0 { ', <strong>_id: 155</strong>, "", name: \n  'Tasty Lemon'},"", '\xa0\xa0\xa0 { ', <strong>_id: 156</strong>, "", name: \n  'Vanilla Dream'}"", '\xa0 ];', '\xa0 dbo.collection(""products"").insertMany(myobj, \n  function(err, res) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 \n  console.log(res);', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Find,https://www.w3schools.com/nodejs/nodejs_mongodb_find.asp,"In MongoDB we use the find and findOne methods to find data in a collection.|||Just like the SELECT statement is used to find data in a   table in a MySQL database.|||To select data from a collection in MongoDB, we can use thefindOne() method.|||The findOne() method returns the first occurrence in the selection.|||The first parameter of the findOne() method is a query object. In this example we use an empty query object, which selects all documents in a collection (but returns only the first document).|||Find the first document in the customers collection:|||Save the code above in a file called ""demo_mongodb_findone.js"" and run the file:|||Run ""demo_mongodb_findone.js""|||Which will give you this result:|||To select data from a table in MongoDB, we can also use thefind() method.|||The find() method returns all occurrences in the selection.|||The first parameter of the find() method is a query object. In this example we use an empty query object, which selects all documents in the collection.|||No parameters in the find() method gives you the same result as SELECT * in MySQL.|||Find all documents in the customers collection:|||Save the code above in a file called ""demo_mongodb_find.js"" and run the file:|||Run ""demo_mongodb_find.js""|||Which will give you this result:|||The second parameter of the find() method is the projection object that describes which fields to include in the result.|||This parameter is optional, and if omitted, all fields will be included in the result.|||Return the fields ""name"" and ""address"" of all documents in the customers collection:|||Save the code above in a file called ""demo_mongodb_find_fields.js"" and run the file:|||Run ""demo_mongodb_find_fields.js""|||Which will give you this result:|||You are not allowed to specify both 0 and 1 values in the same object (except if one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, and vice versa:|||This example will exclude ""address"" from the result:|||To exclude the _id field, you must set its value to 0:|||This example will return only the ""name"" field:|||This example will give you the same result as the first example; return all fields except the _id field:|||You get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):|||As you can see from the result of the example above, the result can be converted into an array containing each document as an object.|||To return e.g. the address of the third document, just refer to the third array object's address property:|||Return the address of the third document:|||Which will produce this result:",Example|||Example|||The Result Object,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 dbo.collection(""customers"").findOne({}, function(err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(result.name);', '\xa0\xa0\xa0 db.close();', '\xa0 \n  });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find({}).toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find({},', <strong> { projection: { _id: 0, name: 1, address: 
  1 } }</strong>, ').toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find({},', <strong> { projection: { address: 0 
  } }</strong>, ').toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find({},', <strong> { projection: { _id: 0, name: 1 
  } }</strong>, ').toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find({},', <strong> { projection: { _id: 0 
  } }</strong>, ').toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find({},', <strong> { projection: { name: 1, address: 0 
  } }</strong>, ').toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Query,https://www.w3schools.com/nodejs/nodejs_mongodb_query.asp,"When finding documents in a collection, you can filter the result by using a query object.|||The first argument of the find() method is a query object, and is used to limit the search.|||Find documents with the address ""Park Lane 38"":|||Save the code above in a file called ""demo_mongodb_query.js"" and run the file:|||Run ""demo_mongodb_query.js""|||Which will give you this result:|||You can write regular expressions to find exactly what you are searching for.|||Regular expressions can only be used to query strings.|||To find only the documents where the ""address"" field starts with the letter ""S"", use the regular expression /^S/:|||Find documents where the address starts with the letter ""S"":|||Save the code above in a file called ""demo_mongodb_query_s.js"" and run the file:|||Run ""demo_mongodb_query_s.js""|||Which will give you this result:",Filter the Result|||Filter With Regular Expressions,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n', <strong>Â  var query = { address: ""Park Lane 38"" };<br/></strong>, '\xa0 dbo.collection(""customers"").find(', <strong>query</strong>, ').toArray(function(err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 db.close();', '\xa0 \n  });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n  \xa0 var query = { address: ', <strong>/^S/</strong>, ' };', '\xa0 dbo.collection(""customers"").find(query).toArray(function(err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 db.close();', '\xa0 \n  });', '});']]"
Node.js MongoDB,MongoDB Sort,https://www.w3schools.com/nodejs/nodejs_mongodb_sort.asp,"Use the sort() method to sort the result in ascending or descending order.|||The sort() method takes one parameter, an object defining the sorting order.|||Sort the result alphabetically by name:|||Save the code above in a file called ""demo_sort.js"" and run the file:|||Run ""demo_sort.js""|||Which will give you this result:|||Use the value -1 in the sort object to sort descending.|||{ name: 1 } // ascending{ name: -1 } // descending|||Sort the result reverse alphabetically by name:|||Save the code above in a file called ""demo_sort_desc.js"" and run the file:|||Run ""demo_sort_desc.js""|||Which will give you this result:",Sort the Result|||Example|||Example,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n', <strong>Â  var mysort = { name: 1 };<br/></strong>, '\xa0 dbo.collection(""customers"").find()', <strong>.sort(mysort)</strong>, '.toArray(function(err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 db.close();', '\xa0 \n  });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n', <strong>Â  var mysort = { name: -1 };<br/></strong>, '\xa0 dbo.collection(""customers"").find()', <strong>.sort(mysort)</strong>, '.toArray(function(err, result) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 db.close();', '\xa0 \n  });', '});']]"
Node.js MongoDB,MongoDB Delete,https://www.w3schools.com/nodejs/nodejs_mongodb_delete.asp,"To delete a record, or document as it is called in MongoDB, we use thedeleteOne() method.|||The first parameter of the deleteOne() method is a query object defining which document to delete.|||Note: If the query finds more than one document, only the first occurrence is deleted.|||Delete the document with the address ""Mountain 21"":|||Save the code above in a file called ""demo_delete.js"" and run the file:|||Run ""demo_delete.js""|||Which will give you this result:|||To delete more than one document, use thedeleteMany() method.|||The first parameter of the deleteMany() method is a query object defining which documents to delete.|||Delete all documents were the address starts with the letter ""O"":|||Save the code above in a file called ""demo_delete_many.js"" and run the file:|||Run ""demo_delete_many.js""|||Which will give you this result:|||The deleteMany() method returns an object which contains information about how the execution affected the database.|||Most of the information is not important to understand, but one object inside the object is called ""result"" which tells us if the execution went OK, and how many documents were affected.|||The result object looks like this:|||You can use this object to return the number of deleted documents:|||Return the number of deleted documents:|||Which will produce this result:",,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', '\n  MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n', <strong>Â  var myquery = { address: 'Mountain 21' };<br/></strong>, '\xa0 \n  dbo.collection(""customers"").deleteOne(myquery, function(err, obj) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(""1 \n  document deleted"");', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", '\n  var url = ""mongodb://localhost:27017/"";', '\n  MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\n', <strong>Â  var myquery = { address: /^O/ };<br/></strong>, '\xa0 \n  dbo.collection(""customers"").deleteMany(myquery, function(err, obj) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(obj.result.n + "" \n  document(s) deleted"");', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Drop Collection,https://www.w3schools.com/nodejs/nodejs_mongodb_drop.asp,"You can delete a table, or collection as it is called in MongoDB, by using the drop() method.|||The drop() method takes a callback function containing the error object and the result parameter which returns true if the collection was dropped successfully, otherwise it returns false.|||Delete the ""customers"" table:|||Save the code above in a file called ""demo_drop.js"" and run the file:|||Run ""demo_drop.js""|||Which will give you this result:|||You can also use the dropCollection() method to delete a table (collection).|||The dropCollection() method takes two parameters: the name of the collection and a callback function.|||Delete the ""customers"" collection, using dropCollection():|||Save the code above in a file called ""demo_dropcollection.js"" and run the file:|||Run ""demo_dropcollection.js""|||Which will give you this result:",,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").drop(function(err, delOK) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 if (delOK) console.log(""Collection \n  deleted"");', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', <strong><br/>Â  
  dbo.dropCollection(""customers"", function(err, delOK) {<br/></strong>, '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 if (delOK) console.log(""Collection \n  deleted"");', '\xa0\xa0\xa0 db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Update,https://www.w3schools.com/nodejs/nodejs_mongodb_update.asp,"You can update a record, or document as it is called in MongoDB, by using the updateOne() method.|||The first parameter of the updateOne() method is a query object defining which document to update.|||Note: If the query finds more than one record, only the first occurrence is updated.|||The second parameter  is an object defining the new values of the document.|||Update the document with the address ""Valley 345"" to name=""Mickey"" and address=""Canyon 123"":|||Save the code above in a file called ""demo_update_one.js"" and run the file:|||Run ""demo_update_one.js""|||Which will give you this result:|||When using the $set operator, only the specified fields are updated:|||Update the address from ""Valley 345"" to ""Canyon 123"":|||To update all documents that meets the criteria of the query, use the updateMany() method.|||Update all documents where the name starts with the letter ""S"":|||Save the code above in a file called ""demo_update_many.js"" and run the file:|||Run ""demo_update_many.js""|||Which will give you this result:|||The updateOne() and theupdateMany() methods return an object which contains information about how the execution affected the database.|||Most of the information is not important to understand, but one object inside the object is called ""result"" which tells us if the execution went OK, and how many documents were affected.|||The result object looks like this:|||You can use this object to return the number of updated documents:|||Return the number of updated documents:|||Which will produce this result:",,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://127.0.0.1:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  var myquery = { address: ""Valley 345"" };', '\xa0 var newvalues = { \n  $set: {name: \n  ""Mickey"", address: ""Canyon 123"" } };', '\xa0 dbo.collection(""customers"").updateOne(myquery, \n  newvalues, function(err, res) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 \n  console.log(""1 document updated"");', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});'], ['\n  ...', '\xa0 var myquery = { address: ""Valley 345"" };', '\xa0 var newvalues \n  = { ', <strong>$set: { address: ""Canyon 123"" }</strong>, ' };', '\xa0 dbo.collection(""customers"").updateOne(myquery, \n  newvalues, function(err, res) {', '...'], [""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://127.0.0.1:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  var myquery = { address: /^S/ };', '\xa0 var newvalues = {$set: {name: \n  ""Minnie""} };', '\xa0 \n  dbo.collection(""customers"").updateMany(myquery, newvalues, function(err, \n  res) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 \n  console.log(res.result.nModified + "" document(s) updated"");', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Limit,https://www.w3schools.com/nodejs/nodejs_mongodb_limit.asp,"To limit the result in MongoDB, we use the limit() method.|||The limit() method takes one parameter, a number defining how many documents to return.|||Consider you have a ""customers"" collection:|||Limit the result to only return 5 documents:|||Save the code above in a file called ""demo_mongodb_limit.js"" and run the file:|||Run ""demo_mongodb_limit.js""|||Which will give you this result:|||As you can see from the result above, only the 5 first documents were returned.",Limit the Result|||Example,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://localhost:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', '\xa0 \n  dbo.collection(""customers"").find()', <strong>.limit(5)</strong>, '.toArray(function(err, result) {', '\xa0\xa0\xa0 \n  if (err) throw err;', '\xa0\xa0\xa0 console.log(result);', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});']]"
Node.js MongoDB,MongoDB Join,https://www.w3schools.com/nodejs/nodejs_mongodb_join.asp,"MongoDB is not a relational database, but you can perform a left outer join by using the $lookup stage.|||The $lookup stage lets you specify which collection you want to join with the current collection, and which fields that should match.|||Consider you have a ""orders"" collection and a ""products"" collection:|||Join the matching ""products"" document(s) to the ""orders"" collection:|||Save the code above in a file called ""demo_mongodb_join.js"" and run the file:|||Run ""demo_mongodb_join.js""|||Which will give you this result:|||As you can see from the result above, the matching document from the products collection is included in the orders collection as an array.",,,,,"[[""\n  var MongoClient = require('mongodb').MongoClient;"", 'var url = ""mongodb://127.0.0.1:27017/"";', '\n', 'MongoClient.connect(url, function(err, db) {', '\xa0 if (err) throw err;', '\xa0 \n  var dbo = db.db(""mydb"");', ""\xa0 \n  dbo.collection('orders').aggregate(["", <strong>Â Â Â  { $lookup:<br/>Â Â Â Â Â Â  
  {<br/>Â Â Â Â Â Â Â Â  from: 'products',<br/>Â Â Â Â Â Â Â Â  
  localField: 'product_id',<br/>Â Â Â Â Â Â Â Â  
  foreignField: '_id',<br/>Â Â Â Â Â Â Â Â  
  as: 'orderdetails'<br/>Â Â Â Â Â Â  }<br/>Â Â Â Â  
  }<br/></strong>, '\xa0\xa0\xa0 ]).toArray(function(err, \n  res) {', '\xa0\xa0\xa0 if (err) throw err;', '\xa0\xa0\xa0 \n  console.log(JSON.stringify(res));', '\xa0\xa0\xa0 \n  db.close();', '\xa0 });', '});']]"
Raspberry Pi,RasPi Get Started,https://www.w3schools.com/nodejs/nodejs_raspberrypi.asp,"Raspberry Pi is a small, multi-use computer.|||With Node.js you can do amazing things with your Raspberry Pi.|||The Raspberry Pi is a small, affordable, and amazingly capable, credit card size computer.|||It is developed by the Raspberry Pi Foundation, and it might be the most versatile tech ever created.|||Creator Eben Upton's goal was to create a low-cost device that would improve programming skills and hardware understanding.|||Due to the small size and price of the device, it has become the center of a wide range of projects by tinkerers, makers, and electronics enthusiasts.|||The Raspberry Pi has a row of GPIO (General Purpose input/output) pins, and these can be used to interact in amazing ways with the real world. This tutorial will focus on how to use these with Node.js.|||For this tutorial you need a Raspberry Pi. In our examples we use a Raspberry Pi 3, but this tutorial should work for most versions.|||Hardware needed:|||For later chapters in this tutorial we will use special sensors or devices that we connect to the Raspberry Pi. We will specify these as special requirements in the relevant chapters.|||If you already have a Raspberry Pi set up with Raspbian, internet and enabled SSH, you can skip to the step ""Install Node.js on Raspberry Pi"".|||Before we can start using our Raspberry Pi for anything, we need to get a OS installed.|||Raspbian is a free operating system based on Debian Linux, and it is optimized Raspberry Pi.|||Download the latest Raspbian image from https://www.raspberrypi.org/downloads/raspbian/ to your computer.|||We use the ""LITE"" version in our tutorial, since we are setting the Raspberry Pi up as a headless server (we will connect to it through SSH, without having a keyboard/display connected to it). You can use whichever version you want, but this tutorial is written with the ""LITE"" version as its focus.|||Insert the MicroSD memory card in your computer (via the SD adapter if needed). Open File Explorer to verify that it is operational.|||Etcher is a program for flashing images to memory cards. Download and install Etcher from: https://etcher.io/|||Launch Etcher:|||Click ""Select image"" button and find the Raspbian zip file that you downloaded.|||Click the ""Select drive"" button and specify the memory card as the target location.|||Click the ""Flash!"" button to write the image to the memory card.|||After Etcher is finished writing the image to the memory card, remove it from your computer.|||To get the Raspberry Pi ready to boot we need to:|||When the Raspberry Pi is finished booting up, log in using username: pi and password: raspberry|||If you will use a Ethernet cable to connect your Raspberry Pi to the internet, you can skip this step.|||For this section we will assume you have a Raspberry Pi 3, with built in WiFi.|||Start by scanning for wireless networks:|||This will list all of the available WiFi networks. (It also confirms that your WiFi is working)|||Now we need to open the wpa-supplicant file, to add the network you want to connect to:|||This will open the file in the Nano editor. Add the following to the bottom of the file (change wifiName and wifiPassword with the actual network name and password):|||Press ""Ctrl+x"" to save the code. Confirm with ""y"", and confirm the name with ""Enter"".|||And reboot the Raspberry Pi:|||After reboot, log in again, and confirm that the WiFi is connected and working:|||If the WiFi is working propery, the information displayed should include an IP address, similar to this:|||Write down that IP address, as we will use it to connect to the Raspberry Pi via SSH.|||Now your Raspberry Pi is connected to the internet, it is time to enable SSH.|||SSH allows you up use the Raspberry Pi without having a monitor and keyboard connected to it.|||(You will need a SSH client for this on your non-Raspberry Pi computer. We use PuTTY for windows)|||Open the Raspberry Pi Software Configuration Tool:|||You should see a menu like this:|||Select option 5 Interfacing Options:|||Select option P2 SSH, to activate SSH:|||Confirm with YES, to activate SSH:|||SSH is now enabled, and you should be in the main menu again.|||Select 1 Change User Password, and follow the instructions to change the password. Choose a secure password, but something you will remember:|||After you have finished changing the password, you should be back in the main menu.|||Select 2 Hostname, and follow the instructions to change the hostname:|||After you have finished changing the hostname, you should be back in the main menu.|||Now we will close the menu and save the changes:|||When selecting Finish, you will get the option to reboot. Select Yes to reboot the Raspberry Pi.|||You can now unplug the monitor and keyboard from the Raspberry Pi, and we can log in using out SSH client.|||Open PuTTY, type in the IP address for your Raspberry Pi, and click Open:|||Log in using the username pi and the new password you specified.|||You should now see a command line like this: (we used w3demopi as our hostname)|||You are now able to run your Raspberry Pi in ""Headless-mode"", meaning you do not need a monitor or keyboard. And if you have a WiFi connection, you do not need a ethernet cable either, just the power cable!|||With the Raspberry Pi properly set up, login in via SSH, and update your Raspberry Pi system packages to their latest versions.|||Update your system package list:|||Upgrade all your installed packages to their latest version:|||Doing this regularly will keep your Raspberry Pi installation up to date.|||To download and install newest version of Node.js, use the following command:|||Now install it by running:|||Check that the installation was successful, and the version number of Node.js with:|||Now you have a Raspberry Pi with Node.js installed!|||If you want to learn more about Node.js, follow our tutorial:https://www.w3schools.com/nodejs/|||In the next chapter we will get to know the GPIO and how to use it with Node.js.",,"Raspberry Pi computer@@@MicroSD memory card (We recommend a class 10 with 16 GB or higher)@@@MicroSD to SD memory card adapter (usually included with the MicroSD card)@@@Micro USB power supply to power the Raspberry Pi (2.5A or greater   recommended)@@@WiFi/Ethernet Cable connection for the Raspberry Pi (Not needed for   Raspberry Pi 3 as it has built in WiFi)@@@A working computer with internet and SD memory card reader (used to get the OS   (Operating System) for the Raspberry Pi onto the memory card). In our tutorial   we use a Windows computer for this, but you can use a Mac or Linux computer if   you prefer@@@HDMI monitor, USB keyboard (we need these only temporarily for the first   boot of the Raspberry Pi)",Insert the MicroSD memory card into the Raspberry Pi@@@Connect the USB keyboard@@@Connect the HDMI cable@@@Connect the USB Wi-Fi adapter (or Ethernet cable). Skip this step if you   are using a Raspberry Pi 3@@@Connect the micro USB power supply@@@The Raspberry Pi should now be booting up,,[]
Raspberry Pi,RasPi GPIO Introduction,https://www.w3schools.com/nodejs/nodejs_raspberrypi_gpio_intro.asp,"GPIO stands for General Purpose Input Output.|||The Raspberry Pi has two rows of GPIO pins, which are connections between the Raspberry Pi, and the real world.|||Output pins are like switches that the Raspberry Pi can turn on or off (like turning on/off a LED light). But it can also send a signal to another device.|||Input pins are like switches that you can turn on or off from the outside world (like a on/off light switch). But it can also be a data from a sensor, or a signal from another device.|||That means that you can interact with the real world, and control devices and electronics using the Raspberry PI and its GPIO pins!|||This is an illustration of the Raspberry Pi 3.|||The GPIO pins are the small red squares in two rows on the right side of the Raspberry Pi, on the actual Raspberry Pi they are small metal pins.|||The Raspberry Pi 3 has 26 GPIO pins, the rest of the pins are power, ground or ""other"".|||The pin placements correspond with the table below.|||A breadboard is used for prototyping electronics, it allows you to create circuits without soldering. It is basically a plastic board, with a grid of tie-points (holes). Inside the board there are metal strips connecting the different tie-points in specific ways.|||In the illustration below we have highlighted some of the sections with different colors. This is to show you how the grid is connected.|||The different sections of the breadboard:|||To interface with the GPIO on the Raspberry Pi using Node.js, we will use a Module called ""onoff"".|||Install the onoff module using npm:|||Now onoff should be installed and we can interact with the GPIO of the Raspberry Pi.",,"On the left, and right, side there are 2 columns of tie-points. All the     tie points in each of these columns are connected.@@@The Power Bus - The columns highlighted with red. There are usually used     to connect power to the Breadboard. Since the entire column is connected,     you can connect power to any of the tie-points in the column.@@@The Ground Bus - The columns highlighted with blue. There are usually     used to connect Ground to the Breadboard. Since the entire column is     connected, you can connect ground to any of the tie-points in the column.@@@Rows of connected Tie-Points - The rows highlighted with green. The     tie-points of each of these rows are connected, but not the entire row! The     left side tie-points are connected (A-B-C-D-E), and the right side     tie-points are connected (F-G-H-I-J).@@@In the center of the Breadboard there is a Trench, this separates the     left and right rows. The width of the trench is designed so that many     Integrated Circuits fit across it.",,GPIO 2|||3|||4|||5V&&&GPIO 3|||5|||6|||GND&&&GPIO 4|||7|||8|||GPIO 14&&&GND|||9|||10|||GPIO 15&&&GPIO 17|||11|||12|||GPIO 18&&&GPIO 27|||13|||14|||GND&&&GPIO 22|||15|||16|||GPIO 23&&&3V3|||17|||18|||GPIO 24&&&GPIO 10|||19|||20|||GND&&&GPIO 9|||21|||22|||GPIO 25&&&GPIO 11|||23|||24|||GPIO 8&&&GND|||25|||26|||GPIO 7&&&DNC|||27|||28|||DNC&&&GPIO 5|||29|||30|||GND&&&GPIO 6|||31|||32|||GPIO 12&&&GPIO 13|||33|||34|||GND&&&GPIO 19|||35|||36|||GPIO 16&&&GPIO 26|||37|||38|||GPIO 20&&&GND|||39|||40|||GPIO 21&&&Physical Pin Number&&&Power +&&&Ground&&&UART&&&I2C&&&SPI&&&GPIO&&&Do Not Connect,[]
Raspberry Pi,RasPi Blinking LED,https://www.w3schools.com/nodejs/nodejs_raspberrypi_blinking_led.asp,"In this chapter we will use a Raspberry Pi and its GPIO to make a LED blink.|||We use Node.js with the onoff module to control the GPIO.|||To get a LED light to turn on, we use a GPIO pin as ""Output"", and create a script to turn it on and off (blinking).|||In this chapter we will create a simple example where we control a LED light.|||For this you need:|||Click the links in the list above for descriptions of the different components.|||Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED willshine.|||Now it is time to build the circuit on our Breadboard.|||If you are new to electronics, we recommend you turn off the power for the Raspberry Pi. And use an anti-static mat or a grounding strap to avoid damaging it.|||Shut down the Raspberry Pi properly with the command:|||After the LEDs stop blinking on the Raspberry Pi, then pull out the power plug from the Raspberry Pi (or turn off the power strip it is connected to).|||Just pulling the plug without shutting down properly may cause corruption of the memory card.|||Look at the above illustration of the circuit.|||Your circuit should now be complete, and your connections should look   pretty similar to the illustration above.|||Now it is time to boot up the Raspberry Pi, and write the Node.js script to   interact with it.|||Now that we have everything set up, we can write a script to turn the LED on and off.|||Start by making a directory where we can keep our Node.js scripts:|||Go to our new directory:|||Now we will create a new file called ""blink.js"" using the Nano Editor:|||The file is now open and can be edited with the built in Nano Editor.|||Write, or paste the following code:|||Press ""Ctrl+x"" to save the code. Confirm with ""y"", and confirm the name with ""Enter"".|||Run the code:|||Now the LED should blink for 5 seconds (10 times) before turning off again!",,"A Raspberry Pi with Raspian, internet, SSH, with Node.js installed@@@The   onoff module for Node.js@@@1 x Breadboard@@@1 x   68 Ohm resistor@@@1 x   Through Hole LED@@@2 x   Female to male jumper wires","On the Raspberry Pi, connect the female leg of the first jumper wire to     Ground. You can use any GND pin. In this example we used Physical Pin 9 (GND,     row 5, left column)@@@On the Breadboard, connect the male leg of the first jumper wire to     the Ground Bus column on the right. That entire     column of your breadboard is connected, so it doesn't matter which row. In     this example we have attached it to row 1@@@On the Raspberry Pi, connect the female leg of the second jumper cable     to a GPIO pin. In this example we used Physical Pin     7 (GPIO 4, row 4, left     column)@@@On the Breadboard, connect the male leg of the second jumper wire to the     Tie-Point row of your choice. In this example we connected it to row 5,     column A@@@On the Breadboard, connect one leg of the resistor to the Ground Bus      column on the right side. That entire column of your breadboard is     connected, so it doesn't matter which row. In this example we have attached     it to row 5@@@On the Breadboard, connect the other leg of the resistor to the right     side Tie-Point row of your choice. In this example we have used row 5,     column J@@@On the Breadboard, connect the cathode leg (the shortest leg) of the     LED to the same Tie-Point row that you connected the resistor from GND     to. In this example we used row 5, column F@@@On the Breadboard, connect the anode leg (the longest leg) of the     LED to the same Tie-Point row that you connected the jumper from     the GPIO pin to. In this example we used row     5, column E",,"[[""\n  var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO"", ""var LED = new Gpio(4, 'out'); \n  //use GPIO pin 4, and specify that it is output"", 'var \n  blinkInterval = setInterval(blinkLED, 250); //run the blinkLED function every \n  250ms', 'function blinkLED() { //function to start blinking', '\xa0 if (LED.readSync() === \n  0) { //check the pin state, if the state is 0 (or off)', '\xa0\xa0\xa0 LED.writeSync(1); \n  //set pin state to 1 (turn LED on)', '\xa0 } else {', '\xa0\xa0\xa0 LED.writeSync(0); \n  //set pin state to 0 (turn LED off)', '\xa0 }', '}', 'function endBlink() \n  { //function to stop blinking', '\xa0 clearInterval(blinkInterval); // Stop blink intervals', '\xa0 \n  LED.writeSync(0); // Turn LED off', '\xa0 LED.unexport(); // Unexport GPIO \n  to free resources', '}', 'setTimeout(endBlink, 5000); //stop blinking \n  after 5 seconds']]"
Raspberry Pi,RasPi LED & Pushbutton,https://www.w3schools.com/nodejs/nodejs_raspberrypi_led_pushbutton.asp,"In the previous chapter we learned how to use a Raspberry Pi and its GPIO to make a LED blink.|||For that we used a GPIO pin as ""Output"".|||In this chapter we will use another GPIO pin as ""Input"".|||Instead of blinking for 5 seconds, we want the LED to light up when you push a button connected to the breadboard.|||In this chapter we will create a simple example where we control a LED light with a Push Button.|||For this you need:|||Click the links in the list above for descriptions of the different components.|||Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED willshine.|||In this chapter we will build on the circuit we built in last chapter, so you will recognize some of the parts in the list above.|||Now it is time to build the circuit on our Breadboard. We will use the circuit we created in the last chapter as a starting point.|||If you are new to electronics, we recommend you turn off the power for the Raspberry Pi. And use an anti-static mat or a grounding strap to avoid damaging it.|||Shut down the Raspberry Pi properly with the command:|||After the LEDs stop blinking on the Raspberry Pi, then pull out the power plug from the Raspberry Pi (or turn of the power strip it is connected to).|||Just pulling the plug without shutting down properly may cause corruption of the memory card.|||Look at the above illustration of the circuit.|||Your circuit should now be complete, and your connections should look   pretty similar to the illustration above.|||Now it is time to boot up the Raspberry Pi, and write the Node.js script to   interact with it.|||Go to the ""nodetest"" directory, and create a new file called ""buttonled.js"":|||The file is now open and can be edited with the built in Nano Editor.|||Write, or paste the following:|||Press ""Ctrl+x"" to save the code. Confirm with ""y"", and confirm the name with ""Enter"".|||Run the code:|||Now the LED should turn on when you press the button, and turn off when you release it.|||End the program with Ctrl+c.",,"A Raspberry Pi with Raspian, internet, SSH, with Node.js installed@@@The   onoff module for Node.js@@@1 x Breadboard@@@1 x 68 Ohm resistor@@@1 x 1k Ohm resistor@@@1 x Through Hole LED@@@1 x Push Button@@@4 x Female to male jumper wires@@@1 x Male to Male jumper wires","Starting with the circuit we created in the last chapter:    On the Raspberry Pi, connect the female leg of a jumper wire to a     5V     power pin. In our example we used Physical Pin 2 (5V,     row 1, right column)@@@On the Breadboard, connect the male leg of the jumper wire connected to     the 5V power, to the     Power Bus on the right side. That entire column     of your breadboard is connected, so it doesn't matter which row. In our     example we attached it to row 1@@@On the Breadboard, connect the push button so that it fits across the     Trench. In our example it connects to rows 13 and 15, columns E and F@@@On the Breadboard, connect one leg of the 1k ohm resistor to the Ground Bus     column on the right side, and the other leg to the right side Tie-Point row     where it connects to one of the right side legs of the push button. In our example we attached     one side to Tie-Point row 13, column J, and the other side to the closest Ground Bus hole@@@On the Breadboard, connect a male-to-male jumper wire from the right     Power Bus, to the right Tie-Point row that     connects to the other leg of the     push button. In our example we attached     one side to Tie-Point row 15, column J, and the other side to the closest Power Bus hole@@@On the Raspberry Pi, connect the female leg of a jumper wire to a     GPIO pin. In our example we used Physical Pin     11 (GPIO 17, row 6, left     column)@@@On the Breadboard, connect the male leg of the jumper wire to left     Tie-Point row the Push Button leg that is directly across the     Ground connection leg.Â  In our example we     attached it to row 13, column A",,"[[""\n  var\n  Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO"", ""var \n  LED = new Gpio(4, 'out'); //use GPIO pin 4 as output"", ""var pushButton = new \n  Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handled"", 'pushButton.watch(function (err, value) { \n  //Watch for hardware interrupts on pushButton GPIO, specify callback function', '\xa0 \n  if (err) { //if an error', ""\xa0\xa0\xa0 console.error('There was an \n  error', err); //output error message to console"", '\xa0 return;', '\xa0 }', '\xa0 \n  LED.writeSync(value); //turn LED on or off depending on the button state (0 or \n  1)', '});', '\n  function unexportOnClose() { //function to run when exiting program', '\xa0 \n  LED.writeSync(0); // Turn LED off', '\xa0 LED.unexport(); // Unexport LED \n  GPIO to free resources', '\xa0 pushButton.unexport(); // Unexport Button \n  GPIO to free resources', '};', ""process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+c""]]"
Raspberry Pi,RasPi Flowing LEDs,https://www.w3schools.com/nodejs/nodejs_raspberrypi_flowing_leds.asp,"In this chapter we will use several GPIO pins to create a ""flowing"" effect by turning them on and off in sequence.|||For this you need:|||Note: The resistor you need can be different from what we use depending on the type of LEDs you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED willshine.|||Click the links in the list above for descriptions of the different components.|||Now it is time to build the circuit on our Breadboard.|||If you are new to electronics, we recommend you turn off the power for the Raspberry Pi. And use an anti-static mat or a grounding strap to avoid damaging it.|||Shut down the Raspberry Pi properly with the command:|||After the LEDs stop blinking on the Raspberry Pi, then pull out the power plug from the Raspberry Pi (or turn of the power strip it is connected to).|||Just pulling the plug without shutting down properly may cause corruption of the memory card.|||Look at the above illustration of the circuit.|||Your circuit should now be complete, and your connections should look   pretty similar to the illustration above.|||Now it is time to boot up the Raspberry Pi, and write the Node.js script to   interact with it.|||Go to the ""nodetest"" directory, and create a new file called ""flowingleds.js"":|||The file is now open and can be edited with the built in Nano Editor.|||Write, or paste the following:|||Press ""Ctrl+x"" to save the code. Confirm with ""y"", and confirm the name with ""Enter"".|||Run the code:|||Now the LEDs should turn on and off in sequence, creating a flowing effect.|||End the program with Ctrl+c.",,"A Raspberry Pi with Raspian, internet, SSH, with Node.js installed@@@The   onoff module for Node.js@@@1 x Breadboard@@@8 x 220 Ohm resistor@@@8 x Through Hole LED@@@9 x Female to male jumper wires","On the Raspberry Pi, connect the female leg of a jumper wire to a GND pin. In our example we used Physical Pin 6 (GND,     row 3, right column)@@@On the Breadboard, connect the male leg of the jumper wire connected to     the GND power, to the Ground Bus on the right side. That entire column     of your breadboard is connected, so it doesn't matter which row. In our example we attached it to row 1@@@For each LED: Connect the LED so that it connects to 2 Tie-Point rows. In our example     we connected:LED1 to rows 5 (cathode) & 6 (anode) column JLED2 to rows 8 (cathode) & 9 (anode) column JLED3 to rows 11 (cathode) & 12 (anode) column JLED4 to rows 14 (cathode) & 15 (anode) column JLED5 to rows 17 (cathode) & 18 (anode) column JLED6 to rows 20 (cathode) & 21 (anode) column JLED7 to rows 23 (cathode) & 24 (anode) column JLED8 to rows 26 (cathode) & 27 (anode) column J@@@For each LED: Connect one of the legs of a 220 ohm resistor from the the Ground Bus     column on the right side, and the other leg to the right side Tie-Point row     where it connects to the cathode leg of the LED. In our example we     connected:LED1 to row 5 column ILED2 to row 8 column ILED3 to row 11 column ILED4 to row 14 column ILED5 to row 17 column ILED6 to row 20 column ILED7 to row 23 column ILED8 to row 26 column I@@@For each LED: Connect the female leg of a jumper wire to a    GPIO pin on the Raspberry Pi, and the male leg     of the jumper wire to the right side Tie-Point row     where it connects to the anode leg of the LED. In our example we connected:LED1 from Physical Pin     7 (GPIO 4, row 4, left     column) to Tie-point row 6 column FLED2 from Physical Pin       11 (GPIO 17, row 6, left     column) to Tie-point row 9 column FLED3 from Physical Pin       13 (GPIO 27, row 7, left     column) to Tie-point row 12 column FLED4 from Physical Pin       15 (GPIO 22, row 8, left     column) to Tie-point row 15 column FLED5 from Physical Pin       12 (GPIO 18, row 6, right     column) to Tie-point row 18 column FLED6 from Physical Pin       16 (GPIO 23, row 8, right column) to       Tie-point row 21 column FLED7 from Physical Pin       18 (GPIO 24, row 9, right column) to       Tie-point row 24 column FLED8 from Physical Pin       22 (GPIO 25, row 11, right column) to       Tie-point row 27 column F|||LED1 to rows 5 (cathode) & 6 (anode) column J@@@LED2 to rows 8 (cathode) & 9 (anode) column J@@@LED3 to rows 11 (cathode) & 12 (anode) column J@@@LED4 to rows 14 (cathode) & 15 (anode) column J@@@LED5 to rows 17 (cathode) & 18 (anode) column J@@@LED6 to rows 20 (cathode) & 21 (anode) column J@@@LED7 to rows 23 (cathode) & 24 (anode) column J@@@LED8 to rows 26 (cathode) & 27 (anode) column J|||LED1 to row 5 column I@@@LED2 to row 8 column I@@@LED3 to row 11 column I@@@LED4 to row 14 column I@@@LED5 to row 17 column I@@@LED6 to row 20 column I@@@LED7 to row 23 column I@@@LED8 to row 26 column I|||LED1 from Physical Pin     7 (GPIO 4, row 4, left     column) to Tie-point row 6 column F@@@LED2 from Physical Pin       11 (GPIO 17, row 6, left     column) to Tie-point row 9 column F@@@LED3 from Physical Pin       13 (GPIO 27, row 7, left     column) to Tie-point row 12 column F@@@LED4 from Physical Pin       15 (GPIO 22, row 8, left     column) to Tie-point row 15 column F@@@LED5 from Physical Pin       12 (GPIO 18, row 6, right     column) to Tie-point row 18 column F@@@LED6 from Physical Pin       16 (GPIO 23, row 8, right column) to       Tie-point row 21 column F@@@LED7 from Physical Pin       18 (GPIO 24, row 9, right column) to       Tie-point row 24 column F@@@LED8 from Physical Pin       22 (GPIO 25, row 11, right column) to       Tie-point row 27 column F",,"[[""\n  var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO"", ""\n  var LED04 = new Gpio(4, 'out'), //use declare variables for all the GPIO \n  output pins"", ""\xa0 LED17 = new Gpio(17, 'out'),"", ""\xa0 LED27 = new Gpio(27, \n  'out'),"", ""\xa0 LED22 = new Gpio(22, 'out'),"", ""\xa0 LED18 = new Gpio(18, \n  'out'),"", ""\xa0 LED23 = new Gpio(23, 'out'),"", ""\xa0 LED24 = new Gpio(24, \n  'out'),"", ""\xa0 LED25 = new Gpio(25, 'out');"", '//Put all the LED \n  variables in an array', 'var leds = [LED04, \n  LED17, LED27, LED22, LED18, LED23, LED24, LED25];', 'var indexCount = 0; //a \n  counter', 'dir = ""up""; //variable for flowing direction', 'var \n  flowInterval = setInterval(flowingLeds, 100); //run the flowingLeds function \n  every 100ms', 'function flowingLeds() { //function for flowing Leds', '\xa0 \n  leds.forEach(function(currentValue) { //for each item in array', '\xa0\xa0\xa0 \n  currentValue.writeSync(0); //turn off LED', '\xa0 });', '\xa0 if (indexCount \n  == 0) dir = ""up""; //set flow direction to ""up"" if the count reaches zero', '\xa0 \n  if (indexCount >= leds.length) dir = ""down""; //set flow direction to ""down"" if \n  the count reaches 7', '\xa0 if (dir == ""down"") indexCount--; //count \n  downwards if direction is down', '\xa0 leds[indexCount].writeSync(1); \n  //turn on LED that where array index matches count', '\xa0 if (dir == \n  ""up"") indexCount++ //count upwards if direction is up', '};', 'function unexportOnClose() { \n  //function to run when exiting program', '\xa0 clearInterval(flowInterval); \n  //stop flow interwal', '\xa0 leds.forEach(function(currentValue) { //for \n  each LED', '\xa0\xa0\xa0 currentValue.writeSync(0); //turn off LED', '\xa0\xa0\xa0 \n  currentValue.unexport(); //unexport GPIO', '\xa0 });', '};', ""process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+cc""]]"
Raspberry Pi,RasPi WebSocket,https://www.w3schools.com/nodejs/nodejs_raspberrypi_webserver_websocket.asp,"WebSocket enables bidirectional communication in real time over the web.|||WebSocket can be run together with a normal HTTP server. You can click a button in a web browser, and enable a GPIO on your Raspberry Pi which turns on a light in your house. All in real time, and with communication going both ways!|||In this chapter, we will set up a web server with WebSocket. Then create a browser UI to interact with our earlier example of turning a LED on and off with a button.|||For this tutorial you need a Raspberry Pi. In our examples we use a a Raspberry Pi 3, but this tutorial should work for most versions.|||For this you need:|||Click the links in the list above for descriptions of the different components.|||Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED willshine.|||Compared to our earlier example, the only new thing we need is to set up a web server, and install the socket.io module.|||Following the earlier chapters in this Node.js tutorial, lets set up a web server that can serve HTML files.|||In our ""nodetest"" directory create a new directory we can use for static html files:|||Now lets set up a webserver. Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error.|||webserver.js:|||Go to the folder ""public"":|||And create a HTML file, index.html:|||index.html:|||This file will not have any functionality yet. For now it is just a placeholder. Lets see if the webserver is working:|||Open the website in a browser using http://[RaspberryPi_IP]:8080/:|||The webserver should now be up and running, and we can move on to the WebSocket part.|||With the webserver set up, update your Raspberry Pi system packages to their latest versions.|||Update your system package list:|||Upgrade all your installed packages to their latest version:|||Doing this regularly will keep your Raspberry Pi installation up to date.|||To download and install newest version of socket.io, use the following command:|||Now we can use WebSocket in our application. Lets update our index.html file:|||index.html:|||And our webserver.js file:|||webserver.js:|||Lets test the server:|||Open the website in a browser using http://[RaspberryPi_IP]:8080/:|||Now the server should output all the changes to the checkbox to the console on the Raspberry Pi.|||The client is sending the changes to the server, and the server is responding.|||Lets add the push button controlled LED from a previous chapter.|||Lets update our webserver.js file again. We will use a lot of the code from the Pushbutton controlled LED chapter.|||webserver.js:|||Lets test the server:|||Open the website in a browser using http://[RaspberryPi_IP]:8080/:|||Now the server should output all the changes to the checkbox to the console on the Raspberry Pi.|||The client is sending the changes to the server, and the server is responding.|||End the program with Ctrl+c.",,"A Raspberry Pi with Raspian, internet, SSH, with Node.js installed@@@The   onoff module for Node.js@@@The   socket.io module for Node.js@@@1 x Breadboard@@@1 x   68 Ohm resistor@@@1 x   1k Ohm resistor@@@1 x   Through Hole LED@@@1 x   Push Button@@@4 x   Female to male jumper wires@@@1 x   Male to Male jumper wires",,,"[[""\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()"", ""var fs = require('fs'); //require filesystem module"", 'http.listen(8080); //listen to port 8080', '\n    function handler (req, res) { //create server', ""\xa0\xa0fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder"", '\xa0\xa0\xa0 if (err) \n    {', ""\xa0\xa0\xa0\xa0\xa0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error"", '\xa0\xa0\xa0\xa0\xa0 \n    return res.end(""404 Not Found"");', '\xa0\xa0\xa0 } ', ""\xa0\xa0\xa0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML"", '\xa0\xa0\xa0 res.write(data); //write data from index.html', '\xa0\xa0\xa0 \n    return res.end();', '\xa0\xa0});', '}'], [""\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()"", ""var fs = require('fs'); //require filesystem module"", ""var io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)"", 'http.listen(8080); //listen to port 8080', '\n    function handler (req, res) { //create server', ""\xa0 fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder"", '\xa0\xa0\xa0 if (err) \n    {', ""\xa0\xa0\xa0\xa0\xa0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error"", '\xa0\xa0\xa0\xa0\xa0 \n    return res.end(""404 Not Found"");', '\xa0\xa0\xa0 } ', ""\xa0\xa0\xa0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML"", '\xa0\xa0\xa0 res.write(data); //write data from index.html', '\xa0\xa0\xa0 \n    return res.end();', '\xa0 });', '}', ""\n    io.sockets.on('connection', function (socket) {// WebSocket Connection"", '\xa0 \n    var lightvalue = 0; //static variable for current status', ""\xa0 socket.on('light', \n    function(data) { //get light switch status from client"", '\xa0\xa0\xa0 \n    lightvalue = data;', '\xa0\xa0\xa0 if (lightvalue) {', '\xa0\xa0\xa0\xa0\xa0 \n    console.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log', '\xa0\xa0\xa0 }', '\xa0 });', '});'], [""\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()"", ""var fs = require('fs'); //require filesystem module"", ""var io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)"", ""var Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIO"", ""var LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    output"", ""var pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled"", '\n    http.listen(8080); //listen to port 8080', 'function handler (req, res) \n    { //create server', ""\xa0 fs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folder"", '\xa0\xa0\xa0 if (err) {', ""\xa0\xa0\xa0\xa0\xa0 res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error"", '\xa0\xa0\xa0\xa0\xa0 \n    return res.end(""404 Not Found"");', '\xa0\xa0\xa0 } ', ""\xa0\xa0\xa0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML"", '\xa0\xa0\xa0 res.write(data); //write data from index.html', '\xa0\xa0\xa0 \n    return res.end();', '\xa0 });', '}', ""\n    io.sockets.on('connection', function (socket) {// WebSocket Connection"", '\xa0 \n    var lightvalue = 0; //static variable for current status', '\xa0 \n    pushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButton', '\xa0\xa0\xa0 if (err) { //if an error', ""\xa0\xa0\xa0\xa0\xa0 \n    console.error('There was an error', err); //output error message to console"", '\xa0\xa0\xa0\xa0\xa0 \n    return;', '\xa0\xa0\xa0 }', '\xa0\xa0\xa0 lightvalue = value;', ""\xa0\xa0\xa0 \n    socket.emit('light', lightvalue); //send button status to client"", '\xa0 \n    });', ""\xa0 socket.on('light', function(data) { //get light switch status \n    from client"", '\xa0\xa0\xa0 lightvalue = data;', '\xa0\xa0\xa0 \n    if (lightvalue != LED.readSync()) { //only change LED if status has changed', '\xa0\xa0\xa0\xa0\xa0 \n    LED.writeSync(lightvalue); //turn LED on or off', '\xa0\xa0\xa0 }', '\xa0 \n    });', '});', ""process.on('SIGINT', function () { //on ctrl+c"", '\xa0 \n    LED.writeSync(0); // Turn LED off', '\xa0 LED.unexport(); // Unexport LED \n    GPIO to free resources', '\xa0 pushButton.unexport(); // Unexport Button \n    GPIO to free resources', '\xa0 process.exit(); //exit completely', '});']]"
Raspberry Pi,RasPi RGB LED WebSocket,https://www.w3schools.com/nodejs/nodejs_raspberrypi_rgb_led_websocket.asp,"In the previous chapters we have learned how to use WebSocket, and how to use GPIO to turn LEDs on and off.|||In this we will use chapter we use a RGB LED, with PWM (Pulse-width modulation) to display different colors based on user input via WebSocket.|||An RGB LED is a LED with 3 different colors. It has a RED, GREEN and BLUE LED (RGB LED).|||And using PWM, we can set the individual strength of the 3 LEDs. This will allow us to mix them, to set a color.|||In this chapter we will create an example where we control an RGB LED with a web page via WebSocket.|||For this you need:|||Click the links in the list above for descriptions of the different components.|||Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED willshine.|||Earlier, we have used the ""onoff"" module, which works great for just turning on and off. Now we want to set the set the strength of the LEDs, so we need a GPIO Module with a bit more functionality.|||We will use the ""pigpio"" Node.js module, as this allows for PWM.|||With PWM we can set the strength of a LED from 0 to 255.|||The ""pigpio"" Node.js module is based on the pigpio C library.|||If you are using the ""Lite"" version of Raspbian, this is most likely not included and must be manually installed.|||Update your system package list:|||Install the pigpio C library:|||Now we can install the ""pigpio"" Node.js module using npm:|||Now the ""pigpio"" module should be installed and we can use it to interact with the GPIO of the Raspberry Pi.|||Note: Since the ""pigpio"" module uses the pigpio C library,   it requires root/sudo privileges to access hardware peripherals (like the   GPIO).|||Now it is time to build the circuit on our Breadboard.|||If you are new to electronics, we recommend you turn off the power for the Raspberry Pi. And use an anti-static mat or a grounding strap to avoid damaging it.|||Shut down the Raspberry Pi properly with the command:|||After the LEDs stop blinking on the Raspberry Pi, then pull out the power plug from the Raspberry Pi (or turn of the power strip it is connected to).|||Just pulling the plug without shutting down properly may cause corruption of the memory card.|||In building this Circuit it is important to know if you have a common   anode, or common cathode, RGB LED:|||You can check with your provider, or test it yourself:|||Connect cables to GND and 3.3V pin. Connect GND to the longest leg of the   RGB LED and the 3.3 V to any other leg. If the it lights up, your RGB LED has   a common cathode. If not, it has a common anode.|||Look at the above illustration of the circuit.|||Your circuit should now be complete, and your connections should look   pretty similar to the illustration above.|||Now it is time to boot up the Raspberry Pi, and write the Node.js script to   interact with it.|||Look at the above illustration of the circuit.|||Your circuit should now be complete, and your connections should look   pretty similar to the illustration above.|||Now it is time to boot up the Raspberry Pi, and write the Node.js script to   interact with it.|||Go to the ""nodetest"" directory, and create a new file called ""rgbws.js"":|||The file is now open and can be edited with the built in Nano Editor.|||Write, or paste the following:|||Press ""Ctrl+x"" to save the code. Confirm with ""y"", and confirm the name with ""Enter"".|||Write, or paste the following:|||Press ""Ctrl+x"" to save the code. Confirm with ""y"", and confirm the name with ""Enter"".|||Now it is time add the HTML that allows for user input via WebSocket.|||For this we want:|||Go to the folder ""public"":|||And create a HTML file, rgb.html:|||rgb.html:|||Return to the ""nodetest"" folder: |||Run the code:|||Note: Since the ""pigpio"" module uses the pigpio C library,   it requires root/sudo privileges to access hardware peripherals (like the   GPIO).|||Open the website in a browser using http://[RaspberryPi_IP]:8080/|||Now the RGB LED should change color depending on the user input.|||End the program with Ctrl+c.",Install the pigpio Module,"A Raspberry Pi with Raspian, internet, SSH, with Node.js installed@@@The  pigpio module for Node.js@@@The   socket.io module for Node.js@@@1 x Breadboard@@@3 x  220   Ohm resistor@@@1 x RGB LED (common anode or common cathode)@@@4 x Female to male jumper wires|||3 color sliders, one for each color (RGB)@@@A color picker@@@A div showing the current color","On the Breadboard, connect the RGB LED to the right ground bus column,     and make sure that each leg connects to a different row. The longest leg is     the common cathode leg. In this example we have connected the LED to rows     1-4, with the common cathode leg connected to row 2 column I. The RED leg is     connected to row 1 column J, the GREEN leg is connected to row 3 column J,     and the BLUE leg is connected to row 4 column J@@@On the Raspberry Pi, connect the female leg of the first jumper wire to     Ground. You can use any GND pin. In this example we used Physical Pin 9 (GND,     row 5, left column)@@@On the Breadboard, connect the male leg of the first jumper wire to     the same row of the right ground bus column that you connected the common     cathode to. In this example we connected it to row 2 column F@@@On the Raspberry Pi, connect the female leg of the second jumper cable     to a GPIO pin. We will use this for the RED     leg, In this example we used Physical Pin     7 (GPIO 4, row 4, left     column)@@@On the Breadboard, connect the male leg of the second jumper wire to the     left ground bus, same row as the RED leg of the LED is connected. In this example we connected it to row     1,     column A@@@On the Breadboard, connect a resistor between the left and right ground     bus columns for the row with the RED leg of the LED. In this example we have attached     it to row 1, column E and F@@@On the Raspberry Pi, connect the female leg of the third jumper cable     to a GPIO pin. We will use this for the GREEN     leg, In this example we used Physical Pin     11 (GPIO 17, row 6, left     column)@@@On the Breadboard, connect the male leg of the third jumper wire to the     left ground bus, same row as the GREEN leg of the LED is connected. In this example we connected it to row     3,     column A@@@On the Breadboard, connect a resistor between the left and right ground     bus columns for the row with the GREEN leg of the LED. In this example we have attached     it to row 3, column E and F@@@On the Raspberry Pi, connect the female leg of the forth jumper cable     to a GPIO pin. We will use this for the BLUE     leg, In this example we used Physical Pin     13 (GPIO 27, row 7, left     column)@@@On the Breadboard, connect the male leg of the forth jumper wire to the     left ground bus, same row as the BLUE leg of the LED is connected. In this example we connected it to row     4,     column A@@@On the Breadboard, connect a resistor between the left and right ground     bus columns for the row with the BLUE leg of the LED. In this example we have attached     it to row 4, column E and F|||On the Breadboard, connect the RGB LED to the right ground bus column,     and make sure that each leg connects to a different row. The longest leg is     the common anode leg. In this example we have connected the LED to rows     1-4, with the common cathode leg connected to row 2 column I. The RED leg is     connected to row 1 column J, the GREEN leg is connected to row 3 column J,     and the BLUE leg is connected to row 4 column J@@@On the Raspberry Pi, connect the female leg of the first jumper cable     to a GPIO pin. We will use this for the RED     leg, In this example we used Physical Pin     7 (GPIO 4, row 4, left     column)@@@On the Breadboard, connect the male leg of the first jumper wire to the     left ground bus, same row as the RED leg of the LED is connected. In this example we connected it to row     1,     column A@@@On the Breadboard, connect a resistor between the left and right ground     bus columns for the row with the RED leg of the LED. In this example we have attached     it to row 1, column E and F@@@On the Raspberry Pi, connect the female leg of the second jumper cable     to a GPIO pin. We will use this for the GREEN     leg, In this example we used Physical Pin     11 (GPIO 17, row 6, left     column)@@@On the Breadboard, connect the male leg of the second jumper wire to the     left ground bus, same row as the GREEN leg of the LED is connected. In this example we connected it to row     3,     column A@@@On the Breadboard, connect a resistor between the left and right ground     bus columns for the row with the GREEN leg of the LED. In this example we have attached     it to row 3, column E and F@@@On the Raspberry Pi, connect the female leg of the third jumper cable     to a GPIO pin. We will use this for the BLUE     leg, In this example we used Physical Pin     13 (GPIO 27, row 7, left     column)@@@On the Breadboard, connect the male leg of the third jumper wire to the     left ground bus, same row as the BLUE leg of the LED is connected. In this example we connected it to row     4,     column A@@@On the Breadboard, connect a resistor between the left and right ground     bus columns for the row with the BLUE leg of the LED. In this example we have attached     it to row 4, column E and F@@@On the Raspberry Pi, connect the female leg of the forth jumper wire to     3.3V. In this example we used Physical Pin 1 (3.3V,     row 1, left column)@@@On the Breadboard, connect the male leg of the forth jumper wire to     the same row of the right ground bus column that you connected the common     anode to. In this example we connected it to row 2 column F",,"[[""\n  var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()"", ""var fs = require('fs'); //require \n  filesystem module"", ""var io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)"", ""var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO"", 'ledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED', 'ledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN', 'ledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE', 'redRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)', '\n  greenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)', 'blueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)', '//RESET RGB LED', 'ledRed.digitalWrite(0); // Turn RED \n  LED off', 'ledGreen.digitalWrite(0); // Turn GREEN LED off', '\n  ledBlue.digitalWrite(0); // Turn BLUE LED off', 'http.listen(8080); \n  //listen to port 8080', 'function handler (req, res) { //what to do on \n  requests to port 8080', ""\xa0 fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder"", '\xa0\xa0\xa0 \n  if (err) {', ""\xa0\xa0\xa0\xa0\xa0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error"", '\xa0\xa0\xa0\xa0\xa0 \n  return res.end(""404 Not Found"");', '\xa0\xa0\xa0 }', ""\xa0\xa0\xa0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML"", '\xa0\xa0\xa0 \n  res.write(data); //write data from rgb.html', '\xa0\xa0\xa0 return \n  res.end();', '\xa0 });', '}', ""io.sockets.on('connection', function \n  (socket) {// Web Socket Connection"", ""\xa0 socket.on('rgbLed', \n  function(data) { //get light switch status from client"", '\xa0\xa0\xa0 \n  console.log(data); //output data from WebSocket connection to console', '\xa0\xa0\xa0 \n  //for common cathode RGB LED\xa00 is fully off, and 255 is fully on', '\xa0\xa0\xa0 redRGB=parseInt(data.red);\n  ', '\xa0\xa0\xa0 greenRGB=parseInt(data.green);', '\xa0\xa0\xa0 \n  blueRGB=parseInt(data.blue);', '\xa0\xa0\xa0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value', '\xa0\xa0\xa0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value', '\xa0\xa0\xa0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value', '\xa0 });', '});', ""process.on('SIGINT', \n  function () { //on ctrl+c"", '\xa0 ledRed.digitalWrite(0); // Turn RED LED \n  off', '\xa0 ledGreen.digitalWrite(0); // Turn GREEN LED off', '\xa0 \n  ledBlue.digitalWrite(0); // Turn BLUE LED off', '\xa0 process.exit(); //exit \n  completely', '});'], [""\n  var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()"", ""var fs = require('fs'); //require \n  filesystem module"", ""var io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)"", ""var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO"", 'ledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED', 'ledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN', 'ledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE', 'redRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)', '\n  greenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)', 'blueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)', '//RESET RGB LED', 'ledRed.digitalWrite(1); // Turn RED \n  LED off', 'ledGreen.digitalWrite(1); // Turn GREEN LED off', '\n  ledBlue.digitalWrite(1); // Turn BLUE LED off', 'http.listen(8080); \n  //listen to port 8080', 'function handler (req, res) { //what to do on \n  requests to port 8080', ""\xa0 fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder"", '\xa0\xa0\xa0 \n  if (err) {', ""\xa0\xa0\xa0\xa0\xa0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error"", '\xa0\xa0\xa0\xa0\xa0 \n  return res.end(""404 Not Found"");', '\xa0\xa0\xa0 }', ""\xa0\xa0\xa0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML"", '\xa0\xa0\xa0 \n  res.write(data); //write data from rgb.html', '\xa0\xa0\xa0 return \n  res.end();', '\xa0 });', '}', ""io.sockets.on('connection', function \n  (socket) {// Web Socket Connection"", ""\xa0 socket.on('rgbLed', \n  function(data) { //get light switch status from client"", '\xa0\xa0\xa0 \n  console.log(data); //output data from WebSocket connection to console', '\xa0\xa0\xa0 \n  //for common anode RGB LED\xa0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client', '\xa0\xa0\xa0 redRGB=255-parseInt(data.red);\n  ', '\xa0\xa0\xa0 greenRGB=255-parseInt(data.green);', '\xa0\xa0\xa0 \n  blueRGB=255-parseInt(data.blue);', '\xa0\xa0\xa0 console.log(""rbg: "" \n  + redRGB + "", "" + greenRGB + "", "" + blueRGB); //output converted to console', '\n', '\xa0\xa0\xa0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value', '\xa0\xa0\xa0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value', '\xa0\xa0\xa0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value', '\xa0 });', '});', ""process.on('SIGINT', \n  function () { //on ctrl+c"", '\xa0 ledRed.digitalWrite(1); // Turn RED LED \n  off', '\xa0 ledGreen.digitalWrite(1); // Turn GREEN LED off', '\xa0 \n  ledBlue.digitalWrite(1); // Turn BLUE LED off', '\xa0 process.exit(); //exit \n  completely', '});']]"
Raspberry Pi,RasPi Components,https://www.w3schools.com/nodejs/nodejs_raspberrypi_components.asp,"Components are parts of a larger whole. In this chapter, we explain the different components we use in our tutorial.|||This is an illustration of the Raspberry Pi 3.|||The GPIO pins are the small red squares in two rows on the right side of the Raspberry Pi, on the actual Raspberry Pi they are small metal pins.|||Input pins are like switches that you can turn on or off from the outside   world (like a on/off light switch).|||Output pins are like switches that the Raspberry Pi can turn on or off (like turning on/off a LED light).|||The Raspberry Pi 3 has 26 GPIO pins, the rest of the pins are power, ground or ""other"".|||The pin placements correspond with the table below.|||A breadboard is used for prototyping electronics, it allows you to create circuits without soldering. It is basically a plastic board, with a grid of tie-points (holes). Inside the board there are metal strips connecting the different tie-points in specific ways.|||In the illustration below we have highlighted some of the sections with different colors. This is to show you how the grid is connected.|||The different sections of the breadboard:|||Light emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. In our example we use a Through Hole LED.     They have a positive (called Anode), and a negative (called Cathode) pin. The     longer leg on the LED should indicate the positive pin.|||Light emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. An RGB LED has 4 pins. One for each color (R = Red, G = Green, and, B = Blue), and a common cathode/anode. This one LED can display the pure colors, or with PWD to modulate and mix colors.|||A push button is a type of switch. A switch makes or breaks a connection an an electric circuit.|||Short pieces of wire called jumper wires are used to make connections.     Female to Male jumper wires can be used to connect from the GPIO on the     Raspberry Pi to the Breadboard.|||Short pieces of wire called jumper wires are used to make connections.     Male to Male jumper wires can be used to make connections between different     parts of the Breadboard.|||Resistors are used to reduce current, adjust signal levels, etc. This is     a 68 Ohm resistor.|||Resistors are used to reduce current, adjust signal levels, etc. This is     a 220 Ohm resistor.|||Resistors are used to reduce current, adjust signal levels, etc. This is     a 1k Ohm resistor.|||onoff - GPIO access and interrupt detection with Node.js|||documentation|||Socket.IO - real-time bidirectional event-based communication|||documentation|||pigpio - wrapper for pigpio C library. Enables GPIO, PWM, servo control, state change notification and interrupt handling with Node.js|||documentation",RGB LED,"On the left, and right, side there are 2 columns of tie-points. All the     tie points in each of these columns are connected.@@@The Power Bus - The columns highlighted with red. There are usually used     to connect power to the Breadboard. Since the entire column is connected,     you can connect power to any of the tie-points in the column.@@@The Ground Bus - The columns highlighted with blue. There are usually     used to connect Ground to the Breadboard. Since the entire column is     connected, you can connect ground to any of the tie-points in the column.@@@Rows of connected Tie-Points - The rows highlighted with green. The     tie-points of each of these rows are connected, but not the entire row! The     left side tie-points are connected (A-B-C-D-E), and the right side     tie-points are connected (F-G-H-I-J).@@@In the center of the Breadboard there is a Trench, this separates the     left and right rows. The width of the trench is designed so that many     Integrated Circuits fit across it.",,"GPIO 2|||3|||4|||5V&&&GPIO 3|||5|||6|||GND&&&GPIO 4|||7|||8|||GPIO 14&&&GND|||9|||10|||GPIO 15&&&GPIO 17|||11|||12|||GPIO 18&&&GPIO 27|||13|||14|||GND&&&GPIO 22|||15|||16|||GPIO 23&&&3V3|||17|||18|||GPIO 24&&&GPIO 10|||19|||20|||GND&&&GPIO 9|||21|||22|||GPIO 25&&&GPIO 11|||23|||24|||GPIO 8&&&GND|||25|||26|||GPIO 7&&&DNC|||27|||28|||DNC&&&GPIO 5|||29|||30|||GND&&&GPIO 6|||31|||32|||GPIO 12&&&GPIO 13|||33|||34|||GND&&&GPIO 19|||35|||36|||GPIO 16&&&GPIO 26|||37|||38|||GPIO 20&&&GND|||39|||40|||GPIO 21&&&Physical Pin Number&&&Power +&&&Ground&&&UART&&&I2C&&&SPI&&&GPIO&&&Do Not Connect&&&
Through Hole LED
Light emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. In our example we use a Through Hole LED. 
    They have a positive (called Anode), and a negative (called Cathode) pin. The 
    longer leg on the LED should indicate the positive pin.
|||

&&&
RGB LED
Light emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. An RGB LED has 4 pins. One for each color (R = Red, G = Green, and, B = Blue), and a common cathode/anode. This one LED can display the pure colors, or with PWD to modulate and mix colors.
|||

&&&
Push Button
A push button is a type of switch. A switch makes or breaks a connection an an electric circuit.
|||

&&&
Jumper Wire - Female to Male
Short pieces of wire called jumper wires are used to make connections. 
    Female to Male jumper wires can be used to connect from the GPIO on the 
    Raspberry Pi to the Breadboard.
|||

&&&
Jumper Wire - Male to Male
Short pieces of wire called jumper wires are used to make connections. 
    Male to Male jumper wires can be used to make connections between different 
    parts of the Breadboard.
|||

&&&
Resistor - 68 Ohm
Resistors are used to reduce current, adjust signal levels, etc. This is 
    a 68 Ohm resistor.
|||

&&&
Resistor - 220 Ohm
Resistors are used to reduce current, adjust signal levels, etc. This is 
    a 220 Ohm resistor.
|||

&&&
Resistor - 1k Ohm
Resistors are used to reduce current, adjust signal levels, etc. This is 
    a 1k Ohm resistor.
|||

&&&
onoff - GPIO access and interrupt detection with Node.js
|||
documentation
&&&
Socket.IO - real-time bidirectional event-based communication
|||
documentation
&&&
pigpio - wrapper for pigpio C library. Enables GPIO, PWM, servo control, state change notification and interrupt handling with Node.js
|||
documentation
",[]
Node.js Reference,Built-in Modules,https://www.w3schools.com/nodejs/ref_modules.asp,Node.js has a set of built-in modules which you can use without any further installation.|||Here is a list of the built-in modules of Node.js version 6.10.3:,,,,assert|||Provides a set of assertion tests&&&buffer|||To handle binary data&&&child_process|||To run a child process&&&cluster|||To split a single Node process into multiple processes&&&crypto|||To handle OpenSSL cryptographic functions&&&dgram|||Provides implementation of UDP datagram sockets&&&dns|||To do DNS lookups and name resolution functions&&&domain|||Deprecated. To handle unhandled errors&&&events|||To handle events&&&fs|||To handle the file system&&&http|||To make Node.js act as an HTTP server&&&https|||To make Node.js act as an HTTPS server.&&&net|||To create servers and clients&&&os|||Provides information about the operation system&&&path|||To handle file paths&&&punycode|||Deprecated. A character encoding scheme&&&querystring|||To handle URL query strings&&&readline|||To handle readable streams one line at the time&&&stream|||To handle streaming data&&&string_decoder|||To decode buffer objects into strings&&&timers|||To execute a function after a given number of milliseconds&&&tls|||To implement TLS and SSL protocols&&&tty|||Provides classes used by a text terminal&&&url|||To parse URL strings&&&util|||To access utility functions&&&v8|||To access information about V8 (the JavaScript engine)&&&vm|||To compile JavaScript code in a virtual machine&&&zlib|||To compress or decompress files,[]
