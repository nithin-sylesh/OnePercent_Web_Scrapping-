Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
Tutorial,AngularJS HOME,https://www.w3schools.com/angular/default.asp,"AngularJS extends HTML with new attributes.|||AngularJS is perfect for Single Page Applications (SPAs).|||AngularJS is easy to learn.|||This tutorial is specially designed to help you learn AngularJS as quickly and efficiently as possible.|||First, you will learn the basics of AngularJS: directives, expressions, filters, modules, and controllers.|||Then you will learn everything else you need to know about AngularJS:|||Events, DOM, Forms, Input, Validation, Http, and more.|||In every chapter, you can edit the examples online, and click on a button to view the result. |||Before you study AngularJS, you should have a basic understanding of:|||AngularJS version 1.0 was released in 2012.|||Miško Hevery, a Google employee, started to work with AngularJS in 2009.|||The idea turned out very well, and the project is now officially supported by Google.|||W3Schools' AngularJS tutorial contains lots of AngularJS examples!|||AngularJS Examples|||The AngularJS reference contains all directives and filters used in this tutorial.|||AngularJS Reference",This Tutorial|||Try it Yourself Examples in Every Chapter|||What You Should Already Know|||AngularJS History|||AngularJS Examples|||AngularJS Reference,HTML@@@CSS@@@JavaScript,,,"[['\n<!DOCTYPE html>', '\n<html lang=""en-US"">', '<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n<body>', '\n<div ng-app="""">', '\n\xa0    <p>Name : <input type=""text"" ng-model=""name""></p>', '\n\xa0    <h1>Hello {{name}}</h1>', '\n</div>', '\n</body>', '\n</html>\n']]"
Tutorial,AngularJS Intro,https://www.w3schools.com/angular/angular_intro.asp,"AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag.|||AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.|||AngularJS is a JavaScript framework written in JavaScript.|||AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:|||AngularJS extends HTML with ng-directives.|||The ng-app directive defines an AngularJS application.|||The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.|||The ng-bind directive binds application data to the HTML view. |||Example explained:|||AngularJS starts automatically when the web page has loaded.|||The ng-app directive tells AngularJS that the <div> element is the ""owner"" of an AngularJS application.|||The ng-model directive binds the value of the input field to the application variable name.|||The ng-bind directive binds the content of the <p> element to the application variable name. |||As you have already seen, AngularJS directives are HTML attributes with an ng prefix.|||The ng-init directive initializes AngularJS application variables.|||Alternatively with valid HTML: |||You can use data-ng-, instead of ng-, if you want to make your page HTML valid.|||You will learn a lot more about directives later in this tutorial.|||AngularJS expressions are written inside double braces: {{ expression }}.|||AngularJS will ""output"" data exactly where the expression is written:|||AngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.|||You will learn more about expressions later in this tutorial.|||AngularJS modules define AngularJS applications.|||AngularJS controllers control AngularJS applications. |||The ng-app directive defines the application, the ng-controller directive defines the controller.|||AngularJS modules define applications:|||AngularJS controllers control applications:|||You will learn more about modules and controllers later in this tutorial.",AngularJS is a JavaScript Framework|||AngularJS Extends HTML|||AngularJS Directives|||AngularJS Expressions|||AngularJS Applications,,,,"[['\n<script\nsrc=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>'], ['\n<!DOCTYPE html>', '\n<html>', '<script\nsrc=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n<body>', '<div ng-app="""">', '\n\xa0    <p>Name: <input type=""text"" ng-model=""name""></p>', '\n\xa0    <p ng-bind=""name""></p>', '\n</div>', '\n</body>', '\n</html>', '\n'], ['\n<div ng-app="""" ng-init=""firstName=\'John\'"">', '\n<p>The name is <span ng-bind=""firstName""></span></p>', '\n</div>\n'], ['\n<div data-ng-app="""" data-ng-init=""firstName=\'John\'"">', '\n<p>The name is <span data-ng-bind=""firstName""></span></p>', '\n</div>\n'], ['\n<!DOCTYPE html>', '\n<html>', '<script\nsrc=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '<body>', '<div ng-app="""">', '\n\xa0    <p>My first expression: {{ 5 + 5 }}</p>', '\n</div>', '\n</body>', '\n</html>', '\n'], ['\n<!DOCTYPE html>', '\n<html>', '\n <script\nsrc=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n <body>', '<div ng-app="""">', '\xa0 <p>Name: \n <input type=""text"" ng-model=""name""></p>', '\xa0 <p>{{name}}</p>', '</div>', '\n</body>', '\n</html>', '\n'], ['\n<div ng-app=""', <strong>myApp</strong>, '"" ng-controller=""', <strong>myCtrl</strong>, '"">', '\n', 'First Name: <input type=""text"" ng-model=""firstName""><br>', '\nLast Name: <input type=""text"" ng-model=""lastName""><br>', '<br>', '\nFull Name: {{firstName + "" "" + lastName}}', '\n', '</div>', '<script>', ""\n var app = angular.module('"", <strong>myApp</strong>, ""', []);"", ""app.controller('"", <strong>myCtrl</strong>, ""', \n function($scope) {"", '\xa0\xa0$scope.firstName= ""John"";', '\xa0\xa0$scope.lastName= ""Doe"";', '});', '</script>\n'], [""\n var app = angular.module('myApp', []);\n""], [""\n     app.controller('myCtrl', \n function($scope) {"", '\xa0\xa0$scope.firstName= ""John"";', '\xa0 \n $scope.lastName= ""Doe"";', '});\n']]"
Tutorial,AngularJS Expressions,https://www.w3schools.com/angular/angular_expressions.asp,"AngularJS binds data to HTML using Expressions.|||AngularJS expressions can be written inside double braces: {{ expression }}.|||AngularJS expressions can also be written inside a directive: ng-bind=""expression"".|||AngularJS will resolve the expression, and return the result exactly where the expression is written.|||AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.|||Example {{ 5 + 5 }} or {{ firstName + "" "" + lastName }}|||If you remove the ng-app directive, HTML will display the expression as it is, without solving it:|||You can write expressions wherever you like, AngularJS will simply resolve the expression and return the result.|||Example: Let AngularJS change the value of CSS properties.Change the color of the input box below, by changing its value:Example    <div ng-app="""" ng-init=""myCol='lightblue'""><input     style=""background-color:{{myCol}}"" ng-model=""myCol""></div>Try it Yourself »AngularJS NumbersAngularJS numbers are like JavaScript numbers:Example<div ng-app="""" ng-init=""quantity=1;cost=5""><p>Total in dollar: {{ quantity * cost }}</p></div>Try it Yourself »Same example using ng-bind:Example<div ng-app="""" ng-init=""quantity=1;cost=5""><p>Total in dollar: <span ng-bind=""quantity * cost""></span></p></div>Try it Yourself »Using ng-init is not very common. You will learn a better way to initialize data in the chapter about controllers.AngularJS StringsAngularJS strings are like JavaScript strings:Example<div ng-app="""" ng-init=""firstName='John';lastName='Doe'""><p>The name is {{ firstName + "" "" + lastName }}</p></div>Try it Yourself »Same example using ng-bind:Example<div ng-app="""" ng-init=""firstName='John';lastName='Doe'""><p>The name is <span ng-bind=""firstName + ' ' + lastName""></span></p></div>Try it Yourself »AngularJS ObjectsAngularJS objects are like JavaScript objects:Example<div ng-app="""" ng-init=""person={firstName:'John',lastName:'Doe'}""><p>The name is {{ person.lastName }}</p></div>Try it Yourself »Same example using ng-bind:Example<div ng-app="""" ng-init=""person={firstName:'John',lastName:'Doe'}""><p>The name is <span ng-bind=""person.lastName""></span></p></div>Try it Yourself »AngularJS ArraysAngularJS arrays are like JavaScript arrays:Example<div ng-app="""" ng-init=""points=[1,15,19,2,40]""><p>The third result is {{ points[2] }}</p></div>Try it Yourself »Same example using ng-bind:Example<div ng-app="""" ng-init=""points=[1,15,19,2,40]""><p>The third result is <span ng-bind=""points[2]""></span></p></div>Try it Yourself »AngularJS Expressions vs. JavaScript ExpressionsLike JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.Unlike JavaScript expressions, AngularJS expressions can be written inside HTML.AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.AngularJS expressions support filters, while JavaScript expressions do not.Learn about JavaScript in our JavaScript Tutorial.❮ PreviousNext ❯|||Example: Let AngularJS change the value of CSS properties.|||Change the color of the input box below, by changing its value:|||AngularJS numbers are like JavaScript numbers:|||Same example using ng-bind:|||Using ng-init is not very common. You will learn a better way to initialize data in the chapter about controllers.|||AngularJS strings are like JavaScript strings:|||Same example using ng-bind:|||AngularJS objects are like JavaScript objects:|||Same example using ng-bind:|||AngularJS arrays are like JavaScript arrays:|||Same example using ng-bind:|||Like JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.|||Unlike JavaScript expressions, AngularJS expressions can be written inside HTML.|||AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.|||AngularJS expressions support filters, while JavaScript expressions do not.|||Learn about JavaScript in our JavaScript Tutorial.",AngularJS Expressions|||AngularJS Numbers|||AngularJS Strings|||AngularJS Objects|||AngularJS Arrays|||AngularJS Expressions vs. JavaScript Expressions,,,,"[['\n<!DOCTYPE html>', '\n<html>', '<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n<body>', '<div ng-app="""">', '\n\xa0    <p>My first expression: {{ 5 + 5 }}</p>', '\n</div>', '\n</body>', '\n</html>', '\n'], ['\n<!DOCTYPE html>', '\n<html>', '\n<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '<body>', '<div>', '\n\xa0    <p>My first expression: {{ 5 + 5 }}</p>', '\n</div>', '\n</body>', '\n</html>', '\n'], ['\n    <div ng-app="""" ng-init=""myCol=\'lightblue\'"">', '<input \n    style=""background-color:{{myCol}}"" ng-model=""myCol"">', '\n', '</div>', '\n'], ['\n<div ng-app="""" ng-init=""quantity=1;cost=5"">', '\n<p>Total in dollar: {{ quantity * cost }}</p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""quantity=1;cost=5"">', '\n<p>Total in dollar: <span ng-bind=""quantity * cost""></span></p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""firstName=\'John\';lastName=\'Doe\'"">', '\n', '<p>The name is {{ firstName + "" "" + lastName }}</p>', '</div>\n'], ['\n<div ng-app="""" ng-init=""firstName=\'John\';lastName=\'Doe\'"">', '\n<p>The name is <span ng-bind=""firstName + \' \' + lastName""></span></p>', '</div>\n'], ['\n<div ng-app="""" ng-init=""person={firstName:\'John\',lastName:\'Doe\'}"">', '\n<p>The name is {{ person.lastName }}</p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""person={firstName:\'John\',lastName:\'Doe\'}"">', '\n<p>The name is <span ng-bind=""person.lastName""></span></p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""points=[1,15,19,2,40]"">', '\n<p>The third result is {{ points[2] }}</p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""points=[1,15,19,2,40]"">', '\n<p>The third result is <span ng-bind=""points[2]""></span></p>', '\n</div>\n']]"
Tutorial,AngularJS Modules,https://www.w3schools.com/angular/angular_modules.asp,"An AngularJS module defines an application.|||The module is a container for the different parts of an application.|||The module is a container for the application controllers.|||Controllers always belong to a module.|||A module is created by using the AngularJS function angular.module|||The ""myApp"" parameter refers to an HTML element in which the application will run.|||Now you can add controllers, directives, filters, and more, to your AngularJS application.|||Add a controller to your application, and refer to the controller with theng-controller directive:|||You will learn more about controllers later in this tutorial.|||AngularJS has a set of built-in directives which you can use to add functionality to your application.|||For a full reference, visit our AngularJS directive reference.|||In addition you can use the module to add your own directives to your applications:|||You will learn more about directives later in this tutorial.|||It is common in AngularJS applications to put the module and the controllers in JavaScript files.|||In this example, ""myApp.js"" contains an application module definition, while ""myCtrl.js"" contains the controller:|||The [] parameter in the module definition can be used to define dependent modules.|||Without the [] parameter, you are not creating a new module, butretrieving an existing one.|||Global functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.|||AngularJS modules reduces this problem, by keeping all functions local to the module.|||While it is common in HTML applications to place scripts at the end of the <body> element, it is recommended that you load the AngularJS library either in the <head> or at the start of the <body>.|||This is because  calls to angular.module can only be compiled after the library has been loaded.",Creating a Module|||Adding a Directive|||Modules and Controllers in Files|||Functions can Pollute the Global Namespace,,,,"[['\n    <div ng-app=""myApp"">...</div>', '<script>', '\n', 'var app = angular.module(""myApp"", []);\n    ', '</script>'], ['\n<div ng-app=""', <b>myApp</b>, '"" ng-controller=', <strong>""myCtrl""</strong>, '>', '\n    {{ firstName + "" "" + lastName }}', '</div>', '<script>', '\n\n    var \n    app \n    = angular.module(', <strong>""myApp""</strong>, ', \n    []);', 'app.controller(', <strong>""myCtrl""</strong>, ', function($scope) {', '\xa0\xa0$scope.firstName \n    = ""John"";', '\xa0\xa0$scope.lastName \n    = ""Doe"";', '});', '</script>\n'], ['\n    <div ng-app=""myApp"" w3-test-directive></div>', '<script>\n    ', 'var app = \n    angular.module(""myApp"", []);', 'app.directive(""w3TestDirective"", \n    function() {', '\xa0\xa0return {', '\xa0\xa0\xa0\xa0template : ""I was made in a directive constructor!""', '\xa0\xa0};', '\n    });', '</script>'], ['\n    <!DOCTYPE html>', '<html>', '\n<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n    <body>', '<div ng-app=""', <strong>myApp</strong>, '"" \n    ng-controller=""', <strong>myCtrl</strong>, '"">', '{{ firstName + "" "" + lastName }}', '</div>', '\n<script src=""', <strong>myApp.js</strong>, '""></script>', '\n<script src=""', <strong>myCtrl.js</strong>, '""></script>', '</body>', '</html>\n'], ['\n<!DOCTYPE html>', '<html>', '<body>', '<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '<div ng-app=""myApp"" \nng-controller=""myCtrl"">', '{{ firstName + "" "" + lastName }}', '</div>', '\n', '<script>', 'var app = angular.module(""myApp"", \n[]);', 'app.controller(""myCtrl"", function($scope) {', '\xa0\xa0$scope.firstName \n= ""John"";', '\xa0\xa0$scope.lastName \n= ""Doe"";', '});', '</script>', '</body>', '</html>\n']]"
Tutorial,AngularJS Directives,https://www.w3schools.com/angular/angular_directives.asp,"AngularJS lets you extend HTML with new attributes called Directives.|||AngularJS has a set of built-in directives which offers functionality to your applications.|||AngularJS also lets you define your own directives.|||AngularJS directives are extended HTML attributes with the prefix ng-.|||The ng-app directive initializes an AngularJS application.|||The ng-init directive initializes application data.|||The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.|||Read about all AngularJS directives in our AngularJS directive reference.|||The ng-app directive also tells AngularJS that the <div> element is the ""owner"" of the AngularJS application.|||The {{ firstName }} expression, in the example above, is an AngularJS data binding expression.|||Data binding in AngularJS binds AngularJS expressions with AngularJS data.|||{{ firstName }} is bound with ng-model=""firstName"".|||In the next example two text fields are bound together with two ng-model directives:|||Using ng-init is not very common. You will learn how to initialize data in the chapter about controllers.|||The ng-repeat directive repeats an HTML element:|||The ng-repeat directive actually clones HTML elements once for each item in a collection. |||The ng-repeat directive used on an array of objects:|||AngularJS is perfect for database CRUD (Create Read Update Delete) applications.Just imagine if these objects were records from a database.|||The ng-app directive defines the root element of an AngularJS application. |||The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.|||The ng-init directive defines initial values for an AngularJS application.|||Normally, you will not use ng-init. You will use a controller or module instead.|||You will learn more about controllers and modules later.|||The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.|||The ng-model directive can also:|||Read more about the ng-model directive in the next chapter.|||In addition to all the built-in AngularJS directives, you can create your own directives.|||New directives are created by using the .directive function.|||To invoke the new directive, make an HTML element with the same tag name as the new directive.|||When naming a directive, you must use a camel case name, w3TestDirective, but when invoking it, you must use - separated name, w3-test-directive:|||You can invoke a directive by using:|||The examples below will all produce the same result:|||Element name|||Attribute|||Class|||Comment|||You can restrict your directives to only be invoked by some of the methods.|||By adding a restrict property with the value ""A"",     the directive can only be invoked by attributes:|||The legal restrict values are:|||By default the value is EA, meaning that both Element names and attribute names can invoke the directive.",AngularJS Directives|||Data Binding|||Create New Directives,"Provide type validation for application data (number, email, required).@@@Provide status for application data (invalid, dirty, touched, error).@@@Provide CSS classes for HTML elements.@@@Bind HTML elements to HTML forms.|||Element name@@@Attribute@@@Class@@@Comment|||E for Element name@@@A for Attribute@@@C for Class@@@M for Comment",,,"[['\n<div ng-app="""" ng-init=""firstName=\'John\'"">', '\n    <p>Name: <input type=""text"" ng-model=""firstName""></p>', '\n    <p>You wrote: {{ firstName }}</p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""quantity=1;price=5"">', '\nQuantity: <input type=""number""    ng-model=""quantity"">', '\nCosts:\xa0\xa0\xa0 <input type=""number"" ng-model=""price"">', '\nTotal in dollar: {{ quantity * price }}', '</div>'], ['\n<div ng-app="""" ng-init=""names=[\'Jani\',\'Hege\',\'Kai\']"">', '\n\xa0 <ul>', '\n\xa0\xa0\xa0 <li ng-repeat=""x in names"">', '\xa0\xa0\xa0\xa0\xa0 {{ x }}', '\n\xa0\xa0\xa0 </li>', '\n\xa0 </ul>', '\n</div>', '\n'], ['\n<div ng-app="""" ng-init=""names=[', ""\n    {name:'Jani',country:'Norway'},"", ""\n    {name:'Hege',country:'Sweden'},"", '\n    {name:\'Kai\',country:\'Denmark\'}]"">', '\n', '<ul>', '\n    \xa0 <li ng-repeat=""x    in names"">', ""\n    \xa0\xa0\xa0 {{ x.name + ', ' + x.country }}"", '\xa0 </li>', '\n    </ul>', '\n', '</div>\n']]"
Tutorial,AngularJS Model,https://www.w3schools.com/angular/angular_model.asp,"The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.|||With the ng-model directive you can bind the value of an input field to a variable created in AngularJS.|||The binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value:|||The ng-model directive can provide type validation for application data (number, e-mail, required):|||In the example above, the span will be displayed only if the expression in the ng-show attribute returns true.|||If the property in the ng-model attribute does not exist, AngularJS will create one for you.|||The ng-model directive can provide status for application data (valid, dirty, touched, error):|||The ng-model directive provides CSS classes for HTML elements, depending on their status:|||The ng-model directive adds/removes the following classes, according to the status of the form field:",,ng-empty@@@ng-not-empty@@@ng-touched@@@ng-untouched@@@ng-valid@@@ng-invalid@@@ng-dirty@@@ng-pending@@@ng-pristine,,,"[['\n    <div ng-app=""myApp"" ng-controller=""myCtrl"">', '\xa0 Name: \n    <input ng-model=""name"">', '</div>', '<script>', ""var app = angular.module('myApp', []);"", ""\n    app.controller('myCtrl', function($scope) {"", '\xa0\xa0$scope.name \n    = ""John Doe"";', '});', '</script>'], ['\n    <div ng-app=""myApp"" ng-controller=""myCtrl"">', '\xa0\xa0Name: \n    <input ng-model=""name"">', '\xa0\xa0<h1>You entered: {{name}}</h1>', '\n    </div>'], ['\n    <form ng-app="""" name=""myForm"">', '\xa0\xa0Email:', '\n    \xa0 \n    <input type=""email"" name=""myAddress"" ng-model=""text"">', '\xa0\xa0<span ng-show=""myForm.myAddress.$error.email"">Not a valid e-mail \n    address</span>', '</form>'], ['\n    <form ng-app="""" name=""myForm"" ng-init=""myText = \'post@myweb.com\'"">', '\xa0\xa0Email:', '\xa0\xa0<input type=""email"" name=""myAddress"" ng-model=""myText"" \n    required>', '\xa0\xa0<h1>Status</h1>', '\xa0 {{myForm.myAddress.$valid}}', '\xa0\xa0{{myForm.myAddress.$dirty}}', '\xa0\xa0{{myForm.myAddress.$touched}}', '</form>']]"
Tutorial,AngularJS Data Binding,https://www.w3schools.com/angular/angular_databinding.asp,"Data binding in AngularJS is the synchronization between the model and the view.|||AngularJS applications usually have a data model. The data model is a collection of data available for the application.|||The HTML container where the AngularJS application is displayed, is called the view.|||The view has access to the model, and there are several ways of displaying model data in the view.|||You can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property:|||You can also use double braces {{ }} to display content from the model:|||Or you can use the ng-model directive on HTML controls to bind the model to the view.|||Use the ng-model directive to bind data from the model to the view on HTML controls (input, select, textarea)|||The ng-model directive provides a two-way binding between the model and the view.|||Data binding in AngularJS is the synchronization between the model and the view.|||When data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.|||Applications in AngularJS are controlled by controllers. Read about controllers in the AngularJS Controllers chapter.|||Because of the immediate synchronization of the model and the view, the controller can be completely separated from the view, and simply concentrate on the model data. Thanks to the data binding in AngularJS, the view will reflect any changes made in the controller.",Data Model|||HTML View|||Two-way Binding|||AngularJS Controller,,,,"[['\n    <p ng-bind=""firstname""></p>'], ['\n    <p>First name: {{firstname}}</p>'], ['\n    <input ng-model=""firstname"">']]"
Tutorial,AngularJS Controllers,https://www.w3schools.com/angular/angular_controllers.asp,"AngularJS controllers control the data of AngularJS applications.|||AngularJS controllers are regular JavaScript Objects.|||AngularJS applications are controlled by controllers. |||The ng-controller directive defines the application controller. |||A controller is a JavaScript Object, created by a standard JavaScript object constructor.|||Application explained:|||The AngularJS application is defined by  ng-app=""myApp"". The application runs inside the <div>.|||The ng-controller=""myCtrl"" attribute is an AngularJS directive. It defines a controller.|||The myCtrl function is a JavaScript function.|||AngularJS will invoke the controller with a $scope object.|||In AngularJS, $scope is the application object (the owner of application variables and functions).|||The controller creates two properties (variables) in the scope (firstName andlastName).|||The ng-model directives bind the input fields to  the controller properties (firstName and lastName).|||The example above demonstrated a controller object with two properties: lastName and firstName.|||A controller can also have methods (variables as functions):|||In larger applications, it is common to store controllers in external files.|||Just copy the code between the <script> tags into an external file named personController.js:|||For the next example we will create a new controller file:|||Save the file as namesController.js:|||And then use the controller file in an application:",AngularJS Controllers,,,,"[['\n    <div ng-app=""myApp"" ng-controller=""myCtrl"">', '\n', 'First Name: <input type=""text"" ng-model=""firstName""><br>', '\n    Last Name: <input type=""text"" ng-model=""lastName""><br>', '<br>', '\n    Full Name: {{firstName + "" "" + lastName}}', '\n', '</div>', '<script>', ""var app = angular.module('myApp', \n    []);"", ""app.controller('myCtrl', function($scope) {"", '\xa0 $scope.firstName \n    = ""John"";', '\xa0\xa0$scope.lastName = ""Doe"";', '});', '</script>\n'], ['\n<div ng-app=""myApp"" ng-controller=""personCtrl"">', '\nFirst Name: <input type=""text"" ng-model=""firstName""><br>', '\nLast Name: <input type=""text"" ng-model=""lastName""><br>', '\n<br>', '\nFull Name: {{fullName()}}', '\n</div>', '\n<script>', ""var app = angular.module('myApp', []);"", ""app.controller('personCtrl', \n function($scope) {"", '\n  \xa0 $scope.firstName = ""John"";', '\xa0\xa0$scope.lastName \n = ""Doe"";', '\xa0\xa0$scope.fullName = function() {', '\xa0\xa0\xa0 \n return $scope.firstName + "" "" + $scope.lastName;', '\xa0\xa0};', '});', '\n</script>\n'], ['\n    <div ng-app=""myApp"" ng-controller=""personCtrl"">', '\n', 'First Name: <input type=""text"" ng-model=""firstName""><br>', '\n    Last Name: <input type=""text"" ng-model=""lastName""><br>', '<br>', '\n    Full Name: {{fullName()}}', '\n', '</div>', '<script src=""personController.js""></script>\n'], [""\n angular.module('myApp', []).controller('namesCtrl',  \n function($scope) {"", '\n\xa0\xa0$scope.names = [', ""\n\xa0\xa0\xa0\xa0{name:'Jani',country:'Norway'},"", ""\n\xa0\xa0\xa0\xa0{name:'Hege',country:'Sweden'},"", ""\n\xa0\xa0\xa0\xa0{name:'Kai',country:'Denmark'}"", '\n  \xa0 ];', '\n});\n'], ['\n<div ng-app=""myApp"" ng-controller=""namesCtrl"">', '\n<ul>', '\n\xa0\n<li ng-repeat=""x in names"">', ""\n    \xa0\xa0\xa0 {{ x.name + ', ' + x.country }}"", '\xa0 </li>', '\n</ul>', '\n</div>', '\n<script src=""namesController.js""></script>\n']]"
Tutorial,AngularJS Scopes,https://www.w3schools.com/angular/angular_scopes.asp,"The scope is the binding part between the HTML (view) and the JavaScript (controller).|||The scope is an object with the available properties and methods.|||The scope is available for both the view and the controller.|||When you make a controller in AngularJS, you pass the $scope object as an argument:|||Properties made in the controller, can be referred to in the view:|||When adding properties to the $scope object in the controller, the view (HTML) gets access to these properties.|||In the view, you do not use the prefix $scope, you just refer to a property name, like {{carname}}.|||If we consider an AngularJS application to consist of:|||Then the scope is the Model.|||The scope is a JavaScript object with properties and methods, which are available for both the view and the controller.|||If you make changes in the view, the model and the controller     will be updated:|||It is important to know which scope you are dealing with, at any time.|||In the two examples above there is only one scope, so knowing your scope is not an issue, but for larger applications there can be sections in the HTML DOM which can only access certain scopes.|||When dealing with the ng-repeat directive, each repetition has  access to the current repetition object:|||Each <li> element has access to the current repetition object, in this case a string, which is referred to by using x. |||All applications have a $rootScope which is the scope created on the HTML element that contains the ng-app directive.|||The rootScope is available in the entire application.|||If a variable has the same name in both the current scope and in the rootScope, the application uses the one in the current scope. |||A variable named ""color"" exists in both the controller's scope and in the rootScope:",How to Use the Scope?|||Understanding the Scope,"View, which is the HTML.@@@Model, which is the data available for the current view.@@@Controller, which is the JavaScript function that     makes/changes/removes/controls the data.    ",,,[]
Tutorial,AngularJS Filters,https://www.w3schools.com/angular/angular_filters.asp,"Filters can be added in AngularJS to format data.|||AngularJS provides filters to transform data:|||Filters can be added to expressions by using the pipe character |, followed by a filter.|||The uppercase filter format strings to upper case:|||The lowercase filter format strings to lower case:|||Filters are added to directives, like ng-repeat, by using the pipe character |, followed by a filter:|||The orderBy filter sorts an array:|||The currency filter formats a number as currency:|||Read more about the currency filter in our AngularJS currency Filter Reference|||The filter filter selects a subset of an array.|||The filter filter can only be used on arrays, and it returns an array containing only the matching items.|||Return the names that contains the letter ""i"":|||Read more about the filter filter in our AngularJS filter Filter Reference|||By setting the ng-model directive on an input field, we can use the value of the input field as an expression in a filter. |||Type a letter in the input field, and the list will shrink/grow depending on the match:|||Click the table headers to change the sort order::|||By adding the ng-click directive on the table headers, we can run a function that changes the sorting order of the array:|||You can make your own filters by registering a new filter factory function with your module:|||Make a custom filter called ""myFormat"":|||The myFormat filter will format every other character to uppercase.",AngularJS Filters,"currency Format a number to a currency format.@@@date Format a date to a specified format.@@@filter Select a subset of items from an array.@@@json Format an object to a JSON string.@@@limitTo Limits an array/string, into a specified number of elements/characters.@@@lowercase Format a string to lower case.@@@number Format a number to a string.@@@orderBy Orders an array by an expression.@@@uppercase Format a string to upper case.|||    {{ x }}  ",,{{x.name}}|||{{x.country}},"[['\n<div ng-app=""myApp"" ng-controller=""personCtrl"">', '\n<p>The name is {{ lastName | uppercase }}</p>', '\n</div>\n'], ['\n<div ng-app=""myApp"" ng-controller=""personCtrl"">', '\n<p>The name is {{ lastName | lowercase }}</p>', '</div>\n'], ['\n<div ng-app=""myApp"" ng-controller=""namesCtrl"">', '\n    <ul>', '\n    \xa0 <li ng-repeat=""x in names | orderBy:\'country\'"">', ""\n    \xa0\xa0\xa0 {{ x.name + ', ' + x.country }}"", '\xa0 </li>', '</ul>', '\n', '</div>\n'], ['\n<div ng-app=""myApp"" ng-controller=""costCtrl"">', '\n<h1>Price: {{ price | currency }}</h1>', '\n</div>\n'], ['\n<div ng-app=""myApp"" ng-controller=""namesCtrl"">', '\n    <ul>', '\xa0 <li ng-repeat=""x in names | \nfilter : \'i\'"">', '\xa0\xa0\xa0 {{ x }}', '\xa0 </li>', '</ul>', '\n', '</div>\n'], ['\n<div ng-app=""myApp"" ng-controller=""namesCtrl"">', '\n    <p><input type=""text"" ng-model=""test""></p>', '\n    <ul>', '\xa0 <li ng-repeat=""x in names | filter : test"">', '\n    \xa0\xa0\xa0 {{ x }}', '\xa0 </li>', '</ul>', '\n', '</div>\n'], ['\n<div ng-app=""myApp"" ng-controller=""namesCtrl"">', '\n    <table border=""1"" width=""100%"">', '\xa0 <tr>', '\xa0\xa0\xa0 <th ng-click=""orderByMe(\'name\')"">Name</th>', '\xa0\xa0\xa0 \n    <th ng-click=""orderByMe(\'country\')"">Country</th>', '\xa0 </tr>', '\xa0 <tr \n    ng-repeat=""x in names | orderBy:myOrderBy"">', '\xa0\xa0\xa0 <td>{{x.name}}</td>', '\xa0\xa0\xa0 \n    <td>{{x.country}}</td>', '\xa0 </tr>', '</table>', '</div>', '\n    <script>', ""angular.module('myApp', []).controller('namesCtrl', \n    function($scope) {"", '\xa0 $scope.names = [', ""\xa0\xa0\xa0 {name:'Jani',country:'Norway'},"", ""\xa0\xa0\xa0 \n    {name:'Carl',country:'Sweden'},"", ""\xa0\xa0\xa0 {name:'Margareth',country:'England'},"", ""\xa0\xa0\xa0 \n    {name:'Hege',country:'Norway'},"", ""\xa0\xa0\xa0 {name:'Joe',country:'Denmark'},"", ""\xa0\xa0\xa0 \n    {name:'Gustav',country:'Sweden'},"", ""\xa0\xa0\xa0 {name:'Birgit',country:'Denmark'},"", ""\xa0\xa0\xa0 \n    {name:'Mary',country:'England'},"", ""\xa0\xa0\xa0 {name:'Kai',country:'Norway'}"", '\xa0 \n    ];', '\xa0 $scope.orderByMe = function(x) {', '\xa0\xa0\xa0 $scope.myOrderBy \n    = x;', '\xa0 }', '});', '</script>']]"
Tutorial,AngularJS Services,https://www.w3schools.com/angular/angular_services.asp,"In AngularJS you can make your own service, or use one of the many built-in services.|||In AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application.|||AngularJS has about 30 built-in services. One of them is the $location service.|||The $location service has methods which return information about the location of the current web page:|||Use the $location service in a controller:|||Note that the $location service is passed in to the controller as an argument. In order to use the service in the controller, it must be defined as a dependency.|||For many services, like the $location service, it seems like you could use objects that are already in the DOM, like the window.location object, and you could, but it would have some limitations, at least for your AngularJS application.|||AngularJS constantly supervises your application, and for it to handle changes and events properly, AngularJS prefers that you use the $location service instead of the window.location object.|||The $http service is one of the most common used services in AngularJS applications. The service makes a request to the server, and lets your application handle the response.|||Use the $http service to request data from the server:|||This example demonstrates a very simple use of the $http service. Learn more about the $http service in the AngularJS Http Tutorial.|||The $timeout service is AngularJS' version of the window.setTimeout function.|||Display a new message after two seconds:|||The $interval service is AngularJS' version of the window.setInterval function.|||Display the time every second:|||To create your own service, connect your service to the module:|||Create a service named hexafy:|||To use your custom made service, add it as a dependency when defining the controller:|||Use the custom made service named hexafy to convert a number     into a hexadecimal number:|||Once you have created a service, and connected it to your application, you can use the service in any controller, directive, filter, or even inside other services.|||To use the service inside a filter, add it as a dependency when defining the filter:|||The service hexafy used in the filter myFormat:|||You can use the filter when displaying values from an object, or an array: ",What is a Service?|||The $http Service|||The $timeout Service|||The $interval Service|||Create Your Own Service,,,,"[['\n    <ul>', '\xa0 <li ng-repeat=""x in counts"">{{x | myFormat}}</li>', '</ul>']]"
Tutorial,AngularJS Http,https://www.w3schools.com/angular/angular_http.asp,"$http is an AngularJS service for reading data from remote servers.|||The AngularJS $http service makes a request to the server, and returns a response.|||Make a simple request to the server, and display the result in a header:|||The example above uses the .get method of the $http service.|||The .get method is a shortcut method of the $http service. There are several shortcut methods:|||The methods above are all shortcuts of calling the $http service:|||The example above executes the $http service with an object as an argument. The object is specifying the HTTP method, the url, what to do on success, and what to do on failure.|||The response from the server is an object with these properties:|||To handle errors, add one more functions to the .then method:|||The data you get from the response is expected to be in JSON format.|||JSON is a great way of transporting data, and it is easy to use within     AngularJS, or any other JavaScript.|||Example: On the server we have a file that returns a JSON object containing 15 customers, all wrapped in array called records.|||Click here to take a look at the JSON object.|||The ng-repeat directive is perfect for looping through an     array:|||Application explained:|||The application defines the customersCtrl controller, with a$scope and$http object.|||$http is an XMLHttpRequest object for requesting external data.|||$http.get() reads JSON data from https://www.w3schools.com/angular/customers.php.|||On success, the controller creates a property, myData, in the scope, with JSON data from the server.",AngularJS $http|||Example,".delete()@@@.get()@@@.head()@@@.jsonp()@@@.patch()@@@.post()@@@.put()|||.config the object used to generate the request.@@@.data a string, or an object, carrying the response from     the server.@@@.headers a function to use to get header information.@@@.status a number defining the HTTP status.@@@.statusText a string defining the HTTP status.",,,[]
Tutorial,AngularJS Tables,https://www.w3schools.com/angular/angular_tables.asp,"The ng-repeat directive is perfect for displaying tables.|||Displaying tables with angular is very simple:|||To make it nice, add some CSS to the page:|||To sort the table, add an orderBy filter:  |||To display uppercase, add an uppercase filter:  |||To display the table index, add a <td> with $index:  ",Displaying Data in a Table,,,,"[['\n<div ng-app=""myApp"" ng-controller=""customersCtrl""> ', '<table>', '\n\xa0 <tr ng-repeat=""x in names"">', '\xa0\xa0\xa0 <td>{{ x.Name }}</td>', '\xa0\xa0\xa0 \n<td>{{ x.Country }}</td>', '\xa0 </tr>', '</table>', '</div>', '\n <script>', ""var app = angular.module('myApp', []);"", ""app.controller('customersCtrl', \n function($scope, $http) {"", '\xa0\xa0$http.get(""customers.php"")', '\n \xa0\xa0.then(function (response) {$scope.names = response.data.records;});', '});', '</script>'], ['\n<table>', '\xa0 <tr ng-repeat=""x in names | orderBy : \'Country\'"">', '\xa0\xa0\xa0 \n<td>{{ x.Name }}</td>', '\xa0\xa0\xa0 <td>{{ x.Country }}</td>', '\xa0 \n</tr>', '</table>\n'], ['\n<table>', '\xa0 <tr ng-repeat=""x in names"">', '\xa0\xa0\xa0 \n<td>{{ x.Name }}</td>', '\xa0\xa0\xa0 <td>{{ x.Country \n| uppercase }}</td>', '\xa0 \n</tr>', '</table>\n'], ['\n<table>', '\xa0 <tr ng-repeat=""x in names"">', '\xa0\xa0\xa0 \n <td>{{ $index + 1 }}</td>', '\xa0\xa0\xa0 <td>{{ x.Name }}</td>', '\xa0\xa0\xa0 <td>{{ x.Country }}</td>', '\xa0 \n</tr>', '</table>\n'], ['\n <table>', '\xa0 <tr ng-repeat=""x in names"">', '\xa0\xa0\xa0 <td ng-if=""$odd"" \n style=""background-color:#f1f1f1"">{{ x.Name }}</td>', '\xa0\xa0\xa0 <td ng-if=""$even"">{{ \n x.Name }}</td>', '\xa0\xa0\xa0 <td ng-if=""$odd"" style=""background-color:#f1f1f1"">{{ \n x.Country }}</td>', '\xa0\xa0\xa0 <td ng-if=""$even"">{{ x.Country }}</td>', '\xa0 </tr>', '\n </table>\n']]"
Tutorial,AngularJS Select,https://www.w3schools.com/angular/angular_select.asp,"AngularJS lets you create dropdown lists based on items in an array, or an object.|||If you want to create a dropdown list, based on an object or an array in AngularJS, you should use the ng-options directive:|||You can also use the ng-repeat directive to make the same dropdown list:|||Because the ng-repeat directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, but the ng-options directive was made especially for filling a dropdown list with options.|||You can use both the ng-repeat directive and the ng-options directive:|||Assume you have an array of objects:|||Using ng-repeat:|||When using the value as an object, use ng-value insead of value:|||Using ng-repeat as an object:|||Using ng-options:|||When the selected value is an object, it can hold more information, and your application can be more flexible.|||We will use the ng-options directive in this tutorial.|||In the previous examples the data source was an array, but we can also use an object.|||Assume you have an object with key-value pairs:|||The expression in the ng-options attribute is a bit different for objects:|||Using an object as the data source, x represents the key, and    y     represents the value:|||The selected value will always be the value in a key-value pair.|||The value in a key-value pair can also be an object:|||The selected value will still be the value in a key-value pair, only this time it is an object:|||The options in the dropdown list does not have to be the key in a key-value pair, it can also be the value, or a property of the value object:",Creating a Select Box Using ng-options,,,,[]
Tutorial,AngularJS SQL,https://www.w3schools.com/angular/angular_sql.asp,"AngularJS is perfect for displaying data from a Database. Just make sure the data is in JSON format.|||The following section is a listing of the server code used to fetch SQL data.|||A request for data from a different server (other than the requesting page), are called cross-site HTTP requests.|||Cross-site requests are common on the web. Many pages load CSS, images, and scripts from different servers.|||In modern browsers, cross-site HTTP requests from scripts are restricted to same site for security reasons.|||The following line, in our PHP examples, has been added to allow cross-site access.",,,"Using PHP and MySQL. Returning JSON.@@@Using PHP and MS Access. Returning JSON.@@@Using ASP.NET, VB, and MS Access. Returning JSON.@@@Using ASP.NET, Razor, and SQL Lite. Returning JSON.",,"[['\n<div ng-app=""myApp"" ng-controller=""customersCtrl"">', '\n', '\n<table>', '\n\xa0 <tr ng-repeat=""x in names"">', '\n\xa0\xa0\xa0 <td>{{ x.Name }}</td>', '\n\xa0\xa0\xa0 <td>{{ x.Country }}</td>', '\n\xa0 </tr>', '\n</table>', '\n', '\n</div>', '\n', '\n<script>', ""\nvar app = angular.module('myApp', []);"", ""\napp.controller('customersCtrl', function($scope, $http) {"", '\n  \xa0 $http.get(""customers_mysql.php"")', '\n  \xa0 .then(function (response) {$scope.names = response.data.records;});', '\n});', '\n</script>\n'], ['\n<div ng-app=""myApp"" ng-controller=""customersCtrl"">', '\n', '\n<table>', '\n\xa0 <tr ng-repeat=""x in names"">', '\n\xa0\xa0\xa0 <td>{{ x.Name }}</td>', '\n\xa0\xa0\xa0 <td>{{ x.Country }}</td>', '\n\xa0 </tr>', '\n</table>', '\n', '\n</div>', '\n', '\n<script>', ""\nvar app = angular.module('myApp', []);"", ""\napp.controller('customersCtrl', function($scope, $http) {"", '\n  \xa0 $http.get(""customers_sql.aspx"")', '\n  \xa0 .then(function (response) {$scope.names = response.data.records;});', '\n});', '\n</script>\n'], ['\n<?php', '\nheader(""Access-Control-Allow-Origin: *"");', '\nheader(""Content-Type: application/json; charset=UTF-8"");', '\n', '\n$conn = new mysqli(""myServer"", ""myUser"", ""myPassword"", ""Northwind"");', '\n', '\n$result = $conn->query(""SELECT CompanyName, City, Country FROM Customers"");', '\n', '\n$outp = """";', '\nwhile($rs = $result->fetch_array(MYSQLI_ASSOC)) {', '\n  \xa0 if ($outp != """") {$outp .= "","";}', '\n  \xa0 $outp .= \'{""Name"":""\'\xa0 . $rs[""CompanyName""] . \'"",\';', '\n  \xa0 $outp .= \'""City"":""\'\xa0\xa0 . $rs[""City""]\xa0\xa0\xa0\xa0\xa0\xa0\xa0 . \'"",\';', '\n  \xa0 $outp .= \'""Country"":""\'. $rs[""Country""]\xa0\xa0\xa0\xa0 . \'""}\';', '\n}', '\n$outp =\'{""records"":[\'.$outp.\']}\';', '\n$conn->close();', '\n', '\necho($outp);', '\n?>\n'], ['\n<?php', '\nheader(""Access-Control-Allow-Origin: *"");', '\nheader(""Content-Type: application/json; charset=ISO-8859-1"");', '\n', '\n$conn = new COM(""ADODB.Connection"");', '\n$conn->open(""PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb"");', '\n', '\n$rs = $conn->execute(""SELECT CompanyName, City, Country FROM Customers"");', '\n', '\n$outp = """";', '\nwhile (!$rs->EOF) {', '\n  \xa0 if ($outp != """") {$outp .= "","";}', '\n  \xa0 $outp .= \'{""Name"":""\'\xa0 . $rs[""CompanyName""] . \'"",\';', '\n  \xa0 $outp .= \'""City"":""\'\xa0\xa0 . $rs[""City""]\xa0\xa0\xa0\xa0\xa0\xa0\xa0 . \'"",\';', '\n  \xa0 $outp .= \'""Country"":""\'. $rs[""Country""]\xa0\xa0\xa0\xa0 . \'""}\';', '\n  \xa0 $rs->MoveNext();', '\n}', '\n$outp =\'{""records"":[\'.$outp.\']}\';', '\n', '\n$conn->close();', '\n', '\necho ($outp);', '\n?>\n']]"
Tutorial,AngularJS DOM,https://www.w3schools.com/angular/angular_htmldom.asp,"AngularJS has directives for binding application data to the attributes of HTML DOM elements.|||The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.|||Application explained:|||The ng-disabled directive binds the application data mySwitch to the HTML button's disabled attribute.|||The ng-model directive binds the value of the HTML checkbox element to the value of mySwitch. |||If the value of mySwitch evaluates to true, the button will be disabled:  |||If the value of mySwitch evaluates to false, the button will not be disabled:  |||The ng-show directive shows or hides an HTML element.|||The ng-show directive shows (or hides) an HTML element based on the value of ng-show. |||You can use any expression that evaluates to true or false:|||In the next chapter, there are more examples, using the click of a button to hide HTML elements.|||The ng-hide directive hides or shows an HTML element.",The ng-disabled Directive,,,,"[['\n<div ng-app="""" ng-init=""mySwitch=true"">', '\n<p>', '<button ng-disabled=""mySwitch"">Click Me!</button>', '\n</p>', '<p>', '\n<input type=""checkbox"" ng-model=""mySwitch"">Button', '</p>', '\n', '<p>', '{{ mySwitch }}', '</p>', '\n', '</div>\n'], ['\n<p>', '<button disabled>Click Me!</button>', '\n</p>\n'], ['\n<p>', '<button>Click Me!</button>', '\n</p>\n'], ['\n<div ng-app="""">', '<p ng-show=""true"">I am visible.</p>', '\n', '<p ng-show=""false"">I am not visible.</p>', '\n</div>\n'], ['\n<div ng-app="""" ng-init=""hour=13"">', '<p ng-show=""hour > 12"">I am visible.</p>', '\n', '</div>\n'], ['\n<div ng-app="""">', '<p ng-hide=""true"">I am \n    not visible.</p>', '\n', '<p ng-hide=""false"">I am visible.</p>', '\n</div>\n']]"
Tutorial,AngularJS Events,https://www.w3schools.com/angular/angular_events.asp,"AngularJS has its own HTML events directives.|||You can add AngularJS event listeners to your HTML elements by using one or more of these directives:|||The event directives allows us to run AngularJS functions at certain user events.|||An AngularJS event will not overwrite an HTML event, both events will be executed.|||Mouse events occur when the cursor moves over an element, in this order:|||Or when a mouse button is clicked on an element, in this order:|||You can add mouse events on any HTML element.|||Increase the count variable when the mouse moves over the H1 element:|||The ng-click directive defines AngularJS code that will be executed when the element is being clicked.|||You can also refer to a function:|||If you want to show a section of HTML code when a button is clicked, and hide when the button is clicked again, like a dropdown menu, make the button behave like a toggle switch:|||Click MeMenu:PizzaPastaPesce|||The showMe variable starts out as the Boolean value false.|||The myFunc function sets the showMe variable to the opposite of what it is, by using the ! (not) operator.|||You can pass the $event object as an argument when calling the function.|||The $event object contains the browser's event object:",AngularJS Events|||>&lt;h2&gt;{{ count }}&lt;/h2&gt;<br/><br/>&lt;/div&gt;<br/>&lt;script&gt;<br/>var a,ng-blur@@@ng-change@@@ng-click@@@ng-copy@@@ng-cut@@@ng-dblclick@@@ng-focus@@@ng-keydown@@@ng-keypress@@@ng-keyup@@@ng-mousedown@@@ng-mouseenter@@@ng-mouseleave@@@ng-mousemove@@@ng-mouseover@@@ng-mouseup@@@ng-paste,ng-mouseover@@@ng-mouseenter@@@ng-mousemove@@@ng-mouseleave |||ng-mousedown@@@ng-mouseup@@@ng-click,,"[['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '<h1 ng-mousemove=""count \n= count + 1"">Mouse over me!</h1>', '\n', '<h2>{{ count }}</h2>', '</div>', '<script>', ""var app = \n angular.module('myApp', []);"", ""app.controller('myCtrl', function($scope) {"", '\xa0\xa0$scope.count = 0;', '});', '</script> '], ['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '<button ng-click=""count \n= count + 1"">Click me!</button>', '\n', '<p>{{ count }}</p>', '</div>', '<script>', ""var app = \n angular.module('myApp', []);"", ""app.controller('myCtrl', function($scope) {"", '\xa0 \n $scope.count = 0;', '});', '</script> '], ['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '<button ng-click=""myFunction()"">Click me!</button>', '\n', '<p>{{ count }}</p>', '</div>', '<script>', ""var app = \n angular.module('myApp', []);"", ""app.controller('myCtrl', function($scope) {"", '\n  \xa0 \n $scope.count = 0;', '\xa0 $scope.myFunction = function() {', '\xa0\xa0\xa0 \n    $scope.count++;', '\xa0\xa0}', '});', '</script> '], ['\n    <div ng-app=""myApp"" ng-controller=""myCtrl"">', '<button ng-click=""myFunc()"">Click \n    Me!</button>', '<div ng-show=""showMe"">', '\xa0 <h1>Menu:</h1>', '\n    \xa0\n    <div>Pizza</div>', '\xa0 <div>Pasta</div>', '\xa0\xa0<div>Pesce</div>', '</div>', '\n    </div>', '<script>', ""var app = angular.module('myApp', []);"", ""\n    app.controller('myCtrl', function($scope) {"", '\xa0\xa0$scope.showMe = false;', '\xa0\xa0$scope.myFunc \n    = function() {', '\xa0\xa0\xa0 $scope.showMe = !$scope.showMe;', '\xa0\xa0}', '});', '\n    </script> '], ['\n    <div ng-app=""myApp"" ng-controller=""myCtrl"">', '<h1 ng-mousemove=""myFunc($event)"">Mouse \n    Over Me!</h1>', ""<p>Coordinates: {{x + ', ' + y}}</p>"", '</div>', '\n    <script>', ""var app = angular.module('myApp', []);"", ""app.controller('myCtrl', \n    function($scope) {"", '\xa0 $scope.myFunc = function(myE) {', '\xa0\xa0\xa0 \n    $scope.x = myE.clientX;', '\xa0\xa0\xa0 $scope.y \n    = myE.clientY;', '\xa0\xa0}', '});', '</script>\n']]"
Tutorial,AngularJS Forms,https://www.w3schools.com/angular/angular_forms.asp,"Forms in AngularJS provides data-binding and validation of input controls.|||Input controls are the HTML input elements:|||Input controls provides data-binding by using theng-model directive.|||The application does now have a property named firstname.|||The ng-model directive binds the input controller to the rest of your application.|||The property firstname, can be referred to in a controller:|||It can also be referred to elsewhere in the application:|||A checkbox has the value true or false. Apply theng-model directive to a checkbox, and use its value in your application.|||Show the header if the checkbox is checked:|||Bind radio buttons to your application with the ng-model directive.|||Radio buttons with the same ng-model can have different values, but only the selected one will be used.|||Display some text, based on the value of the selected radio button:|||The value of myVar will be either dogs, tuts, or cars.|||Bind select boxes to your application with the ng-model directive.|||The property defined in the ng-model attribute will have the value of the selected option in the selectbox.|||Display some text, based on the value of the selected option:|||The value of myVar will be either dogs, tuts, or cars.|||form = {{user}}|||master = {{master}}|||The novalidate attribute is new in HTML5. It disables any default browser validation.|||The ng-app directive defines the AngularJS application.|||The ng-controller directive defines the application controller.|||The ng-model directive binds two input elements to the user object in the model.|||The formCtrl controller sets initial values to themaster object, and defines the reset() method.|||The reset() method sets the user object equal to the master object. |||The ng-click directive invokes the reset() method, only if the button is clicked.|||The novalidate attribute is not needed for this application, but normally you will use it in AngularJS forms, to override standard HTML5 validation.",,input elements@@@select elements@@@button elements@@@textarea elements,,,"[['\n    <input type=""text"" ng-model=""firstname"">\n'], ['\n    <script>', ""var app = angular.module('myApp', []);"", ""app.controller('formCtrl', \n    function($scope) {"", '\xa0 $scope.firstname = ""John"";', '});', '\n    </script>'], ['\n    <form>', '\xa0 First Name: <input type=""text"" ng-model=""firstname"">', '\n    </form>', '<h1>You entered: {{firstname}}</h1>'], ['\n    \xa0<form>', '\xa0 Check to show a header:', '\xa0\xa0<input type=""checkbox"" ng-model=""myVar"">', '</form>', '<h1 ng-show=""myVar"">My \n    Header</h1>'], ['\n    <form>', '\xa0 Pick a topic:', '\xa0 <input type=""radio"" ng-model=""myVar"" \n    value=""dogs"">Dogs', '\xa0 <input type=""radio"" ng-model=""myVar"" value=""tuts"">Tutorials', '\n    \xa0\n    <input type=""radio"" ng-model=""myVar"" value=""cars"">Cars', '</form>'], ['\n        <form>', '\xa0 Select a topic:', '\xa0 <select ng-model=""myVar"">', '\xa0\xa0\xa0 \n        <option value="""">', '\xa0\xa0\xa0 <option value=""dogs"">Dogs', '\xa0\xa0\xa0 \n        <option value=""tuts"">Tutorials', '\xa0\xa0\xa0 <option \n        value=""cars"">Cars', '\xa0 </select>', '</form>'], ['\n    <div ng-app=""myApp"" ng-controller=""formCtrl"">', '\xa0 <form \n    novalidate>', '\xa0\xa0\xa0 First Name:<br>', '\xa0\xa0\xa0 \n    <input type=""text"" ng-model=""user.firstName""><br>', '\xa0\xa0\xa0 Last \n    Name:<br>', '\xa0\xa0\xa0 <input type=""text"" ng-model=""user.lastName"">', '\n    \xa0\xa0\xa0 \n    <br><br>', '\xa0\xa0\xa0 <button ng-click=""reset()"">RESET</button>', '\xa0 \n    </form>', '\n    \xa0 <p>form = {{', <span style=""display:none"">{</span>, 'user}}</p>', '\n    \xa0 <p>master = {{', <span style=""display:none"">{</span>, 'master}}</p>', '</div>', '<script>', ""\n    var app =\n    angular.module('myApp', []);"", ""app.controller('formCtrl',  \n    function($scope) {"", '\n    \xa0\xa0$scope.master = {firstName: ""John"", lastName: ""Doe""};', '\n    \xa0\xa0$scope.reset = function() {', '\xa0\xa0\xa0 $scope.user \n    = angular.copy($scope.master);', '\xa0\xa0};', '\xa0\xa0$scope.reset();', '});', '\n    </script>\n']]"
Tutorial,AngularJS Validation,https://www.w3schools.com/angular/angular_validation.asp,"AngularJS can validate input data.|||AngularJS offers client-side form validation.|||AngularJS monitors the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.|||AngularJS also holds information about whether they have been touched, or modified, or not.|||You can use standard HTML5 attributes to validate input, or you can make your own validation functions.|||Client-side validation cannot alone secure user input. Server side validation is also necessary.|||Use the HTML5 attribute required to specify that the input field must be filled out:|||The input field is required:|||Use the HTML5 type email to specify that the value must be an e-mail:|||The input field has to be an e-mail:|||AngularJS is constantly updating the state of both the form and the input fields.|||Input fields have the following states:|||They are all properties of the input field, and are either true or false.|||Forms have the following states:|||They are all properties of the form, and are either true or false.|||You can use these states to show meaningful messages to the user. Example, if a field is required, and the user leaves it blank, you should give the user a warning:|||Show an error message if the field has been touched AND is empty:|||AngularJS adds CSS classes to forms and input fields depending on their states.|||The following classes are added to, or removed from, input fields:|||The following classes are added to, or removed from, forms:|||The classes are removed if the value they represent is false.|||Add styles for these classes to give your application a better and more intuitive user interface.|||Apply styles, using standard CSS:|||Forms can also be styled:|||Apply styles for unmodified (pristine) forms, and for modified forms:|||To create your own validation function is a bit more tricky; You have to add a new directive to your application, and deal with the validation inside a function with certain specified arguments.|||Create your own directive, containing a custom validation function, and refer to it by using my-directive.|||The field will only be valid if the value contains the character ""e"":|||In HTML, the new directive will be referred to by using the attribute my-directive.|||In the JavaScript we start by adding a new directive named myDirective.|||Remember, when naming a directive, you must use a camel case name, myDirective, but when invoking it, you must use - separated name, my-directive.|||Then, return an object where you specify that we require  ngModel, which is the ngModelController.|||Make a linking function which takes some arguments, where the fourth argument, mCtrl, is the ngModelController,|||Then specify a function, in this case named myValidation, which takes one argument, this argument is the value of the input element.|||Test if the value contains the letter ""e"", and set the validity of the model controller to either true or false.|||At last, mCtrl.$parsers.push(myValidation); will add the myValidation function to an array of other functions, which will be executed every time the input value changes.|||The HTML form attribute novalidate is used to disable default browser validation.|||The AngularJS directive ng-model binds the input elements to the model.|||The model object has two properties: user and email.|||Because of ng-show, the spans with color:red are displayed only when user or email is $dirty and $invalid.",Form Validation|||Form State and Input State|||CSS Classes|||Example Explained,"$untouched The field has not been touched yet@@@$touched The field has been touched@@@$pristine The field has not been modified yet@@@$dirty The field has been modified@@@$invalid The field content is not valid@@@$valid The field content is valid|||$pristine No fields have been modified yet@@@$dirty One or more have been modified@@@$invalid The form content is not valid@@@$valid The form content is valid@@@$submitted The form is submitted|||ng-untouched The field has not been touched yet@@@ng-touched The field has been touched@@@ng-pristine The field has not been  modified yet@@@ng-dirty The field has been modified@@@ng-valid The field content is valid@@@ng-invalid The field content is not valid@@@ng-valid-key One key for each validation.     Example: ng-valid-required, useful when there are more than one     thing that must be validated@@@ng-invalid-key Example: ng-invalid-required|||ng-pristine No fields has not been modified yet@@@ng-dirty One or more fields has been modified@@@ng-valid The form content is valid@@@ng-invalid The form content is not valid@@@ng-valid-key One key for each validation.     Example: ng-valid-required, useful when there are more than one     thing that must be validated@@@ng-invalid-key Example: ng-invalid-required",,,"[['\n    <form name=""myForm"">', '\xa0 <input name=""myInput"" ng-model=""myInput"" \n    required>', '</form>', ""<p>The input's valid state is:</p>"", '\n    <h1>{{myForm.myInput.$valid}}</h1>'], ['\n    <form name=""myForm"">', '\xa0 <input name=""myInput"" ng-model=""myInput"" \n    type=""email"">', '</form>', ""<p>The input's valid state is:</p>"", '\n    <h1>{{myForm.myInput.$valid}}</h1>'], ['\n    <input name=""myName"" ng-model=""myName"" required>', '<span ng-show=""myForm.myName.$touched \n    && myForm.myName.$invalid"">The name is required.</span>'], ['\n    <!DOCTYPE html>', '<html>', '<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n    <body>', '\n', '<h2>Validation Example</h2>', '<form\xa0 ng-app=""myApp""\xa0 \n    ng-controller=""validateCtrl""', 'name=""myForm"" novalidate>', '\n    <p>Username:<br>', '\xa0 <input type=""text"" name=""user"" ng-model=""user"" \n    required>', '\xa0 <span style=""color:red"" ng-show=""myForm.user.$dirty && \n    myForm.user.$invalid"">', '\xa0 <span ng-show=""myForm.user.$error.required"">Username \n    is required.</span>', '\xa0 </span>', '</p>', '<p>Email:<br>', '\xa0 \n    <input type=""email"" name=""email"" ng-model=""email"" required>', '\xa0 <span \n    style=""color:red"" ng-show=""myForm.email.$dirty && myForm.email.$invalid"">', '\xa0 \n    <span ng-show=""myForm.email.$error.required"">Email is required.</span>', '\xa0 \n    <span ng-show=""myForm.email.$error.email"">Invalid email address.</span>', '\xa0 \n    </span>', '</p>', '<p>', '\xa0 <input type=""submit""', '\xa0 \n    ng-disabled=""myForm.user.$dirty && myForm.user.$invalid ||', '\xa0 \n    myForm.email.$dirty && myForm.email.$invalid"">', '</p>', '</form>', '\n', '<script>', ""var app = angular.module('myApp', []);"", ""app.controller('validateCtrl', \n    function($scope) {"", ""\xa0\xa0$scope.user = 'John Doe';"", ""\xa0\xa0$scope.email = 'john.doe@gmail.com';"", '\n    });', '</script>', '</body>', '</html>\n']]"
Tutorial,AngularJS API,https://www.w3schools.com/angular/angular_api.asp,API stands for Application Programming Interface.|||The AngularJS Global API is a set of global JavaScript functions for performing common tasks like:|||The Global API functions are accessed using the angular object.|||Below is a list of some common API functions:,AngularJS Global API,Comparing objects@@@Iterating objects@@@Converting data,,angular.lowercase()|||Converts a string to lowercase&&&angular.uppercase()|||Converts a string to uppercase&&&angular.isString()|||Returns true if the reference is a string &&&angular.isNumber()|||Returns true if the reference is a number,"[['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '\n \xa0\n <p>{{ x1 }}</p>', '\xa0 <p>{{ x2 }}</p>', '</div>', '\n<script>', ""\nvar app = angular.module('myApp', []);"", ""\napp.controller('myCtrl', function($scope) {"", '\n\xa0\n$scope.x1 = ""JOHN"";', '\n\xa0\n$scope.x2 = angular.lowercase($scope.x1);', '\n});', '\n</script>\n'], ['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '\n \xa0\n <p>{{ x1 }}</p>', '\xa0 <p>{{ x2 }}</p>', '</div>', '\n<script>', ""\nvar app = angular.module('myApp', []);"", ""\napp.controller('myCtrl', function($scope) {"", '\n\xa0\n$scope.x1 = ""John"";', '\n\xa0\n$scope.x2 = angular.uppercase($scope.x1);', '\n});', '\n</script>\n'], ['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '\n \xa0\n <p>{{ x1 }}</p>', '\xa0 <p>{{ x2 }}</p>', '</div>', '\n<script>', ""\nvar app = angular.module('myApp', []);"", ""\napp.controller('myCtrl', function($scope) {"", '\n\xa0\n$scope.x1 = ""JOHN"";', '\n\xa0\n$scope.x2 = angular.isString($scope.x1);', '\n});', '\n</script>\n'], ['\n<div ng-app=""myApp"" ng-controller=""myCtrl"">', '\n \xa0\n <p>{{ x1 }}</p>', '\xa0 <p>{{ x2 }}</p>', '</div>', '\n<script>', ""\nvar app = angular.module('myApp', []);"", ""\napp.controller('myCtrl', function($scope) {"", '\n\xa0\n$scope.x1 = ""JOHN"";', '\n\xa0\n$scope.x2 = angular.isNumber($scope.x1);', '\n});', '\n</script>\n']]"
Tutorial,AngularJS W3.CSS,https://www.w3schools.com/angular/angular_w3css.asp,"You can easily use w3.css style sheet together with AngularJS. This chapter demonstrates how.|||To include W3.CSS in your AngularJS application, add the following line to the head of your document:|||If you want to study W3.CSS, visit our W3.CSS Tutorial.Below is a complete HTML example, with all AngularJS directives and W3.CSS classes explained.HTML Code    <!DOCTYPE html><html><link rel=""stylesheet"" href=""https://www.w3schools.com/w3css/4/w3.css"">    <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>    <body ng-app=""myApp"" ng-controller=""userCtrl""><div     class=""w3-container""><h3>Users</h3><table class=""w3-table     w3-bordered w3-striped"">  <tr>    <th>Edit</th>        <th>First Name</th>    <th>Last Name</th>  </tr>      <tr ng-repeat=""user in users"">    <td>          <button class=""w3-btn w3-ripple"" ng-click=""editUser(user.id)"">&#9998;     Edit</button>    </td>    <td>{{     user.fName }}</td>    <td>{{ user.lName }}</td>      </tr></table><br><button class=""w3-btn w3-green w3-ripple""     ng-click=""editUser('new')"">&#9998; Create New User</button><form     ng-hide=""hideform"">  <h3 ng-show=""edit"">Create New     User:</h3>  <h3 ng-hide=""edit"">Edit User:</h3>    <label>First     Name:</label>    <input class=""w3-input w3-border""     type=""text"" ng-model=""fName"" ng-disabled=""!edit"" placeholder=""First Name"">  <br>    <label>Last Name:</label>    <input     class=""w3-input w3-border"" type=""text"" ng-model=""lName"" ng-disabled=""!edit""     placeholder=""Last Name"">  <br>    <label>Password:</label>    <input     class=""w3-input w3-border"" type=""password"" ng-model=""passw1""     placeholder=""Password"">  <br>    <label>Repeat:</label>    <input     class=""w3-input w3-border"" type=""password"" ng-model=""passw2""     placeholder=""Repeat Password""> <br><button     class=""w3-btn w3-green w3-ripple"" ng-disabled=""error || incomplete"">&#10004;     Save Changes</button></form></div><script src= ""myUsers.js""></script></body></html>Try it Yourself »Directives (Used Above) ExplainedAngularJS DirectiveDescription<body ng-appDefines an application for the <body> element<body ng-controllerDefines a controller for the <body> element<tr ng-repeatRepeats the <tr> element for each user in users<button ng-clickInvoke the function editUser() when the <button> element is clicked<h3 ng-showShow the <h3>s element if edit = true<h3 ng-hideHide the form if hideform = true, and hide the <h3> element if edit = true<input ng-modelBind the <input> element to the application<button ng-disabledDisables the <button> element if error or incomplete = trueW3.CSS Classes ExplainedElementClassDefines<div>w3-containerA content container<table>w3-tableA table<table>w3-borderedA bordered table<table>w3-stripedA striped table<button>w3-btnA button<button>w3-greenA green button<button>w3-rippleA ripple effect when you click the button<input>w3-inputAn input field<input>w3-borderA border on the input fieldJavaScript CodemyUsers.js angular.module('myApp', []).controller('userCtrl',   function($scope) {$scope.fName = '';$scope.lName = '';$scope.passw1 = '';$scope.passw2 = '';    $scope.users = [{id:1, fName:'Hege', lName:""Pege"" },{id:2, fName:'Kim',  lName:""Pim"" },{id:3, fName:'Sal',  lName:""Smith"" },{id:4, fName:'Jack', lName:""Jones"" },{id:5, fName:'John', lName:""Doe"" },{id:6, fName:'Peter',lName:""Pan"" }];$scope.edit = true;$scope.error = false;$scope.incomplete = false; $scope.hideform = true; $scope.editUser = function(id) { $scope.hideform = false;  if (id == 'new') {    $scope.edit = true;    $scope.incomplete = true;    $scope.fName = '';    $scope.lName = '';    } else {    $scope.edit = false;    $scope.fName = $scope.users[id-1].fName;    $scope.lName = $scope.users[id-1].lName;   }};$scope.$watch('passw1',function() {$scope.test();});$scope.$watch('passw2',function() {$scope.test();});$scope.$watch('fName', function() {$scope.test();});$scope.$watch('lName', function() {$scope.test();});$scope.test = function() {  if ($scope.passw1 !== $scope.passw2) {    $scope.error = true;    } else {    $scope.error = false;  }  $scope.incomplete = false;  if ($scope.edit && (!$scope.fName.length ||  !$scope.lName.length ||  !$scope.passw1.length || !$scope.passw2.length)) {     $scope.incomplete = true;  }};});JavaScript Code ExplainedScope PropertiesUsed for$scope.fNameModel variable (user first name)$scope.lNameModel variable (user last name)$scope.passw1Model variable (user password 1)$scope.passw2Model variable (user password 2)$scope.usersModel variable (array of users)$scope.editSet to true when user clicks on 'Create user'.$scope.hideformSet to false when user clicks on 'Edit' or 'Create user'.$scope.errorSet to true if passw1 not equal passw2$scope.incompleteSet to true if any field is empty (length = 0)$scope.editUserSets model variables$scope.$watchWatches model variables$scope.testTests model variables for errors and incompleteness❮ PreviousNext ❯|||Below is a complete HTML example, with all AngularJS directives and W3.CSS classes explained.HTML Code    <!DOCTYPE html><html><link rel=""stylesheet"" href=""https://www.w3schools.com/w3css/4/w3.css"">    <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>    <body ng-app=""myApp"" ng-controller=""userCtrl""><div     class=""w3-container""><h3>Users</h3><table class=""w3-table     w3-bordered w3-striped"">  <tr>    <th>Edit</th>        <th>First Name</th>    <th>Last Name</th>  </tr>      <tr ng-repeat=""user in users"">    <td>          <button class=""w3-btn w3-ripple"" ng-click=""editUser(user.id)"">&#9998;     Edit</button>    </td>    <td>{{     user.fName }}</td>    <td>{{ user.lName }}</td>      </tr></table><br><button class=""w3-btn w3-green w3-ripple""     ng-click=""editUser('new')"">&#9998; Create New User</button><form     ng-hide=""hideform"">  <h3 ng-show=""edit"">Create New     User:</h3>  <h3 ng-hide=""edit"">Edit User:</h3>    <label>First     Name:</label>    <input class=""w3-input w3-border""     type=""text"" ng-model=""fName"" ng-disabled=""!edit"" placeholder=""First Name"">  <br>    <label>Last Name:</label>    <input     class=""w3-input w3-border"" type=""text"" ng-model=""lName"" ng-disabled=""!edit""     placeholder=""Last Name"">  <br>    <label>Password:</label>    <input     class=""w3-input w3-border"" type=""password"" ng-model=""passw1""     placeholder=""Password"">  <br>    <label>Repeat:</label>    <input     class=""w3-input w3-border"" type=""password"" ng-model=""passw2""     placeholder=""Repeat Password""> <br><button     class=""w3-btn w3-green w3-ripple"" ng-disabled=""error || incomplete"">&#10004;     Save Changes</button></form></div><script src= ""myUsers.js""></script></body></html>Try it Yourself »Directives (Used Above) ExplainedAngularJS DirectiveDescription<body ng-appDefines an application for the <body> element<body ng-controllerDefines a controller for the <body> element<tr ng-repeatRepeats the <tr> element for each user in users<button ng-clickInvoke the function editUser() when the <button> element is clicked<h3 ng-showShow the <h3>s element if edit = true<h3 ng-hideHide the form if hideform = true, and hide the <h3> element if edit = true<input ng-modelBind the <input> element to the application<button ng-disabledDisables the <button> element if error or incomplete = trueW3.CSS Classes ExplainedElementClassDefines<div>w3-containerA content container<table>w3-tableA table<table>w3-borderedA bordered table<table>w3-stripedA striped table<button>w3-btnA button<button>w3-greenA green button<button>w3-rippleA ripple effect when you click the button<input>w3-inputAn input field<input>w3-borderA border on the input fieldJavaScript CodemyUsers.js angular.module('myApp', []).controller('userCtrl',   function($scope) {$scope.fName = '';$scope.lName = '';$scope.passw1 = '';$scope.passw2 = '';    $scope.users = [{id:1, fName:'Hege', lName:""Pege"" },{id:2, fName:'Kim',  lName:""Pim"" },{id:3, fName:'Sal',  lName:""Smith"" },{id:4, fName:'Jack', lName:""Jones"" },{id:5, fName:'John', lName:""Doe"" },{id:6, fName:'Peter',lName:""Pan"" }];$scope.edit = true;$scope.error = false;$scope.incomplete = false; $scope.hideform = true; $scope.editUser = function(id) { $scope.hideform = false;  if (id == 'new') {    $scope.edit = true;    $scope.incomplete = true;    $scope.fName = '';    $scope.lName = '';    } else {    $scope.edit = false;    $scope.fName = $scope.users[id-1].fName;    $scope.lName = $scope.users[id-1].lName;   }};$scope.$watch('passw1',function() {$scope.test();});$scope.$watch('passw2',function() {$scope.test();});$scope.$watch('fName', function() {$scope.test();});$scope.$watch('lName', function() {$scope.test();});$scope.test = function() {  if ($scope.passw1 !== $scope.passw2) {    $scope.error = true;    } else {    $scope.error = false;  }  $scope.incomplete = false;  if ($scope.edit && (!$scope.fName.length ||  !$scope.lName.length ||  !$scope.passw1.length || !$scope.passw2.length)) {     $scope.incomplete = true;  }};});JavaScript Code ExplainedScope PropertiesUsed for$scope.fNameModel variable (user first name)$scope.lNameModel variable (user last name)$scope.passw1Model variable (user password 1)$scope.passw2Model variable (user password 2)$scope.usersModel variable (array of users)$scope.editSet to true when user clicks on 'Create user'.$scope.hideformSet to false when user clicks on 'Edit' or 'Create user'.$scope.errorSet to true if passw1 not equal passw2$scope.incompleteSet to true if any field is empty (length = 0)$scope.editUserSets model variables$scope.$watchWatches model variables$scope.testTests model variables for errors and incompleteness❮ PreviousNext ❯",W3.CSS,,,"<body ng-app|||Defines an application for the <body> element&&&<body ng-controller|||Defines a controller for the <body> element&&&<tr ng-repeat|||Repeats the <tr> element for each user in users&&&<button ng-click|||Invoke the function editUser() when the <button> element is clicked&&&<h3 ng-show|||Show the <h3>s element if edit = true&&&<h3 ng-hide|||Hide the form if hideform = true, and hide the <h3> element if edit = true&&&<input ng-model|||Bind the <input> element to the application&&&<button ng-disabled|||Disables the <button> element if error or incomplete = true$$$&&&<div>|||w3-container|||A content container&&&<table>|||w3-table|||A table&&&<table>|||w3-bordered|||A bordered table&&&<table>|||w3-striped|||A striped table&&&<button>|||w3-btn|||A button&&&<button>|||w3-green|||A green button&&&<button>|||w3-ripple|||A ripple effect when you click the button&&&<input>|||w3-input|||An input field&&&<input>|||w3-border|||A border on the input field$$$$scope.fName|||Model variable (user first name)&&&$scope.lName|||Model variable (user last name)&&&$scope.passw1|||Model variable (user password 1)&&&$scope.passw2|||Model variable (user password 2)&&&$scope.users|||Model variable (array of users)&&&$scope.edit|||Set to true when user clicks on 'Create user'.&&&$scope.hideform|||Set to false when user clicks on 'Edit' or 'Create user'.&&&$scope.error|||Set to true if passw1 not equal passw2&&&$scope.incomplete|||Set to true if any field is empty (length = 0)&&&$scope.editUser|||Sets model variables&&&$scope.$watch|||Watches model variables&&&$scope.test|||Tests model variables for errors and incompleteness","[['\n<link rel=""stylesheet"" href=""https://www.w3schools.com/w3css/4/w3.css"">\n'], ['\n    <!DOCTYPE html>', '<html>', '<link rel=""stylesheet"" href=""https://www.w3schools.com/w3css/4/w3.css"">', '\n    <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js""></script>', '\n    <body ng-app=""myApp"" ng-controller=""userCtrl"">', '<div \n    class=""w3-container"">', '<h3>Users</h3>', '<table class=""w3-table \n    w3-bordered w3-striped"">', '\xa0 <tr>', '\xa0\xa0\xa0 <th>Edit</th>', '\xa0\xa0\xa0 \n    <th>First Name</th>', '\xa0\xa0\xa0 <th>Last Name</th>', '\xa0 </tr>', '\xa0 \n    <tr ng-repeat=""user in users"">', '\xa0\xa0\xa0 <td>', '\xa0\xa0\xa0\xa0\xa0 \n    <button class=""w3-btn w3-ripple"" ng-click=""editUser(user.id)"">&#9998; \n    Edit</button>', '\xa0\xa0\xa0 </td>', '\xa0\xa0\xa0 <td>{{ \n    user.fName }}</td>', '\xa0\xa0\xa0 <td>{{ user.lName }}</td>', '\xa0 \n    </tr>', '</table>', '<br>', '<button class=""w3-btn w3-green w3-ripple"" \n    ng-click=""editUser(\'new\')"">&#9998; Create New User</button>', '<form \n    ng-hide=""hideform"">', '\xa0 <h3 ng-show=""edit"">Create New \n    User:</h3>', '\xa0 <h3 ng-hide=""edit"">Edit User:</h3>', '\xa0\xa0\xa0 <label>First \n    Name:</label>', '\xa0\xa0\xa0 <input class=""w3-input w3-border"" \n    type=""text"" ng-model=""fName"" ng-disabled=""!edit"" placeholder=""First Name"">', '\xa0 <br>', '\xa0\xa0\xa0 <label>Last Name:</label>', '\xa0\xa0\xa0 <input \n    class=""w3-input w3-border"" type=""text"" ng-model=""lName"" ng-disabled=""!edit"" \n    placeholder=""Last Name"">', '\xa0 <br>', '\xa0\xa0\xa0 <label>Password:</label>', '\xa0\xa0\xa0 <input \n    class=""w3-input w3-border"" type=""password"" ng-model=""passw1"" \n    placeholder=""Password"">', '\xa0 <br>', '\xa0\xa0\xa0 <label>Repeat:</label>', '\xa0\xa0\xa0 <input \n    class=""w3-input w3-border"" type=""password"" ng-model=""passw2"" \n    placeholder=""Repeat Password"">', '\xa0<br>', '<button \n    class=""w3-btn w3-green w3-ripple"" ng-disabled=""error || incomplete"">&#10004; \n    Save Changes</button>', '</form>', '</div>', '<script src= ""myUsers.js""></script>', '\n', '</body>', '</html>']]"
Tutorial,AngularJS Includes,https://www.w3schools.com/angular/angular_includes.asp,"With AngularJS, you can include HTML from an external file.|||With AngularJS, you can include HTML content using the ng-include directive:|||The HTML files you include with the ng-include directive, can also contain AngularJS code:|||Include the file ""myTable.htm"" in your web page, and all AngularJS code will be executed, even the code inside the included file:|||By default, the ng-include directive does not allow you to include files from other domains.|||To include files from another domain, you can add a whitelist of legal files and/or domains in the config function of your application:|||Be sure that the server on the destination allows cross domain file access.",AngularJS Includes|||Include Cross Domains,,,,"[['\n    <body ng-app="""">', '<div ng-include=""\'myFile.htm\'""></div>', '\n    </body> '], ['\n    <table>', '\xa0 <tr ng-repeat=""x in \n    names"">', '\xa0\xa0\xa0 <td>{{ x.Name }}</td>', '\xa0\xa0\xa0 <td>{{ x.Country }}</td>', '\xa0 </tr>', '\n    </table>']]"
Tutorial,AngularJS Animations,https://www.w3schools.com/angular/angular_animations.asp,"AngularJS provides animated transitions, with help from CSS.|||An animation is when the transformation of an HTML element gives you an illusion of motion.|||Check the checkbox to hide the DIV:|||Applications should not be filled with animations, but some animations can make the application easier to understand.|||To make your applications ready for animations, you must include the AngularJS Animate library:|||Then you must refer to the ngAnimate module in your application:|||Or if your application has a name, add ngAnimate as a dependency in your application module:|||The ngAnimate module adds and removes classes.|||The ngAnimate module does not animate your HTML elements, but when ngAnimate notice certain events, like hide or show of an HTML element, the element  gets some pre-defined classes which can be used to make animations.|||The directives in AngularJS who add/remove classes are:|||The ng-show and ng-hide directives adds or removes a ng-hide class value.|||The other directives adds a ng-enter class value when they enter the DOM, and a ng-leave attribute when they are removed from the DOM.|||The ng-repeat directive also adds a ng-move class value when the HTML element changes position. |||In addition, during the animation, the HTML element will have a set of class values, which will be removed when the animation has finished. Example: theng-hide directive will add these class values:|||We can use CSS transitions or CSS animations to animate HTML elements. This tutorial will show you both.|||To learn more about CSS Animation, study ourCSS Transition Tutorial and ourCSS Animation Tutorial.|||CSS transitions allows you to change CSS property values smoothly, from one value to another, over a given duration:|||When the DIV element gets the .ng-hide class, the transition will take 0.5 seconds, and the height will smoothly change from 100px to 0:|||CSS Animations allows you to change CSS property values smoothly, from one value to another, over a given duration:|||When the DIV element gets the .ng-hide class, the myChange animation will run, which will smoothly change the height from 100px to 0:",What Does ngAnimate Do?,ng-show@@@ng-hide@@@ng-class@@@ng-view@@@ng-include@@@ng-repeat@@@ng-if@@@ng-switch|||ng-animate@@@ng-hide-animate@@@ng-hide-add (if the element will be hidden)@@@ng-hide-remove (if the element will be showed)@@@ng-hide-add-active (if the element will be hidden)@@@ng-hide-remove-active (if the element will be showed),,,"[['\n    <body ng-app=""ngAnimate"">', 'Hide the DIV: <input type=""checkbox"" ng-model=""myCheck"">', '\n', '<div ng-hide=""myCheck""></div>', '</body>'], ['\n    <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular-animate.js""></script> '], ['\n    <body ng-app=""ngAnimate""> '], ['\n    <style>', 'div {', '\xa0 transition: all linear 0.5s;', '\xa0\xa0background-color: lightblue;', '\xa0\xa0height: 100px;', '}', '.ng-hide \n    {', '\xa0\xa0height: 0;', '}', '</style>'], ['\n    <style>', '@keyframes myChange {', '\xa0 from {', '\xa0\xa0\xa0 \n    height: 100px;', '\xa0\xa0} to {', '\xa0\xa0\xa0\xa0height: 0;', '\n    \xa0\xa0}', '}', 'div {', '\xa0\xa0height: 100px;', '\xa0\xa0background-color: lightblue;', '}', '\n    div.ng-hide {', '\xa0\xa0animation: 0.5s myChange;', '}', '</style>']]"
Tutorial,AngularJS Routing,https://www.w3schools.com/angular/angular_routing.asp,"The ngRoute module helps your application to become a Single Page Application.|||If you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application), with no page reloading, you can use the ngRoute module.|||The ngRoute module routes your application to different pages without reloading the entire application.|||Navigate to ""red.htm"", ""green.htm"", and ""blue.htm"":|||To make your applications ready for routing, you must include the AngularJS Route module:|||Then you must add the ngRoute as a dependency in the application module:|||Now your application has access to the route module, which provides the $routeProvider.|||Use the $routeProvider to configure different routes in your application:|||Your application needs a container to put the content provided by the routing.|||This container is the ng-view directive.|||There are three different ways to include the ng-view directive in your application:|||Applications can only have one ng-view directive, and this will be the placeholder for all views provided by the route.|||With the $routeProvider you can define what page to display when a user clicks a link.|||Define a $routeProvider:|||Define the $routeProvider using the config method of your application. Work registered in the config method will be performed when the application is loading.|||With the $routeProvider you can also define a controller for each ""view"".|||Add controllers:|||The ""london.htm"" and ""paris.htm"" are normal HTML files, which you can add AngularJS expressions as you would with any other HTML sections of your AngularJS application.|||The files looks like this:|||london.htm|||paris.htm|||In the previous examples we have used the templateUrl property in the $routeProvider.when method.|||You can also use the template property, which allows you to write HTML directly in the property value, and not refer to a page.|||Write templates:|||In the previous examples we have used the when method of the $routeProvider.|||You can also use the otherwise method, which is the default route when none of the others get a match.|||If neither the ""Banana"" nor the ""Tomato"" link has been clicked, let them know:",What do I Need?|||&lt;h1&gt;London&lt;/h1&gt;<br/>&lt;h3&gt;London is the capital city of England.&lt;/h3&gt;<br/>&lt;p&g,,,,"[['\n    <body ng-app=""myApp"">', '<p><a href=""#/!"">Main</a></p>', '<a href=""#!red"">Red</a>', '\n    <a href=""#!green"">Green</a>', '<a href=""#!blue"">Blue</a>', '<div ng-view></div>', '\n', '<script>', 'var app = angular.module(""myApp"", [""ngRoute""]);', '\n    app.config(function($routeProvider) {', '\xa0 $routeProvider', '\xa0 .when(""/"", {', '\xa0\xa0\xa0 templateUrl : ""main.htm""', '\xa0 })', '\n    \xa0 .when(""/red"", {', '\xa0\xa0\xa0 templateUrl : ""red.htm""', '\xa0 })', '\n    \xa0 .when(""/green"", {', '\xa0\xa0\xa0 templateUrl : ""green.htm""', '\xa0  \n    })', '\xa0 .when(""/blue"", {', '\xa0\xa0\xa0 templateUrl : ""blue.htm""', '\xa0  \n    });', '});', '</script>', '</body>'], ['\n    <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular-route.js""></script> '], ['\n    <div ng-view></div> '], ['\n    <ng-view></ng-view> '], ['\n    <div \n    class=""ng-view""></div> '], ['\n    <h1>London</h1>', '<h3>London is the capital city of England.</h3>', '<p>It \n    is the most populous city in the United Kingdom, with a metropolitan area of \n    over 13 million inhabitants.</p>', '<p>{{msg}}</p>'], ['\n    <h1>Paris</h1>', '<h3>Paris is the capital city of France.</h3>', '<p>The Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants.</p>', '<p>{{msg}}</p>']]"
Tutorial,AngularJS Application,https://www.w3schools.com/angular/angular_application.asp,"It is time to create a real AngularJS Application.|||Lets use some of the AngularJS features to make a shopping list, where you can add or remove items:|||{{errortext}}|||Start by making an application called myShoppingList, and add a controller named myCtrl to it.|||The controller adds an array named products to the current $scope.|||In the HTML, we use the ng-repeat directive to display a list using the items in the array.|||So far we have made an HTML list based on the items of an array:|||In the HTML, add a text field, and bind it to the application with the ng-model directive.|||In the controller, make a function named addItem, and use the value of the addMe input field to add an item to the products array.|||Add a button, and give it an ng-click directive that will run the addItem function when the button is clicked.|||Now we can add items to our shopping list:|||We also want to be able to remove items from the shopping list.|||In the controller, make a function named removeItem, which takes the index of the item you want to remove, as a parameter.|||In the HTML, make a <span> element for each item, and give them an ng-click directive which calls the removeItem function with the current $index.|||Now we can remove items from our shopping list:|||The application has some errors, like if you try to add the same item twice, the application crashes. Also, it should not be allowed to add empty items.|||We will fix that by checking the value before adding new items.|||In the HTML, we will add a container for error messages, and write an error message when someone tries to add an existing item.|||A shopping list, with the possibility to write error messages:|||The application works, but could use a better design. We use the W3.CSS stylesheet to style our application.|||Add the W3.CSS stylesheet, and include the proper classes throughout the application, and the result will be the same as the shopping list at the top of this page.|||Style your application using the W3.CSS stylesheet:",Make a Shopping List|||Step 5. Design:,{{x}}×,,,[]
Examples,AngularJS Examples,https://www.w3schools.com/angular/angular_examples.asp,"You can edit the examples online, and click on a button to view the result. |||Basic AngularJS Explained|||Expressions Explained|||Modules Explained|||Directives Explained|||Models Explained|||Controllers Explained|||Scopes Explained|||Filters Explained|||XMLHttpRequest Explained|||Tables Explained|||Angular SQL Explained|||HTML DOM Explained|||HTML Events Explained|||Angular Forms Explained|||API Explained|||W3.CSS Explained|||AngularJS Includes|||AngularJS Animations|||AngularJS Applications",,,,,"[['\n<div ng-app="""">', '\n', '<p>Name: <input type=""text"" ng-model=""name""></p>', '\n    <p>You wrote: {{ name }}</p>\n', '\n', '</div>', '\n']]"
Reference,AngularJS Reference,https://www.w3schools.com/angular/angular_ref_directives.asp,AngularJS modifies the default behavior of some HTML elements.|||Filters are explained in Angular Filters.|||Validation is explained in Angular Validation.|||The Global API is explained in Angular API.,AngularJS Directives on HTML Elements|||AngularJS Validation Properties,$dirty@@@$invalid@@@$error,,"ng-app|||Defines the root element of an application.&&&ng-bind|||Binds the content of an HTML element to application data.&&&ng-bind-html|||Binds the innerHTML of an HTML element to application data, and also removes dangerous code from the HTML string.&&&ng-bind-template|||Specifies that the text content should be replaced with a template.&&&ng-blur|||Specifies a behavior on blur events.&&&ng-change|||Specifies an expression to evaluate when content is being changed by the user.&&&ng-checked|||Specifies if an element is checked or not.&&&ng-class|||Specifies CSS classes on HTML elements.&&&ng-class-even|||Same as ng-class, but will only take effect on even rows.&&&ng-class-odd|||Same as ng-class, but will only take effect on odd rows.&&&ng-click|||Specifies an expression to evaluate when an element is being clicked.&&&ng-cloak|||Prevents flickering when your application is being loaded.&&&ng-controller|||Defines the controller object for an application.&&&ng-copy|||Specifies a behavior on copy events.&&&ng-csp|||Changes the content security policy.&&&ng-cut|||Specifies a behavior on cut events.&&&ng-dblclick|||Specifies a behavior on double-click events.&&&ng-disabled|||Specifies if an element is disabled or not.&&&ng-focus|||Specifies a behavior on focus events.&&&ng-form|||Specifies an HTML form to inherit controls from.&&&ng-hide|||Hides or shows HTML elements.&&&ng-href|||Specifies a url for the <a> element.&&&ng-if|||Removes the HTML element if a condition is false.&&&ng-include|||Includes HTML in an application.&&&ng-init|||Defines initial values for an application.&&&ng-jq|||Specifies that the application must use a library, like jQuery.&&&ng-keydown|||Specifies a behavior on keydown events.&&&ng-keypress|||Specifies a behavior on keypress events.&&&ng-keyup|||Specifies a behavior on keyup events.&&&ng-list|||Converts text into a list (array).&&&ng-maxlength|||Specifies the maximum number of characters allowed in the input field.&&&ng-minlength|||Specifies the minimum number of characters allowed in the input field.&&&ng-model|||Binds the value of HTML controls to application data.&&&ng-model-options|||Specifies how updates in the model are done.&&&ng-mousedown|||Specifies a behavior on mousedown events.&&&ng-mouseenter|||Specifies a behavior on mouseenter events.&&&ng-mouseleave|||Specifies a behavior on mouseleave events.&&&ng-mousemove|||Specifies a behavior on mousemove events.&&&ng-mouseover|||Specifies a behavior on mouseover events.&&&ng-mouseup|||Specifies a behavior on mouseup events.&&&ng-non-bindable|||Specifies that no data binding can happen in this element, or its children.&&&ng-open|||Specifies the open attribute of an element.&&&ng-options|||Specifies <options> in a <select> list.&&&ng-paste|||Specifies a behavior on paste events.&&&ng-pluralize|||Specifies a message to display according to en-us localization rules.&&&ng-readonly|||Specifies the readonly attribute of an element.&&&ng-repeat|||Defines a template for each data in a collection.&&&ng-required|||Specifies the required attribute of an element.&&&ng-selected|||Specifies the selected attribute of an element.&&&ng-show|||Shows or hides HTML elements.&&&ng-src|||Specifies the src attribute for the <img> element.&&&ng-srcset|||Specifies the srcset attribute for the <img> element.&&&ng-style|||Specifies the style attribute for an element.&&&ng-submit|||Specifies expressions to run on onsubmit events.&&&ng-switch|||Specifies a condition that will be used to show/hide child elements.&&&ng-transclude|||Specifies a point to insert transcluded elements.&&&ng-value|||Specifies the value of an input element.$$$&&&a|||AngularJS modifies the <a> element's default behaviors.&&&form|||AngularJS modifies the <form> element's default behaviors.&&&input|||AngularJS modifies the <input> element's default behaviors.&&&script|||AngularJS modifies the <script> element's default behaviors.&&&select|||AngularJS modifies the <select> element's default behaviors.&&&textarea|||AngularJS modifies the <textarea> element's default behaviors.$$$&&&currency|||Format a number to a currency format.&&&date|||Format a date to a specified format.&&&filter|||Select a subset of items from an array.&&&json|||Format an object to a JSON string.&&&limitTo|||Limits an array, or a string, into a specified number of elements/characters.&&&lowercase|||Format a string to lower case.&&&number|||Format a number to a string.&&&orderBy|||Orders an array by an expression.&&&uppercase|||Format a string to upper case.$$$&&&angular.lowercase()|||Converts a string to lowercase&&&angular.uppercase()|||Converts a string to uppercase&&&angular.copy()|||Creates a deep copy of an object or an array&&&angular.forEach()|||Executes a function for each element in an object or array$$$&&&angular.isArray()|||Returns true if the reference is an array&&&angular.isDate()|||Returns true if the reference is a date&&&angular.isDefined()|||Returns true if the reference is defined&&&angular.isElement()|||Returns true if the reference is a DOM element&&&angular.isFunction()|||Returns true if the reference is a function&&&angular.isNumber()|||Returns true if the reference is a number&&&angular.isObject()|||Returns true if the reference is an object&&&angular.isString()|||Returns true if the reference is a string&&&angular.isUndefined()|||Returns true if the reference is undefined&&&angular.equals()|||Returns true if two references are equal$$$&&&angular.fromJson()|||Takes a JSON string and returns an JavaScript object&&&angular.toJson()|||Takes a JavaScript object and returns a JSON string$$$angular.bootstrap()|||Starts AngularJS manually&&&angular.element()|||Wraps an HTML element as an jQuery element&&&angular.module()|||Creates, registers, or retrieves an AngularJS module",[]
