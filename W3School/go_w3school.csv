Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
Go Tutorial,Go Home,https://www.w3schools.com/go/index.php,"Go is a popular programming language.|||Go is used to create computer programs.|||Our ""Try it Yourself"" editor makes it easy to learn Go. You can edit Go code and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||We recommend reading this tutorial, in the sequence listed in the left menu.|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise",Examples in Each Chapter,,,,"[['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() {', '\n    \xa0 fmt.Println(""Hello World!"")', '\n    }', '\n']]"
Go Tutorial,Go Introduction,https://www.w3schools.com/go/go_introduction.php,"Notes:Compilation time refers to translating the code into an executable           programConcurrency is performing multiple things out-of-order, or at the           same time, without affecting the final outcomeStatically typed means that the variable types are known at           compile time|||This tutorial will teach you the basics of Go.|||It is not necessary to have any prior programming experience.",What is Go?|||What is Go Used For?|||Why Use Go?,"Go is a cross-platform, open source programming languageGo can be used   to create high-performance applicationsGo is a fast, statically typed, compiled language that feels like a   dynamically typed, interpreted languageGo was developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson in 2007Go's syntax is similar to C++|||Web development (server-side)@@@Developing network-based programs@@@Developing cross-platform enterprise applications@@@Cloud-native development|||Go is fun and easy to learn@@@Go has fast run time and compilation time@@@Go supports concurrency@@@Go has memory management@@@Go works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)|||Compilation time refers to translating the code into an executable           program@@@Concurrency is performing multiple things out-of-order, or at the           same time, without affecting the final outcome@@@Statically typed means that the variable types are known at           compile time",,Statically typed|||Dynamically typed|||Statically typed&&&Fast run time|||Slow run time|||Fast run time&&&Compiled|||Interpreted|||Compiled&&&Fast compile time|||Interpreted|||Slow compile time&&&Supports concurrency through goroutines and channel|||No built-in concurrency mechanism|||Supports concurrency through threads&&&Has automatic garbage collection|||Has automatic garbage collection|||Does not have automatic garbage collection&&&Does not support classes and objects|||Has classes and objects|||Has classes and objects&&&Does not support inheritance|||Supports inheritance|||Supports inheritance,[]
Go Tutorial,Go Get Started,https://www.w3schools.com/go/go_getting_started.php,"To start using Go, you need two things:|||There are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below).|||You can find the relevant installation files at https://golang.org/dl/.|||Follow the instructions related to your operating system. To check if Go was installed successfully, you can run the following command in a terminal window:|||Which should show the version of your Go installation.|||An IDE (Integrated Development Environment) is used to edit AND compile the code.|||Popular IDE's include Visual Studio Code (VS Code), Vim, Eclipse, and Notepad. These are all free, and they can be used to both edit and debug Go code.|||Note: Web-based IDE's can work as well, but functionality is limited.|||We will use VS Code in our tutorial, which we believe is a good place to start.|||You can find the latest version of VS Code at https://code.visualstudio.com/.|||Let's create our first Go program.|||VS Code is now configured to use Go.|||Open up a terminal window and type:|||Do not worry if you do not understand why we type the above command. Just think of it as something that you always do, and that you will learn more about in a later chapter.|||Create a new file (File > New File). Copy and paste the following code and save the file as helloworld.go (File > Save As):|||Now, run the code: Open a terminal in VS Code and type:|||Congratulations! You have now written and executed your first Go program.|||If you want to save the program as an executable, type and run:|||When learning Go at W3Schools.com, you can use our ""Try it Yourself"" tool. It shows both the code and the result. This will make it easier for you to understand every part as we move forward:|||Code:|||Result:",Learning Go At W3Schools,"A text editor, like VS Code, to write Go code@@@A compiler, like GCC, to translate the Go code into a language that the computer will understand|||Launch the VS Code editor@@@Open the extension manager or alternatively, press Ctrl + Shift + x@@@In the search box, type ""go"" and hit enter@@@Find the Go extension by the GO team at Google and install the extension@@@After the installation is complete, open the command palette by pressing Ctrl + Shift + p@@@Run the Go: Install/Update Tools command@@@Select all the provided tools and click OK",,,"[['\ngo version\n'], ['\n  go mod init example.com/hello'], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() { ', '\n        \xa0 fmt.Println(""Hello World!"") ', '\n      } ', '\n'], ['\n  go run .\\helloworld.go\n'], ['\n  go build .\\helloworld.go\n'], ['\n      package main\n      ', '\n      import (""fmt"")\n      ', '\n', '\n      func main() {\n      ', '\n      \xa0fmt.Println(""Hello World!"")\n      ', '\n      }\n    ']]"
Go Tutorial,Go Syntax,https://www.w3schools.com/go/go_syntax.php,"A Go file consists of the following parts:|||Look at the following code, to understand it better:|||Line 1: In Go, every program is part of a package. We define this using the package keyword. In this example, the program belongs to the main package.|||Line 2: import (""fmt"") lets us import files included in the fmt package.|||Line 3: A blank line. Go ignores white space. Having white spaces in code makes it more readable.|||Line 4: func main() {} is a function. Any code inside its curly brackets {} will be executed.|||Line 5: fmt.Println() is a function made available from the fmt package. It is used to output/print text. In our example it will output ""Hello World!"". |||Note: In Go, any executable code belongs to the   main   package.|||fmt.Println(""Hello World!"") is a statement.|||In Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon "";"". Hitting the Enter key adds "";"" to the end of the line implicitly (does not show up in the source code). The left curly bracket { cannot come at the start of a line.Run the following code and see what happens:Example      package main      import (""fmt"")      func main() {         fmt.Println(""Hello World!"")       } Try it Yourself »Go Compact CodeYou can write more compact code, like shown below (this is not recommended because it makes the code more difficult to read):Example      package main; import (""fmt""); func main() { fmt.Println(""Hello World!"");}Try it Yourself »Go ExercisesTest Yourself With ExercisesExercise:Insert the missing part of the code below to output ""Hello World"".package main   import (""fmt"")func main() {    (""Hello World!"")}Submit Answer »Start the Exercise❮ PreviousNext ❯|||Hitting the Enter key adds "";"" to the end of the line implicitly (does not show up in the source code). |||The left curly bracket { cannot come at the start of a line.|||Run the following code and see what happens:|||You can write more compact code, like shown below (this is not recommended because it makes the code more difficult to read):|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise",,Package declaration@@@Import packages@@@Functions@@@Statements and expressions,,,"[['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() { ', '\n      \xa0\xa0fmt.Println(""Hello World!"") ', '\n      }', '\n'], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() ', '{ ', '\n      \xa0\xa0fmt.Println(""Hello World!"") ', '\n      } ', '\n'], ['\n      package main; import (""fmt""); func main() { fmt.Println(""Hello World!"");}', '\n']]"
Go Tutorial,Go Comments,https://www.w3schools.com/go/go_comments.php,"A comment is a text that is ignored upon execution.|||Comments can be used to explain the code, and to make it more readable.|||Comments can also be used to prevent code execution when testing an alternative code.|||Go supports single-line or multi-line comments.|||Single-line comments start with two forward slashes (//).|||Any text between // and the end of the line is ignored by the compiler (will not be executed).|||The following example uses a single-line comment at the end of a code line:|||Multi-line comments start with /* and ends with */.|||Any text between /* and */ will be ignored by the compiler:|||Tip: It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer comments.|||You can also use comments to prevent the code from being executed. |||The commented code can be saved for later reference and troubleshooting.|||Comments in Go are written with a special character, which one?|||Start the Exercise",Go Multi-line Comments,,,,"[['\n', <em>// This is a comment</em>, '\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n        \xa0\xa0', <em>// This is a comment</em>, '\n        \xa0\xa0fmt.Println(""Hello World!"")', '\n      }', '\n'], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n        \xa0\xa0fmt.Println(""Hello World!"") ', <em>// This is a comment</em>, '\n      }', '\n'], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n        \xa0\xa0', <em>/* The code below will print Hello World</em>, '\n        \xa0\xa0', <em>to the screen, and it is amazing */</em>, '\n        \xa0\xa0fmt.Println(""Hello World!"")', '\n      }', '\n'], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n        \xa0\xa0fmt.Println(""Hello World!"")', '\n        \xa0\xa0', <em>// fmt.Println(""This line does not execute"")</em>, '\n      }', '\n']]"
Go Tutorial,Go Variables,https://www.w3schools.com/go/go_variables.php,"Variables are containers for storing data values.|||In Go, there are different types of variables, for example:|||More about different variable types, will be explained in the Go Data Types chapter.|||In Go, there are two ways to declare a variable:|||Use the var keyword, followed by variable name and type:|||Note: You always have to specify either type or value (or both).|||Use the := sign, followed by the variable value:|||Note:  In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value).|||Note: It is not possible to declare a variable using  :=, without assigning a value to it.|||If the value of a variable is known from the start, you can declare the variable and assign a value to it on one line:|||Note: The variable types of student2 and x is inferred from their values.|||In Go, all variables are initialized. So, if you declare a variable without an initial value, its value will be set to the default value of its type: |||In this example there are 3 variables:|||These variables are declared but they have not been assigned initial values.|||By running the code, we can see that they already have the default values of their respective types:|||It is possible to assign a value to a variable after it is declared. This is helpful for cases the value is not initially known.|||Note: It is not possible to declare a variable using "":="" without assigning a value to it.|||There are some small differences between the var var :=:|||This example shows declaring variables outside of a function, with the var   keyword:|||Since := is used outside of a function, running the program results in an error. |||Result:|||Create a variable named myNum and assign the value 50 to it.|||Start the Exercise",Value Assignment After Declaration|||Example,"int- stores integers (whole numbers), such as 123 or -123@@@float32- stores floating point numbers, with decimals, such as 19.99 or -19.99@@@string - stores text, such as ""Hello World"". String values are surrounded by double quotes@@@bool- stores values with two states: true or false|||a@@@b@@@c|||a is """"@@@b is 0@@@c is false",,"Can be used inside  and outside of functions|||Can only be used inside functions&&&Variable declaration and value assignment can be done separately|||Variable declaration and value assignment cannot be done separately 
    (must be done in the same line)","[['\n        var ', <em>variablename type</em>, ' = ', <em>value</em>, '\n'], ['\n', <em>variablename </em>, ' := ', <em>value</em>, '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var student1 string = ""John"" ', <em>//type is 
    string</em>, ' ', '\n    \xa0\xa0var student2 = ""Jane"" ', <em>//type is inferred</em>, '\n    \xa0\xa0x := 2 ', <em>//type is inferred</em>, '\n', '\xa0\xa0fmt.Println(student1)', '\n    \xa0\xa0fmt.Println(student2)', '\n    \xa0\xa0fmt.Println(x)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a string', '\n    \xa0\xa0var b int', '\n    \xa0\xa0var c bool', '\n', '\n    \xa0\xa0fmt.Println(a)', '\n    \xa0\xa0fmt.Println(b)', '\n    \xa0\xa0fmt.Println(c)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var student1 string', '\n    \xa0\xa0student1 = ""John""', '\n    \xa0\xa0fmt.Println(student1)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n\n    var a int', '\n    var b int = 2', '\n    var c = 3', '\n\n    func main() {', '\n    \xa0\xa0a = 1', '\n    \xa0\xa0fmt.Println(a)', '\n    \xa0\xa0fmt.Println(b)', '\n    \xa0\xa0fmt.Println(c)', '\n    }\n  ']]"
Go Tutorial,Go Constants,https://www.w3schools.com/go/go_constants.php,"If a variable should have a fixed value that cannot be changed, you can use the const keyword.|||The const keyword declares the variable as ""constant"", which means that it is unchangeable and read-only.|||Note: The value of a constant must be assigned when you declare it. |||Here is an example of declaring a constant in Go:|||There are two types of constants:|||Typed constants are declared with a defined type:|||Untyped constants are declared without a type:|||Note: In this case, the type of the constant is inferred from the value (means the compiler decides the type of the constant, based on the value).|||When a constant is declared, it is not possible to change the value later:|||Result:|||Multiple constants can be grouped together into a block for readability:",Go Constants|||Constant Rules|||Multiple Constants Declaration,Constant names follow the same naming rules as variables@@@Constant names are usually written in uppercase letters (for easy identification and differentiation from variables)@@@Constants can be declared both inside and outside of a function|||Typed constants@@@Untyped constants,,,"[['\nconst ', <em>CONSTNAME type</em>, ' = ', <em>value</em>, '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    const PI = 3.14', '\n    func main() {', '\n    \xa0\xa0fmt.Println(PI)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    const A int = 1', '\n    func main() {', '\n    \xa0\xa0fmt.Println(A)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    const A = 1', '\n    func main() {', '\n    \xa0\xa0fmt.Println(A)', '\n    }\n  '], ['\npackage main   ', '\nimport (""fmt"") ', '\nconst (', '  \n\xa0\xa0A int = 1', '\n\xa0\xa0B = 3.14', '\n\xa0\xa0C = ""Hi!""', '\n)', '\nfunc main() {  ', '\n\xa0\xa0fmt.Println(A) ', '\n\xa0\xa0fmt.Println(B) ', '\n\xa0\xa0fmt.Println(C) ', '\n}\n']]"
Go Tutorial,Go Output,https://www.w3schools.com/go/go_output.php,"Go has three functions to output text:|||The Print() function prints its arguments with their default format.|||Print the values of i and j:|||Result:|||If we want to print the arguments in new lines, we need to use \n. |||Result:|||Tip: \n creates new lines.|||It is also possible to only use one Print() for printing multiple variables. |||Result:|||If we want to add a space between string arguments, we need to use "" "": |||Result:||| Print() inserts a space between the arguments if neither   are strings:|||Result:|||The Println() function is similar to Print() with the difference that a whitespace is added between the arguments, and a newline is added at the end:|||Result:|||The Printf() function first formats its argument based on the given formatting verb and then prints them.|||Here we will use two formatting verbs:|||Result:|||Tip: Look at all the formatting verbs in theGo Formatting Verbs chapter. ",The Print() Function|||Example,Print()@@@Println()@@@Printf()|||%v is used to print the value   of the arguments@@@%T is used to print the type   of the arguments,,,"[['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n      \xa0\xa0var i,j string = ""Hello"",""World""', '\n', '\n      \xa0\xa0fmt.Print(i)', '\n      \xa0\xa0fmt.Print(j)', '\n      }\n    '], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n      \xa0\xa0var i,j string = ""Hello"",""World""', '\n', '\n      \xa0\xa0fmt.Print(i, ""\\n"")', '\n      \xa0\xa0fmt.Print(j, ""\\n"")', ' \n      }\n    '], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n      \xa0\xa0var i,j string = ""Hello"",""World""', '\n', '\n      \xa0\xa0fmt.Print(i, ""\\n"",j)', '\n      }\n    '], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n      \xa0\xa0var i,j string = ""Hello"",""World""', '\n', '\n      \xa0\xa0fmt.Print(i, "" "", j)', '\n      }\n    '], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n      \xa0\xa0var i,j = 10,20', '\n', '\n      \xa0\xa0fmt.Print(i,j)', '\n      }\n    '], ['\n      package main', '\n      import (""fmt"")', '\n', '\n      func main() {', '\n      \xa0\xa0var i,j string = ""Hello"",""World""', '\n', '\n      \xa0\xa0fmt.Println(i,j)', '\n      }\n    '], ['\n    package main ', '\n    import (""fmt"")', '\n    func main() {', '\xa0 var i string = ""Hello""', '\xa0 var j int = 15', '\n', '\xa0 fmt.Printf(""i has value: %v and type: %T\\n"", i, i)', '\xa0 \n    fmt.Printf(""j has value: %v and type: %T"", j, j) ', '}\n  ']]"
Go Tutorial,Go Data Types,https://www.w3schools.com/go/go_data_types.php,"Data type is an important concept in programming. Data type specifies the size and type of variable values.|||Go is statically typed, meaning that once a variable type is defined, it can only store data of that type.|||Go has three basic data types:|||This example shows some of the different data types in Go:|||Add the correct data type for the following variables:|||Start the Exercise",,"bool: represents a boolean value and is either true or false@@@Numeric: represents integer types, floating point values,   and complex types@@@string: represents a string value",,,"[['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() {', ' \xa0\xa0var a bool = true \xa0\xa0\xa0\xa0', <em>// Boolean</em>, '\n    \xa0\xa0var b int = 5 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0', <em>// Integer</em>, '\n    \xa0\xa0var c float32 = 3.14 \xa0', <em>// Floating point number</em>, '\n    \xa0\xa0var d string = ""Hi!""\xa0\xa0', <em>// String</em>, ' ', '\n', '\n\n    \xa0\xa0fmt.Println(""Boolean: "", a)', '\n    \xa0\xa0fmt.Println(""Integer: "", b)', '\n    \xa0\xa0fmt.Println(""Float:   \xa0\xa0"", c)', '\n    \xa0\xa0fmt.Println(""String: \xa0"", d)', '\n    }', '\n']]"
Go Tutorial,Go Arrays,https://www.w3schools.com/go/go_arrays.php,"Arrays are used to store multiple values of the same type in a single variable, instead of declaring separate variables for each value.|||In Go, there are two ways to declare an array:|||Note: The length specifies the number of elements   to store in the array. In Go, arrays have a fixed length. The length of the   array is either defined by a number or is inferred (means that the compiler decides the length of the array, based on the number of  values).|||This example declares two arrays (arr1 and arr2) with defined lengths:|||Result:|||This example declares two arrays (arr1 and arr2) with inferred lengths:|||Result:|||This example declares an array of strings:|||Result:|||You can access a specific array element by referring to the index number.|||In Go, array indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.|||This example shows how to access the first and third elements in the   prices array:|||Result:|||You can also change the value of a specific array element by referring to the index number.|||This example shows how to change the value of the third element in the   prices array: |||Result:||| If an array or one of its elements has not been initialized in the code, it is assigned the default value of its type.||| Tip: The default value for int is 0, and the default value for string is """".|||Result:|||It is possible to initialize only specific elements in an array.|||This example initializes only the second and third elements of the array: |||Result:||| The array above has 5 elements.|||The len() function is used to find the length of an array:|||Result:|||Create an array, named cars, of type string:|||Start the Exercise",Go Arrays,1:10 means: assign 10 to array index 1 (second element).@@@2:40 means: assign 40 to array index 2 (third element).,,,"[['\n      var ', <em>array_name = </em>, ' [', <em>length</em>, ']', <em>datatype</em>, '{', <em>values</em>, '} // here length is defined', '\n', 'or', '\n      var ', <em>array_name = </em>, '[...]', <em>datatype</em>, '{', <em>values</em>, '}', <em> </em>, '// here length is inferred'], ['\n', <em>array_name</em>, ' := [', <em>length</em>, ']', <em>datatype</em>, '{', <em>values</em>, '}\xa0// here length \n        is defined', 'or', ' ', <em>array_name</em>, ' := [...]', <em>datatype</em>, '{', <em>values</em>, '}', <em> </em>, '// \n        here length is inferred'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var arr1 =  [3]int{1,2,3}', '\n    \xa0\xa0arr2 := [5]int{4,5,6,7,8}', '\n', '\n    \xa0\xa0fmt.Println(arr1)', '\n    \xa0\xa0fmt.Println(arr2)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var arr1 = [...]int{1,2,3}', '\n    \xa0\xa0arr2 := [...]int{4,5,6,7,8}', '\n', '\n    \xa0\xa0fmt.Println(arr1)', '\n    \xa0\xa0fmt.Println(arr2)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0 var cars = [4]string{""Volvo"", ""BMW"", ""Ford"", ""Mazda""}', '\xa0 \n    fmt.Print(cars)', '}\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0prices := [3]int{10,20,30}', '\n', '\n    \xa0\xa0fmt.Println(prices[0])', '\n    \xa0\xa0fmt.Println(prices[2])', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0prices := [3]int{10,20,30}', '\n', '\n    \xa0\xa0prices[2] = 50', '\n    \xa0\xa0fmt.Println(prices)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0arr1 := [5]int{} //not initialized', '\n    \xa0\xa0arr2 := [5]int{1,2} //partially initialized', '\n    \xa0\xa0arr3 := [5]int{1,2,3,4,5} //fully initialized', '\n', '\n    \xa0\xa0fmt.Println(arr1)', '\n    \xa0\xa0fmt.Println(arr2)', '\n    \xa0\xa0fmt.Println(arr3)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0arr1 := [5]int{1:10,2:40}', '\n', '\n    \xa0\xa0fmt.Println(arr1)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0arr1 := [4]string{""Volvo"", ""BMW"", ""Ford"", ""Mazda""}', '\n    \xa0\xa0arr2 := [...]int{1,2,3,4,5,6}', '\n', '\n    \xa0\xa0fmt.Println(len(arr1))', '\n    \xa0\xa0fmt.Println(len(arr2))', '\n    }\n  ']]"
Go Tutorial,Go Slices,https://www.w3schools.com/go/go_slices.php,"Slices are similar to arrays, but are more powerful and flexible.|||Like arrays, slices are also used to store multiple values of the same type in a single variable.|||However, unlike arrays, the length of a slice can grow and shrink as you see fit.|||In Go, there are several ways to create a slice:|||A common way of declaring a slice is like this:|||The code above declares an empty slice of 0 length and 0 capacity.|||To initialize the slice during declaration, use this:|||The code above declares a slice of integers of length 3 and also the capacity of 3.|||In Go, there are two functions that can be used to return the length and capacity of a slice:|||This example shows how to create slices using the []datatype{values} format:|||Result:|||In the example above, we see that in the first slice (myslice1), the actual elements are not specified, so both the length and capacity of the slice will be zero. In the second slice (myslice2), the elements are specified, and both length and capacity is equal to the number of actual elements specified.|||You can create a slice by slicing an array:|||This example shows how to create a slice from an array:|||Result:|||In the example above myslice is a slice with length 2. It is made from arr1 which is an array with length 6.|||The slice starts from the second element of the array which has value 12. The slice can grow to the end of the array. This means that the capacity of the slice is 4.If myslice started from element 0, the slice capacity would be 6.Create a Slice With The make() FunctionThe make() function can also be used to create a slice.Syntaxslice_name := make([]type, length, capacity)Note: If the capacity parameter is not defined, it will be equal to   length.ExampleThis example shows how to create slices using the make()   function:    package main    import (""fmt"")    func main() {      myslice1 := make([]int, 5, 10)  fmt.Printf(""myslice1 = %v\n"", myslice1)  fmt.Printf(""length =     %d\n"", len(myslice1))  fmt.Printf(""capacity = %d\n"", cap(myslice1))  // with omitted capacity   myslice2 := make([]int, 5)  fmt.Printf(""myslice2 = %v\n"", myslice2)  fmt.Printf(""length =     %d\n"", len(myslice2))  fmt.Printf(""capacity = %d\n"", cap(myslice2))}  Result:    myslice1 = [0 0 0 0 0]length = 5capacity = 10myslice2 = [0 0 0 0     0]length = 5capacity = 5Try it Yourself »❮ PreviousNext ❯|||If myslice started from element 0, the slice capacity would be 6.|||The make() function can also be used to create a slice.|||Note: If the capacity parameter is not defined, it will be equal to   length.|||This example shows how to create slices using the make()   function:|||Result:",Go Slices,Using the []datatype{values} format@@@Create a slice from an array@@@Using the make() function|||len() function - returns the length   of the slice (the number of elements in the slice)@@@cap() function - returns the capacity of   the slice (the number of elements the slice can grow   or shrink to),,,"[['\n', <em>slice_name</em>, ' := []', <em>datatype</em>, '{', <em>values</em>, '}'], ['\nmyslice := []int\n'], ['\nmyslice := []int{1,2,3}'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0 myslice1 := []int{}', '\xa0 fmt.Println(len(myslice1))', '\xa0 \n    fmt.Println(cap(myslice1))', '\xa0 fmt.Println(myslice1)', '\xa0 \n    myslice2 := []string{""Go"", ""Slices"", ""Are"", ""Powerful""}', '\xa0 \n    fmt.Println(len(myslice2))', '\xa0 fmt.Println(cap(myslice2))', '\xa0 \n    fmt.Println(myslice2)', '\n\n    }\n  '], ['\n        var myarray = [length]datatype{values} // An array', '\n        myslice := myarray[start:end]', <em> </em>, '// A slice made from the array', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0arr1 := [6]int{10, 11, 12, 13, 14,15}', '\n    \xa0\xa0myslice := arr1[2:4]', '\n', '\n    \xa0 fmt.Printf(""myslice = %v\\n"", myslice)', '\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice))', '\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice))', '\n    }\n  '], ['\n', <em>slice_name</em>, ' := make([]', <em>type</em>, ', ', <em>length</em>, ', ', <em>capacity</em>, ')', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0 myslice1 := make([]int, 5, 10)', '\xa0 fmt.Printf(""myslice1 = %v\\n"", myslice1)', '\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice1))', '\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice1))', '\n', '\xa0 // with omitted capacity ', '\xa0 myslice2 := make([]int, 5)', '\xa0 fmt.Printf(""myslice2 = %v\\n"", myslice2)', '\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice2))', '\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice2))', '}\n  ']]"
Go Tutorial,Go Operators,https://www.w3schools.com/go/go_operators.php,"Operators are used to perform operations on variables and values.|||The + operator adds together two values, like in the example below:|||Although the + operator is often used to add together two values, it can also be used to add together a variable and a value, or a variable and another variable:|||Go divides the operators into the following groups:",,Arithmetic operators@@@Assignment operators@@@Comparison operators@@@Logical operators@@@Bitwise operators,,,"[['\n    package main', '\n    import (""fmt"")', '\n', 'func main() {', '\n      \xa0\xa0var a = 15 + 25', '\n      \xa0\xa0fmt.Println(a)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n', 'func main() {', '\n      \xa0\xa0var (', '\n      \xa0\xa0\xa0\xa0sum1 = 100 + 50    // 150 (100 + 50)', '\n      \xa0\xa0\xa0\xa0sum2 = sum1 + 250  // 400 (150 + 250)', '\n      \xa0\xa0\xa0\xa0sum3 = sum2 + sum2 // 800 (400 + 400)', '\n      \xa0\xa0)', '\n      \xa0\xa0fmt.Println(sum3)', '\n    }\n  ']]"
Go Tutorial,Go Conditions,https://www.w3schools.com/go/go_conditions.php,"Conditional statements are used to perform different actions based on different conditions.|||A condition can be either true or false.|||Go supports the usual comparison operators from mathematics:|||Additionally, Go supports the usual logical operators:|||You can use these operators or their combinations to create conditions for different decisions.|||Go has the following conditional statements:",,"Less than <@@@Less than or equal <=@@@Greater than >@@@Greater than or equal >=@@@Equal to ==@@@Not equal to !=|||Logical AND &&@@@Logical OR ||@@@Logical NOT !|||Use if to specify a block of code to be executed, if a specified condition is true@@@Use else to specify a block of code to be executed, if the same condition is false@@@Use else if to specify a new condition to test, if the first condition is false@@@Use switch to specify many alternative blocks of code to be executed",,x > y|||Try it »&&&x != y|||Try it »&&& (x > y) && (y > z) |||Try it »&&&(x == y) || z |||Try it »,[]
Go Tutorial,Go Switch,https://www.w3schools.com/go/go_switch.php,"Use the switch statement to select one of many code blocks to be executed.|||The switch statement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a break statement.|||This is how it works:|||The example below uses a weekday number to calculate the weekday name:|||Result:|||The default keyword specifies some code to run if there is no case match:|||Result:|||All the case values should have the same type as the switch expression. Otherwise, the compiler will raise an error:|||Result:|||Insert the missing parts to complete the following switch statement.|||Start the Exercise",Single-Case switch Example|||The default Keyword,"The expression is evaluated once@@@The value of the switch expression is compared with the values of each case@@@If there is a match, the associated block of code is executed@@@The default  keyword is optional. It specifies some code to run if there is no case match",,,"[['\n        switch ', <em>expression</em>, ' { ', '\n        case ', <em>x</em>, ': ', ' \n        \xa0\xa0', <em> // code block </em>, ' ', '\n        case ', <em>y</em>, ': ', ' \n        \xa0\xa0', <em> // code block </em>, ' ', '\n        case ', <em>z</em>, ': ', '\n        ... ', '\n        default: ', '\n        \xa0\xa0', <em> // code block </em>, ' ', ' \n        }    \n      '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() { ', '\n      \xa0\xa0day := 4 ', '\n      \xa0\xa0switch day {', '\n      \xa0\xa0case 1:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Monday"")', '\n      \xa0\xa0case 2:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Tuesday"")', '\n      \xa0\xa0case 3:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Wednesday"")', '\n      \xa0\xa0case 4:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Thursday"")', '\n      \xa0\xa0case 5:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Friday"")', '\n      \xa0\xa0case 6:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Saturday"")', '\n      \xa0\xa0case 7:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Sunday"")', '\n      \xa0\xa0}', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() { ', '\n      \xa0\xa0day := 8 ', '\n      \xa0\xa0switch day {', '\n      \xa0\xa0case 1:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Monday"")', '\n      \xa0\xa0case 2:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Tuesday"")', '\n      \xa0\xa0case 3:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Wednesday"")', '\n      \xa0\xa0case 4:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Thursday"")', '\n      \xa0\xa0case 5:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Friday"")', '\n      \xa0\xa0case 6:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Saturday"")', '\n      \xa0\xa0case 7:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Sunday"")', '\n      \xa0\xa0default:', '\n      \xa0\xa0\xa0\xa0fmt.Println(""Not a weekday"")', '\n      \xa0\xa0}', '\n    }\n  ']]"
Go Tutorial,Go Loops,https://www.w3schools.com/go/go_loops.php,"The for loop loops through a block of code a specified number of times.|||The for loop is the only loop available in Go.|||Loops are handy if you want to run the same code over and over again, each time with a different value.|||Each execution of a loop is called an iteration.|||The for loop can take up to three statements:|||statement1 Initializes the loop counter value.|||statement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.|||statement3 Increases the loop counter value.|||Note: These statements don't need to be present as loops arguments. However, they need to be present in the code in some form.|||This example will print the numbers from 0 to 4:  |||Result:|||This example counts to 100 by tens: |||Result:|||The continue statement is used to skip one or more iterations in the loop. It then continues with the next iteration in the loop.|||This example skips the value of 3:|||Result:|||The break statement is used to break/terminate the loop execution.|||This example breaks out of the loop when i is equal to 3:|||Result:|||Note: continue and break are usually used with conditions.|||It is possible to place a loop inside another loop.|||Here, the ""inner loop"" will be executed one time for each iteration of the ""outer loop"":|||Result:|||The range keyword is used to more easily iterate over an array, slice or map. It returns both the index and the value.|||The range keyword is used like this:|||This example uses range to iterate over an   array and print both the indexes and the values at each (idx   stores the index, val stores the value):|||Result:|||Tip: To only show the value or the index, you can omit the other output using an underscore (_).|||Here, we want to omit the indexes (idx   stores the index, val stores the value):|||Result:|||Here, we want to omit the values (idx   stores the index, val stores the value):|||Result:|||Print i as long as i is less than 6.|||Start the Exercise",,"i:=0; - Initialize the loop counter (i), and set the start value to 0@@@i < 5; - Continue the loop as long as i is less than 5@@@i++ - Increase the loop counter value by 1 for each iteration|||i:=0; - Initialize the loop counter (i), and set the start value to 0@@@i <= 100; - Continue the loop as long as i is less than or equal to 100@@@i+=10 - Increase the loop counter value by 10 for each iteration",,,"[['\n        for ', <em> statement1; statement2; statement3 </em>, '{ ', '\n        \xa0\xa0', <em> // code to be executed for each iteration </em>, ' ', '\n        }\n      '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() { ', '\n      \xa0\xa0for i:=0; i < 5; i++ {', '\n      \xa0\xa0\xa0\xa0fmt.Println(i)', '\n      \xa0\xa0}', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() { ', '\n      \xa0\xa0for i:=0; i <= 100; i+=10 {', '\n      \xa0\xa0\xa0\xa0fmt.Println(i)', '\n      \xa0\xa0}', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() { ', '\n      \xa0 for i:=0; i < 5; i++ {', '\n      \xa0\xa0\xa0\xa0if i == 3 {', '\n      \xa0\xa0\xa0\xa0\xa0\xa0continue', '  \n      \xa0\xa0\xa0\xa0}', '\n      \xa0\xa0\xa0fmt.Println(i)', '\n      \xa0\xa0}', '\n    }', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() { ', '\n      \xa0\xa0for i:=0; i < 5; i++ {', '\n      \xa0\xa0\xa0\xa0if i == 3 {', '\n      \xa0\xa0\xa0\xa0\xa0\xa0break', '  \n      \xa0\xa0\xa0\xa0}', '\n      \xa0\xa0\xa0fmt.Println(i)', '\n      \xa0\xa0}', '\n    }', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() {', '\n      \xa0\xa0adj := [2]string{""big"", ""tasty""}', '\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}', '\n      \xa0\xa0for i:=0; i < len(adj); i++ {', '\n      \xa0\xa0\xa0\xa0for j:=0; j < len(fruits); j++ {', '\n      \xa0\xa0\xa0\xa0\xa0\xa0fmt.Println(adj[i],fruits[j])', '\n      \xa0\xa0\xa0\xa0}', '\n      \xa0\xa0}', '\n    }\n  '], ['\n        for ', <em> index, value := array</em>, '|', <em>slice</em>, '|', <em>map  </em>, '{', '\n        \xa0\xa0', <em> // code to be executed for each iteration </em>, ' ', '\n        }\n      '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() {', '\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}', '\xa0\xa0for \n    idx, val := range fruits {', '\n      \xa0\xa0\xa0\xa0\xa0fmt.Printf(""%v\\t%v\\n"", idx, val)', '\n      \xa0\xa0}', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() {', '\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}', '\xa0\xa0for _, \n    val := range fruits {', '\n      \xa0\xa0\xa0\xa0\xa0fmt.Printf(""%v\\n"", val)', '\n      \xa0\xa0}', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n', '\n    func main() {', '\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}', '\n      \xa0\xa0for idx, _ := range fruits {', '\n      \xa0\xa0\xa0\xa0\xa0fmt.Printf(""%v\\n"", idx)', '\n      \xa0\xa0}', '\n    }\n  ']]"
Go Tutorial,Go Functions,https://www.w3schools.com/go/go_functions.php,"A function is a block of statements that can be used repeatedly in a program.|||A function will not execute automatically when a page loads.|||A function will be executed by a call to the function.|||To create (often referred to as declare) a function, do the following:|||Functions are not executed immediately. They are ""saved for later use"", and will be executed when they are called.|||In the example below, we create a function named ""myMessage()"". The opening curly brace ( { ) indicates the beginning of the function code, and the closing curly brace ( } ) indicates the end of the function. The function outputs ""I just got executed!"". To call the function, just write its name followed by two parentheses ():|||Result:|||A function can be called multiple times.|||Result:|||Tip: Give the function a name that reflects what the function does!|||Create a function named myFunction and call it inside main().|||Start the Exercise",Naming Rules for Go Functions,"Use the func keyword.@@@Specify a name for the function, followed by parentheses ().@@@Finally, add code that defines what the function should do, inside curly braces {}.|||A function name must start with a letter@@@A function name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _   )@@@Function names are case-sensitive@@@A function name cannot contain spaces@@@If the function name consists of multiple words, techniques introduced for multi-word variable naming   can be used",,,"[['\n        func ', <em>FunctionName</em>, '() {', '\n        \xa0\xa0', <em>// code to be executed</em>, ' ', '\n        } ', '\n'], ['\n      package main', '\n      import (""fmt"")', '\n', 'func myMessage() { ', '\n      \xa0\xa0fmt.Println(""I just got executed!"")', '\n      } ', '\n      \n      func main() {', '\n      \xa0\xa0myMessage() // call the function', '\n      }\n  '], ['\n      package main', '\n      import (""fmt"")', '\n', 'func FunctionName() { ', '\n      \xa0\xa0fmt.Println(""I just got executed!"")', '\n      } ', '\n      \n      func main() {', '\n      \xa0\xa0myMessage()', '\n      \xa0\xa0myMessage()', '\n      \xa0\xa0myMessage()', '\n      }\n  ']]"
Go Tutorial,Go Struct,https://www.w3schools.com/go/go_struct.php,"A struct (short for structure) is used to create a collection of members of different data types, into a single variable.|||While arrays are used to store multiple values of the same data type into a single variable, structs are used to store multiple values of different data types into a single variable.|||A struct can be useful for grouping data together to create records.|||To declare a structure in Go, use the type and struct keywords:|||Here we declare a struct type Person   with the following members: name,   age, job and salary:|||Tip: Notice that the struct members above have different data types. name and job is of type string, while age and salary is of type int.|||To access any member of a structure, use the dot operator (.) between the structure variable name and the structure member:|||Result:|||You can also pass a structure as a function argument, like this:|||Result:",,,,,"[['\n        type ', <em>struct_name</em>, ' struct {', '\xa0 ', <em>member1</em>, ' ', <em>
        datatype</em>, ';', '\n        \xa0 ', <em>member2</em>, ' ', <em>datatype</em>, ';', '\xa0 ', <em>member3</em>, ' ', <em>
        datatype</em>, ';', '\xa0 ...', '}'], ['\n    type Person struct {', '\xa0 name string', '\xa0 \n    age int', '\xa0 job string', '\xa0 salary int', '}\n  '], ['\n    package main', '\n    import (""fmt"")', 'type Person struct {', '\xa0 name string', '\xa0 \n    age int', '\xa0 job string', '\xa0 salary int', '}', '\n    func main() {', '\n    \xa0 var pers1 Person', '\xa0 var pers2 Person', '\xa0 // Pers1 \n    specification', '\xa0 pers1.name = ""Hege""', '\xa0 \n    pers1.age = 45', '\xa0 pers1.job = ""Teacher""', '\xa0 pers1.salary = \n    6000', '\xa0 // Pers2 specification', '\xa0 pers2.name = ""Cecilie""', '\xa0 \n    pers2.age = 24', '\xa0 pers2.job = ""Marketing""', '\xa0 pers2.salary = \n    4500', '\xa0 // Access and print Pers1 info ', '\xa0 \n    fmt.Println(""Name: "", pers1.name)', '\xa0 fmt.Println(""Age: "", pers1.age)', '\n    \xa0 fmt.Println(""Job: "", pers1.job)', '\n    \xa0 fmt.Println(""Salary: "", pers1.salary)', '\xa0 // \n    Access and print Pers2 info ', '\xa0 \n    fmt.Println(""Name: "", pers2.name)', '\xa0 fmt.Println(""Age: "", pers2.age)', '\n    \xa0 fmt.Println(""Job: "", pers2.job)', '\n    \xa0 fmt.Println(""Salary: "", pers2.salary)', '}\n  '], ['\n    package main', '\n    import (""fmt"")', 'type Person struct {', '\xa0 name string', '\xa0 \n    age int', '\xa0 job string', '\xa0 salary int', '}', '\n    func main() {', '\n    \xa0 var pers1 Person', '\xa0 var pers2 Person', '\xa0 // Pers1 \n    specification', '\xa0 pers1.name = ""Hege""', '\xa0 \n    pers1.age = 45', '\xa0 pers1.job = ""Teacher""', '\xa0 pers1.salary = \n    6000', '\xa0 // Pers2 specification', '\xa0 pers2.name = ""Cecilie""', '\xa0 \n    pers2.age = 24', '\xa0 pers2.job = ""Marketing""', '\xa0 pers2.salary = \n    4500', '\xa0 // Print Pers1 info by calling a function', '\xa0 printPerson(pers1)', '\n', '\xa0 // Print Pers2 info by calling a function', '\xa0 printPerson(pers2)', '}', 'func printPerson(pers Person) {', '\n    \xa0 \n    fmt.Println(""Name: "", pers.name)', '\xa0 fmt.Println(""Age: "", pers.age)', '\n    \xa0 fmt.Println(""Job: "", pers.job)', '\n    \xa0 fmt.Println(""Salary: "", pers.salary)', '}\n  ']]"
Go Tutorial,Go Maps,https://www.w3schools.com/go/go_maps.php,"Maps are used to store data values in key:value pairs.|||Each element in a map is a key:value pair.|||A map is an unordered and changeable collection that does not allow duplicates.|||The length of a map is the number of its elements. You can find it using the len() function.|||The default value of a map is nil.|||Maps hold references to an underlying hash table.|||Go has multiple ways for creating maps.|||This example shows how to create maps in Go. Notice the order in the code and in the output|||Result:|||Note: The order of the map elements defined in the code is different from the way that they are stored. The data are stored in a way to have efficient data retrieval from the map.|||This example shows how to create maps in Go using the make()function.|||Result:|||There are two ways to create an empty map. One is by using the make()function and the other is by using the following syntax.|||Note: The make()function is the right way to create an empty map. If you make an empty map in a different way and write to it, it will causes a runtime panic.|||This example shows the difference between declaring an empty map using with the make()function and without it.|||Result:|||The map key can be of any data type for which the equality operator (==) is defined. These include:|||Invalid key types are:|||These types are invalid because the equality operator (==) is not defined for them.|||The map values can be any type.|||You can access map elements by:|||Result:|||Updating or adding an elements are done by:|||This example shows how to update and add elements to a map.|||Result:|||Removing elements is done using the delete() function.|||Result:|||You can check if a certain key exists in a map using:|||If you only want to check the existence of a certain key, you can use the blank identifier (_) in place of val.|||Result:|||In this example, we checked for existence of different keys in the map.|||The key ""color"" does not exist in the map. So the value is an empty string ('').|||The ok2 variable is used to find out if the key exist or not. Because we would have got the same value if the value of the ""color"" key was empty. This is the case for val3.|||Maps are references to hash tables.|||If two map variables refer to the same hash table, changing the content of one variable affect the content of the other.|||Result:|||You can use range to iterate over maps.|||This example shows how to iterate over the elements in a map. Note the order of the elements in the output.|||Result:|||Maps are unordered data structures. If you need to iterate over a map in a specific order, you must have a separate data structure that specifies that order. |||Result:",,Booleans@@@Numbers@@@Strings@@@Arrays@@@Pointers@@@Structs@@@Interfaces (as long as the dynamic type supports equality)|||Slices@@@Maps@@@Functions,,,"[['\n        var ', <em>a</em>, ' = map[KeyType]ValueType{', <em>key1</em>, ':', <em>value1</em>, ', ', <em>key2</em>, ':', <em>value2</em>, ',...}', '\n', <em>b</em>, ' := map[KeyType]ValueType{', <em>key1</em>, ':', <em>value1</em>, ', ', <em>key2</em>, ':', <em>value2</em>, ',...}', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = map[string]string{""brand"": ""Ford"", ""model"": ""Mustang"", ""year"": ""1964""}', '\n    \xa0\xa0b := map[string]int{""Oslo"": 1, ""Bergen"": 2, ""Trondheim"": 3, ""Stavanger"": 4}', '\n', '\n    \xa0\xa0fmt.Printf(""a\\t%v\\n"", a)', '\n    \xa0\xa0fmt.Printf(""b\\t%v\\n"", b)', '\n    }\n  '], ['\n    var ', <em>a</em>, ' = make(map[KeyType]ValueType)', '\n', <em>b</em>, ' := make(map[KeyType]ValueType)', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = make(map[string]string) ', <em>// The map is empty now</em>, '\n    \xa0\xa0a[""brand""] = ""Ford""', '\n\t  \xa0\xa0a[""model""] = ""Mustang""', '\n\t  \xa0\xa0a[""year""] = ""1964""', '\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0', <em>// a is no longer empty</em>, '\n    \xa0\xa0b := make(map[string]int)', '\n    \xa0\xa0b[""Oslo""] = 1', '\n    \xa0\xa0b[""Bergen""] = 2', '\n    \xa0\xa0b[""Trondheim""] = 3', '\n    \xa0\xa0b[""Stavanger""] = 4', '\n', '\n    \xa0\xa0fmt.Printf(""a\\t%v\\n"", a)', '\n    \xa0\xa0fmt.Printf(""b\\t%v\\n"", b)', '\n    }\n  '], ['\n    var ', <em>a</em>, ' map[KeyType]ValueType', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = make(map[string]string)', '\n    \xa0\xa0var b map[string]string ', <em></em>, '\n', '\n\t  \xa0\xa0fmt.Println(a == nil)', '\n    \xa0\xa0fmt.Println(b == nil)', '\n    }\n  '], ['\n', <em>value</em>, ' = ', <em>map_name</em>, '[key]', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = make(map[string]string)', '\n    \xa0\xa0a[""brand""] = ""Ford""', '\n\t  \xa0\xa0a[""model""] = ""Mustang""', '\n\t  \xa0\xa0a[""year""] = ""1964""', '\n', '\n    \xa0\xa0fmt.Printf(a[""brand""])', '\n    }\n  '], ['\n', <em>map_name</em>, '[key] = value', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = make(map[string]string)', '\n    \xa0\xa0a[""brand""] = ""Ford""', '\n\t  \xa0\xa0a[""model""] = ""Mustang""', '\n\t  \xa0\xa0a[""year""] = ""1964""', '\n', '\n    \xa0\xa0fmt.Println(a)', '\n', '\n    \xa0\xa0a[""year""] = ""1970"" ', <em>// Updating an element</em>, '\n\t  \xa0\xa0a[""color""] = ""red"" ', <em>// Adding an element</em>, '\n', '\n    \xa0\xa0fmt.Println(a)', '\n    }\n  '], ['\n        delete(', <em>map_name</em>, ', key)', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = make(map[string]string)', '\n    \xa0\xa0a[""brand""] = ""Ford""', '\n\t  \xa0\xa0a[""model""] = ""Mustang""', '\n\t  \xa0\xa0a[""year""] = ""1964""', '\n', '\n    \xa0\xa0fmt.Println(a)', '\n', '\n    \xa0\xa0delete(a,""year"")', '\n', '\n    \xa0\xa0fmt.Println(a)', '\n    }\n  '], ['\n', <em>val</em>, ', ', <em>ok</em>, ' :=', <em>map_name</em>, '[key]', '\n'], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = map[string]string{""brand"": ""Ford"", ""model"": ""Mustang"", ""year"": ""1964"", ""day"":""""}', '\n', '\n    \xa0\xa0val1, ok1 := a[""brand""]\xa0', <em>// Checking for existing key and its value</em>, '\n    \xa0\xa0val2, ok2 := a[""color""]\xa0', <em>// Checking for non-existing key and its value</em>, '\n    \xa0\xa0val3, ok3 := a[""day""]', <em>   // Checking for existing key and its value</em>, '\n    \xa0\xa0_, ok4 := a[""model""]\xa0\xa0\xa0\xa0', <em>// Only checking for existing key and not its value</em>, '\n', '\n    \xa0\xa0fmt.Println(val1, ok1)', '\n    \xa0\xa0fmt.Println(val2, ok2)', '\n    \xa0\xa0fmt.Println(val3, ok3)', '\n    \xa0\xa0fmt.Println(ok4)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0var a = map[string]string{""brand"": ""Ford"", ""model"": ""Mustang"", ""year"": ""1964""}', '\n    \xa0\xa0b := a ', '\n', '\n    \xa0\xa0fmt.Println(a)', '\n\t  \xa0\xa0fmt.Println(b)', '\n', '\n    \xa0\xa0b[""year""] = ""1970""', '\n    \xa0\xa0fmt.Println(""After change to b:"")', '\n', '\n    \xa0\xa0fmt.Println(a)', '\n    \xa0\xa0fmt.Println(b)', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0a := map[string]int{""one"": 1, ""two"": 2, ""three"": 3, ""four"": 4}', '\n    \xa0\xa0for k, v := range a {', '\n    \xa0\xa0\xa0\xa0fmt.Printf(""%v : %v, "", k, v)', '\n    \xa0\xa0}', '\n    }\n  '], ['\n    package main', '\n    import (""fmt"")', '\n    func main() {', '\n    \xa0\xa0a := map[string]int{""one"": 1, ""two"": 2, ""three"": 3, ""four"": 4}', '\n    \xa0\xa0var b = []string\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0', <em>// defining the order</em>, '\n    \xa0\xa0b = append(b, ""one"", ""two"", ""three"", ""four"")', '\n', '\n    \xa0\xa0for k, v := range a {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0', <em>// loop with no order</em>, '\n    \xa0\xa0\xa0\xa0fmt.Printf(""%v : %v, "", k, v)', '\n    \xa0\xa0}', '\n', '\n    \xa0\xa0fmt.Println()', '\n', '\n    \xa0\xa0for _, element := range b {\xa0\xa0', <em>// loop with the defined order</em>, '\n    \xa0\xa0\xa0\xa0fmt.Printf(""%v : %v, "", element, a[element])', '\n    \xa0\xa0}', '\n    }\n  ']]"
Go Exercises,Go Exercises,https://www.w3schools.com/go/go_exercises.php,"You can test your Go skills with W3Schools' Exercises.|||We have gathered a variety of Go exercises (with answers) for each Go Chapter.|||Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start Go Exercises ❯|||If you don't know Go, we suggest that you read our Go   Tutorial from scratch.",,,,,[]
Go Exercises,Go Compiler,https://www.w3schools.com/go/go_compiler.php,"With our online Go compiler, you can edit Go code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you don't know Go,  we suggest that you read our Go Tutorial from scratch.",Go Compiler (Editor)|||Go Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
