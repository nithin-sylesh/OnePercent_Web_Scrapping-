Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
Python Tutorial,Python HOME,https://www.w3schools.com/python/default.asp,"Python is a popular programming language.|||Python can be used on a server to create web applications.|||With our ""Try it Yourself"" editor, you can edit Python code and view the result.|||Click on the ""Try it Yourself"" button to see how it works.|||In our File Handling section you will learn how to open, read, write, and delete files.|||Python File Handling|||In our database section you will learn how to access and work with MySQL and MongoDB databases:|||Python MySQL Tutorial|||Python MongoDB Tutorial|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise|||Learn by examples! This tutorial supplements all explanations with clarifying examples.|||See All Python Examples|||Test your Python skills with a quiz.|||Python Quiz|||You will also find complete function and method references:|||Reference Overview|||Built-in Functions|||String Methods|||List/Array Methods|||Dictionary Methods|||Tuple Methods|||Set Methods|||File Methods|||Python Keywords|||Python Exceptions|||Python Glossary|||Random Module|||Requests Module|||Math Module|||CMath Module|||Download Python from the official Python web site:  https://python.org|||Get certified by completing the  course",Learn Python|||Learning by Examples,,,,"[['\nprint(""Hello, World!"")\n']]"
Python Tutorial,Python Intro,https://www.w3schools.com/python/python_intro.asp,"Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.|||It is used for:",What is Python?|||What can Python do?|||Why Python?|||Good to know|||Python Syntax compared to other programming languages,"web development (server-side), @@@software development, @@@mathematics,@@@system scripting.|||Python can be used on a server to create web applications.@@@Python can be used alongside software to create workflows.@@@Python can connect to database systems. It can also read and modify files.@@@Python can be used to handle big data and perform complex mathematics.@@@Python can be used for rapid prototyping, or for production-ready software development.|||Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).@@@Python has a simple syntax similar to the English language.@@@Python has syntax that allows developers to write programs with fewer lines than some other programming languages.@@@Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.@@@Python can be treated in a procedural way, an object-oriented way or a functional way.|||The most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.@@@In this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.|||Python was designed for readability, and has some similarities to the English language with influence from mathematics.@@@Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.@@@Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.",,,"[['\nprint(""Hello, World!"")\n']]"
Python Tutorial,Python Get Started,https://www.w3schools.com/python/python_getstarted.asp,"Many PCs and Macs will have python already installed.|||To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):|||To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:|||If you find that you do not have Python installed on your computer, then you can download it for free from the following website: https://www.python.org/|||Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.|||The way to run a python file is like this on the command line:|||Where ""helloworld.py"" is the name of your python file.|||Let's write our first Python file, called helloworld.py, which can be done in any text editor.|||helloworld.py|||Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:|||The output should read:|||Congratulations, you have written and executed your first Python program.|||To test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.|||Type the following on the Windows, Mac or Linux command line:|||From there you can write any python, including our hello world example from earlier in the tutorial:|||Which will write ""Hello, World!"" in the command line:|||Whenever you are done in the python command line, you can simply type the following to quit the python command line interface:",,,,,"[['\nprint(""Hello, World!"")\n']]"
Python Tutorial,Python Syntax,https://www.w3schools.com/python/python_syntax.asp,"As we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:|||Or by creating a python file on the server, using the .py file extension, and running it in the Command Line:|||Indentation refers to the spaces at the beginning of a code line.|||Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.|||Python uses indentation to indicate a block of code.|||Python will give you an error if you skip the indentation:|||Syntax Error:|||The number of spaces is up to you as a programmer, but it has to be at least one.|||You have to use the same number of spaces in the same block of code, otherwise Python will give you an error:|||Syntax Error:|||In Python, variables are created when you assign a value to it:ExampleVariables in Python:  x = 5y = ""Hello, World!""Try it Yourself »Python has no command for declaring a variable.You will learn more about variables in the Python Variables chapter.CommentsPython has commenting capability for the purpose of in-code documentation.Comments start with a #, and Python will render the rest of the line as a comment:ExampleComments in Python:#This is a comment.print(""Hello, World!"")Try it Yourself »Test Yourself With ExercisesExercise:Insert the missing part of the code below to output ""Hello World"".(""Hello World"")Submit Answer »Start the Exercise❮ PreviousNext ❯|||Variables in Python:|||Python has no command for declaring a variable.|||You will learn more about variables in the Python Variables chapter.|||Python has commenting capability for the purpose of in-code documentation.|||Comments start with a #, and Python will render the rest of the line as a comment:ExampleComments in Python:#This is a comment.print(""Hello, World!"")Try it Yourself »Test Yourself With ExercisesExercise:Insert the missing part of the code below to output ""Hello World"".(""Hello World"")Submit Answer »Start the Exercise❮ PreviousNext ❯|||Comments in Python:|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise",,,,,"[['\n  if 5 > 2:', '\xa0\nprint(""Five is greater than two!"")\n'], ['\n  if 5 > 2:', '\xa0print(""Five is greater than two!"")\xa0\n', 'if 5 > 2:', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print(""Five is greater than two!"")\xa0\n'], ['\n  x = 5', 'y = ""Hello, World!""\n'], ['\n#This is a comment.', '\nprint(""Hello, World!"")\n']]"
Python Tutorial,Python Comments,https://www.w3schools.com/python/python_comments.asp,"Comments can be used to explain Python code.|||Comments can be used to make the code more readable.|||Comments can be used to prevent execution when testing code.|||Comments starts with a #, and Python will ignore them:|||Comments can be placed at the end of a line, and Python will ignore the rest of the line:|||A comment does not have to be text that explains the code, it can also be used to prevent Python from executing code:|||Python does not really have a syntax for multi line comments.|||To add a multiline comment you could insert a # for each line:|||Or, not quite as intended, you can use a multiline string.|||Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:|||As long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment.|||Comments in Python are written with a special character, which one?|||Start the Exercise",Multi Line Comments,,,,"[['\n#This is a comment', '\nprint(""Hello, World!"")\n'], ['\nprint(""Hello, World!"") #This is a comment\n'], ['\n  #print(""Hello, World!"")', 'print(""Cheers, Mate!"")'], ['\n  #This is a comment', '#written in', '#more than just one line', 'print(""Hello, \n  World!"")\n'], ['\n  """"""', 'This is a comment', 'written in ', 'more than just \n  one line', '""""""', 'print(""Hello, World!"")']]"
Python Tutorial,Python Variables,https://www.w3schools.com/python/python_variables.asp,"Variables are containers for storing data values.|||Python has no command for declaring a variable.|||A variable is created the moment you first assign a value to it.|||Variables do not need to be declared with any particular type, and can even change type after they have been set.|||If you want to specify the data type of a variable, this can be done with casting.|||You can get the data type of a variable with the type() function.|||String variables can be declared either by using single or double quotes:|||Variable names are case-sensitive.|||This will create two variables:",,,,,"[['\nx = 5', '\ny = ""John""', '\nprint(x)', '\nprint(y)\n'], ['\nx = 4\xa0\xa0\xa0\xa0\xa0\xa0 # x is of type int', '\nx = ""Sally"" # x is now of type str', '\nprint(x)\n'], [""\nx = \n  str(3)\xa0\xa0\xa0 # x will be '3'"", 'y = int(3)\xa0\xa0\xa0 # y \n  will be 3', 'z = float(3)\xa0 # z will be 3.0'], ['\n  x = 5', 'y = ""John""', 'print(type(x))', 'print(type(y))'], ['\nx = ""John""', '# is the same as', ""x = \n  'John'\n""], ['\n  a = 4', 'A = \n  ""Sally""', '#A will not overwrite a']]"
Python Tutorial,Python Data Types,https://www.w3schools.com/python/python_datatypes.asp,"In programming, data type is an important concept.|||Variables can store data of different types, and different types can do different things.|||Python has the following data types built-in by default, in these categories:|||You can get the data type of any object by using the type() function:|||Print the data type of the variable x:|||In Python, the data type is set when you assign a value to a variable:|||If you want to specify the data type, you can use the following constructor functions:|||The following code example would print the data type of x, what data type would that be?|||Start the Exercise",Exercise:,,,"Numeric Types:|||int, float,
    complex&&&Sequence Types:|||list, tuple, 
    range&&&Mapping Type:|||dict&&&Set Types:|||set, frozenset&&&Boolean Type:|||bool&&&Binary Types:|||bytes, bytearray, 
    memoryview$$$&&&x = ""Hello World""|||str|||Try it »&&&x = 20|||int|||Try it »&&&x = 20.5|||float|||Try it »&&&x = 1j|||complex|||Try it »&&&x = [""apple"", ""banana"", ""cherry""]|||list|||Try it »&&&x = (""apple"", ""banana"", ""cherry"")|||tuple|||Try it »&&&x = range(6)|||range|||Try it »&&&x = {""name"" : ""John"", ""age"" : 36}|||dict|||Try it »&&&x = {""apple"", ""banana"", ""cherry""}|||set|||Try it »&&&x = frozenset({""apple"", ""banana"", ""cherry""})|||frozenset|||Try it »&&&x = True|||bool|||Try it »&&&x = b""Hello""|||bytes|||Try it »&&&x = bytearray(5)|||bytearray|||Try it »&&&x = memoryview(bytes(5))|||memoryview|||Try it »$$$x = str(""Hello World"")|||str|||Try it »&&&x = int(20)|||int|||Try it »&&&x = float(20.5)|||float|||Try it »&&&x = complex(1j)|||complex|||Try it »&&&x = list((""apple"", ""banana"", ""cherry""))|||list|||Try it »&&&x = tuple((""apple"", ""banana"", ""cherry""))|||tuple|||Try it »&&&x = range(6)|||range|||Try it »&&&x = dict(name=""John"", age=36)|||dict|||Try it »&&&x = set((""apple"", ""banana"", ""cherry""))|||set|||Try it »&&&x = frozenset((""apple"", ""banana"", ""cherry""))|||frozenset|||Try it »&&&x = bool(5)|||bool|||Try it »&&&x = bytes(5)|||bytes|||Try it »&&&x = bytearray(5)|||bytearray|||Try it »&&&x = memoryview(bytes(5))|||memoryview|||Try it »","[['\nx = 5', '\nprint(type(x))\n']]"
Python Tutorial,Python Numbers,https://www.w3schools.com/python/python_numbers.asp,"There are three numeric types in Python:|||Variables of numeric types are created when you assign a value to them:|||To verify the type of any object in Python, use the type() function:|||Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length.|||Integers:|||Float, or ""floating point number"" is a number, positive or negative, containing one or more decimals.|||Floats:|||Float can also be scientific numbers with an ""e"" to indicate the power of 10.|||Floats:|||Complex numbers are written with a ""j"" as the imaginary part:|||Complex:|||You can convert from one type to another with the int(), float(), and complex() methods:|||Convert from one type to another:|||Note: You cannot convert complex numbers into another number type.|||Python does not have a random() function to make a random number, but Python has a built-in module calledrandom that can be used to make random numbers:|||Import the random module, and display a random number between 1 and 9:|||In our Random Module Reference you will learn more about the Random module.|||Insert the correct syntax to convert x into a floating point number.|||Start the Exercise",Example,int@@@float@@@complex,,,"[['\nx = 1\xa0\xa0\xa0 \n  # int', 'y = 2.8\xa0 # float', 'z = 1j\xa0\xa0 # complex', '\n'], ['\n  print(type(x))', 'print(type(y))', 'print(type(z))', '\n'], ['\nx = 1', 'y = 35656222554887711', 'z = \n  -3255522', 'print(type(x))', 'print(type(y))', 'print(type(z))'], ['\nx = 1.10', 'y = 1.0', 'z = -35.59', 'print(type(x))', 'print(type(y))', 'print(type(z))'], ['\n  x = 35e3', 'y = 12E4', 'z = -87.7e100', 'print(type(x))', 'print(type(y))', '\n  print(type(z))'], ['\n  x = 3+5j', 'y = 5j', 'z = -5j', 'print(type(x))', 'print(type(y))', '\n  print(type(z))'], ['\n  x = 1\xa0\xa0\xa0 # int', 'y = 2.8\xa0 # float', 'z = 1j\xa0\xa0 # complex', '#convert from int to float:', '\n  a = float(x)', '#convert from float to int:', '\n  b = int(y)', '#convert from int to complex:', 'c = complex(x)', 'print(a)', 'print(b)', '\n  print(c)', 'print(type(a))', 'print(type(b))', '\n  print(type(c))'], ['\n  import random', 'print(random.randrange(1, 10))']]"
Python Tutorial,Python Casting,https://www.w3schools.com/python/python_casting.asp,"There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.|||Casting in python is therefore done using constructor functions:|||Integers:|||Floats:|||Strings:",,"int() - constructs an integer number from an integer literal, a float literal (by removing     all decimals), or a string literal (providing the string represents a whole number)@@@float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)@@@str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals",,,"[['\nx = int(1)\xa0\xa0 # x will be 1', '\ny = int(2.8) # y will be 2', '\nz = int(""3"") # z will be 3', '\n'], ['\nx = float(1)\xa0\xa0\xa0\xa0 # x will be 1.0', '\ny = float(2.8)\xa0\xa0 # y will be 2.8', '\nz = float(""3"")\xa0\xa0 # z will be 3.0', '\nw = float(""4.2"") # w will be 4.2', '\n'], ['\nx = str(""s1"") # x will be \'s1\'', ""\ny = str(2)\xa0\xa0\xa0 # y will be '2'"", ""\nz = str(3.0)\xa0 # z will be '3.0'\n""]]"
Python Tutorial,Python Strings,https://www.w3schools.com/python/python_strings.asp,"Strings in python are surrounded by either single quotation marks, or double quotation marks.|||'hello' is the same as ""hello"".|||You can display a string literal with the print() function:|||Assigning a string to a variable is done with the variable name followed by an equal sign and the string:|||You can assign a multiline string to a variable by using three quotes:|||You can use three double quotes:|||Or three single quotes:|||Note: in the result, the line breaks are inserted at the same position as in the code.|||Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.|||However, Python does not have a character data type, a single character is simply a string with a length of 1.|||Square brackets can be used to access elements of the string.|||Get the character at position 1 (remember that the first character has the position 0):|||Since strings are arrays, we can loop through the characters in a string, with a for loop.|||Loop through the letters in the word ""banana"":|||Learn more about For Loops in our Python For Loops chapter.|||To get the length of a string, use the len() function.|||The len() function returns the length of a string:|||To check if a certain phrase or character is present in a string, we can use the keyword in.|||Check if ""free"" is present in the following text:|||Use it in an if statement:|||Print only if ""free"" is present:|||Learn more about If statements in our Python If...Else chapter.|||To check if a certain phrase or character is NOT present in a string, we can use the keyword not in.|||Check if ""expensive"" is NOT present in the following text:|||Use it in an if statement:|||print only if ""expensive"" is NOT present:",Multiline Strings|||Strings are Arrays,,,,"[['\nprint(""Hello"")', ""\nprint('Hello')\n""], ['\na = ""Hello""', 'print(a)'], ['\n  a = """"""Lorem ipsum dolor sit amet,', 'consectetur adipiscing elit,', 'sed do \n  eiusmod tempor incididunt', 'ut labore et dolore magna aliqua.""""""', 'print(a)'], [""\n  a = '''Lorem ipsum dolor sit amet,"", 'consectetur adipiscing elit,', 'sed do \n  eiusmod tempor incididunt', ""ut labore et dolore magna aliqua.'''"", 'print(a)'], ['\na = ""Hello, World!""', '\nprint(a[1])\n'], ['\n  for x in ""banana"":', '\xa0 print(x)\n'], ['\na = ""Hello, World!""', '\nprint(len(a))\n'], ['\n  txt = ""The best things in life are free!""', 'print(""free"" in txt)', '\n'], ['\n  txt = ""The best things in life are free!""', 'if ""free"" in txt:', '\xa0\nprint(""Yes, \'free\' is present."")\n'], ['\n  txt = ""The best things in life are free!""', 'print(""expensive"" not in txt)\n  '], ['\n  txt = ""The best things in life are free!""', 'if ""expensive"" not in txt:', '\xa0\nprint(""No, \'expensive\' is NOT present."")\n  ']]"
Python Tutorial,Python Booleans,https://www.w3schools.com/python/python_booleans.asp,"Booleans represent one of two values: True or False.|||In programming you often need to know if an expression is True or False.|||You can evaluate any expression in Python, and get one of two answers, True or False.|||When you compare two values, the expression is evaluated and Python returns the Boolean answer:|||When you run a condition in an if statement, Python returns True or False:|||Print a message based on whether the condition is True or   False:|||The bool() function allows you to evaluate any value, and give you True or False in return,|||Evaluate a string and a number:|||Evaluate two variables:|||Almost any value is evaluated to True if it has some sort of content.|||Any string is True, except empty strings.|||Any number is True, except 0.|||Any list, tuple, set, and dictionary are True, except empty ones.|||The following will return True:|||In fact, there are not many values that evaluate toFalse, except empty values, such as (),[], {}, """", the number0, and the value None. And of course the value False evaluates toFalse.|||The following will return False:|||One more value, or object in this case, evaluates to False, and that is if you have an object that is made from a class with a __len__ function that returns 0 or False: |||You can create functions that returns a Boolean Value:|||Print the answer of a function:|||You can execute code based on the Boolean answer of a function:|||Print ""YES!"" if the function returns True, otherwise print ""NO!"":|||Python also has many built-in functions that return a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type:|||Check if an object is an integer or not:|||The statement below would print a Boolean value, which one?|||Start the Exercise",Exercise:,,,,"[['\n  print(10 > 9)', 'print(10 == 9)', 'print(10 < 9)'], ['\n  a = 200', 'b = 33', 'if b > a:', '\xa0 print(""b is greater than a"")', '\n  else:', '\xa0 print(""b is not greater than a"")'], ['\n  print(bool(""Hello""))', 'print(bool(15))'], ['\n  x = ""Hello""', 'y = 15', 'print(bool(x))', 'print(bool(y))'], ['\n  bool(""abc"")', 'bool(123)', 'bool([""apple"", ""cherry"", ""banana""])'], ['\n  bool(False)', 'bool(None)', 'bool(0)', 'bool("""")', 'bool(())', 'bool([])', '\n  bool({})'], ['\n  class myclass():', '\xa0 def __len__(self):', '\xa0\xa0\xa0 return 0', '\n', 'myobj = myclass()', 'print(bool(myobj))'], ['\n  def myFunction() :', '\xa0 return True', 'print(myFunction())'], ['\n  def myFunction() :', '\xa0 return True', 'if myFunction():', '\xa0 \n  print(""YES!"")', 'else:', '\xa0 print(""NO!"")'], ['\n  x = 200', 'print(isinstance(x, int))']]"
Python Tutorial,Python Operators,https://www.w3schools.com/python/python_operators.asp,"Operators are used to perform operations on variables and values.|||In the example below, we use the + operator to add together two values:|||Python divides the operators in the following groups:|||Arithmetic operators are used with numeric values to perform common mathematical operations:|||Assignment operators are used to assign values to variables:|||Comparison operators are used to compare two values:|||Logical operators are used to combine conditional statements:|||Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:|||Membership operators are used to test if a sequence is presented in an object:|||Bitwise operators are used to compare (binary) numbers:|||Multiply 10 with 5, and print the result.|||Start the Exercise",Exercise:,Arithmetic operators@@@Assignment operators@@@Comparison operators@@@Logical operators@@@Identity operators@@@Membership operators@@@Bitwise operators,,"+|||Addition|||x + y|||Try it »&&&-|||Subtraction|||x - y|||Try it »&&&*|||Multiplication|||x * y|||Try it »&&&/|||Division|||x / y|||Try it »&&&%|||Modulus|||x % y|||Try it »&&&**|||Exponentiation|||x ** y|||Try it »&&&//|||Floor division|||x // y|||Try it »$$$&&&=|||x = 5|||x = 5|||Try it »&&&+=|||x += 3|||x = x + 3|||Try it »&&&-=|||x -= 3|||x = x - 3|||Try it »&&&*=|||x *= 3|||x = x * 3|||Try it »&&&/=|||x /= 3|||x = x / 3|||Try it »&&&%=|||x %= 3|||x = x % 3|||Try it »&&&//=|||x //= 3|||x = x // 3|||Try it »&&&**=|||x **= 3|||x = x ** 3|||Try it »&&&&=|||x &= 3|||x = x & 3|||Try it »&&&|=|||x |= 3|||x = x | 3|||Try it »&&&^=|||x ^= 3|||x = x ^ 3|||Try it »&&&>>=|||x >>= 3|||x = x >> 3|||Try it »&&&<<=|||x <<= 3|||x = x << 3|||Try it »$$$&&&==|||Equal|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »$$$&&&and |||Returns True if both statements are true|||x < 5 and  x < 10|||Try it »&&&or|||Returns True if one of the statements is true|||x < 5 or x < 4|||Try it »&&&not|||Reverse the result, returns False if the result is true|||not(x < 5 and x < 10)|||Try it »$$$&&&is |||Returns True if both variables are the same object|||x is y|||Try it »&&&is not|||Returns True if both variables are not the same object|||x is not y|||Try it »$$$&&&in |||Returns True if a sequence with the specified value is present in the object|||x in y|||Try it »&&&not in|||Returns True if a sequence with the specified value is not present in the 
object|||x not in y|||Try it »$$$& |||AND|||Sets each bit to 1 if both bits are 1&&&||||OR|||Sets each bit to 1 if one of two bits is 1&&& ^|||XOR|||Sets each bit to 1 if only one of two bits is 1&&&~ |||NOT|||Inverts all the bits&&&<<|||Zero fill left shift|||Shift left by pushing zeros in from the right and let the leftmost bits fall 
off&&&>>|||Signed right shift|||Shift right by pushing copies of the leftmost bit in from the left, and let 
the rightmost bits fall off",[['\n  print(10 + 5)']]
Python Tutorial,Python Lists,https://www.w3schools.com/python/python_lists.asp,"Lists are used to store multiple items in a single variable.|||Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.|||Lists are created using square brackets:|||Create a List:|||List items are ordered, changeable, and allow duplicate values.|||List items are indexed, the first item has index [0],the second item has index [1] etc.|||When we say that lists are ordered, it means that the items have a defined order, and that order will not change.|||If you add new items to a list,the new items will be placed at the end of the list.|||Note: There are some list methods that will change the order, but in general: the order of the items will not change.|||The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.|||Since lists are indexed, lists can have items with the same value:|||Lists allow duplicate values:|||To determine how many items a list has, use the len() function:|||Print the number of items in the list:|||List items can be of any data type:|||String, int and boolean data types:|||A list can contain different data types:|||A list with strings, integers and boolean values:|||From Python's perspective, lists are defined as objects with the data type 'list':|||What is the data type of a list?|||It is also possible to use the list() constructor when creating a new list.|||Using the list() constructor to make a List:|||There are four collection data types in the Python programming language:|||*Set items are unchangeable, but you can remove and/or add items   whenever you like.|||**As of Python version 3.7, dictionaries are ordered.   In Python 3.6 and earlier, dictionaries are unordered.|||When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",List,"List is a collection which is ordered and changeable. Allows duplicate members.@@@Tuple is a collection which is ordered and unchangeable. Allows duplicate members.@@@Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.@@@Dictionary is a collection which is ordered** and changeable. No duplicate members.",,,"[['\nthislist = [""apple"", ""banana"", ""cherry""]', '\nprint(thislist)\n'], ['\nthislist = [""apple"", ""banana"", ""cherry"", ""apple"", ""cherry""]', '\nprint(thislist)\n'], ['\nthislist = [""apple"", ""banana"", ""cherry""]', '\nprint(len(thislist))\n'], ['\nlist1 = [""apple"", ""banana"", ""cherry""]', '\nlist2 = [1, 5, 7, 9, 3]', '\nlist3 = [True, False, False]\n'], ['\nlist1 = [""abc"", 34, True, 40, ""male""]\n'], ['\nmylist = [""apple"", ""banana"", ""cherry""]', '\nprint(type(mylist))\n'], ['\nthislist = list((""apple"", ""banana"", ""cherry"")) # note the double round-brackets', '\nprint(thislist)\n']]"
Python Tutorial,Python Tuples,https://www.w3schools.com/python/python_tuples.asp,"Tuples are used to store multiple items in a single variable.|||Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.|||A tuple is a collection which is ordered and unchangeable.|||Tuples are written with round brackets.|||Create a Tuple:|||Tuple items are ordered, unchangeable, and allow duplicate values.|||Tuple items are indexed, the first item has index [0], the second item has index [1] etc.|||When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.|||Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.|||Since tuples are indexed, they can have items with the same value:|||Tuples allow duplicate values:|||To determine how many items a tuple has, use the len() function:|||Print the number of items in the tuple:|||To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.|||One item tuple, remember the comma:|||Tuple items can be of any data type:|||String, int and boolean data types:|||A tuple can contain different data types:|||A tuple with strings, integers and boolean values:|||From Python's perspective, tuples are defined as objects with the data type 'tuple':|||What is the data type of a tuple?|||It is also possible to use the tuple() constructor to make a tuple.|||Using the tuple() method to make a tuple:|||There are four collection data types in the Python programming language:|||*Set items are unchangeable, but you can remove and/or add items   whenever you like.|||**As of Python version 3.7, dictionaries are ordered.   In Python 3.6 and earlier, dictionaries are unordered.|||When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",Tuple,"List is a collection which is ordered and changeable. Allows duplicate members.@@@Tuple is a collection which is ordered and unchangeable. Allows duplicate members.@@@Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.@@@Dictionary is a collection which is ordered** and changeable. No duplicate members.",,,"[['\nthistuple = (""apple"", ""banana"", ""cherry"")', '\nprint(thistuple)\n'], ['\nthistuple = (""apple"", ""banana"", ""cherry"", ""apple"", ""cherry"")', '\nprint(thistuple)\n'], ['\nthistuple = (""apple"", ""banana"", ""cherry"")', '\nprint(len(thistuple))\n'], ['\nthistuple = (""apple"",)', '\n  print(type(thistuple))', '#NOT a tuple', 'thistuple = (""apple"")', '\n  print(type(thistuple))'], ['\ntuple1 = (""apple"", ""banana"", ""cherry"")', '\ntuple2 = (1, 5, 7, 9, 3)', '\ntuple3 = (True, False, False)\n'], ['\ntuple1 = (""abc"", 34, True, 40, ""male"")\n'], ['\nmytuple = (""apple"", ""banana"", ""cherry"")', '\nprint(type(mytuple))\n'], ['\nthistuple = tuple((""apple"", ""banana"", ""cherry"")) # note the double round-brackets', '\nprint(thistuple)\n']]"
Python Tutorial,Python Sets,https://www.w3schools.com/python/python_sets.asp,"Sets are used to store multiple items in a single variable.|||Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.|||A set is a collection which is unordered, unchangeable*, and unindexed.|||* Note: Set items are unchangeable, but you can remove   items and add new items.|||Sets are written with curly brackets.|||Create a Set:|||Note: Sets are unordered, so you cannot be sure in which   order the items will appear.|||Set items are unordered, unchangeable, and do not allow duplicate values.|||Unordered means that the items in a set do not have a defined order.|||Set items can appear in a different order every time you use them, and cannot be referred to by index or key.|||Set items are unchangeable, meaning that we cannot change the items after the set has been created.|||Once a set is created, you cannot change its items, but you can remove items and add new items.|||Sets cannot have two items with the same value.|||Duplicate values will be ignored:|||To determine how many items a set has, use the len() function.|||Get the number of items in a set:|||Set items can be of any data type:|||String, int and boolean data types:|||A set can contain different data types:|||A set with strings, integers and boolean values:|||From Python's perspective, sets are defined as objects with the data type 'set':|||What is the data type of a set?|||It is also possible to use the set() constructor to make a set.|||Using the set() constructor to make a set:|||There are four collection data types in the Python programming language:|||*Set items are unchangeable, but you can remove items and add new   items.|||**As of Python version 3.7, dictionaries are ordered.   In Python 3.6 and earlier, dictionaries are unordered.|||When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",Set,"List is a collection which is ordered and changeable. Allows duplicate members.@@@Tuple is a collection which is ordered and unchangeable. Allows duplicate members.@@@Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.@@@Dictionary is a collection which is ordered** and changeable. No duplicate members.",,,"[['\nthisset = {""apple"", ""banana"", ""cherry""}', 'print(thisset)'], ['\n  thisset = {""apple"", ""banana"", ""cherry"", ""apple""}', '\n  print(thisset)\n'], ['\n  thisset = {""apple"", ""banana"", ""cherry""}', '\n  print(len(thisset))'], ['\n  set1 = {""apple"", ""banana"", ""cherry""}', '\n  set2 = {1, 5, 7, 9, 3}', '\n  set3 = {True, False, False}'], ['\n  set1 = {""abc"", 34, True, 40, ""male""}'], ['\nmyset = {""apple"", ""banana"", ""cherry""}', '\nprint(type(myset))\n'], ['\nthisset = set((""apple"", ""banana"", ""cherry"")) # note the double round-brackets', '\nprint(thisset)']]"
Python Tutorial,Python Dictionaries,https://www.w3schools.com/python/python_dictionaries.asp,"Dictionaries are used to store data values in key:value pairs.|||A dictionary is a collection which is ordered*, changeable and do not allow duplicates.|||As of Python version 3.7, dictionaries are ordered.   In Python 3.6 and earlier, dictionaries are unordered.|||Dictionaries are written with curly brackets, and have keys and values:|||Create and print a dictionary:|||Dictionary items are ordered, changeable, and does not allow duplicates.|||Dictionary items are presented in key:value pairs, and can be referred to by using the key name.|||Print the ""brand"" value of the dictionary:|||As of Python version 3.7, dictionaries are ordered.   In Python 3.6 and earlier, dictionaries are unordered.|||When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.|||Unordered means that the items does not have a defined order, you cannot refer to an item by using an index.|||Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.|||Dictionaries cannot have two items with the same key:|||Duplicate values will overwrite existing values:|||To determine how many items a dictionary has, use the len() function:|||Print the number of items in the dictionary:|||The values in dictionary items can be of any data type:|||String, int, boolean, and list data types:|||From Python's perspective, dictionaries are defined as objects with the data type 'dict':|||Print the data type of a dictionary:|||There are four collection data types in the Python programming language:|||*Set items are unchangeable, but you can remove and/or add items   whenever you like.|||**As of Python version 3.7, dictionaries are ordered.   In Python 3.6 and earlier, dictionaries are unordered.|||When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",,"List is a collection which is ordered and changeable. Allows duplicate members.@@@Tuple is a collection which is ordered and unchangeable. Allows duplicate members.@@@Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.@@@Dictionary is a collection which is ordered** and changeable. No duplicate members.",,,"[['\nthisdict =\t{', '\n\xa0\xa0""brand"": ""Ford"",', '\n\xa0\xa0""model"": ""Mustang"",', '\n\xa0\xa0""year"": 1964', '\n}', '\nprint(thisdict)', '\n'], ['\nthisdict =\t{', '\n\xa0\xa0""brand"": ""Ford"",', '\n\xa0\xa0""model"": ""Mustang"",', '\n\xa0\xa0""year"": 1964', '\n}', '\nprint(thisdict[""brand""])', '\n'], ['\nthisdict =\t{', '\n\xa0\xa0""brand"": ""Ford"",', '\n\xa0\xa0""model"": ""Mustang"",', '\n\xa0\xa0""year"": 1964,', '\xa0 ""year"": 2020', '\n}', '\nprint(thisdict)'], ['\nprint(len(thisdict))\n'], ['\nthisdict =\t{', '\n\xa0\xa0""brand"": ""Ford"",', '\n\xa0\xa0""electric"": False,', '\n\xa0\xa0""year"": 1964,', '\xa0 ""colors"": [""red"", ""white"", ""blue""]', '\n} '], ['\nthisdict =\t{', '\n\xa0\xa0""brand"": ""Ford"",', '\n\xa0\xa0""model"": ""Mustang"",', '\n\xa0\xa0""year"": 1964', '\n}', '\nprint(type(thisdict))']]"
Python Tutorial,Python If...Else,https://www.w3schools.com/python/python_conditions.asp,"Python supports the usual logical conditions from mathematics:|||These conditions can be used in several ways, most commonly in ""if statements"" and loops.|||An ""if statement"" is written by using the if keyword.|||If statement:|||In this example we use two variables, a and b,which are used as part of the if statement to test whether b is greater than a.As a is 33, and b is 200,we know that 200 is greater than 33, and so we print to screen that ""b is greater than a"".|||Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.ExampleIf statement, without indentation (will raise an error):a = 33b = 200if b > a:print(""b is greater than a"")# you will get an errorTry it Yourself »ElifThe elif keyword is pythons way of saying ""if the previous conditions were not true, then try this condition"".Examplea = 33b = 33if b > a:	 	print(""b is greater than a"")elif a == b:	 	print(""a and b are equal"")Try it Yourself »In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that ""a and b are equal"".ElseThe else keyword catches anything which isn't caught by the preceding conditions.Examplea = 200b = 33if b > a:	 	print(""b is greater than a"")elif a == b:	 	print(""a and b are equal"")  else:	 	print(""a is greater than b"")Try it Yourself »In this example a is greater than b,so the first condition is not true, also the elif condition is not true,so we go to the else condition and print to screen that ""a is greater than b"".You can also have an else without theelif:Examplea = 200b = 33if b > a:	 	print(""b is greater than a"")  else:	 	print(""b is not greater than a"")Try it Yourself »Short Hand IfIf you have only one statement to execute, you can put it on the same line as the if statement.ExampleOne line if statement:  if a > b: print(""a is greater than b"")Try it Yourself »Short Hand If ... ElseIf you have only one statement to execute, one for if, and one for else, you can put it all on the same line:ExampleOne line if else statement:  a = 2b = 330print(""A"") if a > b else print(""B"")Try it Yourself »This technique is known as Ternary Operators, or Conditional   Expressions.You can also have multiple else statements on the same line:ExampleOne line if else statement, with 3 conditions:  a = 330b = 330print(""A"") if a > b else print(""="") if a == b else print(""B"")Try it Yourself »AndThe and keyword is a logical operator, and is used to combine conditional statements:ExampleTest if a is greater than  b, AND if c   is greater than a:  a = 200b = 33c = 500if a > b and c > a:	 	print(""Both conditions are True"")Try it Yourself »OrThe or keyword is a logical operator, and is used to combine conditional statements:ExampleTest if a is greater than  b, OR if a   is greater than c:  a = 200b = 33c = 500if a > b or a > c:	 	print(""At least one of the conditions is True"")Try it Yourself »Nested IfYou can have if statements inside if statements, this is called nestedif statements.Example  x = 41if x > 10:	 	print(""Above ten,"")  if x > 20:    print(""and   also above 20!"")  else:    print(""but not   above 20."")Try it Yourself »The pass Statementif statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.Example  a = 33b = 200if b > a:  passTry it Yourself »Test Yourself With ExercisesExercise:Print ""Hello World"" if a is greater than b.a = 50b = 10 a  b  print(""Hello World"")Submit Answer »Start the Exercise❮ PreviousNext ❯|||If statement, without indentation (will raise an error):|||The elif keyword is pythons way of saying ""if the previous conditions were not true, then try this condition"".|||In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that ""a and b are equal"".|||The else keyword catches anything which isn't caught by the preceding conditions.|||In this example a is greater than b,so the first condition is not true, also the elif condition is not true,so we go to the else condition and print to screen that ""a is greater than b"".|||You can also have an else without theelif:|||If you have only one statement to execute, you can put it on the same line as the if statement.|||One line if statement:|||If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:|||One line if else statement:|||This technique is known as Ternary Operators, or Conditional   Expressions.|||You can also have multiple else statements on the same line:|||One line if else statement, with 3 conditions:|||The and keyword is a logical operator, and is used to combine conditional statements:|||Test if a is greater than  b, AND if c   is greater than a:|||The or keyword is a logical operator, and is used to combine conditional statements:|||Test if a is greater than  b, OR if a   is greater than c:|||You can have if statements inside if statements, this is called nestedif statements.|||if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.|||Print ""Hello World"" if a is greater than b.|||Start the Exercise",,Equals: a == b@@@Not Equals: a != b@@@Less than: a < b@@@Less than or equal to: a <= b@@@Greater than: a > b@@@Greater than or equal to: a >= b,,,"[['\na = 33', '\nb = 200', '\nif b > a:', '\xa0 print(""b is greater than a"")\n'], ['\na = 33', '\nb = 33', '\nif b > a:', '\n\t\xa0\n\tprint(""b is greater than a"")', '\nelif a == b:', '\n\t\xa0\n\tprint(""a and b are equal"")', '\n'], ['\na = 200', '\nb = 33', '\nif b > a:', '\n\t\xa0\n\tprint(""b is greater than a"")', '\nelif a == b:', '\n\t\xa0\n\tprint(""a and b are equal"")', '\n  else:', '\n\t\xa0\n\tprint(""a is greater than b"")', '\n'], ['\na = 200', '\nb = 33', '\nif b > a:', '\n\t\xa0\n\tprint(""b is greater than a"")', '\n  else:', '\n\t\xa0\n\tprint(""b is not greater than a"")', '\n'], ['\n  if a > b: print(""a is greater than b"")\n'], ['\n  a = 2', 'b = 330', 'print(""A"") if a > b else print(""B"")'], ['\n  a = 330', 'b = 330', 'print(""A"") if a > b else print(""="") if a == b else print(""B"")'], ['\n  a = 200', 'b = 33', 'c = 500', 'if a > b and c > a:', '\n\t\xa0\n\tprint(""Both conditions are True"")', '\n'], ['\n  a = 200', 'b = 33', 'c = 500', 'if a > b or a > c:', '\n\t\xa0\n\tprint(""At least one of the conditions is True"")', '\n'], ['\n  x = 41', 'if x > 10:', '\n\t\xa0\n\tprint(""Above ten,"")', '\xa0 if x > 20:', '\xa0\xa0\xa0 print(""and \n  also above 20!"")', '\xa0 else:', '\xa0\xa0\xa0 print(""but not \n  above 20."")'], ['\n  a = 33', 'b = 200', 'if b > a:', '\xa0 pass']]"
Python Tutorial,Python While Loops,https://www.w3schools.com/python/python_while_loops.asp,"Python has two primitive loop commands:|||With the while loop we can execute a set of statements as long as a condition is true.|||Print i as long as i is less than 6:|||Note: remember to increment i, or else the loop will continue forever.|||The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.|||With the break statement we can stop the loop even if the while condition is true:|||Exit the loop when i is 3:|||With the continue statement we can stop the current iteration, and continue with the next:|||Continue to the next iteration if i is 3:|||With the else statement we can run a block of code once when the condition no longer is true:|||Print a message once the condition is false:|||Print i as long as i is less than 6.|||Start the Exercise",,while loops@@@for loops,,,"[['\ni = 1', '\nwhile i < 6:', '\n\xa0\xa0print(i)', '\n\xa0\xa0i += 1', '\n'], ['\ni = 1', '\nwhile i < 6:', '\n\xa0\xa0print(i)', '\n  \xa0 if i == 3:', '\xa0\xa0\xa0 break', '\xa0\xa0i += 1\n'], ['\ni = 0', '\nwhile i < 6:', '\n  \xa0\xa0i += 1\n', '\xa0 if i == 3:', '\xa0\xa0\xa0 continue', '\xa0\xa0print(i)', '\n'], ['\ni = 1', '\nwhile i < 6:', '\n\xa0\xa0print(i)', '\n\xa0\xa0i += 1', 'else:', '\xa0 print(""i is no longer less than 6"")', '\n']]"
Python Tutorial,Python For Loops,https://www.w3schools.com/python/python_for_loops.asp,"A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).|||This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.|||With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.|||Print each fruit in a fruit list:|||The for loop does not require an indexing variable to set beforehand.|||Even strings are iterable objects, they contain a sequence of characters:|||Loop through the letters in the word ""banana"":|||With the break statement we can stop the loop before it has looped through all the items:|||Exit the loop when x is ""banana"":|||Exit the loop when x is ""banana"", but this time the break comes before the print:|||With the continue statement we can stop the current iteration of the loop, and continue with the next:|||Do not print banana:|||The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.|||Using the range() function:|||Note that range(6) is not the values of 0 to 6, but the values 0 to 5.|||The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):|||Using the start parameter:|||The range() function defaults to increment the sequence by 1,however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):|||Increment the sequence with 3 (default is 1):|||The else keyword in afor loop specifies a block of code to be executed when the loop is finished:|||Print all numbers from 0 to 5, and print a message when the loop has ended:|||Note: The else block will NOT be executed if the loop is stopped by a break statement.|||Break the loop when x is 3, and see what happens with the else block:|||A nested loop is a loop inside a loop.|||The ""inner loop"" will be executed one time for each iteration of the ""outer loop"":|||Print each adjective for every fruit:|||for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.|||Loop through the items in the fruits list.|||Start the Exercise",Example,,,,"[['\n  fruits = [""apple"", ""banana"", ""cherry""]', 'for \n  x in fruits:', '\n\t\xa0\n\tprint(x)\n'], ['\n  for x in ""banana"":', '\xa0 print(x)\n'], ['\n  fruits = [""apple"", ""banana"", ""cherry""]', 'for x in fruits:', '\xa0 print(x)\n  ', '\xa0 if x == \n  ""banana"":', '\xa0\xa0\xa0 break', '\n'], ['\n  fruits = [""apple"", ""banana"", ""cherry""]', 'for x in fruits:', '\xa0 if x == \n  ""banana"":', '\xa0\xa0\xa0 break', '\xa0 print(x)\n'], ['\n  fruits = [""apple"", ""banana"", ""cherry""]', 'for x in fruits:', '\xa0 if x == \n  ""banana"":', '\xa0\xa0\xa0 continue', '\xa0 print(x)\n'], ['\n  for x in range(6):', '\n\t\xa0\n\tprint(x)\n'], ['\n  for x in range(2, 6):', '\n\t\xa0\n\tprint(x)\n'], ['\n  for x in range(2, 30, 3):', '\n\t\xa0\n\tprint(x)\n'], ['\n  for x in range(6):', '\xa0\n\tprint(x)', 'else:', '\xa0\n\tprint(""Finally finished!"")'], ['\n  for x in range(6):', '\xa0 if x == 3: break', '\xa0\n\tprint(x)', 'else:', '\xa0\n\tprint(""Finally finished!"")'], ['\n  adj = [""red"", ""big"", ""tasty""]', 'fruits = [""apple"", ""banana"", ""cherry""]', '\n', 'for x in adj:', '\xa0 for y in fruits:', '\xa0\xa0\xa0 print(x, y)'], ['\n  for x in [0, 1, 2]:', '\xa0 pass']]"
Python Tutorial,Python Functions,https://www.w3schools.com/python/python_functions.asp,"A function is a block of code which only runs when it is called.|||You can pass data, known as parameters, into a function.|||A function can return data as a result.|||In Python a function is defined using the def keyword:|||To call a function, use the function name followed by parenthesis:|||Information can be passed into functions as arguments.|||Arguments are specified after the function name, inside the parentheses.You can add as many arguments as you want, just separate them with a comma.|||The following example has a function with one argument (fname).When the function is called, we pass along a first name,which is used inside the function to print the full name:|||Arguments are often shortened to args in Python documentations.|||The terms parameter and argument can be used for the same thing: information that are passed into a function.|||From a function's perspective:|||A parameter is the variable listed inside the parentheses in the function definition.|||An argument is the value that is sent to the function when it is called.|||By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less. |||This function expects 2 arguments, and gets 2 arguments:|||This function expects 2 arguments, but gets only 1:|||If you do not know how many arguments that will be passed into your function,add a * before the parameter name in the function definition.|||This way the function will receive a tuple of arguments, and can access the items accordingly:|||If the number of arguments is unknown, add a * before the parameter name:|||Arbitrary Arguments are often shortened to *args in Python documentations.|||You can also send arguments with the key = value syntax.|||This way the order of the arguments does not matter.|||The phrase Keyword Arguments are often shortened to kwargs in Python documentations.|||If you do not know how many keyword arguments that will be passed into your function,add two asterisk: ** before the parameter name in the function definition.|||This way the function will receive a dictionary of arguments, and can access the items accordingly:|||If the number of keyword arguments is unknown, add a double  ** before the parameter name:|||Arbitrary Kword Arguments are often shortened to **kwargs in Python documentations.|||The following example shows how to use a default parameter value.|||If we call the function without argument, it uses the default value:|||You can send any data types of argument to a function (string, number, list, dictionary etc.), and it willbe treated as the same data type inside the function.|||E.g. if you send a List as an argument, it will still be a List when it reaches the function:|||To let a function return a value, use the return statement:|||function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.|||Python also accepts function recursion, which means a defined function can call itself.|||Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.|||The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.|||In this example, tri_recursion() is a function that we have defined to call itself (""recurse""). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).|||To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.|||Recursion Example|||Create a function named my_function.|||Start the Exercise",Number of Arguments|||Default Parameter Value,,,,"[['\n  def my_function():', '\xa0 print(""Hello from a function"")'], ['\n  def my_function():', '\xa0 print(""Hello from a function"")', '\n', <strong>my_function()</strong>], ['\n  def my_function(', <strong>fname</strong>, '):', '\xa0 print(fname + "" Refsnes"")', '\n  my_function(', <strong>""Emil""</strong>, ')', 'my_function(', <strong>""Tobias""</strong>, ')', 'my_function(', <strong>""Linus""</strong>, ')'], ['\n  def my_function(fname, lname):', '\xa0 print(fname + "" "" + lname)', '\n  my_function(""Emil"", ""Refsnes"")'], ['\n  def my_function(*kids):', '\xa0 print(""The youngest child \n  is "" + kids[2])', '\n  my_function(""Emil"", ""Tobias"", ""Linus"")'], ['\n  def my_function(child3, child2, child1):', '\xa0 print(""The youngest child \n  is "" + child3)', '\n  my_function(child1 = ""Emil"", child2 = ""Tobias"", child3 = ""Linus"")'], ['\n  def my_function(**kid):', '\xa0 print(""His last name is "" + kid[""lname""])', '\n', 'my_function(fname = ""Tobias"", lname = ""Refsnes"")'], ['\n  def my_function(', <strong>country = ""Norway""</strong>, '):', '\xa0 print(""I am from "" + \n  country)', '\n  my_function(""Sweden"")', 'my_function(""India"")', 'my_function()', 'my_function(""Brazil"")'], ['\n  def my_function(food):', '\xa0 for x in food:', '\xa0\xa0\xa0 \n  print(x)', 'fruits = [""apple"", ""banana"", ""cherry""]', '\n  my_function(fruits)'], ['\n  def my_function(x):', '\xa0 ', <strong>return 5 * x<br/></strong>, 'print(my_function(3))', 'print(my_function(5))', '\n  print(my_function(9))'], ['\n  def myfunction():', '\xa0 pass']]"
Python Tutorial,Python Lambda,https://www.w3schools.com/python/python_lambda.asp,"A lambda function is a small anonymous function.|||A lambda function can take any number of arguments, but can only have one expression.|||The expression is executed and the result is returned:|||Add 10 to argument a, and   return the result:|||Lambda functions can take any number of arguments:|||Multiply argument a with argument   b and return the   result:|||Summarize argument a,   b, and c and   return the   result:|||The power of lambda is better shown when you use them as an anonymous function inside another function.|||Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:|||Use that function definition to make a function that always doubles the number you send in:|||Or, use the same function definition to make a function that always triples the number you send in:|||Or, use the same function definition to make both functions, in the same program:|||Use lambda functions when an anonymous function is required for a short period of time.|||Create a lambda function that takes one parameter (a) and returns it.|||Start the Exercise",Example,,,,"[['\n  x = lambda a : a + 10', 'print(x(5))'], ['\n  x = lambda a, b : a * b', 'print(x(5, 6))'], ['\n  x = lambda a, b, c : a + b + c', 'print(x(5, 6, \n  2))'], ['\ndef myfunc(n):', '\n\xa0\xa0return lambda a : a * n\n'], ['\ndef myfunc(n):', '\n\xa0\xa0return lambda a : a * n', '\n', '\n  mydoubler = myfunc(2)', '\n', 'print(mydoubler(11))\n'], ['\ndef myfunc(n):', '\n\xa0\xa0return lambda a : a * n', '\n', '\n  mytripler = myfunc(3)', '\n', 'print(mytripler(11))\n'], ['\ndef myfunc(n):', '\n\xa0\xa0return lambda a : a * n', '\n', '\n  mydoubler = myfunc(2)', 'mytripler = myfunc(3)', '\n', 'print(mydoubler(11))\n', 'print(mytripler(11))\n']]"
Python Tutorial,Python Arrays,https://www.w3schools.com/python/python_arrays.asp,"Note: Python does not have built-in support for Arrays,   but Python Lists can be used instead.|||Note: This page shows you how to use LISTS as ARRAYS, however, to work with arrays in Python you will have to import  a library, like the NumPy library.|||Arrays are used to store multiple values in one single variable:|||Create an array containing car names:|||An array is a special variable, which can hold more than one value at a time.|||If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:|||However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?|||The solution is an array!|||An array can hold many values under a single name, and you can access the values by referring to an index number.|||You refer to an array element by referring to the index number.|||Get the value of the first array item:|||Modify the value of the first array item:|||Use the len() method to return the length of an array (the number of elements in an array).|||Return the number of elements in the cars array:|||Note: The length of an array is always one more than the highest array index.|||You can use the for in loop to loop through all the elements of an array.|||Print each item in the cars array:|||You can use the append() method to add an element to an array.|||Add one more element to the cars array:|||You can use the pop() method to remove an element from the array.|||Delete the second element of the cars array:|||You can also use the remove() method to remove an element from the array.|||Delete the element that has the value ""Volvo"":|||Note: The list's remove() method   only removes the first occurrence of the specified value.|||Python has a set of built-in methods that you can use on lists/arrays.|||Note: Python does not have built-in support for Arrays,   but Python Lists can be used instead.",,,,"append()|||Adds an element at 
  the end of the list&&&clear()|||Removes all the 
  elements from the list&&&copy()|||Returns a copy of the 
  list&&&count()|||Returns the number of 
  elements with the specified value&&&extend()|||Add the elements of a 
  list (or any iterable), to the end of the current list&&&index()|||Returns the index of 
  the first element with the specified value&&&insert()|||Adds an element at 
  the specified position&&&pop()|||Removes the element at the 
  specified position&&&remove()|||Removes the first 
  item with the specified value&&&reverse()|||Reverses the order 
  of the list&&&sort()|||Sorts the list","[['\n  cars = [""Ford"", ""Volvo"", ""BMW""]'], ['\n  x = cars[0]'], ['\n  cars[0] = ""Toyota""'], ['\n  x = len(cars)'], ['\n  for x in cars:', '\xa0 print(x)'], ['\ncars.append(""Honda"")'], ['\ncars.pop(1)'], ['\ncars.remove(""Volvo"")']]"
Python Tutorial,Python Classes/Objects,https://www.w3schools.com/python/python_classes.asp,"Python is an object oriented programming language.|||Almost everything in Python is an object, with its properties and methods.|||A Class is like an object constructor, or a ""blueprint"" for creating objects.|||To create a class, use the keyword class:|||Create a class named MyClass, with a property named x:|||Now we can use the class named MyClass to create objects:|||Create an object named p1, and print the value of x:|||The examples above are classes and objects in their simplest form, and are not really useful in real life applications.|||To understand the meaning of classes we have to understand the built-in __init__() function.|||All classes have a function called __init__(), which is always executed when the class is being initiated.|||Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:|||Create a class named Person, use the __init__() function to assign values for name and age:|||Note: The __init__() function is called automatically every time the class is being used to create a new object.|||Objects can also contain methods. Methods in objects are functions that belong to the object.|||Let us create a method in the Person class:|||Insert a function that prints a greeting, and execute it on the p1 object:|||Note: The self parameter   is a reference to the current instance of the class, and is used to access variables that belong to the class.|||The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.|||It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:|||Use the words mysillyobject and abc instead of self:|||You can modify properties on objects like this:|||Set the age of p1 to 40:|||You can delete properties on objects by using the del keyword:|||Delete the age property from the p1 object:|||You can delete objects by using the del keyword:|||Delete the p1 object:|||class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error.|||Create a class named MyClass:|||Start the Exercise",,,,,"[['\n  class MyClass:', '\xa0 x = 5'], ['\n  p1 = MyClass()', 'print(p1.x)'], ['\n  class Person:', '\xa0 def __init__(self, name, age):', '\xa0\xa0\xa0 \n  self.name = name', '\xa0\xa0\xa0 self.age = age', 'p1 = Person(""John"", \n  36)', '\n', 'print(p1.name)', 'print(p1.age)'], ['\n  class Person:', '\xa0 def __init__(self, name, age):', '\xa0\xa0\xa0 \n  self.name = name', '\xa0\xa0\xa0 self.age = age', '\xa0 def myfunc(self):', '\xa0\xa0\xa0 \n  print(""Hello my name is "" + self.name)', 'p1 = Person(""John"", \n  36)', 'p1.myfunc()'], ['\n  class Person:', '\xa0 def __init__(mysillyobject, name, age):', '\xa0\xa0\xa0 \n  mysillyobject.name = name', '\xa0\xa0\xa0 mysillyobject.age = age', '\xa0 def myfunc(abc):', '\xa0\xa0\xa0 \n  print(""Hello my name is "" + abc.name)', 'p1 = Person(""John"", \n  36)', 'p1.myfunc()'], ['\n  p1.age = 40'], ['\n  del p1.age'], ['\n  del p1'], ['\n  class Person:', '\xa0 pass']]"
Python Tutorial,Python Inheritance,https://www.w3schools.com/python/python_inheritance.asp,"Inheritance allows us to define a class that inherits all the methods and properties from another class.|||Parent class is the class being inherited from, also called base class.|||Child class is the class that inherits from another class, also called derived class.|||Any class can be a parent class, so the syntax is the same as creating any other class:|||Create a class named Person, withfirstname and lastname properties, and a printname method:|||To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:|||Create a class named Student, which will inherit the properties and methods from the Person class:|||Note: Use the pass   keyword when you do not want to add any other properties or methods to the   class.|||Now the Student class has the same properties and methods as the Person class.|||Use the Student class to create an object, and then execute the printname method:|||So far we have created a child class that inherits the properties and methods from its parent.|||We want to add the __init__() function to the child class (instead of the pass keyword).|||Note: The __init__() function is called automatically every time the class is being used to create a new object.|||Add the __init__() function to theStudent class:|||When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.|||Note: The child's __init__()   function overrides the inheritance of the parent's   __init__() function.|||To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:|||Now we have successfully added the __init__() function, and kept the inheritance of the parent class, and we are ready to add functionality in the__init__() function.|||Python also has a super() function that will make the child class inherit all the methods and properties from its parent:|||By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.|||Add a property called graduationyear to theStudent class:|||In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects.To do so, add another parameter in the __init__() function:|||Add a year parameter, and pass the correct year when creating objects:|||Add a method called welcome to theStudent class:|||If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden.|||What is the correct syntax to create a class named Student that will inherit properties and methods from a class named Person?|||Start the Exercise",,,,,"[['\nclass Person:', '\xa0 def __init__(self, fname, lname):', '\xa0\xa0\xa0 \n  self.firstname = fname', '\xa0\xa0\xa0 self.lastname = lname', '\xa0 \n  def printname(self):', '\xa0\xa0\xa0 print(self.firstname, \n  self.lastname)', '#Use the Person class to create an object, and then \n  execute the printname method:', 'x = Person(""John"", ""Doe"")', '\n  x.printname()'], ['\nclass Student(Person):', '\xa0 pass'], ['\n  x = Student(""Mike"", ""Olsen"")', 'x.printname()'], ['\n  class Student(Person):', '\xa0 def __init__(self, fname, lname):', '\xa0\xa0\xa0 \n  #add properties etc.'], ['\n  class Student(Person):', '\xa0 def __init__(self, fname, lname):', '\xa0\xa0\xa0 \n  Person.__init__(self, fname, lname)'], ['\n  class Student(Person):', '\xa0 def __init__(self, fname, lname):', '\xa0\xa0\xa0 \n    super().__init__(fname, lname)'], ['\n  class Student(Person):', '\xa0 def __init__(self, fname, lname):', '\xa0\xa0\xa0 \n  super().__init__(fname, lname)', '\xa0\xa0\xa0 self.graduationyear \n  = 2019'], ['\n  class Student(Person):', '\xa0 def __init__(self, fname, lname, year):', '\xa0\xa0\xa0 \n  super().__init__(fname, lname)', '\xa0\xa0\xa0 self.graduationyear \n  = year', 'x = Student(""Mike"", ""Olsen"", 2019)'], ['\n  class Student(Person):', '\xa0 def __init__(self, fname, lname, year):', '\xa0\xa0\xa0 \n  super().__init__(fname, lname)', '\xa0\xa0\xa0 self.graduationyear \n  = year', '\xa0 def welcome(self):', '\xa0\xa0\xa0 print(""Welcome"", \n  self.firstname, self.lastname, ""to the class of"", self.graduationyear)']]"
Python Tutorial,Python Iterators,https://www.w3schools.com/python/python_iterators.asp,"An iterator is an object that contains a countable number of values.|||An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.|||Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().|||Lists, tuples, dictionaries, and sets are all iterable objects. They are iterablecontainers which you can get an iterator from.|||All these objects have a iter() method which is used to get an iterator:|||Return an iterator from a tuple, and print each value:|||Even strings are iterable objects, and can return an iterator:|||Strings are also iterable objects, containing a sequence of characters:|||We can also use a for loop to iterate through an iterable object:|||Iterate the values of a tuple:|||Iterate the characters of a string:|||The for loop actually creates an iterator object and executes the next() method for each loop.|||To create an object/class as an iterator you have to implement the methods__iter__() and __next__() to your object.|||As you have learned in the Python Classes/Objects chapter, all classes have a function called__init__(), which allows you to do some initializing when the object is being created.|||The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.|||The __next__() method also allows you to do operations, and must return the next item in the sequence.|||Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.):|||The example above would continue forever if you had enough next() statements, or if it was used in a for loop.|||To prevent the iteration to go on forever, we can use the StopIteration statement.|||In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:|||Stop after 20 iterations:",StopIteration,,,,"[['\n    mytuple = (""apple"", ""banana"", ""cherry"")', 'myit = iter(mytuple)', '\n    print(next(myit))', 'print(next(myit))', 'print(next(myit))', '\n'], ['\n    mystr = ""banana""', 'myit = iter(mystr)', '\n    print(next(myit))', 'print(next(myit))', 'print(next(myit))', '\n    print(next(myit))', 'print(next(myit))', 'print(next(myit))', '\n'], ['\n    mytuple = (""apple"", ""banana"", ""cherry"")', '\n', 'for x in mytuple:', '\n    \xa0 print(x)'], ['\n    mystr = ""banana""', '\n', 'for x in mystr:', '\n    \xa0 print(x)'], ['\n  class MyNumbers:', '\xa0 def __iter__(self):', '\xa0\xa0\xa0 self.a = \n  1', '\xa0\xa0\xa0 return self', '\xa0 def __next__(self):', '\xa0\xa0\xa0 \n  x = self.a', '\xa0\xa0\xa0 self.a += 1', '\xa0\xa0\xa0 return x', '\n', 'myclass = MyNumbers()', 'myiter = iter(myclass)', 'print(next(myiter))', '\n  print(next(myiter))', 'print(next(myiter))', 'print(next(myiter))', '\n  print(next(myiter))'], ['\n  class MyNumbers:', '\xa0 def __iter__(self):', '\xa0\xa0\xa0 self.a = \n  1', '\xa0\xa0\xa0 return self', '\xa0 def __next__(self):', '\xa0\xa0\xa0 \n  if self.a <= 20:', '\xa0\xa0\xa0\xa0\xa0 x = self.a', '\xa0\xa0\xa0\xa0\xa0 \n  self.a += 1', '\xa0\xa0\xa0\xa0\xa0 return x', '\xa0\xa0\xa0 \n  else:', '\xa0\xa0\xa0\xa0\xa0 raise StopIteration', 'myclass = \n  MyNumbers()', 'myiter = iter(myclass)', 'for x in myiter:', '\xa0 \n  print(x)', '\n']]"
Python Tutorial,Python Scope,https://www.w3schools.com/python/python_scope.asp,"A variable is only available from inside the region it is created. This is called scope.|||A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.|||A variable created inside a function is available inside that function:|||As explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function:|||The local variable can be accessed from a function within the function:|||A variable created in the main body of the Python code is a global variable and belongs to the global scope.|||Global variables are available from within any scope, global and local.|||A variable created outside of a function is global and can be used by   anyone:|||If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables,one available in the global scope (outside the function) and one available in the local scope (inside the function):|||The function will print the local x, and   then the code will print the global x:|||If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.|||The global keyword makes the variable global.|||If you use the global keyword, the variable belongs to the global scope:|||Also, use the global keyword if you want to make a change to a global variable inside a function.|||To change the value of a global variable inside a function, refer to the   variable by using the global keyword:",,,,,"[['\n  def myfunc():', '\xa0 x = 300', '\xa0 print(x)', 'myfunc()'], ['\n  def myfunc():', '\xa0 x = 300', '\xa0 def myinnerfunc():', '\xa0 \xa0 print(x)', '\xa0 \n  myinnerfunc()', 'myfunc()'], ['\n    x = 300', 'def myfunc():', '\xa0 print(x)', 'myfunc()', 'print(x)'], ['\n    x = 300', 'def myfunc():', '\xa0 x = 200', '\xa0 \n    print(x)', 'myfunc()', 'print(x)'], ['\n    def myfunc():', '\xa0 global x', '\xa0 x = 300', 'myfunc()', '\n    print(x)'], ['\n  x = 300', 'def myfunc():', '\xa0 global x', '\xa0 x = 200', 'myfunc()', '\n', 'print(x)']]"
Python Tutorial,Python Modules,https://www.w3schools.com/python/python_modules.asp,"Consider a module to be the same as a code library.|||A file containing a set of functions you want to include in your application.|||To create a module just save the code you want in a file with the file extension .py:|||Save this code in a file named mymodule.py|||Now we can use the module we just created, by using the import statement:|||Import the module named mymodule, and call the greeting function:|||Note: When using a function from a module, use the syntax: module_name.function_name.|||The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):|||Save this code in the file mymodule.py|||Import the module named mymodule, and access the person1 dictionary:|||You can name the module file whatever you like, but it must have the file extension .py|||You can create an alias when you import a module, by using the as keyword:|||Create an alias for mymodule called mx:|||There are several built-in modules in Python, which you can import whenever you like.|||Import and use the platform module:|||There is a built-in function to list all the function names (or variable names) in a module. The dir() function:|||List all the defined names belonging to the platform module:|||Note: The dir() function can be used on all   modules, also the ones you create yourself.|||You can choose to import only parts from a module, by using the from keyword.|||The module named mymodule has one function and one dictionary:|||Import only the person1 dictionary from the module:|||Note: When importing using the from   keyword, do not use the module name when referring to elements in the module.   Example: person1[""age""], notmymodule.person1[""age""]|||What is the correct syntax to import a module named ""mymodule""?|||Start the Exercise",What is a Module?|||Create a Module|||Example|||Use a Module|||Example|||Variables in Module|||Example|||Example|||Naming a Module|||Re-naming a Module|||Example|||Built-in Modules|||Example|||Example|||Import From Module|||Example|||Example|||Exercise:,,,,"[['\n  def greeting(name):', '\xa0 print(""Hello, "" + name)'], ['\n  import mymodule', 'mymodule.greeting(""Jonathan"")\n'], ['\n  person1 = {', '\xa0 ""name"": ""John"",', '\xa0 ""age"": 36,', '\xa0 \n  ""country"": ""Norway""', '}'], ['\n  import mymodule', 'a = mymodule.person1[""age""]', 'print(a)'], ['\n  import mymodule as mx', 'a = mx.person1[""age""]', 'print(a)'], ['\n  import platform', 'x = platform.system()', 'print(x)'], ['\n  import platform', 'x = dir(platform)', 'print(x)'], ['\n  def greeting(name):', '\xa0 print(""Hello, "" + name)', 'person1 \n  = {', '\xa0 ""name"": ""John"",', '\xa0 ""age"": 36,', '\xa0 ""country"": \n  ""Norway""', '}'], ['\n  from mymodule import person1', 'print (person1[""age""])']]"
Python Tutorial,Python Dates,https://www.w3schools.com/python/python_datetime.asp,"A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.|||Import the datetime module and display the current date:|||When we execute the code from the example above the result will be:|||The date contains year, month, day, hour, minute, second, and microsecond.|||The datetime module has many methods to return information about the date object.|||Here are a few examples, you will learn more about them later in this chapter: |||Return the year and name of weekday:|||To create a date, we can use the datetime() class (constructor) of thedatetime module.|||The datetime() class requires three parameters to create a date: year, month, day.|||Create a date object:|||The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).|||The datetime object has a method for formatting date objects into readable strings.|||The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:|||Display the name of the month:|||A reference of all the legal format codes:",Python Dates|||Example|||Date Output,,,"%a|||Weekday, short version|||Wed|||Try it »&&&%A|||Weekday, full version|||Wednesday|||Try it »&&&%w|||Weekday as a number 0-6, 0 is Sunday|||3|||Try it »&&&%d|||Day of month 01-31|||31|||Try it »&&&%b|||Month name, short version|||Dec|||Try it »&&&%B|||Month name, full version|||December|||Try it »&&&%m|||Month as a number 01-12|||12|||Try it »&&&%y|||Year, short version, without century|||18|||Try it »&&&%Y|||Year, full version|||2018|||Try it »&&&%H|||Hour 00-23|||17|||Try it »&&&%I|||Hour 00-12|||05|||Try it »&&&%p|||AM/PM|||PM|||Try it »&&&%M|||Minute 00-59|||41|||Try it »&&&%S|||Second 00-59|||08|||Try it »&&&%f|||Microsecond 000000-999999|||548513|||Try it »&&&%z|||UTC offset|||+0100|||&&&%Z|||Timezone|||CST|||&&&%j|||Day number of year 001-366|||365|||Try it »&&&%U|||Week number of year, Sunday as the first day of week, 00-53|||52|||Try it »&&&%W|||Week number of year, Monday as the first day of week, 00-53|||52|||Try it »&&&%c|||Local version of date and time|||Mon Dec 31 17:41:00 2018|||Try it »&&&%C|||Century|||20|||Try it »&&&%x|||Local version of date|||12/31/18|||Try it »&&&%X|||Local version of time|||17:41:00|||Try it »&&&%%|||A % character|||%|||Try it »&&&%G|||ISO 8601 year|||2018|||Try it »&&&%u|||ISO 8601 weekday (1-7)|||1|||Try it »&&&%V|||ISO 8601 weeknumber (01-53)|||01|||Try it »","[['\n  import datetime', 'x = datetime.datetime.now()', 'print(x)'], ['\n  import datetime', 'x = datetime.datetime.now()', 'print(x.year)', '\n  print(x.strftime(""%A""))'], ['\n  import datetime', 'x = datetime.datetime(2020, 5, 17)', '\n', 'print(x)'], ['\n  import datetime', 'x = datetime.datetime(2018, 6, 1)', 'print(x.strftime(""%B""))']]"
Python Tutorial,Python Math,https://www.w3schools.com/python/python_math.asp,"Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.|||The min() and max() functions can be used to find the lowest or highest value in an iterable:|||The abs() function returns the absolute (positive) value of the specified number:|||The pow(x, y) function returns the value of x to the power of y (xy).|||Return the value of 4 to the power of 3 (same as 4 * 4 * 4):|||Python has also a built-in module called math, which extends the list of mathematical functions.|||To use it, you must import the math module:|||When you have imported the math module, you can start using methods and constants of the module.|||The math.sqrt() method for example, returns the square root of a number:|||The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result:|||The math.pi constant, returns the value of PI (3.14...):|||In our Math Module Reference you will find a complete reference of all methods and constants that belongs to the Math module.",The Math Module|||Complete Math Module Reference,,,,"[['\n    x = min(5, 10, 25)', 'y = max(5, 10, 25)', 'print(x)', 'print(y)'], ['\n    x = abs(-7.25)', 'print(x)'], ['\n    x = pow(4, 3)', 'print(x)'], ['import math'], ['\n    import \n    math', 'x = math.sqrt(64)', 'print(x)'], ['\n    import \n    math', 'x = math.ceil(1.4)', 'y = math.floor(1.4)', 'print(x) # \n    returns 2', 'print(y) # returns 1'], ['\n    import \n    math', 'x = math.pi', 'print(x) ']]"
Python Tutorial,Python JSON,https://www.w3schools.com/python/python_json.asp,"JSON is a syntax for storing and exchanging data.|||JSON is text, written with JavaScript object notation.|||Python has a built-in package called json, which can be used to work with JSON data.|||Import the json module:|||If you have a JSON string, you can parse it by using thejson.loads() method.|||The result will be a Python dictionary.|||Convert from JSON to Python:|||If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.|||Convert from Python to JSON:|||You can convert Python objects of the following types, into JSON strings:|||Convert Python objects into JSON strings, and print the values:|||When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:|||Convert a Python object containing all the legal data types:|||The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.|||The json.dumps() method has parameters to make it easier to read the result:|||Use the indent parameter to define the numbers of indents:|||You can also define the separators, default value is ("", "", "": ""), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:|||Use the separators parameter to change the default separator:|||The json.dumps() method has parameters to order the keys in the result:|||Use the sort_keys parameter to specify if the result should be sorted or not:",Example,dict@@@list@@@tuple@@@string@@@int@@@float@@@True@@@False@@@None,,dict|||Object&&&list|||Array&&&tuple|||Array&&&str|||String&&&int|||Number&&&float|||Number&&&True|||true&&&False|||false&&&None|||null,"[['\n    import json\n  '], ['\n  import json', '# some JSON:', 'x =\xa0 \'{ ""name"":""John"", ""age"":30, ""city"":""New \n  York""}\'', '# parse x:', 'y = json.loads(x)', '# the result is a \n  Python dictionary:', 'print(y[""age""])'], ['\n  import json', '# a Python object (dict):', 'x = {', '\xa0 ""name"": \n  ""John"",', '\xa0 ""age"": 30,', '\xa0 ""city"": ""New York""', '}', '# \n  convert into JSON:', 'y = json.dumps(x)', '# the result is a JSON string:', '\n  print(y)'], ['\n  import json', 'print(json.dumps({""name"": ""John"", ""age"": 30}))', 'print(json.dumps([""apple"", \n  ""bananas""]))', 'print(json.dumps((""apple"", ""bananas"")))', '\n  print(json.dumps(""hello""))', 'print(json.dumps(42))', 'print(json.dumps(31.76))', 'print(json.dumps(True))', 'print(json.dumps(False))', 'print(json.dumps(None))'], ['\n  import json', 'x = {', '\xa0 ""name"": \n  ""John"",', '\xa0 ""age"": 30,', '\xa0 ""married"": True,', '\xa0 \n  ""divorced"": False,', '\xa0 ""children"": (""Ann"",""Billy""),', '\xa0 ""pets"": \n  None,', '\xa0 ""cars"": [', '\xa0\xa0\xa0 {""model"": ""BMW 230"", ""mpg"": \n  27.5},', '\xa0\xa0\xa0 {""model"": ""Ford Edge"", ""mpg"": 24.1}', '\xa0 ]', '\n  }', 'print(json.dumps(x))'], ['\n    json.dumps(x, indent=4)'], ['\n    json.dumps(x, indent=4, separators=("". "", "" = ""))'], ['\n    json.dumps(x, indent=4, sort_keys=True)']]"
Python Tutorial,Python RegEx,https://www.w3schools.com/python/python_regex.asp,"A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.|||RegEx can be used to check if a string contains the specified search pattern.|||Python has a built-in package called re, which can be used to work with Regular Expressions.|||Import the re module:|||When you have imported the re module, you can start using regular expressions:|||Search the string to see if it starts with ""The"" and ends with ""Spain"":|||The re module offers a set of functions that allows us to search a string for a match:|||Metacharacters are characters with a special meaning:|||A special sequence is a \ followed by one of the characters in the list below, and has a special meaning:|||A set is a set of characters inside a pair of square brackets [] with a special meaning:|||The findall() function returns a list containing all matches.|||Print a list of all matches:|||The list contains the matches in the order they are found.|||If no matches are found, an empty list is returned:|||Return an empty list if no match was found:|||The search() function searches the string for a match, and returns a Match object if there is a match.|||If there is more than one match, only the first occurrence of the match will be returned:|||Search for the first white-space character in the string:|||If no matches are found, the value None is returned:|||Make a search that returns no match:|||The split() function returns a list where the string has been split at each match:|||Split at each white-space character:|||You can control the number of occurrences by specifying the maxsplit parameter:|||Split the string only at the first occurrence:|||The sub() function replaces the matches with the text of your choice:|||Replace every white-space character with the number 9:|||You can control the number of replacements by specifying thecount parameter:|||Replace the first 2 occurrences:|||A Match Object is an object containing information about the search and the result.|||Note: If there is no match, the value None will be returned, instead of the Match Object.|||Do a search that will return a Match Object:|||The Match object has properties and methods used to retrieve information about the search, and the result:|||.span() returns a tuple containing the start-, and end positions of the match..string returns the string passed into the function.group() returns the part of the string where there was a match|||Print the position (start- and end-position) of the first match occurrence.|||The regular expression looks for any words that starts with an upper case   ""S"":|||Print the string passed into the function:|||Print the part of the string where there was a match.|||The regular expression looks for any words that starts with an upper case   ""S"":|||Note: If there is no match, the value None will be returned, instead of the Match Object.",RegEx in Python|||RegEx Functions,,,"findall|||Returns a list containing all matches&&&search|||Returns a Match object if there is a match anywhere in the string&&&split|||Returns a list where the string has been split at each match &&&sub|||Replaces one or many matches with a string$$$&&&[]|||A set of characters|||""[a-m]""|||Try it »&&&\|||Signals a special sequence (can also be used to escape special characters)|||""\d""|||Try it »&&&.|||Any character (except newline character)|||""he..o""|||Try it »&&&^|||Starts with|||""^hello""|||Try it »&&&$|||Ends with|||""planet$""|||Try it »&&&*|||Zero or more occurrences|||""he.*o""|||Try it »&&&+|||One or more occurrences|||""he.+o""|||Try it »&&&?|||Zero or one occurrences|||""he.?o""|||Try it »&&&{}|||Exactly the specified number of occurrences|||""he{2}o""|||Try it »&&&||||Either or|||""falls|stays""|||Try it »&&&()|||Capture and group||| ||| $$$&&&\A|||Returns a match if the specified characters are at the beginning of the 
string|||""\AThe""|||Try it »&&&\b|||Returns a match where the specified characters are at the beginning or at the 
end of a word(the ""r"" in the beginning is making sure that the string is 
being treated as a ""raw string"")|||r""\bain""r""ain\b""|||Try it »
Try it »&&&\B|||Returns a match where the specified characters are present, but NOT at the beginning 
(or at 
the end) of a word(the ""r"" in the beginning is making sure that the string 
is being treated as a ""raw string"")|||r""\Bain""r""ain\B""|||Try it »
Try it »&&&\d|||Returns a match where the string contains digits (numbers from 0-9)|||""\d""|||Try it »&&&\D|||Returns a match where the string DOES NOT contain digits|||""\D""|||Try it »&&&\s|||Returns a match where the string contains a white space character|||""\s""|||Try it »&&&\S|||Returns a match where the string DOES NOT contain a white space character|||""\S""|||Try it »&&&\w|||Returns a match where the string contains any word characters (characters from 
a to Z, digits from 0-9, and the underscore _ character)|||""\w""|||Try it »&&&\W|||Returns a match where the string DOES NOT contain any word characters|||""\W""|||Try it »&&&\Z|||Returns a match if the specified characters are at the end of the string|||""Spain\Z""|||Try it »$$$[arn]|||Returns a match where one of the specified characters (a,
r, or n) are 
present|||Try it »&&&[a-n]|||Returns a match for any lower case character, alphabetically between
a and n|||Try it »&&&[^arn]|||Returns a match for any character EXCEPT a,
r, and n|||Try it »&&&[0123]|||Returns a match where any of the specified digits (0,
1, 2, or 
3) are 
present|||Try it »&&&[0-9]|||Returns a match for any digit between
0 and 9|||Try it »&&&[0-5][0-9]|||Returns a match for any two-digit numbers from 00 and 
59|||Try it »&&&[a-zA-Z]|||Returns a match for any character alphabetically between
a and z, lower case OR upper case|||Try it »&&&[+]|||In sets, +, *,
., |,
(), $,{} 
has no special meaning, so [+] means: return a match for any
+ character in the string|||Try it »","[['import re'], ['\n    import \n    re', 'txt = ""The rain in Spain""', 'x = re.search(""^The.*Spain$"", txt)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.findall(""ai"", \n  txt)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.findall(""Portugal"", \n  txt)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.search(""\\s"", \n  txt)', '\n', 'print(""The first white-space character is located in \n  position:"", x.start()) '], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.search(""Portugal"", \n  txt)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.split(""\\s"", \n  txt)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.split(""\\s"", \n  txt, \n  1)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.sub(""\\s"", \n  ""9"", txt)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.sub(""\\s"", \n  ""9"", txt, 2)', '\n  print(x)'], ['\n  import re', 'txt = ""The rain in Spain""', 'x = re.search(""ai"", \n  txt)', '\n  print(x) #this will print an object'], ['\n    import re', '\n    txt = ""The rain in Spain""', '\n    x = re.search(r""\\bS\\w+"", txt)', '\n    print(', <strong>x.span()</strong>, ')'], ['\n    import re', '\n    txt = ""The rain in Spain""', '\n    x = re.search(r""\\bS\\w+"", txt)', '\n    print(', <strong>x.string</strong>, ')'], ['\n    import re', '\n    txt = ""The rain in Spain""', '\n    x = re.search(r""\\bS\\w+"", txt)', '\n    print(', <strong>x.group()</strong>, ')']]"
Python Tutorial,Python PIP,https://www.w3schools.com/python/python_pip.asp,"PIP is a package manager for Python packages, or modules if you like.|||Note: If you have Python version 3.4 or later, PIP is included by default.|||A package contains all the files you need for a module.|||Modules are Python code libraries you can include in your project.|||Navigate your command line to the location of Python's script directory, and type the following:|||Check PIP version:|||If you do not have PIP installed, you can download and install it from this page:https://pypi.org/project/pip/|||Downloading a package is very easy.|||Open the command line interface and tell PIP to download the package you want.|||Navigate your command line to the location of Python's script directory, and type the following:|||Download a package named ""camelcase"":|||Now you have downloaded and installed your first package!|||Once the package is installed, it is ready to use.|||Import the ""camelcase"" package into your project.|||Import and use ""camelcase"":|||Find more packages at https://pypi.org/.|||Use the uninstall command to remove a package:|||Uninstall the package named ""camelcase"":|||The PIP Package Manager will ask you to confirm that you want to remove the camelcase package:|||Press y and the package will be removed.|||Use the list command to list all the packages installed on your system:|||List installed packages:|||Result:",What is PIP?|||What is a Package?,,,,"[['\n  import camelcase', 'c = camelcase.CamelCase()', 'txt = ""hello world""', '\n', 'print(c.hump(txt))']]"
Python Tutorial,Python Try...Except,https://www.w3schools.com/python/python_try_except.asp,"The try block lets you test a block of code for errors.|||The except block lets you handle the error.|||The else block lets you execute code when there is no error.|||The finally block lets you execute code, regardless of the result of the try- and except blocks.|||When an error occurs, or exception as we call it, Python will normally stop and generate an error message.|||These exceptions can be handled using the try statement:|||The try block will generate an exception,   because x is not defined:|||Since the try block raises an error, the except block will be executed.|||Without the try block, the program will crash and raise an error:|||This statement will raise an error,   because x is not defined:|||You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:|||Print one message if the try block raises a NameError and another   for other errors:|||You can use the else keyword to define a block of code to be executed if no errors were raised:|||In this example, the try block does not   generate any error:|||The finally block, if specified, will be executed regardless if the try block raises an error or not.|||This can be useful to close objects and clean up resources:|||Try to open and write to a file that is not writable:|||The program can continue, without leaving the file object open.|||As a Python developer you can choose to throw an exception if a condition occurs.|||To throw (or raise) an exception, use the raise keyword.|||Raise an error and stop the program if x is lower than 0:|||The raise keyword is used to raise an exception.|||You can define what kind of error to raise, and the text to print to the user.|||Raise a TypeError if x is not an integer:",,,,,"[['\n  try:', '\xa0 print(x)', 'except:', '\xa0 print(""An exception occurred"")'], ['\n  try:', '\xa0 print(x)', 'except NameError:', '\xa0 print(""Variable x \n  is not defined"")', 'except:', '\xa0 print(""Something else went \n  wrong"")'], ['\n  try:', '\xa0 print(""Hello"")', 'except:', '\xa0 print(""Something went \n  wrong"")', 'else:', '\xa0 print(""Nothing went wrong"")'], ['\n  try:', '\xa0 print(x)', 'except:', '\xa0 print(""Something went \n  wrong"")', 'finally:', '\xa0 print(""The \'try except\' is finished"")'], ['\n  try:', '\xa0 f = open(""demofile.txt"")', '\xa0 try:', '\xa0\xa0\xa0 \n  f.write(""Lorum Ipsum"")', '\xa0 except:', '\xa0\xa0\xa0 \n  print(""Something went wrong when writing to the file"")', '\xa0 finally:', '\xa0\xa0\xa0 \n  f.close()', 'except:', '\xa0 print(""Something went wrong when opening the \n  file"") '], ['\n    x = -1', 'if x < 0:', '\xa0 raise Exception(""Sorry, no numbers below \n    zero"")'], ['\n    x = ""hello""', 'if not type(x) is int:', '\xa0 raise TypeError(""Only \n    integers are allowed"")']]"
Python Tutorial,Python User Input,https://www.w3schools.com/python/python_user_input.asp,"Python allows for user input.|||That means we are able to ask the user for input.|||The method is a bit different in Python 3.6 than Python 2.7.|||Python 3.6 uses the input() method. |||Python 2.7 uses the raw_input() method. |||The following example asks for the username, and when you entered the username, it gets printed on the screen:|||Python stops executing when it comes to the input() function, and continues when the user has given some input.",,,,,"[['\n  username = input(""Enter username:"")', '\nprint(""Username is: "" + username)', '\n'], ['\n  username = raw_input(""Enter username:"")', '\nprint(""Username \n  is: "" + username)', '\n']]"
Python Tutorial,Python String Formatting,https://www.w3schools.com/python/python_string_formatting.asp,"To make sure a string will display as expected, we can format the result with the format() method.|||The format() method allows you to format selected parts of a string.|||Sometimes there are parts of a text that you do not control, maybe they come from a database, or user input?|||To control such values, add placeholders (curly brackets {}) in the text, and run the values through the format() method:|||Add a placeholder where you want to display the price:|||You can add parameters inside the curly brackets to specify how to convert the value:|||Format the price to be displayed as a number with two decimals:|||Check out all formatting types in our String format() Reference.|||If you want to use more values, just add more values to the format() method:|||And add more placeholders:|||You can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the correct placeholders:|||Also, if you want to refer to the same value more than once, use the index number:|||You can also use named indexes by entering a name inside the curly brackets {carname}, but then you must use names when you pass the parameter valuestxt.format(carname = ""Ford""):",,,,,"[['\n  price = 49', 'txt = ""The price is {} dollars""', 'print(txt.format(price))\n'], ['\n  txt = ""The price is {:.2f} dollars""', '\n'], ['\nprint(txt.format(price, itemno, count))\n'], ['\n  quantity = 3', 'itemno = 567', 'price = 49', 'myorder = ""I want {} pieces of \n  item number {} for {:.2f} dollars.""', 'print(myorder.format(quantity, itemno, price))\n'], ['\n  quantity = 3', 'itemno = 567', 'price = 49', 'myorder = ""I want {0} pieces of \n  item number {1} for {2:.2f} dollars.""', 'print(myorder.format(quantity, itemno, price))\n'], ['\n  age = 36', 'name = ""John""', 'txt = ""His name is {1}. {1} is {0} years old.""', 'print(txt.format(age, \n  name))\n'], ['\n  myorder = ""I have a {carname}, it is a {model}.""', 'print(myorder.format(carname \n  = ""Ford"", model = ""Mustang""))\n']]"
File Handling,Python File Handling,https://www.w3schools.com/python/python_file_handling.asp,"File handling is an important part of any web application.|||Python has several functions for creating, reading, updating, and deleting files.|||The key function for working with files in Python is theopen() function.|||The open() function takes two parameters;filename, and mode.|||There are four different methods (modes) for opening a file:|||""r"" - Read - Default value. Opens a file for reading, error if the file does not exist|||""a"" - Append - Opens a file for appending, creates the file if it does not exist|||""w"" - Write - Opens a file for writing, creates the file if it does not exist|||""x"" - Create - Creates the specified file, returns an error if the file exists|||In addition you can specify if the file should be handled as binary or text mode|||""t"" - Text - Default value. Text mode|||""b"" - Binary - Binary mode (e.g.   images)|||To open a file for reading it is enough to specify the name of the file:|||The code above is the same as:|||Because ""r"" for read, and ""t"" for text are the default values, you do not need to specify them.|||Note: Make sure the file exists, or else you will get an error.",,,,,"[['\nf = open(""demofile.txt"")\n'], ['\nf = open(""demofile.txt"", ""rt"")\n']]"
File Handling,Python Read Files,https://www.w3schools.com/python/python_file_open.asp,"Assume we have the following file, located in the same folder as Python:|||demofile.txt|||To open the file, use the built-in open() function.|||The open() function returns a file object, which has a read() method for reading the content of the file:|||If the file is located in a different location, you will have to specify the file path, like this:|||Open a file on a different location:|||By default the read() method returns the whole text, but you can also specify how many characters you want to return:|||Return the 5 first characters of the file:|||You can return one line by using the readline() method:|||Read one line of the file:|||By calling readline() two times, you can read the two first lines:|||Read two lines of the file:|||By looping through the lines of the file, you can read the whole file, line by line:|||Loop through the file line by line:|||It is a good practice to always close the file when you are done with it.|||Close the file when you are finish with it:|||Note: You should always close your files, in some cases, due to buffering, changes made to a file may not show until you close the file.",Read Only Parts of the File,,,,"[['\n  f = open(""demofile.txt"", ""r"")', 'print(f.read())'], ['\n  f = open(""D:\\\\myfiles\\welcome.txt"", ""r"")', 'print(f.read())'], ['\n  f = open(""demofile.txt"", ""r"")', 'print(f.read(', <strong>5</strong>, '))'], ['\n  f = open(""demofile.txt"", ""r"")', 'print(f.readline())'], ['\n  f = open(""demofile.txt"", ""r"")', 'print(f.readline())', 'print(f.readline())'], ['\n  f = open(""demofile.txt"", ""r"")', 'for x in f:', '\xa0 print(x)'], ['\n  f = open(""demofile.txt"", ""r"")', 'print(f.readline())', '\n  f.close()']]"
File Handling,Python Write/Create Files,https://www.w3schools.com/python/python_file_write.asp,"To write to an existing file, you must add a parameter to theopen() function:|||""a"" - Append - will append to the end of the file|||""w"" - Write - will overwrite any existing content|||Open the file ""demofile2.txt"" and append content to the file:|||Open the file ""demofile3.txt"" and overwrite the content:|||Note: the ""w"" method will overwrite the entire file.|||To create a new file in Python, use the open() method, with one of the following parameters:|||""x"" - Create - will create a file, returns an error if the file exist|||""a"" - Append - will create a file if the specified file does not exist|||""w"" - Write - will create a file if the specified file does not exist|||Create a file called ""myfile.txt"":|||Result: a new empty file is created!|||Create a new file if it does not exist:",,,,,"[['\n  f = open(""demofile2.txt"", ""a"")', 'f.write(""Now the file has more content!"")', '\n  f.close()', '#open and read the file after the appending:', 'f = \n  open(""demofile2.txt"", ""r"")', 'print(f.read())'], ['\n  f = open(""demofile3.txt"", ""w"")', '\n  f.write(""Woops! I have deleted the content!"")', 'f.close()', '\n  #open and read the file after the appending:', 'f = open(""demofile3.txt"", ""r"")', '\n  print(f.read())'], ['\n  f = open(""myfile.txt"", ""x"")\n'], ['\n  f = open(""myfile.txt"", ""w"")\n']]"
File Handling,Python Delete Files,https://www.w3schools.com/python/python_file_remove.asp,"To delete a file, you must import the OS module, and run itsos.remove() function:|||Remove the file ""demofile.txt"":|||To avoid getting an error, you might want to check if the file exists before you try to delete it:|||Check if file exists, then delete it:|||To delete an entire folder, use the os.rmdir() method:|||Remove the folder ""myfolder"":|||Note: You can only remove empty folders.",Delete a File,,,,"[['\n  import os', 'os.remove(""demofile.txt"")'], ['\n  import os', 'if os.path.exists(""demofile.txt""):', '\xa0 os.remove(""demofile.txt"")', '\n  else:', '\xa0 print(""The file does not exist"")'], ['\n  import os', 'os.rmdir(""myfolder"")']]"
Python Modules,NumPy Tutorial,https://www.w3schools.com/python/numpy/default.asp,"NumPy is a Python library.|||NumPy is used for working with arrays.|||NumPy is short for ""Numerical Python"".|||We have created 43 tutorial pages for you to learn more about NumPy.|||Starting with a basic introduction and ends up with creating and plotting random data sets, and working with NumPy functions:|||Test your NumPy skills with a quiz test.|||Start NumPy Quiz|||Insert the correct method for creating a NumPy array.|||Start the Exercise|||In our ""Try it Yourself"" editor, you can use the NumPy module, and modify the code to see the result.|||Create a NumPy array:|||Click on the ""Try it Yourself"" button to see how it works.",Learning by Examples,,,,"[['\nimport numpy as np\n', '\narr = np.array([1, 2, 3, 4, 5])', 'print(arr)', '\nprint(type(arr))\n']]"
Python Modules,Pandas Tutorial,https://www.w3schools.com/python/pandas/default.asp,"Pandas is a Python library.|||Pandas is used to analyze data.|||We have created 14 tutorial pages for you to learn more about Pandas.|||Starting with a basic introduction and ends up with cleaning and plotting data:|||Test your Pandas skills with a quiz test.|||Start Pandas Quiz|||Insert the correct Pandas method to create a Series.|||Start the Exercise|||In our ""Try it Yourself"" editor, you can use the Pandas module, and modify the code to see the result.|||Load a CSV file into a Pandas DataFrame:|||Click on the ""Try it Yourself"" button to see how it works.",Learning by Examples|||Certified!,,,,"[['\n  import pandas as pd', ""df = pd.read_csv('data.csv')"", 'print(df.to_string())\xa0\n']]"
Python Modules,SciPy Tutorial,https://www.w3schools.com/python/scipy/index.php,"SciPy is a scientific computation library that uses NumPy underneath.|||SciPy stands for Scientific Python. |||We have created 10 tutorial pages for you to learn the fundamentals of SciPy:|||Test your SciPy skills with a quiz test.|||Start SciPy Quiz|||Insert the correct syntax for printing the kilometer unit (in meters):|||Start the Exercise|||In our ""Try it Yourself"" editor, you can use the SciPy module, and modify the code to see the result.|||How many cubic meters are in one liter:|||Click on the ""Try it Yourself"" button to see how it works.",Learning by Examples,,,,"[['\nfrom scipy import constants\n', '\n  print(constants.liter)']]"
Python Matplotlib,Matplotlib Intro,https://www.w3schools.com/python/matplotlib_intro.asp,"Matplotlib is a low level graph plotting library in python that serves as a visualization utility.|||Matplotlib was created by John D. Hunter.|||Matplotlib is open source and we can use it freely.|||Matplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility.|||The source code for Matplotlib is located at this github repository https://github.com/matplotlib/matplotlib",,,,,[]
Python Matplotlib,Matplotlib Get Started,https://www.w3schools.com/python/matplotlib_getting_started.asp,"If you have Python and PIP already installed on a system, then installation of Matplotlib is very easy.|||Install it using this command:|||If this command fails, then use a python distribution that already has Matplotlib installed,  like Anaconda, Spyder etc.|||Once Matplotlib is installed, import it in your applications by adding theimport module statement:|||Now Matplotlib is imported and ready to use:|||The version string is stored under __version__ attribute.|||Note: two underscore characters are used in __version__.",Installation of Matplotlib,,,,"[['\nimport matplotlib\n'], ['\n  import matplotlib', 'print(matplotlib.__version__)\n']]"
Python Matplotlib,Matplotlib Pyplot,https://www.w3schools.com/python/matplotlib_pyplot.asp,"Most of the Matplotlib utilities lies under the pyplot submodule,and are usually imported under the plt alias:|||Now the Pyplot package can be referred to as plt.|||Draw a line in a diagram from position (0,0) to position (6,250):||||||You will learn more about drawing (plotting) in the next chapters.",Pyplot,,,,"[['\nimport matplotlib.pyplot as plt\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\n  xpoints = np.array([0, 6])', 'ypoints = np.array([0, 250])', 'plt.plot(xpoints, \n  ypoints)', '\nplt.show()\n']]"
Python Matplotlib,Matplotlib Plotting,https://www.w3schools.com/python/matplotlib_plotting.asp,"The plot() function is used to draw points (markers) in a diagram.|||By default, the plot() function draws a line from point to point.|||The function takes parameters for specifying points in the diagram.|||Parameter 1 is an array containing the points on the x-axis.|||Parameter 2 is an array containing the points on the y-axis.|||If we need to plot a line from (1, 3) to (8, 10), we have to pass two arrays [1, 8] and [3, 10] to the plot function.|||Draw a line in a diagram from position (1, 3) to position (8, 10):||||||The x-axis is the horizontal axis.|||The y-axis is the vertical axis.|||To plot only the markers, you can use shortcut string notation parameter 'o', which means 'rings'.|||Draw two points in the diagram, one at position (1, 3) and one in position (8, 10):||||||You will learn more about markers in the next chapter.|||You can plot as many points as you like, just make sure you have the same number of points in both axis.|||Draw a line in a diagram from position (1, 3) to (2, 8) then to (6, 1) and finally to position (8, 10):||||||If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending on the length of the y-points.|||So, if we take the same example as above, and leave out the x-points, the diagram will look like this:|||Plotting without x-points:||||||The x-points in the example above is [0, 1, 2, 3, 4, 5].",Default X-Points,,,,"[['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nxpoints = np.array([1, 8])', '\nypoints = np.array([3, 10])', '\n', '\nplt.plot(xpoints, ypoints)', '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nxpoints = np.array([1, 8])', '\nypoints = np.array([3, 10])', '\n', ""\nplt.plot(xpoints, ypoints, 'o')"", '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nxpoints = np.array([1, 2, 6, 8])', '\nypoints = np.array([3, 8, 1, 10])', '\n', '\nplt.plot(xpoints, ypoints)', '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\n  ypoints = np.array([3, 8, 1, 10, 5, 7])', '\n', '\nplt.plot(ypoints)', '\nplt.show()\n']]"
Python Matplotlib,Matplotlib Markers,https://www.w3schools.com/python/matplotlib_markers.asp,"You can use the keyword argument marker to emphasize each point with a specified marker:|||Mark each point with a circle:||||||Mark each point with a star:||||||You can choose any of these markers:|||You can use also use the shortcut string notation parameter to specify the marker.|||This parameter is also called fmt, and is written with this syntax:|||Mark each point with a circle:||||||The marker value can be anything from the Marker Reference above.|||The line value can be one of the following:|||Note: If you leave out the line value in the fmt parameter, no line will be plottet.|||The short color value can be one of the following:|||You can use the keyword argument markersize or the shorter version, ms to set the size of the markers:|||Set the size of the markers to 20:||||||You can use the keyword argument markeredgecolor or the shorter mec to set the color of the edge of the markers:|||Set the EDGE color to red:||||||You can use the keyword argument markerfacecolor or the shorter mfc to set the color inside the edge of the markers:|||Set the FACE color to red:||||||Use both the mec and mfc arguments to color of the entire marker:|||Set the color of both the edge and the face to red:||||||You can also use Hexadecimal color values:|||Mark each point with a beautiful green color:||||||Or any of the 140 supported color names.|||Mark each point with the color named ""hotpink"":|||",Example,,,"'o'|||Circle|||Try it  »&&&'*'|||Star|||Try it  »&&&'.'|||Point|||Try it  »&&&','|||Pixel|||Try it  »&&&'x'|||X|||Try it  »&&&'X'|||X (filled)|||Try it  »&&&'+'|||Plus|||Try it  »&&&'P'|||Plus (filled)|||Try it  »&&&'s'|||Square|||Try it  »&&&'D'|||Diamond|||Try it  »&&&'d'|||Diamond (thin)|||Try it  »&&&'p'|||Pentagon|||Try it  »&&&'H'|||Hexagon|||Try it  »&&&'h'|||Hexagon|||Try it  »&&&'v'|||Triangle Down|||Try it  »&&&'^'|||Triangle Up|||Try it  »&&&'<'|||Triangle Left|||Try it  »&&&'>'|||Triangle Right|||Try it  »&&&'1'|||Tri Down|||Try it  »&&&'2'|||Tri Up|||Try it  »&&&'3'|||Tri Left|||Try it  »&&&'4'|||Tri Right|||Try it  »&&&'|'|||Vline|||Try it  »&&&'_'|||Hline|||Try it  »$$$&&&'-'|||Solid line|||Try it  »&&&':'|||Dotted line|||Try it  »&&&'--'|||Dashed line|||Try it  »&&&'-.'|||Dashed/dotted line|||Try it  »$$$'r'|||Red|||Try it  »&&&'g'|||Green|||Try it  »&&&'b'|||Blue|||Try it  »&&&'c'|||Cyan|||Try it  »&&&'m'|||Magenta|||Try it  »&&&'y'|||Yellow|||Try it  »&&&'k'|||Black|||Try it  »&&&'w'|||White|||Try it  »","[['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, marker = 'o')"", '\nplt.show()\n'], ['\n...\n', ""\nplt.plot(ypoints, marker = '*')"", '\n...\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, 'o:r')"", '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, marker = 'o', ms = 20)"", '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')"", '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, marker = 'o', ms = 20, mfc = 'r')"", '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')"", '\nplt.show()\n'], ['\n...\n', ""\nplt.plot(ypoints, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')"", '\n...\n'], ['\n...\n', ""\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'hotpink', mfc = 'hotpink')"", '\n...\n']]"
Python Matplotlib,Matplotlib Line,https://www.w3schools.com/python/matplotlib_line.asp,"You can use the keyword argument linestyle, or shorter ls, to change the style of the plotted line:|||Use a dotted line:||||||Use a dashed line:||||||The line style can be written in a shorter syntax:|||linestyle can be written as ls.|||dotted can be written as :.|||dashed can be written as --.|||Shorter syntax:||||||You can choose any of these styles:|||You can use the keyword argument color or the shorter c to set the color of the line:|||Set the line color to red:||||||You can also use Hexadecimal color values:|||Plot with a beautiful green line:||||||Or any of the 140 supported color names.|||Plot with the color named ""hotpink"":||||||You can use the keyword argument linewidth or the shorter lw to change the width of the line.|||The value is a floating number, in points:|||Plot with a 20.5pt wide line:||||||You can plot as many lines as you like by simply adding more plt.plot() functions:|||Draw two lines by specifying a plt.plot() function for each line:||||||You can also plot many lines by adding the points for the x- and y-axis for each line in the same plt.plot() function.|||(In the examples above we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).)|||The x- and y- values come in pairs:|||Draw two lines by specifiyng the x- and y-point values for both lines:|||",Example,,,'solid' (default)|||'-'|||Try it  »&&&'dotted'|||':'|||Try it  »&&&'dashed'|||'--'|||Try it  »&&&'dashdot'|||'-.'|||Try it  »&&&'None'|||'' or ' '|||Try it  »,"[['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, linestyle = 'dotted')"", '\nplt.show()\n'], ['\n', ""\nplt.plot(ypoints, linestyle = 'dashed')"", '\n', '\n'], [""\nplt.plot(ypoints, ls = ':')"", '\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, color = 'r')"", '\nplt.show()\n'], ['\n...\n', ""\nplt.plot(ypoints, c = '#4CAF50')"", '\n...\n'], ['\n...\n', ""\nplt.plot(ypoints, c = 'hotpink')"", '\n...\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nypoints = np.array([3, 8, 1, 10])', '\n', ""\nplt.plot(ypoints, linewidth = '20.5')"", '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\ny1 = np.array([3, 8, 1, 10])', '\ny2 = np.array([6, 2, 7, 11])', '\n', '\nplt.plot(y1)', '\nplt.plot(y2)', '\n', '\nplt.show()\n'], ['\nimport matplotlib.pyplot as plt', '\nimport numpy as np', '\n', '\nx1 = np.array([0, 1, 2, 3])', '\ny1 = np.array([3, 8, 1, 10])', '\n\nx2 = np.array([0, 1, 2, 3])', '\ny2 = np.array([6, 2, 7, 11])', '\n', '\nplt.plot(x1, y1, x2, y2)', '\nplt.show()\n']]"
Python Matplotlib,Matplotlib Labels,https://www.w3schools.com/python/matplotlib_labels.asp,"With Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis.|||Add labels to the x- and y-axis:||||||With Pyplot, you can use the title() function to set a title for the plot.|||Add a plot title and labels for the x- and y-axis:||||||You can use the fontdict parameter inxlabel(), ylabel(), and title() to set font properties for the title and labels.|||Set font properties for the title and labels:||||||You can use the loc parameter intitle() to position the title.|||Legal values are: 'left', 'right', and 'center'. Default value is 'center'.|||Position the title to the left:|||",,,,,"[['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.plot(x, y)', 'plt.xlabel(""Average \n  Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.show()\n'], ['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.plot(x, y)', 'plt.title(""Sports Watch Data"")', 'plt.xlabel(""Average \n  Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.show()\n'], ['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', ""font1 = {'family':'serif','color':'blue','size':20}"", ""\n  font2 = {'family':'serif','color':'darkred','size':15}"", 'plt.title(""Sports \n  Watch Data"", fontdict = font1)', 'plt.xlabel(""Average Pulse"", fontdict = \n  font2)', 'plt.ylabel(""Calorie Burnage"", fontdict = font2)', 'plt.plot(x, \n  y)', 'plt.show()\n'], ['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.title(""Sports Watch Data"", loc = \'left\')', 'plt.xlabel(""Average \n  Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.plot(x, \n  y)', 'plt.show()\n']]"
Python Matplotlib,Matplotlib Grid,https://www.w3schools.com/python/matplotlib_grid.asp,"With Pyplot, you can use the grid() function to add grid lines to the plot.|||Add grid lines to the plot:||||||You can use the axis parameter inthe grid() function to specify which grid lines to display.|||Legal values are: 'x', 'y', and 'both'. Default value is 'both'.|||Display only grid lines for the x-axis:||||||Display only grid lines for the y-axis:||||||You can also set the line properties of the grid, like this: grid(color = 'color', linestyle = 'linestyle', linewidth = number).|||Set the line properties of the grid:|||",,,,,"[['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.title(""Sports Watch Data"")', '\n  plt.xlabel(""Average Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.plot(x, \n  y)', 'plt.grid()', 'plt.show() '], ['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.title(""Sports Watch Data"")', '\n  plt.xlabel(""Average Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.plot(x, \n  y)', ""plt.grid(axis = 'x')"", 'plt.show() '], ['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.title(""Sports Watch Data"")', '\n  plt.xlabel(""Average Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.plot(x, \n  y)', ""plt.grid(axis = 'y')"", 'plt.show() '], ['\nimport numpy as np', 'import matplotlib.pyplot as plt', 'x = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])', 'y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])', 'plt.title(""Sports Watch Data"")', 'plt.xlabel(""Average \n  Pulse"")', 'plt.ylabel(""Calorie Burnage"")', 'plt.plot(x, \n  y)', ""plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)"", 'plt.show()\n']]"
Python Matplotlib,Matplotlib Subplots,https://www.w3schools.com/python/matplotlib_subplots.asp,"With the subplots() function you can draw multiple plots in one figure:|||Draw 2 plots:||||||The subplots() function takes three arguments that describes the layout of the figure.|||The layout is organized in rows and columns, which are represented by the firstand second argument.|||The third argument represents the index of the current plot.|||So, if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side),we can write the syntax like this:|||Draw 2 plots on top of each other:||||||You can draw as many plots you like on one figure, just descibe the number of rows, columns, and the index of the plot.|||Draw 6 plots:||||||You can add a title to each plot with the title() function:|||2 plots, with titles:||||||You can add a title to the entire figure with the suptitle() function:|||Add a title for the entire figure:|||",Display Multiple Plots,,,,"[['\n  import matplotlib.pyplot as plt', 'import numpy as np', '#plot 1:', 'x = \n  np.array([0, 1, 2, 3])', 'y = np.array([3, 8, 1, 10])', 'plt.subplot(1, 2, 1)', '\n  plt.plot(x,y)', '#plot 2:', 'x = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, \n  40])', 'plt.subplot(1, 2, 2)', 'plt.plot(x,y)', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', '#plot 1:', 'x = \n  np.array([0, 1, 2, 3])', 'y = np.array([3, 8, 1, 10])', 'plt.subplot(2, 1, 1)', '\n  plt.plot(x,y)', '#plot 2:', 'x = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, \n  40])', 'plt.subplot(2, 1, 2)', 'plt.plot(x,y)', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([0, \n  1, 2, 3])', 'y = np.array([3, 8, 1, 10])', 'plt.subplot(2, 3, 1)', '\n  plt.plot(x,y)', 'x = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, \n  40])', 'plt.subplot(2, 3, 2)', 'plt.plot(x,y)', 'x = np.array([0, 1, \n  2, 3])', 'y = np.array([3, 8, 1, 10])', 'plt.subplot(2, 3, 3)', 'plt.plot(x,y)', '\n', 'x = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, 40])', '\n  plt.subplot(2, 3, 4)', 'plt.plot(x,y)', 'x = np.array([0, 1, 2, 3])', 'y = \n  np.array([3, 8, 1, 10])', 'plt.subplot(2, 3, 5)', 'plt.plot(x,y)', 'x \n  = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, 40])', 'plt.subplot(2, \n  3, 6)', 'plt.plot(x,y)', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', '#plot 1:', 'x = \n  np.array([0, 1, 2, 3])', 'y = np.array([3, 8, 1, 10])', 'plt.subplot(1, 2, 1)', '\n  plt.plot(x,y)', 'plt.title(""SALES"")', '#plot 2:', 'x = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, \n  40])', 'plt.subplot(1, 2, 2)', 'plt.plot(x,y)', 'plt.title(""INCOME"")', '\n', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', '#plot 1:', 'x = \n  np.array([0, 1, 2, 3])', 'y = np.array([3, 8, 1, 10])', 'plt.subplot(1, 2, 1)', '\n  plt.plot(x,y)', 'plt.title(""SALES"")', '#plot 2:', 'x = np.array([0, 1, 2, 3])', 'y = np.array([10, 20, 30, \n  40])', 'plt.subplot(1, 2, 2)', 'plt.plot(x,y)', 'plt.title(""INCOME"")', '\n', 'plt.suptitle(""MY SHOP"")', 'plt.show()\n']]"
Python Matplotlib,Matplotlib Scatter,https://www.w3schools.com/python/matplotlib_scatter.asp,"With Pyplot, you can use the scatter() function to draw a scatter plot.|||The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis:|||A simple scatter plot:||||||The observation in the example above is the result of 13 cars passing by.|||The X-axis shows how old the car is.|||The Y-axis shows the speed of the car when it passes.|||Are there any relationships between the observations?|||It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars.|||In the example above, there seems to be a relationship between speed and age,but what if we plot the observations from another day as well?Will the scatter plot tell us something else?|||Draw two plots on the same figure:||||||Note: The two plots are plotted with two different colors, by default blue and orange, you will learn how to change colors later in this chapter.|||By comparing the two plots, I think it is safe to say that they both gives us the same conclusion: the newer the car, the faster it drives.|||You can set your own color for each scatter plot with thecolor or the c argument:|||Set your own color of the markers:||||||You can even set a specific color for each dot by using an array of colors as value for thec argument:|||Note: You cannot use the color argument for this, only the c argument.|||Set your own color of the markers:||||||The Matplotlib module has a number of available colormaps.|||A colormap is like a list of colors, where each color has a value that ranges from 0 to 100.|||Here is an example of a colormap:||||||This colormap is called 'viridis' and as you can see it ranges from 0, which is a purple color, and up to 100, which is a yellow color.|||You can specify the colormap with the keyword argumentcmap with the value of the colormap, in this case 'viridis' which is one of the built-in colormaps available in Matplotlib.|||In addition you have to create an array with values (from 0 to 100), one value for each of the point in the scatter plot:|||Create a color array, and specify a colormap in the scatter plot:||||||You can include the colormap in the drawing by including the plt.colorbar() statement:|||Include the actual colormap:||||||You can choose any of the built-in colormaps:|||You can change the size of the dots with the s argument.|||Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:|||Set your own size for the markers:||||||You can adjust the transparency of the dots with the alpha argument.|||Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:|||Set your own size for the markers:||||||You can combine a colormap with different sizes on the dots. This is best visualized if the dots are transparent:|||Create random arrays with 100 values for x-points, y-points, colors and sizes:|||",ColorMap,,,Accent|||Try it  »||| |||Accent_r|||Try it  »&&&Blues|||Try it  »||| |||Blues_r|||Try it  »&&&BrBG|||Try it  »||| |||BrBG_r|||Try it  »&&&BuGn|||Try it  »||| |||BuGn_r|||Try it  »&&&BuPu|||Try it  »||| |||BuPu_r|||Try it  »&&&CMRmap|||Try it  »||| |||CMRmap_r|||Try it  »&&&Dark2|||Try it  »||| |||Dark2_r|||Try it  »&&&GnBu|||Try it  »||| |||GnBu_r|||Try it  »&&&Greens|||Try it  »||| |||Greens_r|||Try it  »&&&Greys|||Try it  »||| |||Greys_r|||Try it  »&&&OrRd|||Try it  »||| |||OrRd_r|||Try it  »&&&Oranges|||Try it  »||| |||Oranges_r|||Try it  »&&&PRGn|||Try it  »||| |||PRGn_r|||Try it  »&&&Paired|||Try it  »||| |||Paired_r|||Try it  »&&&Pastel1|||Try it  »||| |||Pastel1_r|||Try it  »&&&Pastel2|||Try it  »||| |||Pastel2_r|||Try it  »&&&PiYG|||Try it  »||| |||PiYG_r|||Try it  »&&&PuBu|||Try it  »||| |||PuBu_r|||Try it  »&&&PuBuGn|||Try it  »||| |||PuBuGn_r|||Try it  »&&&PuOr|||Try it  »||| |||PuOr_r|||Try it  »&&&PuRd|||Try it  »||| |||PuRd_r|||Try it  »&&&Purples|||Try it  »||| |||Purples_r|||Try it  »&&&RdBu|||Try it  »||| |||RdBu_r|||Try it  »&&&RdGy|||Try it  »||| |||RdGy_r|||Try it  »&&&RdPu|||Try it  »||| |||RdPu_r|||Try it  »&&&RdYlBu|||Try it  »||| |||RdYlBu_r|||Try it  »&&&RdYlGn|||Try it  »||| |||RdYlGn_r|||Try it  »&&&Reds|||Try it  »||| |||Reds_r|||Try it  »&&&Set1|||Try it  »||| |||Set1_r|||Try it  »&&&Set2|||Try it  »||| |||Set2_r|||Try it  »&&&Set3|||Try it  »||| |||Set3_r|||Try it  »&&&Spectral|||Try it  »||| |||Spectral_r|||Try it  »&&&Wistia|||Try it  »||| |||Wistia_r|||Try it  »&&&YlGn|||Try it  »||| |||YlGn_r|||Try it  »&&&YlGnBu|||Try it  »||| |||YlGnBu_r|||Try it  »&&&YlOrBr|||Try it  »||| |||YlOrBr_r|||Try it  »&&&YlOrRd|||Try it  »||| |||YlOrRd_r|||Try it  »&&&afmhot|||Try it  »||| |||afmhot_r|||Try it  »&&&autumn|||Try it  »||| |||autumn_r|||Try it  »&&&binary|||Try it  »||| |||binary_r|||Try it  »&&&bone|||Try it  »||| |||bone_r|||Try it  »&&&brg|||Try it  »||| |||brg_r|||Try it  »&&&bwr|||Try it  »||| |||bwr_r|||Try it  »&&&cividis|||Try it  »||| |||cividis_r|||Try it  »&&&cool|||Try it  »||| |||cool_r|||Try it  »&&&coolwarm|||Try it  »||| |||coolwarm_r|||Try it  »&&&copper|||Try it  »||| |||copper_r|||Try it  »&&&cubehelix|||Try it  »||| |||cubehelix_r|||Try it  »&&&flag|||Try it  »||| |||flag_r|||Try it  »&&&gist_earth|||Try it  »||| |||gist_earth_r|||Try it  »&&&gist_gray|||Try it  »||| |||gist_gray_r|||Try it  »&&&gist_heat|||Try it  »||| |||gist_heat_r|||Try it  »&&&gist_ncar|||Try it  »||| |||gist_ncar_r|||Try it  »&&&gist_rainbow|||Try it  »||| |||gist_rainbow_r|||Try it  »&&&gist_stern|||Try it  »||| |||gist_stern_r|||Try it  »&&&gist_yarg|||Try it  »||| |||gist_yarg_r|||Try it  »&&&gnuplot|||Try it  »||| |||gnuplot_r|||Try it  »&&&gnuplot2|||Try it  »||| |||gnuplot2_r|||Try it  »&&&gray|||Try it  »||| |||gray_r|||Try it  »&&&hot|||Try it  »||| |||hot_r|||Try it  »&&&hsv|||Try it  »||| |||hsv_r|||Try it  »&&&inferno|||Try it  »||| |||inferno_r|||Try it  »&&&jet|||Try it  »||| |||jet_r|||Try it  »&&&magma|||Try it  »||| |||magma_r|||Try it  »&&&nipy_spectral|||Try it  »||| |||nipy_spectral_r|||Try it  »&&&ocean|||Try it  »||| |||ocean_r|||Try it  »&&&pink|||Try it  »||| |||pink_r|||Try it  »&&&plasma|||Try it  »||| |||plasma_r|||Try it  »&&&prism|||Try it  »||| |||prism_r|||Try it  »&&&rainbow|||Try it  »||| |||rainbow_r|||Try it  »&&&seismic|||Try it  »||| |||seismic_r|||Try it  »&&&spring|||Try it  »||| |||spring_r|||Try it  »&&&summer|||Try it  »||| |||summer_r|||Try it  »&&&tab10|||Try it  »||| |||tab10_r|||Try it  »&&&tab20|||Try it  »||| |||tab20_r|||Try it  »&&&tab20b|||Try it  »||| |||tab20b_r|||Try it  »&&&tab20c|||Try it  »||| |||tab20c_r|||Try it  »&&&terrain|||Try it  »||| |||terrain_r|||Try it  »&&&twilight|||Try it  »||| |||twilight_r|||Try it  »&&&twilight_shifted|||Try it  »||| |||twilight_shifted_r|||Try it  »&&&viridis|||Try it  »||| |||viridis_r|||Try it  »&&&winter|||Try it  »||| |||winter_r|||Try it  »,"[['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', 'y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'plt.scatter(x, y)', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', '#day one, the age \n  and speed of 13 cars:', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'plt.scatter(x, \n  y)', '#day two, the age and speed of 15 cars:', 'x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])', 'y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])', '\n  plt.scatter(x, y)', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', ""plt.scatter(x, \n  y, color = 'hotpink')"", 'x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])', 'y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])', ""\n  plt.scatter(x, y, color = '#88c999')"", 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'colors = np.array([""red"",""green"",""blue"",""yellow"",""pink"",""black"",""orange"",""purple"",""beige"",""brown"",""gray"",""cyan"",""magenta""])', '\n', 'plt.scatter(x, y, c=colors)', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'colors = np.array([0, \n  10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])', '\n', ""plt.scatter(x, y, c=colors, cmap='viridis')"", 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'colors = np.array([0, \n  10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])', '\n', ""plt.scatter(x, y, c=colors, cmap='viridis')"", 'plt.colorbar()', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'sizes = \n  np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])', 'plt.scatter(x, \n  y, s=sizes)', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])', '\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])', 'sizes = \n  np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])', 'plt.scatter(x, \n  y, s=sizes, alpha=0.5)', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = \n  np.random.randint(100, size=(100))', 'y = np.random.randint(100, size=(100))', '\n  colors = np.random.randint(100, size=(100))', 'sizes = 10 * np.random.randint(100, \n  size=(100))', ""plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')"", '\n', 'plt.colorbar()', 'plt.show()']]"
Python Matplotlib,Matplotlib Bars,https://www.w3schools.com/python/matplotlib_bars.asp,"With Pyplot, you can use the bar() function to draw bar graphs:|||Draw 4 bars:||||||The bar() function takes arguments that describes the layout of the bars.|||The categories and their values represented by the firstand second argument as arrays.|||Try it Yourself »|||If you want the bars to be displayed horizontally instead of vertically,use the barh() function:|||Draw 4 horizontal bars:||||||The bar() and barh() takes the keyword argumentcolor to set the color of the bars:|||Draw 4 red bars:||||||You can use any of the 140 supported color names.|||Draw 4 ""hot pink"" bars:||||||Or you can use Hexadecimal color values:|||Draw 4 bars with a beautiful green color:||||||The bar() takes the keyword argumentwidth to set the width of the bars:|||Draw 4 very thin bars:||||||The default width value is 0.8|||Note: For horizontal bars, use height instead of width.|||The barh() takes the keyword argumentheight to set the height of the bars:|||Draw 4 very thin bars:||||||The default height value is 0.8",Example,,,,"[['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.bar(x,y)', 'plt.show()\n'], ['\nx = [""APPLES"", ""BANANAS""]', '\ny = [400, 350]', '\nplt.bar(x, y)\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.barh(x, y)', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.bar(x, y, color = ""red"")', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.bar(x, y, color = ""hotpink"")', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.bar(x, y, color = ""#4CAF50"")', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.bar(x, y, width = 0.1)', 'plt.show()\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = np.array([""A"", \n  ""B"", ""C"", ""D""])', 'y = np.array([3, 8, 1, 10])', 'plt.barh(x, y, height = 0.1)', 'plt.show()\n']]"
Python Matplotlib,Matplotlib Histograms,https://www.w3schools.com/python/matplotlib_histograms.asp,"A histogram is a graph showing frequency distributions.|||It is a graph showing the number of observations within each given interval.|||Example: Say you ask for the height of 250 people, you might end up with a histogram like this:||||||You can read from the histogram that there are approximately:|||2 people from 140 to 145cm5 people from 145 to 150cm15 people from 151 to 156cm31 people from 157 to 162cm46 people from 163 to 168cm53 people from 168 to 173cm45 people from 173 to 178cm28 people from 179 to 184cm21 people from 185 to 190cm4 people from 190 to 195cm|||In Matplotlib, we use the hist() function to create histograms.|||The hist() function will use an array of numbers to create a histogram, the array is sent into the function as an argument.|||For simplicity we use NumPy to randomly generate an array with 250 values, where the values will concentrate around 170, and the standard deviation is 10. Learn more about Normal Data Distribution in our Machine Learning Tutorial.|||A Normal Data Distribution by NumPy:|||This will generate a random result, and could look like this:|||The hist() function will read the array and produce a histogram:|||A simple histogram:|||",Result:,,,,"[['\n  import numpy as np', 'x = \n  np.random.normal(170, 10, 250)', 'print(x)'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'x = \n  np.random.normal(170, 10, 250)', 'plt.hist(x)', 'plt.show()\xa0\n']]"
Python Matplotlib,Matplotlib Pie Charts,https://www.w3schools.com/python/matplotlib_pie_charts.asp,"With Pyplot, you can use the pie() function to draw pie charts:|||A simple pie chart:||||||As you can see the pie chart draws one piece (called a wedge) for each value in the array (in this case [35, 25, 25, 15]).|||By default the plotting of the first wedge starts from the x-axis and move counterclockwise:||||||Note: The size of each wedge is determined by comparing the value with all the other values, by using this formula:|||The value divided by the sum of all values: x/sum(x)|||Add labels to the pie chart with the label parameter.|||The label parameter must be an array with one label for each wedge:|||A simple pie chart:||||||As mentioned the default start angle is at the x-axis, but you can change the start angle by specifying astartangle parameter.|||The startangle parameter is defined with an angle in degrees, default angle is 0:||||||Start the first wedge at 90 degrees:||||||Maybe you want one of the wedges to stand out? The explode parameter allows you to do that.|||The explode parameter, if specified, and not None,must be an array with one value for each wedge.|||Each value represents how far from the center each wedge is displayed:|||Pull the ""Apples"" wedge 0.2 from the center of the pie:||||||Add a shadow to the pie chart by setting theshadows parameter to True:|||Add a shadow:||||||You can set the color of each wedge with the colors parameter.|||The colors parameter, if specified, must be an array with one value for each wedge:|||Specify a new color for each wedge:||||||You can use Hexadecimal color values, any of the 140 supported color names, or one of these shortcuts:|||'r' - Red'g' - Green'b' - Blue'c' - Cyan'm' - Magenta'y' - Yellow'k' - Black'w' - White|||To add a list of explanation for each wedge, use the legend() function:|||Add a legend:||||||To add a header to the legend, add the title parameter to the legendfunction.|||Add a legend with a header:|||",Start Angle|||Example,,,,"[['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'plt.pie(y)', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', 'plt.pie(y, \n  labels = mylabels)', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', 'plt.pie(y, \n  labels = mylabels, startangle = 90)', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', '\n  myexplode = [0.2, 0, 0, 0]', 'plt.pie(y, \n  labels = mylabels, explode = myexplode)', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', '\n  myexplode = [0.2, 0, 0, 0]', 'plt.pie(y, \n  labels = mylabels, explode = myexplode, shadow = True)', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', '\n  mycolors = [""black"", ""hotpink"", ""b"", ""#4CAF50""]', 'plt.pie(y, labels = \n  mylabels, colors = mycolors)', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', '\n', 'plt.pie(y, labels = mylabels)', 'plt.legend()', 'plt.show()\xa0\n'], ['\n  import matplotlib.pyplot as plt', 'import numpy as np', 'y = np.array([35, \n  25, 25, 15])', 'mylabels = [""Apples"", ""Bananas"", ""Cherries"", ""Dates""]', '\n', 'plt.pie(y, labels = mylabels)', 'plt.legend(title = ""Four Fruits:"")', 'plt.show()\xa0\n']]"
Machine Learning,Getting Started,https://www.w3schools.com/python/python_ml_getting_started.asp,"Machine Learning is making the computer learn from studying data and statistics.|||Machine Learning is a step into the direction of artificial intelligence (AI).|||Machine Learning is a program that analyses data and learns to predict the outcome.|||In this tutorial we will go back to mathematics and study statistics, and how to calculate important numbers based on data sets.|||We will also learn how to use various Python modules to get the answers we need.|||And we will learn how to make functions that are able to predict the outcome based on what we have learned.|||In the mind of a computer, a data set is any collection of data.It can be anything from an array to a complete database.|||Example of an array:|||[99,86,87,88,111,86,103,87,94,78,77,85,86]|||Example of a database:|||By looking at the array, we can guess that the average value is probably around 80 or 90, and we are also able to determine the highest value and the lowest value, but what else can we do?|||And by looking at the database we can see that the most popular color is white, and the oldest car is 17 years,but what if we could predict if a car had an AutoPass, just by looking at the other values?|||That is what Machine Learning is for! Analyzing data and predicting the outcome!|||In Machine Learning it is common to work with very large data sets. In this   tutorial we will try to make it as easy as possible to understand the   different concepts of machine learning, and we will work with small   easy-to-understand data sets.|||To analyze data, it is important to know what type of data we are dealing with.|||We can split the data types into three main categories:|||Numerical data are numbers, and can be split into two numerical categories:|||Categorical data are values that cannot be measured up against each other. Example: a color value, or any yes/no values.|||Ordinal data are like categorical data, but can be measured up against each other. Example: school grades where A is better than B and so on.|||By knowing the data type of your data source, you will be able to know what technique to use when analyzing them.|||You will learn more about statistics and analyzing data in the next chapters.",Where To Start?,"Numerical@@@Categorical@@@Ordinal|||Discrete Data- numbers that are limited to integers. Example: The number of cars passing by.@@@Continuous Data- numbers that are of infinite value. Example: The   price of an item, or the size of an item",,BMW|||red|||5|||99|||Y&&&Volvo|||black|||7|||86|||Y&&&VW|||gray|||8|||87|||N&&&VW|||white|||7|||88|||Y&&&Ford|||white|||2|||111|||Y&&&VW|||white|||17|||86|||Y&&&Tesla|||red|||2|||103|||Y&&&BMW|||black|||9|||87|||Y&&&Volvo|||gray|||4|||94|||N&&&Ford|||white|||11|||78|||N&&&Toyota|||gray|||12|||77|||N&&&VW|||white|||9|||85|||N&&&Toyota|||blue|||6|||86|||Y,[]
Machine Learning,Mean Median Mode,https://www.w3schools.com/python/python_ml_mean_median_mode.asp,"What can we learn from looking at a group of numbers?|||In Machine Learning (and in mathematics) there are often three values that interests us:|||Example: We have registered the speed of 13 cars:|||speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]|||What is the average, the middle, or the most common speed value?|||The mean value is the average value.|||To calculate the mean, find the sum of all values, and divide the sum by the number of values:|||(99+86+87+88+111+86+103+87+94+78+77+85+86) / 13 =   89.77|||The NumPy module has a method for this. Learn about the NumPy module in our NumPy Tutorial.|||Use the NumPy mean() method to find the average speed:|||The median value is the value in the middle, after you have sorted all the values:|||77, 78, 85, 86, 86, 86, 87, 87, 88, 94, 99, 103, 111|||It is important that the numbers are sorted before you can find the median.|||The NumPy module has a method for this:|||Use the NumPy median() method to find the middle value:|||If there are two numbers in the middle, divide the sum of those numbers by   two.|||77, 78, 85, 86, 86, 86, 87,   87, 94, 98, 99, 103(86 + 87) / 2 = 86.5|||Using the NumPy module:|||The Mode value is the value that appears the most number of times:|||99,86, 87, 88, 111,86, 103, 87, 94, 78, 77, 85,86 = 86|||The SciPy module has a method for this. Learn about the SciPy module in ourSciPy Tutorial.|||Use the SciPy mode() method to find the number that appears the most:|||The Mean, Median, and Mode are techniques that are often used in Machine Learning, so it is important to understand the concept behind them.",Example,Mean - The average value@@@Median - The mid point value@@@Mode - The most common value,,,"[['\n  import numpy', 'speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]', '\n', 'x = numpy.mean(speed)', 'print(x)'], ['\n  import numpy', 'speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]', '\n', 'x = numpy.median(speed)', 'print(x)'], ['\n  import numpy', 'speed = [99,86,87,88,86,103,87,94,78,77,85,86]', '\n', 'x = numpy.median(speed)', 'print(x)'], ['\n  from scipy import stats', 'speed = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]', 'x = stats.mode(speed)', 'print(x)']]"
Machine Learning,Standard Deviation,https://www.w3schools.com/python/python_ml_standard_deviation.asp,"Standard deviation is a number that describes how spread out the values are.|||A low standard deviation means that most of the numbers are close to the mean (average) value.|||A high standard deviation means that the values are spread out over a wider range.|||Example: This time we have registered the speed of 7 cars:|||speed = [86,87,88,86,87,85,86]|||The standard deviation is:|||0.9|||Meaning that most of the values are within the range of 0.9 from the mean value, which is 86.4.|||Let us do the same with a selection of numbers with a wider range:|||speed = [32,111,138,28,59,77,97]|||The standard deviation is:|||37.85|||Meaning that most of the values are within the range of 37.85 from the mean value, which is 77.4.|||As you can see, a higher standard deviation indicates that the values are spread out over a wider range.|||The NumPy module has a method to calculate the standard deviation:|||Use the NumPy std() method to find the standard deviation:|||Variance is another number that indicates how spread out the values are.|||In fact, if you take the square root of the variance, you get the standard deviation!|||Or the other way around, if you multiply the standard deviation by itself, you get the variance!|||To calculate the variance you have to do as follows:|||1. Find the mean:|||(32+111+138+28+59+77+97) / 7 = 77.4|||2. For each value: find the difference from the mean:||| 32 - 77.4 = -45.4111 - 77.4 =  33.6138   - 77.4 =  60.6 28 - 77.4 = -49.4 59 - 77.4 = -18.4 77   - 77.4 = - 0.4 97 - 77.4 =  19.6|||3. For each difference: find the square value:|||(-45.4)2 = 2061.16  (33.6)2 = 1128.96  (60.6)2 = 3672.36 (-49.4)2 = 2440.36(-18.4)2 =  338.56(- 0.4)2 =    0.16 (19.6)2 =  384.16|||4. The variance is the average number of these squared differences:|||(2061.16+1128.96+3672.36+2440.36+338.56+0.16+384.16)   / 7 = 1432.2|||Luckily, NumPy has a method to calculate the variance:|||Use the NumPy var() method to find the variance:|||As we have learned, the formula to find the standard deviation is the square root of the variance:|||  √1432.25 = 37.85|||Or, as in the example from before, use the NumPy to calculate the standard deviation:|||Use the NumPy std() method to find the standard deviation:|||Standard Deviation is often represented by the symbol Sigma: σ |||Variance is often represented by the symbol Sigma Square: σ2 |||The Standard Deviation and Variance are terms that are often used in Machine Learning, so it is important to understand how to get them, and the concept behind them.",Standard Deviation,,,,"[['\n  import numpy', 'speed = [86,87,88,86,87,85,86]', '\n', 'x = numpy.std(speed)', 'print(x)'], ['\n  import numpy', 'speed = [32,111,138,28,59,77,97]', '\n', 'x = numpy.std(speed)', 'print(x)'], ['\n  import numpy', 'speed = [32,111,138,28,59,77,97]', '\n', 'x = numpy.var(speed)', 'print(x)'], ['\n  import numpy', 'speed = [32,111,138,28,59,77,97]', '\n', 'x = numpy.std(speed)', 'print(x)']]"
Machine Learning,Percentile,https://www.w3schools.com/python/python_ml_percentile.asp,"Percentiles are used in statistics to give you a number that describes the value that a given percent of the values are lower than.|||Example: Let's say we have an array of the ages of all the people that lives in a street.|||ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]|||What is the 75. percentile? The answer is 43, meaning that 75% of the people are 43 or younger.|||The NumPy module has a method for finding the specified percentile:|||Use the NumPy percentile() method to find the percentiles:|||What is the age that 90% of the people are younger than?",,,,,"[['\n  import numpy', 'ages = \n  [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]', '\n', 'x = numpy.percentile(ages, 75)', 'print(x)'], ['\n  import numpy', 'ages = \n  [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]', '\n', 'x = numpy.percentile(ages, 90)', 'print(x)']]"
Machine Learning,Data Distribution,https://www.w3schools.com/python/python_ml_data_distribution.asp,"Earlier in this tutorial we have worked with very small amounts of data in our examples, just to understand the different concepts.|||In the real world, the data sets are much bigger, but it can be difficult to gather real world data, at least at an early stage of a project.|||To create big data sets for testing, we use the Python module NumPy, which comes with a number of methods to create random data sets, of any size.|||Create an array containing 250 random floats between 0 and 5:|||To visualize the data set we can draw a histogram with the data we collected.|||We will use the Python module Matplotlib to draw a histogram.|||Learn about the Matplotlib module in our Matplotlib Tutorial.|||Draw a histogram:||||||We use the array from the example above to draw a histogram with 5 bars.|||The first bar represents how many values in the array are between 0 and 1.|||The second bar represents how many values are between 1 and 2.|||Etc.|||Which gives us this result:|||Note: The array values are random numbers and will not   show the exact same result on your computer.|||An array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set as big as you want.|||Create an array with 100000 random numbers, and display them using a   histogram with 100 bars:",How Can we Get Big Data Sets?,52 values are between 0 and 1@@@48 values are between 1 and 2@@@49 values are between 2 and 3@@@51 values are between 3 and 4@@@50 values are between 4 and 5,,,"[['\n  import numpy', 'x = numpy.random.uniform(0.0, 5.0, 250)', '\n', 'print(x)'], ['\n  import numpy', 'import matplotlib.pyplot as plt', 'x = \n  numpy.random.uniform(0.0, 5.0, 250)', 'plt.hist(x, 5)', 'plt.show()'], ['\n  import numpy', 'import matplotlib.pyplot as plt', 'x = \n  numpy.random.uniform(0.0, 5.0, 100000)', 'plt.hist(x, 100)', 'plt.show()']]"
Machine Learning,Normal Data Distribution,https://www.w3schools.com/python/python_ml_normal_data_distribution.asp,"In the previous chapter we learned how to create a completely random array, of a given size, and between two given values.|||In this chapter we will learn how to create an array where the values are concentrated around a given value.|||In probability theory this kind of data distribution is known as the normal data distribution, or the Gaussian data distribution, after the mathematician Carl Friedrich Gauss who came up with the formula of this data distribution.|||A typical normal data distribution:||||||Note: A normal distribution graph is also known as the   bell curve because of it's characteristic shape of a bell.|||We use the array from the numpy.random.normal() method, with 100000 values,  to draw a histogram with 100 bars.|||We specify that the mean value is 5.0, and the standard deviation is 1.0.|||Meaning that the values should be concentrated around 5.0, and rarely further away than 1.0 from the mean.|||And as you can see from the histogram, most values are between 4.0 and 6.0, with a top at approximately 5.0.",,,,,"[['\n  import numpy', 'import matplotlib.pyplot as plt', 'x = \n  numpy.random.normal(5.0, 1.0, 100000)', 'plt.hist(x, 100)', 'plt.show()']]"
Machine Learning,Scatter Plot,https://www.w3schools.com/python/python_ml_scatterplot.asp,"A scatter plot is a diagram where each value in the data set is represented by a dot.|||The Matplotlib module has a method for drawing scatter plots, it needs two arrays of the same length, one for the values of the x-axis, and one for the values of the y-axis:|||x = [5,7,8,7,2,17,2,9,4,11,12,9,6]|||y = [99,86,87,88,111,86,103,87,94,78,77,85,86]|||The x array represents the age of each car.|||The y array represents the speed of each car.|||Use the scatter() method to draw a scatter   plot diagram:||||||The x-axis represents ages, and the y-axis represents speeds.|||What we can read from the diagram is that the two fastest cars were both 2 years old, and the slowest car was 12 years old.|||Note: It seems that the newer the car, the faster it   drives, but that could be a coincidence, after all we only registered 13 cars.|||In Machine Learning the data sets can contain thousands-, or even millions, of values.|||You might not have real world data when you are testing an algorithm, you might have to use randomly generated values.|||As we have learned in the previous chapter, the NumPy module can help us with that!|||Let us create two arrays that are both filled with 1000 random numbers from a normal data distribution.|||The first array will have the mean set to 5.0 with a standard deviation of 1.0.|||The second array will have the mean set to 10.0 with a standard deviation of 2.0:|||A scatter plot with 1000 dots:||||||We can see that the dots are concentrated around the value 5 on the x-axis, and 10 on the y-axis.|||We can also see that the spread is wider on the y-axis than on the x-axis.",,,,,"[['\n  import matplotlib.pyplot as plt', 'x = \n  [5,7,8,7,2,17,2,9,4,11,12,9,6]', 'y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]', 'plt.scatter(x, y)', '\n  plt.show()', '\n'], ['\n  import numpy', 'import matplotlib.pyplot as plt', 'x = numpy.random.normal(5.0, \n  1.0, 1000)', 'y = numpy.random.normal(10.0, 2.0, 1000)', 'plt.scatter(x, y)', '\n  plt.show()', '\n']]"
Machine Learning,Linear Regression,https://www.w3schools.com/python/python_ml_linear_regression.asp,"The term regression is used when you try to find the relationship between variables.|||In Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events.|||Linear regression uses the relationship between the data-points to draw a straight line through all them.|||This line can be used to predict future values.|||In Machine Learning, predicting the future is very important.|||Python has methods for finding a relationship between data-points and to draw a line of linear regression. We will show you how to use these methods instead of going through the mathematic formula.|||In the example below, the x-axis represents age, and the y-axis represents speed. We have registered the age and speed of 13 cars as they were passing a tollbooth. Let us see if the data we collected could be used in a linear regression:|||Start by drawing a scatter plot:||||||Import scipy and draw the line of Linear Regression:||||||Import the modules you need.|||You can learn about the Matplotlib module in our Matplotlib Tutorial.|||You can learn about the SciPy module in our SciPy Tutorial.|||import matplotlib.pyplot as pltfrom scipy   import stats|||Create the arrays that represent the values of the x and y axis:|||x = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = [99,86,87,88,111,86,103,87,94,78,77,85,86]|||Execute a method that returns some important key values of Linear Regression:|||slope, intercept, r,   p, std_err = stats.linregress(x, y)|||Create a function that uses the slope and intercept values to return a new value. This new value represents where on the y-axis the corresponding x value will be placed:|||def myfunc(x):  return slope * x + intercept|||Run each value of the x array through the function. This will result in a new array with new values for the y-axis:|||  mymodel = list(map(myfunc, x))|||Draw the original scatter plot:|||plt.scatter(x, y)|||Draw the line of linear regression:|||  plt.plot(x, mymodel)|||Display the diagram:|||  plt.show()|||It is important to know how the relationship between the values of the x-axis and the values of the y-axis is, if there are no relationship the linear regression can not be used to predict anything.|||This relationship - the coefficient of correlation - is calledr.|||The r value ranges from -1 to 1, where 0 means no relationship, and 1 (and -1) means 100% related.|||Python and the Scipy module will compute this value for you, all you have to do is feed it with the x and y values.|||How well does my data fit in a linear regression?|||Note: The result -0.76 shows that there is a relationship,   not perfect, but it indicates that we could use linear regression in future   predictions.|||Now we can use the information we have gathered to predict future values.|||Example: Let us try to predict the speed of a 10 years old car.|||To do so, we need the same myfunc() function from the example above:|||def myfunc(x):  return slope * x + intercept|||Predict the speed of a 10 years old car:|||The example predicted a speed at 85.6, which we also could read from the diagram:|||Let us create an example where linear regression would not be the best method to predict future values.|||These values for the x- and y-axis should result in a very bad fit for linear   regression:||||||And the r for relationship?|||You should get a very low r value.|||The result: 0.013 indicates a very bad relationship, and tells us that this data set is not suitable for linear regression.",Example Explained|||Bad Fit?|||Example|||Example,,,,"[['\n  import matplotlib.pyplot as plt', 'x = [5,7,8,7,2,17,2,9,4,11,12,9,6]', 'y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]', 'plt.scatter(x, y)', 'plt.show()'], ['\n  import matplotlib.pyplot as plt', 'from scipy import stats', '\n', 'x = [5,7,8,7,2,17,2,9,4,11,12,9,6]', 'y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]', 'slope, intercept, r, \n  p, std_err = stats.linregress(x, y)', 'def myfunc(x):', '\xa0 \n  return slope * x + intercept', 'mymodel = list(map(myfunc, x))', '\n  plt.scatter(x, y)', 'plt.plot(x, mymodel)', 'plt.show()'], ['\n  from scipy import stats', 'x = \n  [5,7,8,7,2,17,2,9,4,11,12,9,6]', 'y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]', 'slope, intercept, r, \n  p, std_err = stats.linregress(x, y)', 'print(r)', '\n'], ['\n  from scipy import stats', '\n', 'x = [5,7,8,7,2,17,2,9,4,11,12,9,6]', 'y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]', 'slope, intercept, r, \n  p, std_err = stats.linregress(x, y)', 'def myfunc(x):', '\xa0 \n  return slope * x + intercept', 'speed = myfunc(10)', '\n  print(speed)'], ['\n  import matplotlib.pyplot as plt', 'from scipy import stats', '\n', 'x = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]', 'y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]', 'slope, \n  intercept, r, p, std_err = stats.linregress(x, y)', 'def \n  myfunc(x):', '\xa0 return slope * x + intercept', 'mymodel = list(map(myfunc, \n  x))', 'plt.scatter(x, y)', 'plt.plot(x, mymodel)', 'plt.show()'], ['\n  import numpy', 'from scipy import stats', 'x = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]', 'y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]', 'slope, intercept, r, \n  p, std_err = stats.linregress(x, y)', 'print(r)', '\n']]"
Machine Learning,Polynomial Regression,https://www.w3schools.com/python/python_ml_polynomial_regression.asp,"If your data points clearly will not fit a linear regression (a straight line through all data points), it might be ideal for polynomial regression.|||Polynomial regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points.|||Python has methods for finding a relationship between data-points and to draw a line of polynomial regression. We will show you how to use these methods instead of going through the mathematic formula.|||In the example below, we have registered 18 cars as they were passing a certain tollbooth.|||We have registered the car's speed, and the time of day (hour) the passing occurred.|||The x-axis represents the hours of the day and the y-axis represents the speed:|||Start by drawing a scatter plot:||||||Import numpy and   matplotlib then draw the line of   Polynomial Regression:||||||Import the modules you need.|||You can learn about the NumPy module in our NumPy Tutorial.|||You can learn about the SciPy module in our SciPy Tutorial.|||import numpyimport matplotlib.pyplot as plt|||Create the arrays that represent the values of the x and y axis:|||  x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y =   [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]|||NumPy has a method that lets us make a polynomial model:|||  mymodel =   numpy.poly1d(numpy.polyfit(x, y, 3))|||Then specify how the line will display, we start at position 1, and end at position 22:|||  myline = numpy.linspace(1, 22, 100)|||Draw the original scatter plot:|||plt.scatter(x, y)|||Draw the line of polynomial regression:|||  plt.plot(myline, mymodel(myline))|||Display the diagram:|||  plt.show()|||It is important to know how well the relationship between the values of the x- and y-axis is, if there are no relationship the polynomial regression can not be used to predict anything.|||The relationship is measured with a value called the r-squared.|||The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related.|||Python and the Sklearn module will compute this value for you, all you have to do is feed it with the x and y arrays:|||How well does my data fit in a polynomial regression?|||Note:  The result 0.94 shows that there is a very good relationship,   and we can use polynomial regression in future   predictions.|||Now we can use the information we have gathered to predict future values.|||Example: Let us try to predict the speed of a car that passes the tollbooth at around 17 P.M:|||To do so, we need the same mymodel array from the example above:|||  mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))|||Predict the speed of a car passing at 17 P.M:|||The example predicted a speed to be 88.87, which we also could read from the diagram:|||Let us create an example where polynomial regression would not be the best method to predict future values.|||These values for the x- and y-axis should result in a very bad fit for   polynomial   regression:||||||And the r-squared value?|||You should get a very low r-squared value.|||The result: 0.00995 indicates a very bad relationship, and tells us that this data set is not suitable for polynomial regression.",Example Explained|||Bad Fit?|||Example|||Example,,,,"[['\n  import matplotlib.pyplot as plt', 'x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]', 'y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]', '\n  plt.scatter(x, y)', 'plt.show()'], ['\n  import numpy', 'import matplotlib.pyplot as plt', 'x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]', 'y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]', 'mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))', 'myline = numpy.linspace(1, 22, 100)', 'plt.scatter(x, y)', 'plt.plot(myline, mymodel(myline))', '\n  plt.show()'], ['\n  import numpy', 'from sklearn.metrics import r2_score', 'x = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]', 'y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]', 'mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))', 'print(r2_score(y, mymodel(x)))'], ['\n  import numpy', 'from sklearn.metrics import r2_score', 'x = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]', 'y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]', 'mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))', 'speed = mymodel(17)', 'print(speed)'], ['\n  import numpy', 'import matplotlib.pyplot as plt', 'x = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]', 'y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]', 'mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))', 'myline = numpy.linspace(2, 95, 100)', '\n', 'plt.scatter(x, y)', 'plt.plot(myline, mymodel(myline))', 'plt.show()'], ['\n  import numpy', 'from sklearn.metrics import r2_score', 'x = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]', 'y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]', 'mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))', 'print(r2_score(y, mymodel(x)))', '\n']]"
Machine Learning,Multiple Regression,https://www.w3schools.com/python/python_ml_multiple_regression.asp,"Multiple regression is like linear regression, but with more than one independent value, meaning that we try to predict a value based on two or more variables.|||Take a look at the data set below, it contains some information about cars.|||We can predict the CO2 emission of a car based on the size of the engine, but with multiple regression we can throw in more variables, like the weight of the car, to make the prediction more accurate.|||In Python we have modules that will do the work for us. Start by importing the Pandas module.|||import pandas|||Learn about the Pandas module in our Pandas Tutorial.|||The Pandas module allows us to read csv files and return a DataFrame object.|||The file is meant for testing purposes only, you can download it here: cars.csv|||df = pandas.read_csv(""cars.csv"")|||Then make a list of the independent values and call this variable X. |||Put the dependent values in a variable called y.|||X = df[['Weight', 'Volume']]y = df['CO2']|||Tip:  It is common to name the list of independent values with a upper case X, and the list of dependent values with a lower case y.|||We will use some methods from the sklearn module, so we will have to import that module as well:|||from sklearn import linear_model|||From the sklearn module we will use the LinearRegression() method to create a linear regression object.|||This object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:|||regr = linear_model.LinearRegression()regr.fit(X, y)|||Now we have a regression object that are ready to predict CO2 values based on a car's weight and volume:|||#predict the CO2 emission of a car where the weight   is 2300kg, and the volume is 1300cm3:  predictedCO2 = regr.predict([[2300, 1300]])|||See the whole example in action:|||Run example »|||We have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every kilometer it drives.|||The coefficient is a factor that describes the relationship with an unknown variable.|||Example: if x is a variable, then2x is x two times. x is the unknown variable, and the number 2 is the coefficient.|||In this case, we can ask for the coefficient value of weight against CO2, and for volume against CO2. The answer(s) we get tells us what would happen if we increase, or decrease, one of the independent values.|||Print the coefficient values of the regression object:|||Run example »|||The result array represents the coefficient values of weight and volume.|||Weight: 0.00755095Volume: 0.00780526|||These values tell us that if the weight increase by 1kg, the CO2 emission increases by 0.00755095g.|||And if the engine size (Volume) increases by 1 cm3, the CO2 emission increases by 0.00780526 g.|||I think that is a fair guess, but let test it!|||We have already predicted that if a car with a 1300cm3 engine weighs 2300kg, the CO2 emission will be approximately 107g.|||What if we increase the weight with 1000kg?|||Copy the example from before, but change the weight from 2300 to 3300:|||Run example »|||We have predicted that a car with 1.3 liter engine, and a weight of 3300 kg, will release approximately 115 grams of CO2 for every kilometer it drives.|||Which shows that the coefficient of 0.00755095 is correct:|||107.2087328 + (1000 * 0.00755095) = 114.75968",Multiple Regression|||How Does it Work?|||Result Explained,,,Toyota|||Aygo|||1000|||790|||99&&&Mitsubishi|||Space Star|||1200|||1160|||95&&&Skoda|||Citigo|||1000|||929|||95&&&Fiat|||500|||900|||865|||90&&&Mini|||Cooper|||1500|||1140|||105&&&VW|||Up!|||1000|||929|||105&&&Skoda|||Fabia|||1400|||1109|||90&&&Mercedes|||A-Class|||1500|||1365|||92&&&Ford|||Fiesta|||1500|||1112|||98&&&Audi|||A1|||1600|||1150|||99&&&Hyundai|||I20|||1100|||980|||99&&&Suzuki|||Swift|||1300|||990|||101&&&Ford|||Fiesta|||1000|||1112|||99&&&Honda|||Civic|||1600|||1252|||94&&&Hundai|||I30|||1600|||1326|||97&&&Opel|||Astra|||1600|||1330|||97&&&BMW|||1|||1600|||1365|||99&&&Mazda|||3|||2200|||1280|||104&&&Skoda|||Rapid|||1600|||1119|||104&&&Ford|||Focus|||2000|||1328|||105&&&Ford|||Mondeo|||1600|||1584|||94&&&Opel|||Insignia|||2000|||1428|||99&&&Mercedes|||C-Class|||2100|||1365|||99&&&Skoda|||Octavia|||1600|||1415|||99&&&Volvo|||S60|||2000|||1415|||99&&&Mercedes|||CLA|||1500|||1465|||102&&&Audi|||A4|||2000|||1490|||104&&&Audi|||A6|||2000|||1725|||114&&&Volvo|||V70|||1600|||1523|||109&&&BMW|||5|||2000|||1705|||114&&&Mercedes|||E-Class|||2100|||1605|||115&&&Volvo|||XC70|||2000|||1746|||117&&&Ford|||B-Max|||1600|||1235|||104&&&BMW|||2|||1600|||1390|||108&&&Opel|||Zafira|||1600|||1405|||109&&&Mercedes|||SLK|||2500|||1395|||120,"[['\n  import pandas', 'from sklearn import linear_model', 'df = pandas.read_csv(""cars.csv"")', '\n', ""X = df[['Weight', 'Volume']]"", ""y = df['CO2']"", 'regr = \n  linear_model.LinearRegression()', 'regr.fit(X, y)', '#predict the CO2 \n  emission of a car where the weight is 2300kg, and the volume is 1300cm', <sup>3</sup>, ':', '\n  predictedCO2 = regr.predict([[2300, 1300]])', '\n', 'print(predictedCO2)'], ['\n  import pandas', 'from sklearn import linear_model', 'df = pandas.read_csv(""cars.csv"")', '\n', ""X = df[['Weight', 'Volume']]"", ""y = df['CO2']"", 'regr = \n  linear_model.LinearRegression()', 'regr.fit(X, y)', 'print(regr.coef_)'], ['\n  import pandas', 'from sklearn import linear_model', 'df = pandas.read_csv(""cars.csv"")', '\n', ""X = df[['Weight', 'Volume']]"", ""y = df['CO2']"", 'regr = \n  linear_model.LinearRegression()', 'regr.fit(X, y)', 'predictedCO2 = regr.predict([[3300, 1300]])', '\n', 'print(predictedCO2)']]"
Machine Learning,Scale,https://www.w3schools.com/python/python_ml_scale.asp,"When your data has different values, and even different measurement units, it can be difficult to compare them. What is kilograms compared to meters? Or altitude compared to time?|||The answer to this problem is scaling. We can scale data into new values that are easier to compare.|||Take a look at the table below, it is the same data set that we used in the multiple regression chapter, but this time the volume column contains values in liters instead of cm3 (1.0 instead of 1000).|||The file is meant for testing purposes only, you can download it here: cars2.csv|||It can be difficult to compare the volume 1.0 with the weight 790, but if we scale them both into comparable values, we can easily see how much one value is compared to the other.|||There are different methods for scaling data, in this tutorial we will use a method called standardization.|||The standardization method  uses this formula:|||z = (x - u) / s|||Where z is the new value, x is the original value, u is the mean and s is the standard deviation.|||If you take the weight column from the data set above, the first value is 790, and the scaled value will be:|||If you take the volume column from the data set above, the first value is 1.0, and the scaled value will be:|||(1.0 - 1.61) / 0.38 = -1.59|||Now you can compare -2.1 with -1.59 instead of comparing 790 with 1.0.|||You do not have to do this manually,the Python sklearn module has a method called StandardScaler()which returns a Scaler object with methods for transforming data sets.|||Scale all values in the Weight and Volume columns:|||Note that the first two values are -2.1 and -1.59, which corresponds to our   calculations: |||Run example »|||The task in the Multiple Regression chapter was to predict the CO2 emission from a car when you only knew its weight and volume.|||When the data set is scaled, you will have to use the scale when you predict values:|||Predict the CO2 emission from a 1.3 liter car that weighs 2300 kilograms:|||Run example »",Scale Features|||Predict CO2 Values,,,Toyota|||Aygo|||1.0|||790|||99&&&Mitsubishi|||Space Star|||1.2|||1160|||95&&&Skoda|||Citigo|||1.0|||929|||95&&&Fiat|||500|||0.9|||865|||90&&&Mini|||Cooper|||1.5|||1140|||105&&&VW|||Up!|||1.0|||929|||105&&&Skoda|||Fabia|||1.4|||1109|||90&&&Mercedes|||A-Class|||1.5|||1365|||92&&&Ford|||Fiesta|||1.5|||1112|||98&&&Audi|||A1|||1.6|||1150|||99&&&Hyundai|||I20|||1.1|||980|||99&&&Suzuki|||Swift|||1.3|||990|||101&&&Ford|||Fiesta|||1.0|||1112|||99&&&Honda|||Civic|||1.6|||1252|||94&&&Hundai|||I30|||1.6|||1326|||97&&&Opel|||Astra|||1.6|||1330|||97&&&BMW|||1|||1.6|||1365|||99&&&Mazda|||3|||2.2|||1280|||104&&&Skoda|||Rapid|||1.6|||1119|||104&&&Ford|||Focus|||2.0|||1328|||105&&&Ford|||Mondeo|||1.6|||1584|||94&&&Opel|||Insignia|||2.0|||1428|||99&&&Mercedes|||C-Class|||2.1|||1365|||99&&&Skoda|||Octavia|||1.6|||1415|||99&&&Volvo|||S60|||2.0|||1415|||99&&&Mercedes|||CLA|||1.5|||1465|||102&&&Audi|||A4|||2.0|||1490|||104&&&Audi|||A6|||2.0|||1725|||114&&&Volvo|||V70|||1.6|||1523|||109&&&BMW|||5|||2.0|||1705|||114&&&Mercedes|||E-Class|||2.1|||1605|||115&&&Volvo|||XC70|||2.0|||1746|||117&&&Ford|||B-Max|||1.6|||1235|||104&&&BMW|||2|||1.6|||1390|||108&&&Opel|||Zafira|||1.6|||1405|||109&&&Mercedes|||SLK|||2.5|||1395|||120,"[['\n  import pandas', 'from sklearn import linear_model', 'from \n  sklearn.preprocessing import StandardScaler', 'scale = StandardScaler()', '\n', 'df = pandas.read_csv(""cars2.csv"")', ""X = df[['Weight', 'Volume']]"", '\n', 'scaledX = scale.fit_transform(X)', '\n  print(scaledX)'], ['\n  import pandas', 'from sklearn import linear_model', 'from \n  sklearn.preprocessing import StandardScaler', 'scale = StandardScaler()', '\n', 'df = pandas.read_csv(""cars2.csv"")', ""X = df[['Weight', 'Volume']]"", ""\n  y = df['CO2']"", '\n', 'scaledX = scale.fit_transform(X)', '\n  regr = linear_model.LinearRegression()', 'regr.fit(scaledX, y)', 'scaled = \n  scale.transform([[2300, 1.3]])', 'predictedCO2 = regr.predict([scaled[0]])', '\n  print(predictedCO2)']]"
Machine Learning,Train/Test,https://www.w3schools.com/python/python_ml_train_test.asp,"In Machine Learning we create models to predict the outcome of certain events,like in the previous chapter where we predicted the CO2 emission of a car when we knewthe weight and engine size.|||To measure if the model is good enough, we can use a method called Train/Test.|||Train/Test is a method to measure the accuracy of your model.|||It is called Train/Test because you split the the data set into two sets: a training set and a testing set.|||   80% for training, and 20% for testing.|||You train the model using the training set.|||You test the model using the testing set.|||Train the model means create the model.|||Test the model means test the accuracy of the model.|||Start with a data set you want to test.|||Our data set illustrates 100 customers in a shop, and their shopping habits.|||The x axis represents the number of minutes before making a purchase.|||The y axis represents the amount of money spent on the purchase.||||||Run example »|||The training set should be a random selection of 80% of the original data.|||The testing set should be the remaining 20%.|||train_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = y[80:]|||Display the same scatter plot with the training set:|||It looks like the original data set, so it seems to be a fair selection:||||||Run example »|||To make sure the testing set is not completely different, we will take a look at the testing set as well.|||The testing set also looks like the original data set:||||||Run example »|||What does the data set look like? In my opinion I think the best fit would be a polynomial regression, so let us draw a line of polynomial regression.|||To draw a line through the data points, we use the plot() method of the matplotlib module:|||Draw a polynomial regression line through the data points:||||||Run example »|||The result can back my suggestion of the data set fitting a polynomial regression, even though it would give us some weird results if we try to predict values outside of the data set. Example: the line indicates that a customer spending 6 minutes in the shop would make a purchase worth 200. That is probably a sign of overfitting.|||But what about the R-squared score? The R-squared score is a good indicator of how well my data set is fitting the model.|||Remember R2, also known as R-squared?|||It measures the relationship between the x axis and the y axis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 means totally related.|||The sklearn module has a method called r2_score() that will help us find this relationship.|||In this case we would like to measure the relationship  between the minutes a customer stays in the shop and how much money they spend.|||How well does my training data fit in a polynomial regression?|||Note:  The result 0.799 shows that there is a OK relationship.|||Now we have made a model that is OK, at least when it comes to training data.|||Now we want to test the model with the testing data as well, to see if gives us the same result.|||Let us find the R2 score when using testing data:|||Note:  The result 0.809 shows that the model fits the   testing set as well, and we are confident that we can use the model to predict   future values.|||Now that we have established that our model is OK, we can start predicting new values.|||How much money will a buying customer spend, if she or he stays in the shop   for 5 minutes?|||The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:",Split Into Train/Test|||Fit the Data Set,,,,"[['\n  import numpy', 'import matplotlib.pyplot as plt', 'numpy.random.seed(2)', '\n', 'x = numpy.random.normal(3, 1, 100)', 'y = numpy.random.normal(150, 40, \n  100) / x', 'plt.scatter(x, y)', 'plt.show()'], ['\n  plt.scatter(train_x, \n  train_y)', 'plt.show()'], ['\n  plt.scatter(test_x, \n  test_y)', 'plt.show()'], ['\n  import numpy', 'import \n  matplotlib.pyplot as plt', 'numpy.random.seed(2)', 'x = \n  numpy.random.normal(3, 1, 100)', 'y = numpy.random.normal(150, 40, 100) / x', '\n', 'train_x = x[:80]', 'train_y = y[:80]', 'test_x = x[80:]', 'test_y = \n  y[80:]', 'mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))', '\n', 'myline = numpy.linspace(0, 6, 100)', 'plt.scatter(train_x, train_y)', '\n  plt.plot(myline, mymodel(myline))', 'plt.show()'], ['\n  import numpy', 'from sklearn.metrics import r2_score', 'numpy.random.seed(2)', '\n', 'x = numpy.random.normal(3, 1, 100)', 'y = numpy.random.normal(150, 40, \n  100) / x', 'train_x = x[:80]', 'train_y = y[:80]', 'test_x = x[80:]', '\n  test_y = y[80:]', 'mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))', 'r2 = r2_score(train_y, mymodel(train_x))', 'print(r2)'], ['\n  import numpy', 'from sklearn.metrics import r2_score', 'numpy.random.seed(2)', '\n', 'x = numpy.random.normal(3, 1, 100)', 'y = numpy.random.normal(150, 40, \n  100) / x', 'train_x = x[:80]', 'train_y = y[:80]', 'test_x = x[80:]', '\n  test_y = y[80:]', 'mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))', 'r2 = r2_score(test_y, mymodel(test_x))', 'print(r2)'], ['\n  print(mymodel(5))']]"
Machine Learning,Decision Tree,https://www.w3schools.com/python/python_ml_decision_tree.asp,"|||In this chapter we will show you how to make a ""Decision Tree"". A Decision Tree is a Flow Chart, and can help you make decisions based on previous experience.|||In the example, a person will try to decide if he/she should go to a comedy show or not.|||Luckily our example person has registered every time there was a comedy show in town, and registered some information about the comedian, and also registered if he/she went or not.|||Now, based on this data set, Python can create a decision tree that can be used to decide if any new shows are worth attending to.|||First, import the modules you need, and read the dataset with pandas:|||Read and print the data set:|||Run example »|||To make a decision tree, all data has to be numerical.|||We have to convert the non numerical columns 'Nationality' and 'Go' into numerical values.|||Pandas has a map() method that takes a dictionary with information on how to convert the values.|||{'UK': 0, 'USA': 1, 'N': 2}|||Means convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2.|||Change string values into numerical values:|||Run example »|||Then we have to separate the feature columns from the target column.|||The feature columns are the columns that we try to predict from, and the target column is the column with the values we try to predict.|||X is the feature columns, y is the target column:|||Run example »|||Now we can create the actual decision tree, fit it with our details, and save a .png file on the computer:|||Create a Decision Tree, save it as an image, and show the image:|||Run example »|||The decision tree uses your earlier decisions to calculate the odds for you to wanting to go see a comedian or not.|||Let us read the different aspects of the decision tree:||||||Rank <= 6.5 means that every comedian with a rank of 6.5 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right).|||gini = 0.497 refers to the quality of the split, and is always a number between 0.0 and 0.5, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle.|||samples = 13 means that there are 13 comedians left at this point in the decision, which is all of them since this is the first step.|||value = [6, 7] means that of these 13 comedians, 6 will get a ""NO"", and 7 will get a ""GO"".|||There are many ways to split the samples, we use the GINI method in this tutorial.|||The Gini method uses this formula:|||Gini = 1 - (x/n)2 - (y/n)2|||Where x is the number of positive answers(""GO""), n is the number of samples, and y is the number of negative answers (""NO""), which gives us this calculation:|||1 - (7 / 13)2 - (6 / 13)2 = 0.497||||||The next step contains two boxes, one box for the comedians with a 'Rank' of 6.5 or lower, and one box with the rest.|||gini = 0.0 means all of the samples got the same result.|||samples = 5 means that there are 5 comedians left in this branch (5 comedian with a Rank of 6.5 or lower).|||value = [5, 0] means that 5 will get a ""NO"" and 0 will get a ""GO"".|||Nationality <= 0.5 means that the comedians with a nationality value of less than 0.5 will follow the arrow to the left (which means everyone from the UK, ), and the rest will follow the arrow to the right.|||gini = 0.219 means that about 22% of the samples would go in one direction.|||samples = 8 means that there are 8 comedians left in this branch (8 comedian with a Rank higher than 6.5).|||value = [1, 7] means that of these 8 comedians, 1 will get a ""NO"" and 7 will get a ""GO"".||||||Age <= 35.5 means that comedians at the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the right.|||gini = 0.375 means that about 37,5% of the samples would go in one direction.|||samples = 4 means that there are 4 comedians left in this branch (4 comedians from the UK).|||value = [1, 3] means that of these 4 comedians, 1 will get a ""NO"" and 3 will get a ""GO"".|||gini = 0.0 means all of the samples got the same result.|||samples = 4 means that there are 4 comedians left in this branch (4 comedians not from the UK).|||value = [0, 4] means that of these 4 comedians, 0 will get a ""NO"" and 4 will get a ""GO"".||||||gini = 0.0 means all of the samples got the same result.|||samples = 2 means that there are 2 comedians left in this branch (2 comedians at the age 35.5 or younger).|||value = [0, 2] means that of these 2 comedians, 0 will get a ""NO"" and 2 will get a ""GO"".|||Experience <= 9.5 means that comedians with 9.5 years of experience, or less, will follow the arrow to the left, and the rest will follow the arrow to the right.|||gini = 0.5 means that 50% of the samples would go in one direction.|||samples = 2 means that there are 2 comedians left in this branch (2 comedians older than 35.5).|||value = [1, 1] means that of these 2 comedians, 1 will get a ""NO"" and 1 will get a ""GO"".||||||gini = 0.0 means all of the samples got the same result.|||samples = 1 means that there is 1 comedian left in this branch (1 comedian with 9.5 years of experience or less).|||value = [0, 1] means that 0 will get a ""NO"" and 1 will get a ""GO"".|||gini = 0.0 means all of the samples got the same result.|||samples = 1 means that there is 1 comedians left in this branch (1 comedian with more than 9.5 years of experience).|||value = [1, 0] means that 1 will get a ""NO"" and 0 will get a ""GO"".|||We can use the Decision Tree to predict new values.|||Example: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, and a comedy ranking of 7?|||Use predict() method to predict new values:|||Run example »|||What would the answer be if the comedy rank was 6?|||Run example »|||You will see that the Decision Tree gives you different results if you run   it enough times, even if you feed it with the same data.|||That is because the Decision Tree does not give us a 100% certain answer. It is based on the   probability of an outcome, and the answer will vary.",How Does it Work?|||Result Explained|||Example|||Different Results,,,36|||10|||9|||UK|||NO&&&42|||12|||4|||USA|||NO&&&23|||4|||6|||N|||NO&&&52|||4|||4|||USA|||NO&&&43|||21|||8|||USA|||YES&&&44|||14|||5|||UK|||NO&&&66|||3|||7|||N|||YES&&&35|||14|||9|||UK|||YES&&&52|||13|||7|||N|||YES&&&35|||5|||9|||N|||YES&&&24|||3|||5|||USA|||NO&&&18|||3|||7|||UK|||YES&&&45|||9|||9|||UK|||YES,"[['\n  import pandas', 'from sklearn import tree', 'import pydotplus', 'from \n  sklearn.tree import DecisionTreeClassifier', 'import matplotlib.pyplot as plt', '\n  import matplotlib.image as pltimg', 'df = pandas.read_csv(""shows.csv"")', '\n', 'print(df)'], [""\n  d = {'UK': 0, \n  'USA': 1, 'N': 2}"", ""df['Nationality'] = df['Nationality'].map(d)"", ""d = \n  {'YES': 1, 'NO': 0}"", ""df['Go'] = df['Go'].map(d)"", 'print(df)'], [""\n  features = ['Age', 'Experience', 'Rank', 'Nationality']"", 'X = df[features]', ""y = df['Go']"", '\n  print(X)', 'print(y)'], ['\n  dtree = DecisionTreeClassifier()', 'dtree = dtree.fit(X, y)', 'data = \n  tree.export_graphviz(dtree, out_file=None, feature_names=features)', 'graph = \n  pydotplus.graph_from_dot_data(data)', ""graph.write_png('mydecisiontree.png')"", '\n', ""img=pltimg.imread('mydecisiontree.png')"", 'imgplot = plt.imshow(img)', '\n  plt.show()'], ['\n  print(dtree.predict([[40, 10, 7, 1]]))'], ['\n  print(dtree.predict([[40, 10, 6, 1]]))']]"
Python MySQL,MySQL Get Started,https://www.w3schools.com/python/python_mysql_getstarted.asp,"Python can be used in database applications.|||One of the most popular databases is MySQL.|||To be able to experiment with the code examples in this tutorial, you should have MySQL installed on your computer.|||You can download a free MySQL database athttps://www.mysql.com/downloads/.|||Python needs a MySQL driver to access the MySQL database.|||In this tutorial we will use the driver ""MySQL Connector"".|||We recommend that you use PIP to install ""MySQL Connector"".|||PIP is most likely already installed in your Python environment.|||Navigate your command line to the location of PIP, and type the following:|||Download and install ""MySQL Connector"":|||Now you have downloaded and installed a MySQL driver.|||To test if the installation was successful, or if you already have ""MySQL Connector"" installed, create a Python page with the following content:|||demo_mysql_test.py:|||If the above code was executed with no errors, ""MySQL Connector"" is installed and ready to be used.|||Start by creating a connection to the database.|||Use the username and password from your MySQL database:|||demo_mysql_connection.py:|||Now you can start querying the database using SQL statements.",MySQL Database|||Test MySQL Connector,,,,[]
Python MySQL,MySQL Create Database,https://www.w3schools.com/python/python_mysql_create_db.asp,"To create a database in MySQL, use the ""CREATE DATABASE"" statement:|||create a database named ""mydatabase"":|||If the above code was executed with no errors, you have successfully created a database.|||You can check if a database exist by listing all databases in your system by using the ""SHOW DATABASES"" statement:|||Return a list of your system's databases:|||Or you can try to access the database when making the connection:|||Try connecting to the database ""mydatabase"":|||If the database does not exist, you will get an error.",,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0 \n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '""', ')', 'mycursor = mydb.cursor()', '\n  mycursor.execute(""SHOW DATABASES"")', 'for x in mycursor:', '\xa0 \n  print(x)'], ['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0 \n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\n', <strong>  
  database=""mydatabase""</strong>, ')']]"
Python MySQL,MySQL Create Table,https://www.w3schools.com/python/python_mysql_create_table.asp,"To create a table in MySQL, use the ""CREATE TABLE"" statement.|||Make sure you define the name of the database when you create the connection|||Create a table named ""customers"":|||If the above code was executed with no errors, you have now successfully created a table.|||You can check if a table exist by listing all tables in your database with the ""SHOW TABLES"" statement:|||Return a list of your system's databases:|||When creating a table, you should also create a column with a unique key for each record.|||This can be done by defining a PRIMARY KEY.|||We use the statement ""INT AUTO_INCREMENT PRIMARY KEY"" which will insert a unique number for each record. Starting at 1, and increased by one for each record.|||Create primary key when creating the table:|||If the table already exists, use the ALTER TABLE keyword:|||Create primary key on an existing table:",Primary Key,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0 \n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', 'mycursor = mydb.cursor()', '\n  mycursor.execute(""SHOW TABLES"")', 'for x in mycursor:', '\xa0 \n  print(x)'], ['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\n  \xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\n  \xa0 database=""mydatabase""', ')', 'mycursor = mydb.cursor()', '\n', 'mycursor.execute(""CREATE TABLE customers (id INT AUTO_INCREMENT \n  PRIMARY KEY, name VARCHAR(255), \n  address VARCHAR(255))"")'], ['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\n  \xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\n  \xa0 database=""mydatabase""', ')', 'mycursor = mydb.cursor()', '\n', 'mycursor.execute(""ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT \n  PRIMARY KEY"")']]"
Python MySQL,MySQL Insert,https://www.w3schools.com/python/python_mysql_insert.asp,"To fill a table in MySQL, use the ""INSERT INTO"" statement.|||Insert a record in the ""customers"" table:|||Important!: Notice the statement:   mydb.commit(). It is required to make the   changes, otherwise no   changes are made to the table.|||To insert multiple rows into a table, use the executemany() method.|||The second parameter of the executemany() method is a list of tuples, containing the data you want to insert:|||Fill the ""customers"" table with data:|||You can get the id of the row you just inserted by asking the cursor object.|||Note: If you insert more than one row, the id of the last inserted row is returned.|||Insert one row, and return the ID:",Insert Multiple Rows,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\n  \xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""INSERT INTO customers (name, \n  address) VALUES (%s, %s)""', 'val = [', ""\xa0 ('Peter', 'Lowstreet 4'),"", ""\xa0 \n  ('Amy', 'Apple st 652'),"", ""\xa0 ('Hannah', 'Mountain 21'),"", ""\xa0 \n  ('Michael', 'Valley 345'),"", ""\xa0 ('Sandy', 'Ocean blvd 2'),"", ""\xa0 \n  ('Betty', 'Green Grass 1'),"", ""\xa0 ('Richard', 'Sky st 331'),"", ""\xa0 \n  ('Susan', 'One way 98'),"", ""\xa0 ('Vicky', 'Yellow Garden 2'),"", ""\xa0 \n  ('Ben', 'Park Lane 38'),"", ""\xa0 ('William', 'Central st 954'),"", ""\xa0 \n  ('Chuck', 'Main Road 989'),"", ""\xa0 ('Viola', 'Sideway 1633')"", ']', '\n  mycursor.executemany(sql, val)', 'mydb.commit()', 'print(mycursor.rowcount, ""was inserted."")'], ['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\n  \xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""INSERT INTO customers (name, \n  address) VALUES (%s, %s)""', 'val = (""Michelle"", ""Blue Village"")', '\n  mycursor.execute(sql, val)', 'mydb.commit()', 'print(""1 record \n  inserted, ID:"", mycursor.lastrowid)']]"
Python MySQL,MySQL Select,https://www.w3schools.com/python/python_mysql_select.asp,"To select from a table in MySQL, use the ""SELECT"" statement:|||Select all records from the ""customers"" table, and display the   result:|||Note: We use the fetchall()   method, which fetches all rows from the last executed statement.|||To select only some of the columns in a table, use the ""SELECT"" statement followed by the column name(s):|||Select only the name and address columns:|||If you are only interested in one row, you can use the fetchone() method.|||The fetchone() method will return the first row of the result:|||Fetch only one row:",,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'mycursor.execute(""SELECT name, \n  address FROM \n  customers"")', 'myresult = mycursor.fetchall()', 'for x in myresult:', '\xa0 \n  print(x)'], ['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\n  \xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', 'mycursor = \n  mydb.cursor()', 'mycursor.execute(""SELECT * FROM customers"")', '\n  myresult = mycursor.fetchone()', 'print(myresult)']]"
Python MySQL,MySQL Where,https://www.w3schools.com/python/python_mysql_where.asp,"When selecting records from a table, you can filter the selection by using the ""WHERE"" statement:|||Select record(s) where the address is ""Park Lane 38"":  result:|||You can also select the records that starts, includes, or ends with a given letter or phrase.|||Use the %  to represent wildcard characters:|||Select records where the address contains the word ""way"":|||When query values are provided by the user, you should escape the values.|||This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.|||The mysql.connector module has methods to escape query values:|||Escape query values by using the placholder %s method:",Prevent SQL Injection,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""SELECT * FROM customers WHERE address \n  LIKE \'%way%\'""', 'mycursor.execute(sql)', 'myresult = mycursor.fetchall()', 'for x in myresult:', '\xa0 \n  print(x)'], ['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""SELECT * FROM customers WHERE \n  address = %s""', 'adr = (""Yellow Garden 2"", )', '\n  mycursor.execute(sql, adr)', 'myresult = mycursor.fetchall()', 'for x in myresult:', '\xa0 \n  print(x)']]"
Python MySQL,MySQL Order By,https://www.w3schools.com/python/python_mysql_orderby.asp,"Use the ORDER BY statement to sort the result in ascending or descending order.|||The ORDER BY keyword sorts the result ascending by default. To sort the result in descending order, use the DESC keyword.|||Sort the result alphabetically by name:  result:|||Use the DESC keyword to sort the result in a descending order.|||Sort the result reverse alphabetically by name:",Sort the Result|||Example|||ORDER BY DESC|||Example,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""SELECT * FROM customers ORDER BY \n  name DESC""', 'mycursor.execute(sql)', 'myresult = mycursor.fetchall()', 'for x in myresult:', '\xa0 \n  print(x)']]"
Python MySQL,MySQL Delete,https://www.w3schools.com/python/python_mysql_delete.asp,"You can delete records from an existing table by using the ""DELETE FROM"" statement:|||Delete any record where the address is ""Mountain 21"":|||Important!: Notice the statement:   mydb.commit(). It is required to make the   changes, otherwise no   changes are made to the table.|||Notice the WHERE clause in the DELETE syntax: The WHERE clause specifies which record(s) that should be deleted. If you omit the WHERE clause, all records will be deleted!|||It is considered a good practice to escape the values of any query, also in delete statements.|||This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.|||The mysql.connector module uses the placeholder %s to escape values in the delete statement:|||Escape values by using the placeholder %s method:",,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""DELETE FROM customers WHERE address = \n  %s""', 'adr = (""Yellow Garden 2"", )', '\n  mycursor.execute(sql, adr)', 'mydb.commit()', 'print(mycursor.rowcount, ""record(s) deleted"")']]"
Python MySQL,MySQL Drop Table,https://www.w3schools.com/python/python_mysql_drop_table.asp,"You can delete an existing table by using the ""DROP TABLE"" statement:|||Delete the table ""customers"":|||If the the table you want to delete is already deleted, or for any other reason does not exist, you can use the IF EXISTS keyword to avoid getting an error.|||Delete the table ""customers"" if it exists:",,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = \n  mydb.cursor()', 'sql = ""DROP TABLE IF EXISTS customers""', 'mycursor.execute(sql)']]"
Python MySQL,MySQL Update,https://www.w3schools.com/python/python_mysql_update.asp,"You can update existing records in a table by using the ""UPDATE"" statement:|||Overwrite the address column from ""Valley 345"" to ""Canyon 123"":|||Important!: Notice the statement:   mydb.commit(). It is required to make the   changes, otherwise no   changes are made to the table.|||Notice the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated!|||It is considered a good practice to escape the values of any query, also in update statements.|||This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.|||The mysql.connector module uses the placeholder %s to escape values in the delete statement:|||Escape values by using the placeholder %s method:",,,,,"[['\n  import mysql.connector', 'mydb = mysql.connector.connect(', '\xa0 host=""localhost"",', '\xa0\n  user=""', <em>yourusername</em>, '"",', '\xa0 password=""', <em>yourpassword</em>, '"",', '\xa0 database=""mydatabase""', ')', '\n', 'mycursor = mydb.cursor()', 'sql = ""UPDATE customers SET address = %s \n  WHERE address = %s""', 'val = (""Valley 345"", ""Canyon 123"")', 'mycursor.execute(sql, \n  val)', 'mydb.commit()', 'print(mycursor.rowcount, ""record(s) \n  affected"")']]"
Python MySQL,MySQL Limit,https://www.w3schools.com/python/python_mysql_limit.asp,"You can limit the number of records returned from the query, by using the ""LIMIT"" statement:|||Select the 5 first records in the ""customers"" table:|||If you want to return five records, starting from the third record, you can use the ""OFFSET"" keyword:|||Start from position 3, and return 5 records:",,,,,[]
Python MySQL,MySQL Join,https://www.w3schools.com/python/python_mysql_join.asp,"You can combine rows from two or more tables, based on a related column between them, by using a JOIN statement.|||Consider you have a ""users"" table and a ""products"" table:|||These two tables can be combined by using users' fav field and products' id field.|||Join users and products to see the name of the users favorite product:|||Note: You can use JOIN instead of INNER JOIN. They will   both give you the same result.|||In the example above, Hannah, and Michael were excluded from the result, that is because INNER JOIN only shows the records where there is a match.|||If you want to show all users, even if they do not have a favorite product, use the LEFT JOIN statement:|||Select all users and their favorite product:|||If you want to return all products, and the users who have them as their favorite, even if no user have them as their favorite, use the RIGHT JOIN statement:|||Select all products, and the user(s) who have them as their favorite:|||Note: Hannah and Michael, who have no favorite product, are not included in the result.",LEFT JOIN,,,,[]
Python MongoDB,MongoDB Get Started,https://www.w3schools.com/python/python_mongodb_getstarted.asp,"Python can be used in database applications.|||One of the most popular NoSQL database is MongoDB.|||MongoDB stores data in JSON-like documents, which makes the database very flexible and scalable.|||To be able to experiment with the code examples in this tutorial, you will need access to a MongoDB database.|||You can download a free MongoDB database athttps://www.mongodb.com.|||Or get started right away with a MongoDB cloud service at https://www.mongodb.com/cloud/atlas.|||Python needs a MongoDB driver to access the MongoDB database.|||In this tutorial we will use the MongoDB driver ""PyMongo"".|||We recommend that you use PIP to install ""PyMongo"".|||PIP is most likely already installed in your Python environment.|||Navigate your command line to the location of PIP, and type the following:|||Download and install ""PyMongo"":|||Now you have downloaded and installed a mongoDB driver.|||To test if the installation was successful, or if you already have ""pymongo"" installed, create a Python page with the following content:|||demo_mongodb_test.py:|||If the above code was executed with no errors, ""pymongo"" is installed and ready to be used.",Test PyMongo,,,,[]
Python MongoDB,MongoDB Create Database,https://www.w3schools.com/python/python_mongodb_create_db.asp,"To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.|||MongoDB will create the database if it does not exist, and make a connection to it.|||Create a database called ""mydatabase"":|||Important: In MongoDB, a database is not created until it   gets content!|||MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).|||Remember: In MongoDB, a database is not created until it   gets content, so if this is your first time creating a database, you should   complete the next two chapters (create collection and create document) before   you check if the database exists!|||You can check if a database exist by listing all databases in you system:|||Return a list of your system's databases:|||Or you can check a specific database by name:|||Check if ""mydatabase"" exists:",,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n', 'mydb = myclient[""mydatabase""]'], ['\n  print(myclient.list_database_names())'], ['\n  dblist = myclient.list_database_names()', 'if ""mydatabase"" in dblist:', '\xa0 \n  print(""The database exists."")']]"
Python MongoDB,MongoDB Create Collection,https://www.w3schools.com/python/python_mongodb_create_collection.asp,"A collection in MongoDB is the same as a table in SQL databases.|||To create a collection in MongoDB, use database object and specify the name of the collection you want to create.|||MongoDB will create the collection if it does not exist.|||Create a collection called ""customers"":|||Important: In MongoDB, a collection is not created until it   gets content!|||MongoDB waits until you have inserted a document before it actually creates the collection.|||Remember: In MongoDB, a collection is not created until it   gets content, so if this is your first time creating a collection, you should   complete the next chapter (create document) before   you check if the collection exists!|||You can check if a collection exist in a database by listing all collections:|||Return a list of all collections in your database:|||Or you can check a specific collection by name:|||Check if the ""customers"" collection exists:",,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]'], ['\n  print(mydb.list_collection_names())'], ['\n  collist = mydb.list_collection_names()', 'if ""customers"" in collist:', '\xa0 \n  print(""The collection exists."")']]"
Python MongoDB,MongoDB Insert,https://www.w3schools.com/python/python_mongodb_insert.asp,"A document in MongoDB is the same as a record in SQL databases.|||To insert a record, or document as it is called in MongoDB, into a collection, we use the insert_one() method.|||The first parameter of the insert_one() method is a dictionary containing the name(s) and value(s) of each field in the document you want to insert.|||Insert a record in the ""customers"" collection:|||The insert_one() method returns a InsertOneResult object, which has a property, inserted_id, that holds the id of the inserted document.|||Insert another record in the ""customers"" collection, and return the value of the_id field:|||If you do not specify an _id field, then MongoDB will add one for you and assign a unique id for each document.|||In the example above no _id field was specified, so MongoDB assigned a unique _id for the record (document).|||To insert multiple documents into a collection in MongoDB, we use the insert_many() method.|||The first parameter of the insert_many() method is a list containing dictionaries with the data you want to insert:|||The insert_many() method returns a InsertManyResult object, which has a property, inserted_ids, that holds the ids of the inserted documents.|||If you do not want MongoDB to assign unique ids for you document, you can specify the _id field when you insert the document(s).|||Remember that the values has to be unique. Two documents cannot have the same _id.",Return the _id Field|||Insert Multiple Documents,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'mydict = { ""name"": ""John"", ""address"": ""Highway 37"" }', '\n  x =\n  mycol.insert_one(mydict)'], ['\n  mydict = { ""name"": ""Peter"", ""address"": ""Lowstreet 27"" }', '\n  x = mycol.insert_one(mydict)', 'print(x.inserted_id)'], ['\n    import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\nmydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'mylist = [', '\xa0 { ""name"": ""Amy"", ""address"": ""Apple st 652""},', '\xa0 \n    { ""name"": ""Hannah"", ""address"": ""Mountain 21""},', '\xa0 { ""name"": \n    ""Michael"", ""address"": ""Valley 345""},', '\xa0 { ""name"": ""Sandy"", ""address"": \n    ""Ocean blvd 2""},', '\xa0 { ""name"": ""Betty"", ""address"": ""Green Grass 1""},', '\xa0 \n    { ""name"": ""Richard"", ""address"": ""Sky st 331""},', '\xa0 { ""name"": ""Susan"", \n    ""address"": ""One way 98""},', '\xa0 { ""name"": ""Vicky"", ""address"": ""Yellow \n    Garden 2""},', '\xa0 { ""name"": ""Ben"", ""address"": ""Park Lane 38""},', '\xa0 \n    { ""name"": ""William"", ""address"": ""Central st 954""},', '\xa0 { ""name"": \n    ""Chuck"", ""address"": ""Main Road 989""},', '\xa0 { ""name"": ""Viola"", \n    ""address"": ""Sideway 1633""}', ']', 'x = mycol.insert_many(mylist)', '#print list of the _id values of the inserted \n    documents:', 'print(x.inserted_ids)'], ['\n    import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\nmydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'mylist = [', '\xa0 { ""_id"": 1, ""name"": ""John"", ""address"": ""Highway 37""},', '\xa0 \n    { ""_id"": 2, ""name"": ""Peter"", ""address"": ""Lowstreet 27""},', '\xa0 { ""_id"": \n    3, ""name"": ""Amy"", ""address"": ""Apple st 652""},', '\xa0 { ""_id"": 4, ""name"": \n    ""Hannah"", ""address"": ""Mountain 21""},', '\xa0 { ""_id"": 5, ""name"": \n    ""Michael"", ""address"": ""Valley 345""},', '\xa0 { ""_id"": 6, ""name"": ""Sandy"", \n    ""address"": ""Ocean blvd 2""},', '\xa0 { ""_id"": 7, ""name"": ""Betty"", \n    ""address"": ""Green Grass 1""},', '\xa0 { ""_id"": 8, ""name"": ""Richard"", \n    ""address"": ""Sky st 331""},', '\xa0 { ""_id"": 9, ""name"": ""Susan"", ""address"": \n    ""One way 98""},', '\xa0 { ""_id"": 10, ""name"": ""Vicky"", ""address"": ""Yellow \n    Garden 2""},', '\xa0 { ""_id"": 11, ""name"": ""Ben"", ""address"": ""Park Lane \n    38""},', '\xa0 { ""_id"": 12, ""name"": ""William"", ""address"": ""Central st \n    954""},', '\xa0 { ""_id"": 13, ""name"": ""Chuck"", ""address"": ""Main Road 989""},', '\xa0 \n    { ""_id"": 14, ""name"": ""Viola"", ""address"": ""Sideway 1633""}', ']', 'x = mycol.insert_many(mylist)', '#print list of the _id values of the inserted \n    documents:', 'print(x.inserted_ids)']]"
Python MongoDB,MongoDB Find,https://www.w3schools.com/python/python_mongodb_find.asp,"In MongoDB we use the find and findOne methods to find data in a collection.|||Just like the SELECT statement is used to find data in a   table in a MySQL database.|||To select data from a collection in MongoDB, we can use thefind_one() method.|||The find_one() method returns the first occurrence in the selection.|||Find the first document in the customers collection:|||To select data from a table in MongoDB, we can also use thefind() method.|||The find() method returns all occurrences in the selection.|||The first parameter of the find() method is a query object. In this example we use an empty query object, which selects all documents in the collection.|||No parameters in the find() method gives you the same result as SELECT * in MySQL.|||Return all documents in the ""customers"" collection, and print each document:|||The second parameter of the find() method is an object describing which fields to include in the result.|||This parameter is optional, and if omitted, all fields will be included in the result.|||Return only the names and addresses, not the _ids:|||You are not allowed to specify both 0 and 1 values in the same object (except if one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, and vice versa:|||This example will exclude ""address"" from the result:|||You get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):",Example,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'x = mycol.find_one()', 'print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'for x in mycol.find():', '\xa0 print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'for x in mycol.find({},{ ""_id"": 0, ""name"": 1, ""address"": 1 }):', '\xa0 \n    print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'for x in mycol.find({},{ ""address"": 0 }):', '\xa0 \n    print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'for x in mycol.find({},{ ""name"": 1, ""address"": 0 }):', '\xa0 \n    print(x)']]"
Python MongoDB,MongoDB Query,https://www.w3schools.com/python/python_mongodb_query.asp,"When finding documents in a collection, you can filter the result by using a query object.|||The first argument of the find() method is a query object, and is used to limit the search.|||Find document(s) with the address ""Park Lane 38"":|||To make advanced queries you can use modifiers as values in the query object.|||E.g. to find the documents where the ""address"" field starts with the letter ""S"" or higher (alphabetically), use the greater than modifier:{""$gt"": ""S""}:|||Find documents where the address starts with the letter ""S"" or higher:|||You can also use regular expressions as a modifier.|||Regular expressions can only be used to query strings.|||To find only the documents where the ""address"" field starts with the letter ""S"", use the regular expression {""$regex"": ""^S""}:|||Find documents where the address starts with the letter ""S"":",Filter the Result|||Filter With Regular Expressions,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": ""Park Lane 38"" }', '\n', 'mydoc = mycol.find(myquery)', 'for x in mydoc:', '\xa0 print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": { ""$gt"": ""S"" } }', 'mydoc = mycol.find(myquery)', '\n', 'for x in mydoc:', '\xa0 print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": { ""$regex"": ""^S"" } }', 'mydoc = mycol.find(myquery)', '\n', 'for x in mydoc:', '\xa0 print(x)']]"
Python MongoDB,MongoDB Sort,https://www.w3schools.com/python/python_mongodb_sort.asp,"Use the sort() method to sort the result in ascending or descending order.|||The sort() method takes one parameter for ""fieldname"" and one parameter for ""direction"" (ascending is the default direction).|||Sort the result alphabetically by name:|||Use the value -1 as the second parameter to sort descending.|||  sort(""name"", 1) #ascending  sort(""name"", -1) #descending  |||Sort the result reverse alphabetically by name:",Sort the Result|||Example|||Example,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'mydoc = mycol.find().sort(""name"")', 'for x in mydoc:', '\xa0 print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'mydoc = mycol.find().sort(""name"", -1)', 'for x in mydoc:', '\xa0 print(x)']]"
Python MongoDB,MongoDB Delete,https://www.w3schools.com/python/python_mongodb_delete.asp,"To delete one document, we use thedelete_one() method.|||The first parameter of the delete_one() method is a query object defining which document to delete.|||Note: If the query finds more than one document, only the first occurrence is deleted.|||Delete the document with the address ""Mountain 21"":|||To delete more than one document, use thedelete_many() method.|||The first parameter of the delete_many() method is a query object defining which documents to delete.|||Delete all documents were the address starts with the letter S:|||To delete all documents in a collection, pass an empty query object to the delete_many() method:|||Delete all documents in the ""customers"" collection:",,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": ""Mountain 21"" }', '\n', 'mycol.delete_one(myquery)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": {""$regex"": ""^S""} }', '\n', 'x = mycol.delete_many(myquery)', 'print(x.deleted_count, "" documents \n  deleted."")'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'x = mycol.delete_many({})', 'print(x.deleted_count, "" documents \n  deleted."")']]"
Python MongoDB,MongoDB Drop Collection,https://www.w3schools.com/python/python_mongodb_drop_collection.asp,"You can delete a table, or collection as it is called in MongoDB, by using the drop() method.|||Delete the ""customers"" collection:|||The drop() method returns true if the collection was dropped successfully, and false if the collection does not exist.",,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'mycol.drop()']]"
Python MongoDB,MongoDB Update,https://www.w3schools.com/python/python_mongodb_update.asp,"You can update a record, or document as it is called in MongoDB, by using the update_one() method.|||The first parameter of the update_one() method is a query object defining which document to update.|||Note: If the query finds more than one record, only the first occurrence is updated.|||The second parameter  is an object defining the new values of the document.|||Change the address from ""Valley 345"" to ""Canyon 123"":|||To update all documents that meets the criteria of the query, use the update_many() method.|||Update all documents where the address starts with the letter ""S"":",,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": ""Valley 345"" }', 'newvalues = { ""$set"": { \n  ""address"": ""Canyon 123"" } }', '\n', 'mycol.update_one(myquery, newvalues)', '#print ""customers"" after the update:', 'for x in mycol.find():', '\xa0 print(x)'], ['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myquery = { ""address"": { ""$regex"": ""^S"" } }', 'newvalues = { ""$set"": { \n  ""name"": ""Minnie"" } }', '\n', 'x = mycol.update_many(myquery, newvalues)', 'print(x.modified_count, ""documents updated."")']]"
Python MongoDB,MongoDB Limit,https://www.w3schools.com/python/python_mongodb_limit.asp,"To limit the result in MongoDB, we use the limit() method.|||The limit() method takes one parameter, a number defining how many documents to return.|||Consider you have a ""customers"" collection:|||Limit the result to only return 5 documents:",Limit the Result|||Example,,,,"[['\n  import pymongo', 'myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")', '\n  mydb = myclient[""mydatabase""]', 'mycol = mydb[""customers""]', '\n', 'myresult = mycol.find().limit(5)', '#print the result:', 'for x in myresult:', '\xa0 print(x)']]"
Python Reference,Python Overview,https://www.w3schools.com/python/python_reference.asp,This section contains a Python reference documentation.,,,,,[]
Python Reference,Python Built-in Functions,https://www.w3schools.com/python/python_ref_functions.asp,Python has a set of built-in functions.,,,,"abs()|||Returns the absolute value of a number&&&all()|||Returns True if all items in an iterable object are true&&&any()|||Returns True if any item in an iterable object is true&&&ascii()|||Returns a readable version of an object. Replaces none-ascii characters with escape character&&&bin()|||Returns the binary version of a number&&&bool()|||Returns the boolean value of the specified object&&&bytearray()|||Returns an array of bytes&&&bytes()|||Returns a bytes object&&&callable()|||Returns True if the specified object is callable, otherwise False&&&chr()|||Returns a character from the specified 
  Unicode code.&&&classmethod()|||Converts a method into a class method&&&compile()|||Returns the specified source as an object, ready to be executed&&&complex()|||Returns a complex number&&&delattr()|||Deletes the specified attribute (property or method) from the specified object&&&dict()|||Returns a dictionary (Array)&&&dir()|||Returns a list of the specified object's properties and methods&&&divmod()|||Returns the quotient and the remainder when argument1 is divided by argument2&&&enumerate()|||Takes a collection (e.g. a tuple) and returns it as an enumerate object&&&eval()|||Evaluates and executes an expression&&&exec()|||Executes the specified code (or object)&&&filter()|||Use a filter function to exclude items in an iterable object&&&float()|||Returns a floating point number&&&format()|||Formats a specified value&&&frozenset()|||Returns a frozenset object&&&getattr()|||Returns the value of the specified attribute (property or method)&&&globals()|||Returns the current global symbol table as a dictionary&&&hasattr()|||Returns True if the specified object has the specified attribute (property/method)&&&hash()|||Returns the hash value of a specified object&&&help()|||Executes the built-in help system&&&hex()|||Converts a number into a hexadecimal value&&&id()|||Returns the id of an object&&&input()|||Allowing user input&&&int()|||Returns an integer number&&&isinstance()|||Returns True if a specified object is an instance of a specified object&&&issubclass()|||Returns True if a specified class is a subclass of a specified object&&&iter()|||Returns an iterator object&&&len()|||Returns the length of an object&&&list()|||Returns a list&&&locals()|||Returns an updated dictionary of the current local symbol table&&&map()|||Returns the specified iterator with the specified function applied to each item&&&max()|||Returns the largest item in an iterable&&&memoryview()|||Returns a memory view object&&&min()|||Returns the smallest item in an iterable&&&next()|||Returns the next item in an iterable&&&object()|||Returns a new object&&&oct()|||Converts a number into an octal&&&open()|||Opens a file and returns a file object&&&ord()|||Convert an integer 
  representing the Unicode of the specified character&&&pow()|||Returns the value of x to the power of y&&&print()|||Prints to the standard output device&&&property()|||Gets, sets, deletes a property&&&range()|||Returns a sequence of numbers, starting from 0 and increments by 1 (by default)&&&repr()|||Returns a readable version of an object&&&reversed()|||Returns a reversed iterator&&&round()|||Rounds a numbers&&&set()|||Returns a new set object&&&setattr()|||Sets an attribute (property/method) of an object&&&slice()|||Returns a slice object&&&sorted()|||Returns a sorted list&&&staticmethod()|||Converts a method into a static method&&&str()|||Returns a string object&&&sum()|||Sums the items of an iterator&&&super()|||Returns an object that represents the parent class&&&tuple()|||Returns a tuple&&&type()|||Returns the type of an object&&&vars()|||Returns the __dict__ property of an object&&&zip()|||Returns an iterator, from two or more iterators",[]
Python Reference,Python String Methods,https://www.w3schools.com/python/python_ref_string.asp,Python has a set of built-in methods that you can use on strings.|||Note: All string methods returns new values. They do not change the original string.|||Note: All string methods returns new values. They do not change the original string.|||Learn more about strings in our Python Strings Tutorial.,,,,"capitalize()|||Converts the first 
    character to upper case&&&casefold()|||Converts string into 
    lower case&&&center()|||Returns a centered 
    string&&&count()|||Returns the number of 
    times a specified value occurs in a string&&&encode()|||Returns an encoded 
    version of the string&&&endswith()|||Returns true if the 
    string ends with the specified value&&&expandtabs()|||Sets the 
    tab size of the string&&&find()|||Searches the string for a 
    specified value and returns the position of where it was found&&&format()|||Formats specified 
    values in a string&&&format_map()|||Formats specified 
    values in a string&&&index()|||Searches the string 
    for a specified value and returns the position of where it was found&&&isalnum()|||Returns True if all 
    characters in the string are alphanumeric&&&isalpha()|||Returns True if all 
    characters in the string are in the alphabet&&&isascii()|||Returns True if all 
    characters in the string are ascii characters&&&isdecimal()|||Returns True if all 
    characters in the string are decimals&&&isdigit()|||Returns True if all 
    characters in the string are digits&&&isidentifier()|||Returns True if 
    the string is an identifier&&&islower()|||Returns True if all 
    characters in the string are lower case&&&isnumeric()|||Returns True if 
    all characters in the string are numeric&&&isprintable()|||Returns True if 
    all characters in the string are printable&&&isspace()|||Returns True if all 
    characters in the string are whitespaces&&&istitle()|||Returns True if the string follows the rules of a 
    title&&&isupper()|||Returns True if all 
    characters in the string are upper case&&&join()|||Converts the elements of 
    an iterable into a string&&&ljust()|||Returns a left justified 
    version of the string&&&lower()|||Converts a string into 
    lower case&&&lstrip()|||Returns a left trim 
    version of the string&&&maketrans()|||Returns a 
    translation table to be used in translations&&&partition()|||Returns a tuple 
    where the string is parted into three parts&&&replace()|||Returns a string 
    where a specified value is replaced with a specified value&&&rfind()|||Searches the string for 
    a specified value and returns the last position of where it was found&&&rindex()|||Searches the string for 
    a specified value and returns the last position of where it was found&&&rjust()|||Returns a right justified 
    version of the string&&&rpartition()|||Returns a tuple 
    where the string is parted into three parts&&&rsplit()|||Splits the string at 
    the specified separator, and returns a list&&&rstrip()|||Returns a right trim 
    version of the string&&&split()|||Splits the string at 
    the specified separator, and returns a list&&&splitlines()|||Splits the string 
    at line breaks and returns a list&&&startswith()|||Returns true if 
    the string starts with the specified value&&&strip()|||Returns a trimmed version of the string&&&swapcase()|||Swaps cases, lower 
    case becomes upper case and vice versa&&&title()|||Converts the first 
    character of each word to upper case&&&translate()|||Returns a 
    translated string&&&upper()|||Converts a string 
    into upper case&&&zfill()|||Fills the string with 
  a specified number of 0 values at the beginning",[]
Python Reference,Python List Methods,https://www.w3schools.com/python/python_ref_list.asp,"Python has a set of built-in methods that you can use on lists/arrays.|||Note: Python does not have built-in support for Arrays,   but Python Lists can be used instead.|||Learn more about lists in our Python Lists Tutorial.|||Learn more about arrays in our Python Arrays Tutorial.",,,,"append()|||Adds an element at 
  the end of the list&&&clear()|||Removes all the 
  elements from the list&&&copy()|||Returns a copy of the 
  list&&&count()|||Returns the number of 
  elements with the specified value&&&extend()|||Add the elements of a 
  list (or any iterable), to the end of the current list&&&index()|||Returns the index of 
  the first element with the specified value&&&insert()|||Adds an element at 
  the specified position&&&pop()|||Removes the element at the 
  specified position&&&remove()|||Removes the first 
  item with the specified value&&&reverse()|||Reverses the order 
  of the list&&&sort()|||Sorts the list",[]
Python Reference,Python Dictionary Methods,https://www.w3schools.com/python/python_ref_dictionary.asp,Python has a set of built-in methods that you can use on dictionaries.|||Learn more about dictionaries in our Python Dictionaries Tutorial.,,,,"clear()|||Removes all the elements from the dictionary&&&copy()|||Returns a copy of the dictionary&&&fromkeys()|||Returns a dictionary with the specified keys and value&&&get()|||Returns the value of the specified key&&&items()|||Returns a list containing a tuple for each key value pair&&&keys()|||Returns a list containing the dictionary's keys&&&pop()|||Removes the element with the specified key&&&popitem()|||Removes the last 
  inserted key-value pair&&&setdefault()|||Returns the value of the specified key. If the key does not exist: insert the key, with the specified value&&&update()|||Updates the dictionary with the specified key-value pairs&&&values()|||Returns a list of all the values in the dictionary",[]
Python Reference,Python Tuple Methods,https://www.w3schools.com/python/python_ref_tuple.asp,Python has two built-in methods that you can use on tuples.|||Learn more about tuples in our Python Tuples Tutorial.,,,,count()|||Returns the number of times a specified value occurs in a tuple&&&index()|||Searches the tuple for a specified value and returns the position of where it was found,[]
Python Reference,Python Set Methods,https://www.w3schools.com/python/python_ref_set.asp,Python has a set of built-in methods that you can use on sets.|||Learn more about sets in our Python Sets Tutorial.,,,,"add()|||Adds an element to the 
  set&&&clear()|||Removes all the 
  elements from the set&&&copy()|||Returns a copy of the set&&&difference()|||Returns a set 
    containing the difference between two or more sets&&&difference_update()|||Removes the 
    items in this set that are also included in another, specified set&&&discard()|||Remove the specified 
  item&&&intersection()|||Returns a set, 
    that is the intersection of two or more sets&&&intersection_update()|||
  Removes the items in this set that are not present in other, specified set(s)&&&isdisjoint()|||Returns whether 
    two sets have a intersection or not&&&issubset()|||Returns whether 
    another set contains this set or not&&&issuperset()|||Returns whether 
  this set contains another set or not&&&pop()|||Removes an element from the 
  set&&&remove()|||Removes the specified element&&&symmetric_difference()|||Returns 
    a set with the symmetric differences of two sets&&&symmetric_difference_update()|||
  inserts the symmetric differences from this set and another&&&union()|||Return a set containing 
    the union of sets&&&update()|||Update the set with 
  another set, or any other iterable",[]
Python Reference,Python File Methods,https://www.w3schools.com/python/python_ref_file.asp,Python has a set of methods available for the file object.|||Learn more about the file object in our Python File Handling Tutorial.,,,,"close()|||Closes the file&&&detach()|||Returns the separated 
    raw stream from the buffer&&&fileno()|||Returns a number that 
    represents the stream, from the operating system's perspective&&&flush()|||Flushes the internal 
    buffer&&&isatty()|||Returns whether the 
    file stream is interactive or not&&&read()|||Returns the file content&&&readable()|||Returns whether 
    the file stream can be read or not&&&readline()|||Returns one line 
    from the file&&&readlines()|||Returns a list 
    of lines from the file&&&seek()|||Change the file position&&&seekable()|||Returns whether 
    the file allows us to change the file position&&&tell()|||Returns the current file 
    position&&&truncate()|||Resizes the file 
    to a specified size&&&writable()|||Returns whether 
    the file can be written to or not&&&write()|||Writes the specified 
    string to the file&&&writelines()|||Writes a list 
    of strings to the file",[]
Python Reference,Python Keywords,https://www.w3schools.com/python/python_ref_keywords.asp,"Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers:",,,,"and|||A logical operator&&&as|||To create an alias&&&assert|||For debugging&&&break|||To break out of a loop&&&class|||To define a class&&&continue|||To continue to the 
    next iteration of a loop&&&def|||To define a function&&&del|||To delete an object&&&elif|||Used in conditional 
    statements, same as else if&&&else|||Used in conditional 
    statements&&&except|||Used with exceptions, 
    what to do when an exception occurs&&&False|||Boolean value, result of 
    comparison operations&&&finally|||Used with exceptions, a 
    block of code that will be executed no matter if there is an exception or 
    not&&&for|||To create a for loop&&&from|||To import specific parts of 
    a module&&&global|||To declare a global 
    variable&&&if|||To make a conditional 
    statement&&&import|||To import a module&&&in|||To check if a value is 
    present in a list, tuple, etc.&&&is|||To test if two variables are 
    equal&&&lambda|||To create an anonymous 
    function &&&None|||Represents a null value&&&nonlocal|||To declare a 
    non-local variable&&&not|||A logical operator&&&or|||A logical operator&&&pass|||A null statement, a 
  statement that will do nothing&&&raise|||To raise an exception&&&return|||To exit a function and 
  return a value&&&True|||Boolean value, result of 
    comparison operations&&&try|||To make a try...except 
  statement&&&while|||To create a while loop&&&with|||Used to simplify 
  exception handling&&&yield|||To end a function, returns 
  a generator",[]
Python Reference,Python Exceptions,https://www.w3schools.com/python/python_ref_exceptions.asp,The table below shows built-in exceptions that are usually raised in Python:,,,,"
        ArithmeticError
      |||
      Raised when an error occurs in numeric calculations&&&
        AssertionError
      |||
        Raised when an assert statement fails&&&
        AttributeError
      |||
      Raised when attribute reference or assignment fails&&&
        Exception
      |||
      Base class for all exceptions&&&
        EOFError
      |||
      Raised when 
      the input() method hits an ""end of file"" condition (EOF)&&&
        FloatingPointError
      |||
      Raised when a floating point calculation fails&&&
        GeneratorExit
      |||
      Raised when a generator is closed (with the close() method)&&&
        ImportError
      |||
      Raised when an imported module does not exist&&&
        IndentationError
      |||
      Raised when indendation is not correct&&&
        IndexError
      |||
      Raised when an index of a sequence does not exist&&&
        KeyError
      |||
      Raised when a key does not exist in a dictionary
      &&&
        KeyboardInterrupt
      |||
      Raised when the user presses Ctrl+c, 
      Ctrl+z or Delete&&&
        LookupError
      |||
      Raised when errors raised cant be found
      &&&
        MemoryError
      |||
      Raised when a program runs out of memory&&&
        NameError
      |||
      Raised when a variable does not exist&&&
        NotImplementedError
      |||
      Raised when an abstract method requires an inherited class to override the 
      method&&&
        OSError
      |||
      Raised when a system related operation causes an error &&&
        OverflowError
      |||
      Raised when the result of a numeric calculation is too large&&&
        ReferenceError
      |||
      Raised when a weak reference object does not exist&&&
        RuntimeError
      |||
      Raised when an error occurs that do not belong to any specific expections&&&
        StopIteration
      |||
      Raised when the next() method of an iterator has no further values&&&
        SyntaxError
      |||
      Raised when a syntax error occurs&&&
        TabError
      |||
      Raised when indentation consists of tabs or spaces&&&
        SystemError
      |||
      Raised when a system error occurs&&&
        SystemExit
      |||
      Raised when the sys.exit() function is called&&&
        TypeError
      |||
      Raised when two different types are combined&&&
        UnboundLocalError
      |||
      Raised when a local variable is referenced before assignment&&&
        UnicodeError
      |||
      Raised when a unicode problem occurs&&&
        UnicodeEncodeError
      |||
      Raised when a unicode encoding problem occurs&&&
        UnicodeDecodeError
      |||
      Raised when a unicode decoding problem occurs&&&
        UnicodeTranslateError
      |||
      Raised when a unicode translation problem occurs&&&
        ValueError
      |||
      Raised when there is a wrong value in a specified data type&&&
        ZeroDivisionError
      |||
      Raised when the second operator in a division is zero",[]
Python Reference,Python Glossary,https://www.w3schools.com/python/python_ref_glossary.asp,This is a list of all the features explained in the Python Tutorial.,,,,"Indentation|||Indentation refers to the spaces at the beginning of a code line&&&Comments|||Comments are code lines that will not be executed&&&Multi Line Comments|||How to insert comments on multiple lines&&&Creating Variables|||Variables are containers for storing data values&&&Variable Names|||How to name your variables&&&Assign Values to Multiple Variables|||How to assign values to multiple variables&&&Output Variables|||Use the print statement to output variables&&&String Concatenation|||How to combine strings&&&Global Variables|||Global variables are variables that belongs to the global scope&&&Built-In Data Types|||Python has a set of built-in data types&&&Getting Data Type|||How to get the data type of an object&&&Setting Data Type|||How to set the data type of an object&&&Numbers|||There are three numeric types in Python&&&Int|||The integer number type&&&Float|||The floating number type&&&Complex|||The complex number type&&&Type Conversion|||How to convert from one number type to another&&&Random Number|||How to create a random number&&&Specify a Variable Type|||How to specify a certain data type for a variable&&&String Literals|||How to create string literals&&&Assigning a String to a Variable|||How to assign a string value to a variable&&&Multiline Strings|||How to create a multi line string&&&Strings are Arrays|||Strings in Python are arrays of bytes representing Unicode characters&&&Slicing a String|||How to slice a string&&&Negative Indexing on a String|||How to use negative indexing when accessing a string&&&String Length|||How to get the length of a string&&&Check In String|||How to check if a string contains a specified phrase&&&Format String|||How to combine two strings&&&Escape Characters|||How to use escape characters&&&Boolean Values|||True or False&&&Evaluate Booleans|||Evaluate a value or statement and return either True or False&&&Return Boolean Value|||Functions that return a Boolean value&&&Operators|||Use operator to perform operations in Python&&&Arithmetic Operators|||Arithmetic operator are used to perform common mathematical operations&&&Assignment Operators|||Assignment operators are use to assign values to variables&&&Comparison Operators|||Comparison operators are used to compare two values&&&Logical Operators|||Logical operators are used to combine conditional statements&&&Identity Operators|||Identity operators are used to see if two objects are in fact the same object&&&Membership Operators|||Membership operators are used to test is a sequence is present in an object&&&Bitwise Operators|||Bitwise operators are used to compare (binary) numbers&&&Lists|||A list is an ordered, and changeable, collection&&&Access List Items|||How to access items in a list&&&Change List Item|||How to change the value of a list item&&&Loop Through List Items|||How to loop through the items in a list&&&List Comprehension|||How use a list comprehensive&&&Check if List Item Exists|||How to check if a specified item is present in a list&&&List Length|||How to determine the length of a list&&&Add List Items|||How to add items to a list&&&Remove List Items|||How to remove list items&&&Copy a List|||How to copy a list&&&Join Two Lists|||How to join two lists&&&Tuple|||A tuple is an ordered, and unchangeable, collection&&&Access Tuple Items|||How to access items in a tuple&&&Change Tuple Item|||How to change the value of a tuple item&&&Loop List Items|||How to loop through the items in a tuple&&&Check if Tuple Item Exists|||How to check if a specified item is present in a tuple&&&Tuple Length|||How to determine the length of a tuple&&&Tuple With One Item|||How to create a tuple with only one item&&&Remove Tuple Items|||How to remove tuple items&&&Join Two Tuples|||How to join two tuples&&&Set|||A set is an unordered, and unchangeable, collection&&&Access Set Items|||How to access items in a set&&&Add Set Items|||How to add items to a set&&&Loop Set Items|||DETTE KAPITTELET MANGLER&&&Check if Set Item Exists|||DETTE KAPITTELET MANGLER&&&Set Length|||How to determine the length of a set&&&Remove Set Items|||How to remove set items&&&Join Two Sets|||How to join two sets&&&Dictionary|||A dictionary is an unordered, and changeable, collection&&&Access Dictionary Items|||How to access items in a dictionary&&&Change Dictionary Item|||How to change the value of a dictionary item&&&Loop Dictionary Items|||How to loop through the items in a tuple&&&Check if Dictionary Item Exists|||How to check if a specified item is present in a dictionary&&&Dictionary Length|||How to determine the length of a dictionary&&&Add Dictionary Item|||How to add an item to a dictionary&&&Remove Dictionary Items|||How to remove dictionary items&&&Copy Dictionary|||How to copy a dictionary&&&Nested Dictionaries|||A dictionary within a dictionary&&&If Statement|||How to write an if statement&&&If Indentation|||If statemnts in Python relies on indentation (whitespace at the beginning of a line)&&&Elif|||elif is the same as ""else if"" in other programming languages&&&Else|||How to write an if...else statement&&&Shorthand If|||How to write an if statement in one line&&&Shorthand If Else|||How to write an if...else statement in one line&&&If AND|||Use the and keyword to combine if statements&&&If OR|||Use the or keyword to combine if statements&&&Nested If|||How to write an if statement inside an if statement&&&The pass Keyword in If|||Use the pass keyword inside empty if statements&&&While|||How to write a while loop&&&While Break|||How to break a while loop&&&While Continue|||How to stop the current iteration and continue wit the next&&&While Else|||How to use an else statement in a while loop&&&For|||How to write a for loop&&&Loop Through a String|||How to loop through a string&&&For Break|||How to break a for loop&&&For Continue|||How to stop the current iteration and continue wit the next&&&Looping Through a rangee|||How to loop through a range of values&&&For Else|||How to use an else statement in a for loop&&&Nested Loops|||How to write a loop inside a loop&&&For pass|||Use the pass keyword inside empty for loops&&&Function|||How to create a function in Python&&&Call a Function|||How to call a function in Python&&&Function Arguments|||How to use arguments in a function&&&*args|||To deal with an unknown number of arguments in a function, use the * symbol before the parameter name&&&Keyword Arguments|||How to use keyword arguments in a function&&&**kwargs|||To deal with an unknown number of keyword arguments in a function, use the * symbol before the parameter name&&&Default Parameter Value|||How to use a default parameter value&&&Passing a List as an Argument|||How to pass a list as an argument&&&Function Return Value|||How to return a value from a function&&&The pass Statement i Functions|||Use the pass statement in empty functions&&&Function Recursion|||Functions that can call itself is called recursive functions&&&Lambda Function|||How to create anonymous functions in Python&&&Why Use Lambda Functions|||Learn when to use a lambda function or not&&&Array|||Lists can be used as Arrays&&&What is an Array|||Arrays are variables that can hold more than one value&&&Access Arrays|||How to access array items&&&Array Length|||How to get the length of an array&&&Looping Array Elements|||How to loop through array elements&&&Add Array Element|||How to add elements from an array&&&Remove Array Element|||How to remove elements from an array&&&Array Methods|||Python has a set of Array/Lists methods&&&Class|||A class is like an object constructor&&&Create Class|||How to create a class&&&The Class __init__() Function|||The __init__() function is executed when the class is initiated&&&Object Methods|||Methods in objects are functions that belongs to the object&&&self|||The self parameter refers to the current instance of the class&&&Modify Object Properties|||How to modify properties of an object&&&Delete Object Properties|||How to modify properties of an object&&&Delete Object|||How to delete an object&&&Class pass Statement|||Use the pass statement in empty classes&&&Create Parent Class|||How to create a parent class&&&Create Child Class|||How to create a child class&&&Create the __init__() Function|||How to create the __init__() function&&&super Function|||The super() function make the child class inherit the parent class&&&Add Class Properties|||How to add a property to a class&&&Add Class Methods|||How to add a method to a class&&&Iterators|||An iterator is an object that contains a countable number of values&&&Iterator vs Iterable|||What is the difference between an iterator and an iterable&&&Loop Through an Iterator|||How to loop through the elements of an iterator&&&Create an Iterator|||How to create an iterator&&&StopIteration|||How to stop an iterator&&&Global Scope|||When does a variable belong to the global scope?&&&Global Keyword|||The global keyword makes the variable global&&&Create a Module|||How to create a module&&&Variables in Modules|||How to use variables in a module&&&Renaming a Module|||How to rename a module&&&Built-in Modules|||How to import built-in modules&&&Using the dir() Function|||List all variable names and function names in a module&&&Import From Module|||How to import only parts from a module&&&Datetime Module|||How to work with dates in Python&&&Date Output|||How to output a date&&&Create a Date Object|||How to create a date object&&&The strftime Method|||How to format a date object into a readable string&&&Date Format Codes|||The datetime module has a set of legal format codes&&&JSON|||How to work with JSON in Python&&&Parse JSON|||How to parse JSON code in Python&&&Convert into JSON|||How to convert a Python object in to JSON&&&Format JSON|||How to format JSON output with indentations and line breaks&&&Sort JSON|||How to sort JSON&&&RegEx Module|||How to import the regex module&&&RegEx Functions|||The re module has a set of functions&&&Metacharacters in RegEx|||Metacharacters are characters with a special meaning&&&RegEx Special Sequences|||A backslash followed by a a character has a special meaning&&&RegEx Sets|||A set is a set of characters inside a pair of square brackets with a special meaning&&&RegEx Match Object|||The Match Object is an object containing information about the search and the result&&&Install PIP|||How to install PIP&&&PIP Packages|||How to download and install a package with PIP&&&PIP Remove Package|||How to remove a package with PIP&&&Error Handling|||How to handle errors in Python&&&Handle Many Exceptions|||How to handle more than one exception&&&Try Else|||How to use the else keyword in a try statement&&&Try Finally|||How to use the finally keyword in a try statement&&&raise|||How to raise an exception in Python",[]
Module Reference,Random Module,https://www.w3schools.com/python/module_random.asp,Python has a built-in module that you can use to make random numbers.|||The random module has a set of methods:,,,,"seed()|||Initialize the random number generator&&&getstate()|||Returns the current internal state of the random number generator&&&setstate()|||Restores the internal state of the random number generator&&&getrandbits()|||Returns a number representing the random bits&&&randrange()|||Returns a random number between the given range&&&randint()|||Returns a random number between the given range&&&choice()|||Returns a random element from the given sequence&&&choices()|||Returns a list with a random selection from the given sequence&&&shuffle()|||Takes a sequence and returns the sequence in a random order&&&sample()|||Returns a given sample of a sequence&&&random()|||Returns a random float number between 0 and 1&&&uniform()|||Returns a random float number between two given parameters&&&triangular()|||Returns a random float number between two given parameters, you can also set 
a mode parameter to specify the midpoint between the two other parameters&&&betavariate()|||Returns a random float number between 0 and 1 based on the Beta distribution 
(used in statistics)&&&expovariate()|||Returns a random float number based on the Exponential distribution (used in 
statistics)&&&gammavariate()|||Returns a random float number based on the Gamma 
distribution (used in statistics)&&&gauss()|||Returns a random float number based on the Gaussian 
distribution (used in probability theories)&&&lognormvariate()|||Returns a random float number based on a log-normal 
distribution (used in probability theories)&&&normalvariate()|||Returns a random float number based on the normal 
distribution (used in probability theories)&&&vonmisesvariate()|||Returns a random float number based on the von Mises 
distribution (used in directional statistics)&&&paretovariate()|||Returns a random float number based on the Pareto 
distribution (used in probability theories)&&&weibullvariate()|||Returns a random float number based on the Weibull 
distribution (used in statistics)",[]
Module Reference,Requests Module,https://www.w3schools.com/python/module_requests.asp,"Make a request to a web page, and print the response text:|||The requests module allows you to send HTTP requests using Python.|||The HTTP request returns a Response Object with all the response data (content, encoding, status, etc).|||Navigate your command line to the location of PIP, and type the following:",Definition and Usage,,,"delete(url, args)|||Sends a DELETE request to the specified url&&&get(url, params, args)|||Sends a GET request to the specified url&&&head(url, args)|||Sends a HEAD request to the specified url&&&patch(url, data, args)|||Sends a PATCH request to the specified url&&&post(url, data, json, args)|||Sends a POST request to the specified url&&&put(url, data, args)|||Sends a PUT request to the specified url&&&request(method, url, args)|||Sends a request of the specified method to the specified url","[['\n    import requests', ""x = requests.get('https://w3schools.com/python/demopage.htm')"", 'print(x.text)']]"
Module Reference,Statistics Module,https://www.w3schools.com/python/module_statistics.asp,Python has a built-in module that you can use to calculate mathematical statistics of numeric data.|||The statistics module was new in Python 3.4.,Python statistics Module,,,"statistics.harmonic_mean()|||Calculates the harmonic mean (central location) of the given data&&&statistics.mean()|||Calculates the mean (average) of the given data&&&statistics.median()|||Calculates the median (middle value) of the given data&&&statistics.median_grouped()|||Calculates the median of grouped continuous  
    data&&&statistics.median_high()|||Calculates the high median of the given data&&&statistics.median_low()|||Calculates the low median of the given data&&&statistics.mode()|||Calculates the mode (central tendency) of the given numeric or nominal data&&&statistics.pstdev()|||Calculates the standard deviation from an entire population&&&statistics.stdev()|||Calculates the standard deviation from a sample of data&&&statistics.pvariance()|||Calculates the variance of an entire population&&&statistics.variance()|||Calculates the variance from a sample of data",[]
Module Reference,Math Module,https://www.w3schools.com/python/module_math.asp,Python has a built-in module that you can use for mathematical tasks.|||The math module has a set of methods and constants.,Python math Module,,,"math.acos()|||Returns the arc cosine of a number&&&math.acosh()|||Returns the inverse hyperbolic cosine of a number&&&math.asin()|||Returns the arc sine of a number&&&math.asinh()|||Returns the inverse hyperbolic sine of a number&&&math.atan()|||Returns the arc tangent of a number in radians&&&math.atan2()|||Returns the arc tangent of y/x in radians &&&math.atanh()|||Returns the inverse hyperbolic tangent of a number&&&math.ceil()|||Rounds a number up to the nearest integer&&&math.comb()|||Returns the number of ways to choose k items from n items without repetition and order&&&math.copysign()|||Returns a float consisting of the value of the first parameter and the sign of the second parameter&&&math.cos()|||Returns the cosine of a number&&&math.cosh()|||Returns the hyperbolic cosine of a number&&&math.degrees()|||Converts an angle from radians to degrees&&&math.dist()|||Returns the Euclidean distance between two points (p and q), where p and 
    q are the coordinates of that point&&&math.erf()|||Returns the error function of a number&&&math.erfc()|||Returns the complementary error function of a number&&&math.exp()|||Returns E raised to the power of x&&&math.expm1()|||Returns Ex 
    - 1&&&math.fabs()|||Returns the absolute value of a number&&&math.factorial()|||Returns the factorial of a number&&&math.floor()|||Rounds a number down to the nearest integer&&&math.fmod()|||Returns the remainder of x/y&&&math.frexp()|||Returns the mantissa and the exponent, of a specified number&&&math.fsum()|||Returns the sum of all items in any iterable (tuples, arrays, lists, etc.)&&&math.gamma()|||Returns the gamma function at x&&&math.gcd()|||Returns the greatest common divisor of two integers&&&math.hypot()|||Returns the Euclidean norm&&&math.isclose()|||Checks whether two values are close to each other, or not&&&math.isfinite()|||Checks whether a number is finite or not&&&math.isinf()|||Checks whether a number is infinite or not&&&math.isnan()|||Checks whether a value is NaN (not a number) or not&&&math.isqrt()|||Rounds a square root number downwards to the nearest integer&&&math.ldexp()|||Returns the inverse of math.frexp() 
    which is x * (2**i) of the given numbers x and i&&&math.lgamma()|||Returns the log gamma value of x&&&math.log()|||Returns the natural logarithm of a number, or the logarithm of number to base&&&math.log10()|||Returns the base-10 logarithm of x&&&math.log1p()|||Returns the natural logarithm of 1+x&&&math.log2()|||Returns the base-2 logarithm of x&&&math.perm()|||Returns the number of ways to choose k items from n items with order and without repetition&&&math.pow()|||Returns the value of x to the power of y&&&math.prod()|||Returns the product of all the elements in an iterable&&&math.radians()|||Converts a degree value into radians&&&math.remainder()|||Returns the closest value that can make numerator completely divisible by the denominator&&&math.sin()|||Returns the sine of a number&&&math.sinh()|||Returns the hyperbolic sine of a number&&&math.sqrt()|||Returns the square root of a number&&&math.tan()|||Returns the tangent of a number&&&math.tanh()|||Returns the hyperbolic tangent of a number&&&math.trunc()|||Returns the truncated integer parts of a number$$$math.e|||Returns Euler's number (2.7182...)&&&math.inf|||Returns a floating-point positive infinity&&&math.nan|||Returns a floating-point NaN (Not a Number) value&&&math.pi|||Returns PI (3.1415...)&&&math.tau|||Returns tau (6.2831...)",[]
Module Reference,cMath Module,https://www.w3schools.com/python/module_cmath.asp,"Python has a built-in module that you can use for mathematical tasks for complex numbers.|||The methods in this module accepts int, float,  and complex numbers. It even accepts Python objects that has a __complex__() or __float__() method.|||The methods in this module almost always return a complex number. If the return value can be expressed as a real number, the return value has an imaginary part of 0.|||The cmath module has a set of methods and constants.",Python cmath Module,,,"cmath.acos(x)|||Returns the arc cosine value of x&&&cmath.acosh(x)|||Returns the hyperbolic arc cosine of x&&&cmath.asin(x)|||Returns the arc sine of x&&&cmath.asinh(x)|||Returns the hyperbolic arc sine of x&&&cmath.atan(x)|||Returns the arc tangent value of x&&&cmath.atanh(x)|||Returns the hyperbolic arctangent value of x&&&cmath.cos(x)|||Returns the cosine of x&&&cmath.cosh(x)|||Returns the hyperbolic cosine of x&&&cmath.exp(x)|||Returns the value of Ex, where E is Euler's number (approximately 2.718281...), and x is the number passed to it&&&cmath.isclose()|||Checks whether two values are close, or not&&&cmath.isfinite(x)|||Checks whether x is a finite number&&&cmath.isinf(x)|||Check whether x is a positive or negative infinty&&&cmath.isnan(x)|||Checks whether x is NaN (not a number)&&&cmath.log(x[, base])|||Returns the logarithm of x to the base&&&cmath.log10(x)|||Returns the base-10 logarithm of x&&&cmath.phase()|||Return the phase of a complex number&&&cmath.polar()|||Convert a complex number to polar coordinates&&&cmath.rect()|||Convert polar coordinates to rectangular form&&&cmath.sin(x)|||Returns the sine of x&&&cmath.sinh(x)|||Returns the hyperbolic sine of x&&&cmath.sqrt(x)|||Returns the square root of x&&&cmath.tan(x)|||Returns the tangent of x&&&cmath.tanh(x)|||Returns the hyperbolic tangent of x$$$cmath.e|||Returns Euler's number (2.7182...)&&&cmath.inf|||Returns a floating-point positive infinity value&&&cmath.infj|||Returns a complex infinity value&&&cmath.nan|||Returns floating-point NaN (Not a Number) value&&&cmath.nanj|||Returns coplext NaN (Not a Number) value&&&cmath.pi|||Returns PI (3.1415...)&&&cmath.tau|||Returns tau (6.2831...)",[]
Python How To,Remove List Duplicates,https://www.w3schools.com/python/python_howto_remove_duplicates.asp,"Learn how to remove duplicates from a List in Python.|||Remove any duplicates from a List:|||First we have a List that contains duplicates:|||Create a dictionary, using the List items as keys. This will automatically remove any duplicates because dictionaries cannot have duplicate keys.|||Then, convert the dictionary back into a list:|||Now we have a List without any duplicates, and it has the same order as the original List.|||Print the List to demonstrate the result|||If you like to have a function where you can send your lists, and get them back without duplicates, you can create a function and insert the code from the example above.|||Create a function that takes a List as an argument.|||Create a dictionary, using this List items as keys.|||Convert the dictionary into a list.|||Return the list|||Call the function, with a list as a parameter:|||Print the result:",,,,,"[['\n  mylist = [""a"", ""b"", ""a"", ""c"", ""c""]', 'mylist = list(dict.fromkeys(mylist))', '\n  print(mylist)'], ['\n  def my_function(x):', '\xa0 return list(dict.fromkeys(x))', 'mylist = \n  my_function([""a"", ""b"", ""a"", ""c"", ""c""])', '\n', 'print(mylist)']]"
Python How To,Reverse a String,https://www.w3schools.com/python/python_howto_reverse_string.asp,"Learn how to reverse a String in Python.|||There is no built-in function to reverse a String in Python.|||The fastest (and easiest?) way is to use a slice that steps backwards, -1.|||Reverse the string ""Hello World"":|||We have a string, ""Hello World"", which we want to reverse:|||Create a slice that starts at the end of the string, and moves backwards.|||In this particular example, the slice statement [::-1] means start at the end of the string and end at position 0, move with the step -1, negative one, which means one step backwards. |||Now we have a string txt that reads ""Hello World"" backwards.|||Print the String to demonstrate the result|||If you like to have a function where you can send your strings, and return them backwards, you can create a function and insert the code from the example above.|||Create a function that takes a String as an argument.|||Slice the string starting at the end of the string and move backwards.|||Return the backward String|||Call the function, with a string as a parameter:|||Print the result:",,,,,"[['\n  txt = ""Hello World""[::-1]', 'print(txt)'], ['\n  def my_function(x):', '\xa0 return x[::-1]', 'mytxt = \n  my_function(""I wonder how this text looks like backwards"")', '\n', 'print(mytxt)']]"
Python How To,Add Two Numbers,https://www.w3schools.com/python/python_howto_add_two_numbers.asp,"Learn how to add two numbers in Python.|||Use the + operator to add two numbers:|||In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:",Add Two Numbers with User Input,,,,"[['\nx = 5', 'y = 10', 'print(x + y)\n'], ['\n  x = input(""Type a number: "")', 'y = input(""Type another number: "")', 'sum \n  = int(x) + int(y)', 'print(""The sum is: "", sum) ']]"
Python Examples,Python Examples,https://www.w3schools.com/python/python_examples.asp,Syntax Explained|||Variables Explained|||Numbers Explained|||Casting Explained|||Strings Explained|||Operators Explained|||Lists Explained|||Tuples Explained|||Sets Explained|||Dictionaries Explained|||If ... Else Explained|||While Loop Explained|||For Loop Explained|||Functions Explained|||Lambda Explained|||Arrays Explained|||Classes/Objects Explained|||Iterators Explained|||Modules Explained|||Dates Explained|||Math Explained|||JSON Explained|||RegEx Explained|||PIP Explained|||Try Except Explained|||File Handling Explained|||MySQL Explained|||MongoDB Explained,,,,,[]
Python Examples,Python Compiler,https://www.w3schools.com/python/python_compiler.asp,"With our online Python compiler, you can edit Python code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you don't know Python, we suggest that you read our Python Tutorial from scratch.",Python Compiler (Editor)|||Python Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
Python Examples,Python Exercises,https://www.w3schools.com/python/python_exercises.asp,"You can test your Python skills with W3Schools' Exercises.|||We have gathered a variety of Python exercises (with answers) for each Python Chapter.|||Try to solve an exercise by filling in the missing parts of a code. If you're stuck, hit the ""Show Answer"" button to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start Python Exercises ❯|||If you don't know Python, we suggest that you read our Python Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
Python Examples,Python Quiz,https://www.w3schools.com/python/python_quiz.asp,"You can test your Python skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about Python.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the Python Quiz ❯|||If you don't know Python, we suggest that you read our Python Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
Python Examples,Python Certificate,https://www.w3schools.com/python/python_exam.asp,"W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.|||Getting a certificate proves your commitment to upgrade your skills,gives you the credibility needed for more responsibilities, larger projects, and a higher salary.|||Get Your Certificate »",How Does It Work?,"Study for free at W3Schools.com@@@Study at your own speed@@@Test your skills with W3Schools online quizzes@@@Apply for your certificate by paying an exam fee@@@Take your exam online, at any time, and from any location",,"
Document Your Skills
Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.
Get a Certificate
Getting a certificate proves your commitment to upgrade your skills,
gives you the credibility needed for more responsibilities, larger projects, and a higher salary.

Get Your Certificate »

|||

",[]
