Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
C++ Tutorial,C++ HOME,https://www.w3schools.com/cpp/default.asp,"C++ is a popular programming language.|||C++ is used to create computer programs.|||Our ""Try it Yourself"" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser.|||Click on the ""Run example"" button to see how it works.|||We recommend reading this tutorial, in the sequence listed in the left menu.|||C++ is an object oriented language and some concepts may be new. Take breaks when needed, and goover the examples as many times as needed.|||Insert the missing part of the code below to output ""Hello World"".|||Start the Exercise|||Learn by examples! This tutorial supplements all explanations with clarifying examples.|||See All C++ Examples|||Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++.|||Start C++ Quiz|||Get certified by completing the  course",Examples in Each Chapter,,,,"[['\n  #include <iostream>', 'using namespace std;', 'int main() {', '\xa0 \n  cout << ""Hello World!"";', '\xa0 return 0;', '}']]"
C++ Tutorial,C++ Intro,https://www.w3schools.com/cpp/cpp_intro.asp,"C++ is a cross-platform language that can be used to create high-performance applications.|||C++ was developed by Bjarne Stroustrup, as an extension to the C language.|||C++ gives programmers a high level of control over system resources and memory.|||The language was updated 3 major times in 2011, 2014, and 2017 to C++11, C++14, and  C++17.|||C++ is one of the world's most popular programming languages.|||C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.|||C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.|||C++ is portable and can be used to develop applications that can be adapted to multiple platforms.|||C++ is fun and easy to learn!|||As C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa|||This tutorial will teach you the basics of C++.|||It is not necessary to have any prior programming experience.",Why Use C++,,,,[]
C++ Tutorial,C++ Get Started,https://www.w3schools.com/cpp/cpp_getstarted.asp,"To start using C++, you need two things:|||There are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below).|||An IDE (Integrated Development Environment) is used to edit AND compile the code.|||Popular IDE's include Code::Blocks, Eclipse, and Visual Studio.  These are all free, and they can be used to both edit and debug C++ code.|||Note: Web-based IDE's can work as well, but functionality is limited.|||We will use Code::Blocks in our tutorial, which we believe is a good place to start.|||You can find the latest version of Codeblocks at http://www.codeblocks.org/downloads/26. Download the mingw-setup.exe file, which will install the text editor with a compiler. |||Let's create our first C++ file.|||Open Codeblocks and go to File > New > Empty File.|||Write the following C++ code and save the file as myfirstprogram.cpp (File > Save File as):|||Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.|||In Codeblocks, it should look like this:|||Then, go to Build > Build and Run to run (execute) the program. The result will look something to this:|||Congratulations! You have now written and executed your first C++ program.|||When learning C++ at W3Schools.com, you can use our ""Try it Yourself"" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward:|||Code:|||Result:",Learning C++ At W3Schools,"A text editor, like Notepad, to write C++ code@@@A compiler, like GCC, to translate the C++ code into a language that the computer will understand",,,"[['\n  #include <iostream>', 'using namespace std;', 'int main() {', '\xa0 \n  cout << ""Hello World!"";', '\xa0 return 0;', '}'], ['\n  #include <iostream>', 'using namespace std;', 'int main() {', '\xa0 \n  cout << ""Hello World!"";', '\xa0 return 0;', '}']]"
C++ Tutorial,C++ Syntax,https://www.w3schools.com/cpp/cpp_syntax.asp,"Let's break up the following code to understand it better:|||Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.|||Line 2: using namespace std means that we can use names for objects and variables from the standard library.|||Don't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) always appears in your program.|||Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable.|||Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed.|||Line 5: cout (pronounced ""see-out"") is an object used together with the insertion operator (<<) to output/print text. In our example it will output ""Hello World"".|||Note: Every C++ statement ends with a semicolon ;.|||Note: The body of int main() could also been written as:int main () { cout << ""Hello World! "";  return 0; }|||Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.|||Line 6: return 0 ends the main function.|||Line 7: Do not forget to add the closing curly bracket } to actually end the main function.|||You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects:|||It is up to you if you want to include the standard namespace library or not.",,,,,"[['\n  #include <iostream>', 'using namespace std;', 'int main() {', '\xa0 \n  cout << ""Hello World!"";', '\xa0 return 0;', '}'], ['\n  #include <iostream>', 'int main() {', '\xa0 \n  ', <strong>std::</strong>, 'cout << ""Hello World!"";', '\xa0 return 0;', '}']]"
C++ Tutorial,C++ Output,https://www.w3schools.com/cpp/cpp_output.asp,"The cout object, together with the << operator, is used to output values/print text:|||You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:",,,,,"[['\n  #include <iostream>', 'using namespace std;', 'int main() {', '\xa0 \n  ', <strong>cout</strong>, ' << ""Hello World!"";', '\xa0 return 0;', '}'], ['\n  #include <iostream>', 'using namespace std;', 'int main() {', '\xa0 \n  ', <strong>cout</strong>, ' << ""Hello World!"";', '\xa0 ', <strong>cout</strong>, ' << ""I am learning C++"";', '\xa0 return 0;', '}']]"
C++ Tutorial,C++ Comments,https://www.w3schools.com/cpp/cpp_comments.asp,"Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.|||Single-line comments start with two forward slashes (//).|||Any text between // and the end of the line is ignored by the compiler (will not be executed).|||This example uses a single-line comment before a line of code:|||This example uses a single-line comment at the end of a line of code:|||Multi-line comments start with /* and ends with */.|||Any text between /* and */ will be ignored by the compiler:|||It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.",C++ Multi-line Comments,,,,"[['\n  // This is a comment', 'cout << ""Hello World!"";'], ['\n  cout << ""Hello World!""; // This is a comment'], ['\n  /* The code below will print the words Hello World!', 'to the screen, and it is \n  amazing */', 'cout << ""Hello World!"";']]"
C++ Tutorial,C++ Variables,https://www.w3schools.com/cpp/cpp_variables.asp,"Variables are containers for storing data values. |||In C++, there are different types of variables (defined with different keywords), for example:|||To create a variable, specify the type and assign it a value:|||Where type is one of C++ types (such as int), and variableName is the name of the variable (such as x ormyName). The equal sign is used to assign values to the variable.|||To create a variable that should store a number, look at the following example:|||Create a variable called myNum of type int and assign it the value 15:|||You can also declare a variable without assigning the value, and assign the value later:|||Note that if you assign a new value to an existing variable, it will overwrite the previous value:|||A demonstration of other data types:|||You will learn more about the individual types in the Data Types chapter.|||The cout object is used together with the << operator to display variables.|||To combine both text and a variable, separate them with the << operator:|||To add a variable to another variable, you can use the + operator:|||Create a variable named myNum and assign the value 50 to it.|||Start the Exercise",,"int - stores integers (whole numbers), without decimals, such as 123 or -123@@@double - stores floating point numbers, with decimals, such as 19.99 or -19.99@@@char - stores single characters, such as 'a' or 'B'.  Char values are surrounded by single quotes@@@string - stores text, such as ""Hello World"".  String values are surrounded by double quotes@@@bool - stores values with two states:  true or false",,,"[['\n', <em>type</em>, ' ', <em>variableName</em>, ' = ', <em>value</em>, ';'], ['\n  int myNum = 15;', 'cout << myNum;'], ['\n  int myNum;', 'myNum = 15;', 'cout << myNum;'], ['\n  int myNum = 15;\xa0\xa0// myNum is 15', 'myNum = 10;\xa0 // Now myNum is 10', 'cout << myNum;\xa0 // Outputs 10'], ['\n  int myNum = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Integer (whole number without decimals)', 'double myFloatNum = 5.99;\xa0\xa0\xa0 \n  // Floating point number (with decimals)', ""char myLetter = 'D';\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Character"", 'string myText = ""Hello"";\xa0\xa0\xa0\xa0 \n  // String (text)', 'bool \n  myBoolean = true;\xa0\xa0\xa0\xa0\xa0\xa0 // Boolean (true or \n  false)'], ['\n  int myAge = 35;', 'cout << ""I am "" << myAge << "" years old."";'], ['\n  int x = 5;', 'int y = 6;', 'int sum = x + y;', 'cout << sum;']]"
C++ Tutorial,C++ User Input,https://www.w3schools.com/cpp/cpp_user_input.asp,"You have already learned that cout is used to output (print) values. Now we will use cin to get user input.|||cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).|||In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:|||cout is pronounced ""see-out"". Used for output, and uses the insertion operator (<<)|||cin is pronounced ""see-in"". Used for input, and uses the extraction operator (>>)|||In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:|||There you go! You just built a basic calculator!|||Use the correct keyword to get user input, stored in the variable x:|||Start the Exercise",,,,,"[['\n  int x;\xa0', 'cout << ""Type a number: ""; // Type a number and \n  press enter', 'cin >> x; // Get user \n  input from the keyboard', 'cout << ""Your number is: "" << x; \n  // Display the input value'], ['\n  int x, y;', 'int sum;', 'cout << ""Type a number: "";', 'cin >> x;', 'cout << ""Type another number: "";', 'cin >> \n  y;', 'sum = x + y;', 'cout << ""Sum is: "" << sum;']]"
C++ Tutorial,C++ Data Types,https://www.w3schools.com/cpp/cpp_data_types.asp,"As explained in the Variables chapter, a variable in C++ must be a specified data type:|||The data type specifies the size and type of information the variable will store:|||You will learn more about the individual data types in the next chapters.|||Add the correct data type for the following variables:|||Start the Exercise",,,,"int|||4 bytes|||Stores whole numbers, without decimals&&&float|||4 bytes|||Stores fractional numbers, containing one or more decimals. Sufficient for 
storing 7 decimal digits&&&double|||8 bytes|||Stores fractional numbers, containing one or more decimals. Sufficient for 
storing 15 decimal digits&&&boolean|||1 byte|||Stores true or false values&&&char|||1 byte|||Stores a single character/letter/number, or ASCII values","[['\n  int myNum = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Integer (whole number)', 'float myFloatNum = 5.99;\xa0\xa0\xa0\xa0 \n  // Floating point number', 'double myDoubleNum = 9.98;\xa0 \xa0// Floating point number', ""char myLetter = 'D';\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Character"", 'bool \n  myBoolean = true;\xa0\xa0\xa0\xa0\xa0\xa0 // Boolean', 'string myText = ""Hello"";\xa0\xa0\xa0\xa0 \n  // String']]"
C++ Tutorial,C++ Operators,https://www.w3schools.com/cpp/cpp_operators.asp,"Operators are used to perform operations on variables and values.|||In the example below, we use the+ operator to add together two values:|||Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:|||C++ divides the operators into the following groups:|||Arithmetic operators are used to perform common mathematical operations.|||Multiply 10 with 5, and print the result.|||Start the Exercise",Exercise:,Arithmetic operators@@@Assignment operators@@@Comparison operators@@@Logical operators@@@Bitwise operators,,+|||Addition|||Adds together two values|||x + y|||Try it »&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »&&&/|||Division|||Divides one value by another|||x / y|||Try it »&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »&&&++|||Increment|||Increases the value of a variable by 1|||++x|||Try it »&&&--|||Decrement|||Decreases the value of a variable by 1|||--x|||Try it »,"[['\n  int x = 100 + 50;'], ['\n  int sum1 = 100 + 50;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // 150 (100 + 50)', '\n  int sum2 = sum1 + 250;\xa0\xa0\xa0\xa0\xa0 // 400 (150 + 250)', '\n  int sum3 = sum2 + sum2;\xa0\xa0\xa0\xa0 // 800 (400 + 400)']]"
C++ Tutorial,C++ Strings,https://www.w3schools.com/cpp/cpp_strings.asp,"Strings are used for storing text.|||A string variable contains a collection of characters surrounded by double quotes:|||Create a variable of type string and assign it a value:|||To use strings, you must include an additional header file in the source code, the <string> library:|||Fill in the missing part to create a greeting variable of type string and assign it the value Hello.|||Start the Exercise",,,,,"[['\n  string greeting = ""Hello"";'], ['\n  // Include the string library', '#include <string>', '// Create a string variable', 'string greeting = ""Hello"";']]"
C++ Tutorial,C++ Math,https://www.w3schools.com/cpp/cpp_math.asp,"C++ has many functions that allows you to perform mathematical tasks on numbers.|||The max(x,y) function can be used to find the highest value of x andy:|||And the min(x,y) function can be used to find the lowest value of x and y:|||Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file:|||A list of other popular Math functions (from the <cmath> library) can be found in the table below:|||Use the correct function to print the highest value of x and y.|||Start the Exercise",Other Math Functions,,,"abs(x)|||Returns the absolute value of x&&&acos(x)|||Returns the arccosine of x&&&asin(x)|||Returns the arcsine of x&&&atan(x)|||Returns the arctangent of x&&&cbrt(x)|||Returns the cube root of x&&&ceil(x)|||Returns the value of x rounded up to its nearest integer&&&cos(x)|||Returns the cosine of x&&&cosh(x)|||Returns the hyperbolic cosine of x&&&exp(x)|||Returns the value of Ex&&&expm1(x)|||Returns ex -1&&&fabs(x)|||Returns the absolute value of a floating x&&&fdim(x, y)|||Returns the positive difference between x and y&&&floor(x)|||Returns the value of x rounded down to its nearest integer&&&hypot(x, y)|||Returns sqrt(x2 +y2) without intermediate overflow or underflow&&&fma(x, y, z)|||Returns x*y+z without losing precision&&&fmax(x, y)|||Returns the highest value of a floating x and y&&&fmin(x, y)|||Returns the lowest value of a floating x and y&&&fmod(x, y)|||Returns the floating point remainder of x/y&&&pow(x, y)|||Returns the value of x to the power of y&&&sin(x)|||Returns the sine of x (x is in radians)&&&sinh(x)|||Returns the hyperbolic sine of a double value&&&tan(x)|||Returns the tangent of an angle&&&tanh(x)|||Returns the hyperbolic tangent of a double value","[['\n  cout << max(5, 10);', '\n'], ['\n  cout << min(5, 10);', '\n'], ['\n  // Include the cmath library', '#include <cmath>', 'cout << \n  sqrt(64);', 'cout << round(2.6);', 'cout << log(2);', '\n']]"
C++ Tutorial,C++ Booleans,https://www.w3schools.com/cpp/cpp_booleans.asp,"Very often, in programming, you will need a data type that can only have one of two values, like:|||For this, C++ has a bool data type, which can take the values true (1) or false (0).|||A boolean variable is declared with the bool keyword and can only take the values true or false:|||From the example above, you can read that a true value returns 1, and false returns 0.|||However, it is more common to return boolean values from boolean expressions(see next page).",,YES / NO@@@ON / OFF@@@TRUE / FALSE,,,"[['\n  bool isCodingFun = true;', 'bool isFishTasty = false;', 'cout << isCodingFun;\xa0 \n  // Outputs 1 (true)', 'cout << isFishTasty;\xa0 // Outputs 0 (false)']]"
C++ Tutorial,C++ Conditions,https://www.w3schools.com/cpp/cpp_conditions.asp,"C++ supports the usual logical conditions from mathematics:|||You can use these conditions to perform different actions for different decisions.|||C++ has the following conditional statements:|||Use the if statement to specify a block of C++ code to be executed if a condition is true.|||Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.|||In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:|||We can also test variables:|||In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".|||Print ""Hello World"" if x is greater than y.|||Start the Exercise",,"Less than: a < b@@@Less than or equal to: a <= b@@@Greater than: a > b@@@Greater than or equal to: a >= b@@@Equal to a == b@@@Not Equal to: a != b|||Use if to specify a block of code to be executed, if a specified condition is true@@@Use else to specify a block of code to be executed, if the same condition is false@@@Use else if to specify a new condition to test, if the first condition is false@@@Use switch to specify many alternative blocks of code to be executed",,,"[['\n\n  if (', <em>condition</em>, ') {', '\xa0 ', <em>// block of code to be executed if the 
  condition is true</em>, '}', '\n'], ['\n  if (20 > 18) {', '\xa0 cout << ""20 is greater than 18"";', '}'], ['\n  int x = 20;', 'int y = 18;', 'if (x > y) {', '\xa0 cout << ""x is greater than \n  y"";', '}']]"
C++ Tutorial,C++ Switch,https://www.w3schools.com/cpp/cpp_switch.asp,"Use the switch statement to select one of many code blocks to be executed.|||This is how it works:|||The example below uses the weekday number to calculate the weekday name:|||When C++ reaches a break keyword, it breaks out of the switch block.|||This will stop the execution of more code and case testing inside the block.|||When a match is found, and the job is done, it's time for a break. There is no need for more testing.|||A break can save a lot of execution time because it ""ignores"" the execution of all the rest of the code in the switch block.|||The default keyword specifies some code to run if there is no case match:|||Note: The default keyword must be used as the last statement in the switch, and it does not need a break.|||Insert the missing parts to complete the following switch statement.|||Start the Exercise",The default Keyword,"The switch expression is evaluated once@@@The value of the expression is compared with the values of each case@@@If there is a match, the associated block of code is executed@@@The break and default keywords are optional, and will be described later in this chapter",,,"[['\n\n  switch(', <em>expression</em>, ') {', '\xa0 case x:', '\xa0\xa0\xa0 ', <em>// code 
  block</em>, '\xa0\xa0\xa0 break;', '\xa0 case y:', '\xa0\xa0\xa0\n  ', <em>// code block</em>, '\xa0\xa0\xa0 break;', '\xa0 default:', '\xa0\xa0\xa0\n  ', <em>// code block</em>, '\n  }\n '], ['\n  int day = 4;', 'switch (day) {', '\xa0 case 1:', '\xa0\xa0\xa0 \n  cout << ""Monday"";', '\xa0\xa0\xa0 break;', '\xa0 case 2:', '\n  \xa0\xa0\xa0 cout << ""Tuesday"";', '\xa0\xa0\xa0 break;', '\xa0 case 3:', '\n  \xa0\xa0\xa0 cout << ""Wednesday"";', '\xa0\xa0\xa0 break;', '\xa0 case \n  4:', '\xa0\xa0\xa0 cout << ""Thursday"";', '\xa0\xa0\xa0 \n  break;', '\xa0 case 5:', '\xa0\xa0\xa0 cout << ""Friday"";', '\xa0\xa0\xa0 \n  break;', '\xa0 case 6:', '\xa0\xa0\xa0 cout << ""Saturday"";', '\xa0\xa0\xa0 \n  break;', '\xa0 case 7:', '\xa0\xa0\xa0 cout << ""Sunday"";', '\xa0\xa0\xa0 \n  break;', '\n  }', '// Outputs ""Thursday"" (day 4)'], ['\n  int day = 4;', 'switch (day) {', '\xa0 case 6:', '\xa0\xa0\xa0 cout << ""Today \n  is Saturday"";', '\xa0\xa0\xa0 \n  break;', '\xa0 case 7:', '\xa0\xa0\xa0 cout << ""Today \n  is Sunday"";', '\xa0\xa0\xa0 \n  break;', '\xa0 default:', '\xa0\xa0\xa0 cout << ""Looking \n  forward to the Weekend"";', '\n  }', '// Outputs ""Looking forward to the Weekend""']]"
C++ Tutorial,C++ While Loop,https://www.w3schools.com/cpp/cpp_while_loop.asp,"Loops can execute a block of code as long as a specified condition is reached.|||Loops are handy because they save time, reduce errors, and they make code more readable.|||The while loop loops through a block of code as long as a specified condition is true:|||In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:|||Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!|||Print i as long as i is less than 6.|||Start the Exercise",,,,,"[['\n  while (', <em>condition</em>, ') {', '\n', <i>  // code block to be executed</i>, '\n }', '\n'], ['\n  int i = 0;', 'while (i < 5) {', '\n  \xa0 cout << i << ""\\n"";', '\n\xa0\xa0i++;', '}', '\n']]"
C++ Tutorial,C++ For Loop,https://www.w3schools.com/cpp/cpp_for_loop.asp,"When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:|||Statement 1 is executed (one time) before the execution of the code block.|||Statement 2 defines the condition for executing the code block.|||Statement 3 is executed (every time) after the code block has been executed.|||The example below will print the numbers 0 to 4:|||Statement 1 sets a variable before the loop starts (int i = 0).|||Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.|||Statement 3 increases a value (i++) each time the code block in the loop has been executed.|||This example will only print even values between 0 and 10:|||Use a for loop to print ""Yes"" 5 times:|||Start the Exercise",,,,,"[['\n\nfor (', <i>statement 1</i>, ';', <i> statement 2</i>, ';', <i> statement 3</i>, ') {', '\n    \xa0 ', <i>// code block to be executed</i>, '\n }', '\n'], ['\n  for (int i = 0; i < 5; i++) {', '\xa0 cout << i << ""\\n"";', '}', '\n'], ['\nfor (int i = 0; i <= 10; i = i + 2) {', '\n  \xa0\xa0cout << i << ""\\n"";', '\n}', '\n']]"
C++ Tutorial,C++ Break/Continue,https://www.w3schools.com/cpp/cpp_break.asp,"You have already seen the break statement used in an earlier chapter of this tutorial. It was used to ""jump out"" of a switch statement.|||The break statement can also be used to jump out of a loop.|||This example jumps out of the loop when i is equal to 4:|||The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.|||This example skips the value of 4:|||You can also use break and continue in while loops:|||Stop the loop if i is 5:|||Start the Exercise",,,,,"[['\n  for (int i = 0; i < 10; i++) {', '\xa0 if (i == 4) {', '\xa0\xa0\xa0 \n  break;', '\xa0 }', '\xa0 cout << i << ""\\n"";', '} ', '\n'], ['\n  for (int i = 0; i < 10; i++) {', '\xa0 if (i == 4) {', '\xa0\xa0\xa0 \n  continue;', '\xa0 }', '\xa0 cout << i << ""\\n"";', '} ', '\n'], ['\n  int i = 0;', 'while (i < 10) {', '\xa0\xa0cout << i << ""\\n"";', '\xa0\xa0i++;', '\n  \xa0\xa0if (i == 4) {', '\xa0\xa0\xa0\xa0break;', '\xa0 \n  }', '} ', '\n'], ['\n  int i = 0;', 'while (i < 10) {', '\xa0\xa0if (i == 4) {', '\xa0\xa0\xa0 i++;', '\xa0\xa0\xa0\xa0continue;', '\n  \xa0\xa0}', '\xa0\xa0cout << i << ""\\n"";', '\xa0\xa0i++;', '} ', '\n']]"
C++ Tutorial,C++ Arrays,https://www.w3schools.com/cpp/cpp_arrays.asp,"Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.|||To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store:|||We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:|||To create an array of three integers, you could write:|||You access an array element by referring to the index number.|||This statement accesses the value of the first element in cars:|||Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.|||To change the value of a specific element, refer to the index number:|||Create an array of type string called cars.|||Start the Exercise",C++ Arrays,,,,"[['\n  string cars[4];', '\n'], ['\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};', '\n'], ['\n  int myNum[3] = {10, 20, 30};', '\n'], ['\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};', '\n  cout << cars[0];', '// Outputs Volvo', '\n'], ['\n  cars[0] = ""Opel"";', '\n'], ['\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};', 'cars[0] = ""Opel"";', '\n  cout << cars[0];', '\n  // Now outputs Opel instead of Volvo', '\n']]"
C++ Tutorial,C++ References,https://www.w3schools.com/cpp/cpp_references.asp,"A reference variable is a ""reference"" to an existing variable, and it is created with the & operator:|||Now, we can use either the variable name food or the reference name meal to refer to the food variable:",,,,,"[['\n  string food = ""Pizza"";\xa0 // food variable', 'string &meal = food;\xa0\xa0\xa0 \n  // reference to food', '\n'], ['\n  string food = ""Pizza"";', 'string &meal = food;', '\n  cout << food << ""\\n"";\xa0 \n  // Outputs Pizza', 'cout << meal << ""\\n"";\xa0 // \n  Outputs Pizza', '\n']]"
C++ Tutorial,C++ Pointers,https://www.w3schools.com/cpp/cpp_pointers.asp,"You learned from the previous chapter, that we can get the memory address of a variable by using the & operator:|||A pointer however, is a variable that stores the memory address as its value. |||A pointer variable points to a data type (like int or string) of the same type, and is created with the * operator. The address of the variable you're working with is assigned to the pointer:|||Create a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign * (string* ptr). Note that the type of the pointer has to match the type of the variable you're working with.|||Use the & operator to store the memory address of the variable called food, and assign it to the pointer.|||Now, ptr holds the value of food's memory address.|||Tip: There are three ways to declare pointer variables, but the first way is preferred:|||Create a pointer variable with the name ptr, that should point to a string variable named food:|||Start the Exercise",Exercise:,,,,"[['\n  string food = ""Pizza""; \n    // A food variable of type string', 'cout << \n    food;\xa0 // Outputs the value of food (Pizza)', '\n  cout << &food; // Outputs the memory address of food (', <strong>0x6dfed4</strong>, ')', '\n'], ['\n    string food = ""Pizza"";\xa0 // A food variable \n    of type string', <strong>string* ptr = 
    &amp;food;</strong>, '\xa0\xa0\xa0 // A pointer variable, with the name \n    ptr, that stores the \n    address of food', '// Output the value of food (Pizza)', 'cout << food << ""\\n"";', '// Output \n    the memory address of food (0x6dfed4)', 'cout << &food << ""\\n"";', '// \n    Output the memory address of food with the pointer (0x6dfed4)', 'cout << \n    ptr << ""\\n"";', '\n'], ['\n    string* mystring; // Preferred', 'string *mystring;', 'string * mystring;', '\n']]"
C++ Functions,C++ Functions,https://www.w3schools.com/cpp/cpp_functions.asp,"A function is a block of code which only runs when it is called.|||You can pass data, known as parameters, into a function.|||Functions are used to perform certain actions, and they are important for reusing code: Define the code once, and use it many times.|||C++ provides some pre-defined functions, such as main(), which is used to execute code. But you can also create your own functions to perform certain actions. |||To create (often referred to as declare) a function, specify the name of the function, followed by parentheses (): |||Declared functions are not executed immediately. They are ""saved for later use"", and will be executed later, when they are called.|||To call a function, write the function's name followed by two parentheses () and a semicolon ;|||In the following example, myFunction() is used to print a text (the action), when it is called:|||Inside main, call myFunction():|||A function can be called multiple times:|||A C++ function consist of two parts:|||Note: If a user-defined function, such as myFunction() is declared after the main() function, an error will occur:|||However, it is possible to separate the declaration and the definition of the function - for code optimization.|||You will often see C++ programs that have function declaration above main(), and function definition below main(). This will make the code better organized and easier to read:|||Create a function named myFunction and call it inside main().|||Start the Exercise",,"myFunction() is the name of the function@@@void means that the function does not have a return value. You will learn more about return values later in the next chapter@@@inside the function (the body), add code that defines what the function should do|||Declaration: the return type, the name of the function, and parameters (if any)@@@Definition: the body of the function (code to be executed)",,,"[['\n    void ', <em>myFunction</em>, '() {', '\xa0 \n  // code to be executed', '}', '\n'], ['\n  // Create a function', 'void myFunction() {', '\xa0 \n  cout << ""I just got executed!"";', '}', 'int main() {', '\xa0 \n  ', <strong>myFunction();</strong>, ' // call the function', '\xa0 return 0;', '}', '// Outputs \n  ""I just got executed!""', '\n'], ['\n  void myFunction() {', '\xa0 \n  cout << ""I just got executed!\\n"";', '}', 'int main() {', '\xa0 \n  ', <strong>myFunction();</strong>, '\xa0 ', <strong>myFunction();</strong>, '\xa0 \n  ', <strong>myFunction();</strong>, '\xa0 return 0;', '}', '// \n  I just got executed!', '// I just got executed!', '// I just got executed!', '\n'], ['\n    void ', <strong>myFunction()</strong>, ' { // ', <strong>declaration</strong>, '\xa0 // \n    the body of the function (', <strong>definition</strong>, ')', '}', '\n'], ['\n  // ', <strong>Function declaration</strong>, 'void myFunction();', '// The main method', 'int main() {', '\xa0 \n  myFunction();\xa0 // ', <strong>call</strong>, ' the function', '\xa0 return 0;', '}', '// ', <strong>Function definition</strong>, 'void myFunction() {', '\xa0 \n  cout << ""I just got executed!"";', '}', '\n']]"
C++ Functions,C++ Function Parameters,https://www.w3schools.com/cpp/cpp_function_param.asp,"Information can be passed to functions as a parameter. Parameters act as variables inside the function.|||Parameters are specified after the function name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma:|||The following example has a function that takes a string called fname as parameter.When the function is called, we pass along a first name,which is used inside the function to print the full name:|||When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.",,,,,"[['\n    void ', <em>functionName</em>, '(', <em>parameter1</em>, ', ', <em>parameter2</em>, ', ', <em>parameter3</em>, ') {', '\xa0 \n  // code to be executed', '}', '\n'], ['\n  void myFunction(', <strong>string fname</strong>, ') {', '\xa0 cout << fname << "" Refsnes\\n"";', '}', '\n', 'int main() {', '\xa0 myFunction(', <strong>""Liam""</strong>, ');', '\xa0 myFunction(', <strong>""Jenny""</strong>, ');', '\xa0 \n  myFunction(', <strong>""Anja""</strong>, ');', '\xa0 return 0;', '}', '// Liam Refsnes', '// Jenny Refsnes', '// \n  Anja Refsnes', '\n']]"
C++ Functions,C++ Function Overloading,https://www.w3schools.com/cpp/cpp_function_overloading.asp,"With function overloading, multiple functions can have the same name with differentparameters:|||Consider the following example, which have two functions that add numbers of different type:|||Instead of defining two functions that should do the same thing, it is better to overload one. |||In the example below, we overload the plusFunc function to work for both int and double:|||Note: Multiple functions can have the same name   as long as the number and/or type of parameters are different.",Function Overloading,,,,"[['\n  int myFunction(int x)', 'float myFunction(float x)', 'double \n  myFunction(double x, double y)', '\n'], ['\n  int plusFuncInt(int x, int y) {', '\xa0 return x + y;', '}', 'double plusFuncDouble(double x, double y) {', '\xa0 \n  return x + y;', '}', 'int main() {', '\xa0 int myNum1 = plusFuncInt(8, \n  5);', '\xa0 double myNum2 = plusFuncDouble(4.3, 6.26);', '\xa0 cout << \n  ""Int: "" << myNum1 << ""\\n"";', '\xa0 cout << ""Double: "" << myNum2;', '\xa0 \n  return 0;', '}', '\n'], ['\n  int plusFunc(int x, int \n  y) {', '\xa0 return x + y;', '}', 'double plusFunc(double x, double y) {', '\xa0 \n  return x + y;', '}', 'int main() {', '\xa0 int myNum1 = plusFunc(8, \n  5);', '\xa0 double myNum2 = plusFunc(4.3, 6.26);', '\xa0 cout << ""Int: "" << \n  myNum1 << ""\\n"";', '\xa0 cout << ""Double: "" << myNum2;', '\xa0 return 0;', '}', '\n']]"
C++ Classes,C++ OOP,https://www.w3schools.com/cpp/cpp_oop.asp,"OOP stands for Object-Oriented Programming.|||Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.|||Object-oriented programming has several advantages over procedural programming:|||Tip: The ""Don't Repeat Yourself"" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.|||Classes and objects are the two main aspects of object-oriented programming.|||Look at the following illustration to see the difference between class and objects:|||Fruit|||Apple|||Banana|||Mango|||Another example:|||Car|||Volvo|||Audi|||Toyota|||So, a class is a template for objects, and an object is an instance of a class.|||When the individual objects are created, they inherit all the variables and functions from the class.|||You will learn much more about classes and objects in the next chapter.",,"OOP is faster and easier to execute@@@OOP provides a clear structure for the programs@@@OOP helps to keep the C++ code DRY ""Don't Repeat Yourself"", and makes   the   code easier to maintain, modify and debug@@@OOP makes it possible to create full reusable   applications with less code and shorter development time",,,[]
C++ Classes,C++ Classes/Objects,https://www.w3schools.com/cpp/cpp_classes.asp,"C++ is an object-oriented programming language.|||Everything in C++ is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.|||Attributes and methods are basically variables and functions that belongs to the class. These are often referred to as ""class members"".|||A class is a user-defined data type that we can use in our program, and it works as an object constructor, or a ""blueprint"" for creating objects.|||To create a class, use the class keyword:|||Create a class called ""MyClass"":|||In C++, an object is created from a class. We have already created the class named MyClass, so now we can use this to create objects.|||To create an object of MyClass, specify the class name, followed by the object name.|||To access the class attributes (myNum and myString), use the dot syntax (.) on the object:|||Create an object called ""myObj"" and access the attributes:|||You can create multiple objects of one class:|||Create an object of MyClass called myObj.|||Start the Exercise",Example explained|||Multiple Objects,"The class keyword is used to create a class called MyClass.@@@The public keyword is an access specifier, which specifies that members (attributes and methods) of the class are accessible from outside the class. You will learn more about access specifiers later.@@@Inside the class, there is an integer variable myNum and a string variable myString. When variables are declared within a class, they are called attributes.@@@At last, end the class definition with a semicolon ;.",,,"[['\n  class MyClass {\xa0 \xa0\xa0\xa0\xa0 \n  // The class', '\xa0 public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier', '\xa0\xa0\xa0 int myNum;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Attribute (int variable)', '\xa0\xa0\xa0 string myString;\xa0 // \n  Attribute (string variable)', '};', '\n'], ['\n  class MyClass {\xa0 \xa0\xa0\xa0\xa0 // The class', '\xa0 public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier', '\xa0\xa0\xa0 int myNum;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Attribute (int variable)', '\xa0\xa0\xa0 string myString;\xa0 // \n  Attribute (string variable)', '};', 'int main() {', '\xa0 MyClass ', <strong>myObj</strong>, ';\xa0 \n  // Create an object of MyClass', '\xa0 // Access attributes and set values', '\xa0 ', <strong>myObj.myNum</strong>, ' \n  = 15;\xa0', '\xa0 ', <strong>
  myObj.myString</strong>, ' = ""Some text"";', '\xa0 // Print attribute values', '\xa0 \n  cout << myObj.myNum\xa0<< ""\\n""; ', '\xa0 cout << myObj.myString; ', '\xa0 return 0;', '}', '\n'], ['\n  // Create a Car class with some attributes', 'class Car {', '\xa0 public:', '\xa0\xa0\xa0 string brand;\xa0\xa0\xa0', '\xa0\xa0\xa0 string model;', '\xa0\xa0\xa0 int \n  year;', '};', 'int main() {', '\xa0 // Create an object of Car', '\xa0 Car carObj1;', '\xa0 carObj1.brand = ""BMW"";', '\xa0 \n  carObj1.model = ""X5"";', '\xa0 carObj1.year = 1999;', '\xa0 \n  // Create another object of Car', '\xa0 Car \n  carObj2;', '\xa0 carObj2.brand = ""Ford"";', '\xa0 carObj2.model = \n  ""Mustang"";', '\xa0 carObj2.year = 1969;', '\xa0 // Print \n  attribute values', '\xa0 cout << carObj1.brand \n  << "" "" << carObj1.model << "" "" << carObj1.year << ""\\n"";', '\xa0 cout << \n  carObj2.brand << "" "" << carObj2.model << "" "" << carObj2.year << ""\\n"";', '\xa0 return 0;', '}', '\n']]"
C++ Classes,C++ Class Methods,https://www.w3schools.com/cpp/cpp_class_methods.asp,"Methods are functions that belongs to the class.|||There are two ways to define functions that belongs to a class:|||In the following example, we define a function inside the class, and we name it ""myMethod"".|||Note: You access methods just like you access attributes; by creating an object of the class and using the dot syntax (.):|||To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function:|||You can also add parameters:",,Inside class definition@@@Outside class definition,,,"[['\n  class MyClass {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // The class', '\xa0 \n  public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier', '\xa0\xa0\xa0 void myMethod() {\xa0 // Method/function \n  defined inside the \n  class', '\xa0\xa0\xa0\xa0\xa0 cout << ""Hello World!"";', '\xa0\xa0\xa0 \n  }', '};', 'int main() {', '\xa0 MyClass \n  myObj;\xa0\xa0\xa0\xa0 // Create an object of MyClass', '\xa0 \n  myObj.myMethod();\xa0 // Call the method', '\xa0 return 0;', '}', '\n'], ['\n  class MyClass {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // The class', '\xa0 \n  public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier', '\xa0\xa0\xa0 void myMethod();\xa0\xa0 // Method/function \n  declaration', '};', '\n', '// Method/function definition outside the class', 'void ', <strong>
  MyClass::myMethod()</strong>, ' {', '\xa0 cout << ""Hello World!"";', '}', 'int main() {', '\xa0 MyClass \n  myObj;\xa0\xa0\xa0\xa0 // Create an object of MyClass', '\xa0 \n  myObj.myMethod();\xa0 // Call the method', '\xa0 return 0;', '}', '\n'], ['\n  #include <iostream>', 'using namespace std;', 'class Car {', '\xa0 \n  public:', '\xa0\xa0\xa0 int speed(int maxSpeed);', '};', 'int Car::speed(int maxSpeed) {', '\xa0 return maxSpeed;', '}', 'int main() {', '\xa0 \n  Car myObj; // Create an object of Car', '\xa0 cout << myObj.speed(200); // \n  Call the method with an argument', '\xa0 return 0;', '}', '\n']]"
C++ Classes,C++ Constructors,https://www.w3schools.com/cpp/cpp_constructors.asp,"A constructor in C++ is a special method that is automatically called when an object of a class is created.|||To create a constructor, use the same name as the class, followed by parentheses ():|||Note: The constructor has the same name as the class, it is always public, and it does not have any return value.|||Constructors can also take parameters (just like regular functions), which can be useful for setting initial values for attributes.|||The following class have brand, model and year attributes, and a constructor with different parameters. Inside the constructor we set the attributes equal to the constructor parameters (brand=x, etc). When we call the constructor (by creating an object of the class), we pass parameters to the constructor, which will set the value of the corresponding attributes to the same:|||Just like functions, constructors can also be defined outside the class. First, declare the constructor inside the class, and then define it outside of the class by specifying the name of the class, followed by the scope resolution :: operator, followed by the name of the constructor (which is the same as the class):",Constructor Parameters,,,,"[['\n  class MyClass {\xa0\xa0\xa0\xa0 // The class', '\xa0 \n  public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier', '\xa0\xa0\xa0 MyClass() {\xa0\xa0\xa0\xa0 \n  // Constructor', '\xa0\xa0\xa0\xa0\xa0 cout << ""Hello World!"";', '\xa0\xa0\xa0 \n  }', '};', 'int main() {', '\xa0 MyClass myObj;\xa0\xa0\xa0 // Create an object of MyClass (this will call \n  the constructor)', '\xa0 return 0;', '}', '\n'], ['\n    class Car {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // The class', '\xa0 public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Access specifier', '\xa0\xa0\xa0 \n    string brand;\xa0 // Attribute', '\xa0\xa0\xa0 string model;\xa0 // Attribute', '\xa0\xa0\xa0 \n    int year;\xa0\xa0\xa0\xa0\xa0 // Attribute', '\xa0\xa0\xa0 Car(string x, string y, int z) \n    { // Constructor with parameters', '\xa0\xa0\xa0\xa0\xa0 brand = \n    x;', '\xa0\xa0\xa0\xa0\xa0 model = y;', '\xa0\xa0\xa0\xa0\xa0 \n    year = z;', '\xa0\xa0\xa0 }', '};', 'int main() {', '\xa0 // \n    Create Car objects and call the constructor with different values', '\xa0 \n    Car carObj1(""BMW"", ""X5"", 1999);', '\xa0 Car carObj2(""Ford"", ""Mustang"", \n    1969);', '\xa0 // Print values', '\xa0 cout << carObj1.brand << "" "" \n    << carObj1.model << "" "" << carObj1.year << ""\\n"";', '\xa0 cout << \n    carObj2.brand << "" "" << carObj2.model << "" "" << carObj2.year << ""\\n"";', '\xa0 \n    return 0;', '}', '\n'], ['\n    class Car {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // The class', '\xa0 \n    public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Access \n    specifier', '\xa0\xa0\xa0 string brand;\xa0 // Attribute', '\xa0\xa0\xa0 \n    string model;\xa0 // Attribute', '\xa0\xa0\xa0 int year;\xa0\xa0\xa0\xa0\xa0 \n    // Attribute', '\xa0\xa0\xa0 Car(string x, string y, int z); // \n    Constructor declaration', '};', '// Constructor definition outside the \n    class', 'Car::Car(string x, string y, int z) {', '\xa0 brand = x;', '\xa0 \n    model = y;', '\xa0 year = z;', '}', 'int main() {', '\xa0 // Create \n    Car objects and call the constructor with different values', '\xa0 Car \n    carObj1(""BMW"", ""X5"", 1999);', '\xa0 Car carObj2(""Ford"", ""Mustang"", 1969);', '\n', '\xa0 // Print values', '\xa0 cout << carObj1.brand << "" "" << \n    carObj1.model << "" "" << carObj1.year << ""\\n"";', '\xa0 cout << \n    carObj2.brand << "" "" << carObj2.model << "" "" << carObj2.year << ""\\n"";', '\xa0 \n    return 0;', '}', '\n']]"
C++ Classes,C++ Access Specifiers,https://www.w3schools.com/cpp/cpp_access_specifiers.asp,"By now, you are quite familiar with the public keyword that appears in all of our class examples:|||The public keyword is an access specifier. Access specifiers define how the members (attributes and methods) of a class can be accessed. In the example above, the members are public - which means that they can be accessed and modified from outside the code. |||However, what if we want members to be private and hidden from the outside world? |||In C++, there are three access specifiers:|||In the following example, we demonstrate the differences between public and private members:|||If you try to access a private member, an error occurs:|||Note: It is possible to access private members of a class using a public method inside the same class. See the next chapter (Encapsulation) on how to do this.|||Tip: It is considered good practice to declare your class attributes as private (as often as you can). This will reduce the possibility of yourself (or others) to mess up the code. This is also the   main ingredient of the Encapsulation   concept, which you will learn more about in the next chapter.|||Note: By default, all members of a class are private if you don't specify an access specifier:",,"public - members are accessible from outside the class@@@private - members cannot be accessed (or viewed) from outside the class@@@protected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes. You will learn more about Inheritance later.",,,"[['\n  class MyClass {\xa0 // The class', '\xa0 ', <strong>public:</strong>, '\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Access specifier', '\xa0\xa0\xa0 \n  // class members goes here', '};', '\n'], ['\n    class \n    MyClass {', '\xa0 \n    ', <strong>public:</strong>, '\xa0\xa0\xa0 // Public access \n    specifier', '\xa0\xa0\xa0 int x;\xa0\xa0 // Public attribute', '\xa0\n    ', <strong>private:</strong>, '\xa0\xa0 // Private access specifier', '\xa0\xa0\xa0 \n    int y;\xa0\xa0 // Private attribute', '};', 'int main() {', '\xa0 MyClass \n    myObj;', '\xa0 myObj.x = 25;\xa0 // Allowed (public)', '\xa0 myObj.y = 50;\xa0 // \n    Not allowed (private)', '\xa0 \n    return 0;', '}', '\n'], ['\n    class \n    MyClass {', '\xa0\xa0int x;\xa0\xa0 // Private attribute', '\xa0\xa0int y;\xa0\xa0 // Private attribute', '};', '\n']]"
C++ Classes,C++ Encapsulation,https://www.w3schools.com/cpp/cpp_encapsulation.asp,"The meaning of Encapsulation, is to make sure that ""sensitive"" data is hidden from users. To achieve this, you must declare class variables/attributes as private (cannot be accessed from outside the class). If you want others to read or modify the value of a private member, you can provide public get and set methods.Access Private MembersTo access a private attribute, use public ""get"" and ""set"" methods:Example    #include <iostream>using namespace std;class Employee {      private:    // Private attribute    int salary;  public:        // Setter        void setSalary(int s) {      salary = s;    }        // Getter    int getSalary() {          return salary;    }};int     main() {  Employee myObj;  myObj.setSalary(50000);      cout << myObj.getSalary();  return 0;}Try it Yourself »Example explainedThe salary attribute is private, which have restricted access.The public setSalary() method takes a parameter (s) and assigns it to thesalary attribute (salary = s).The public getSalary() method returns the value of the private salary attribute.Inside main(), we create an object of the Employee class. Now we can use the setSalary() method to set the value of the private attribute to 50000. Then we call the getSalary() method on the object to return the value.Why Encapsulation?It is considered good practice to declare your class attributes as private (as often as you can). Encapsulation ensures better control of your data, because you (or others) can change one part of the code without affecting other partsIncreased security of data❮ PreviousNext ❯|||To access a private attribute, use public ""get"" and ""set"" methods:|||The salary attribute is private, which have restricted access.|||The public setSalary() method takes a parameter (s) and assigns it to thesalary attribute (salary = s).|||The public getSalary() method returns the value of the private salary attribute.|||Inside main(), we create an object of the Employee class. Now we can use the setSalary() method to set the value of the private attribute to 50000. Then we call the getSalary() method on the object to return the value.",Encapsulation|||Why Encapsulation?,"It is considered good practice to declare your class attributes as private (as often as you can). Encapsulation ensures better control of your data, because you (or others) can change one part of the code without affecting other parts@@@Increased security of data",,,"[['\n    #include <iostream>', 'using namespace std;', 'class Employee {', '\xa0 \n    private:', '\xa0\xa0\xa0 // Private attribute', '\xa0\xa0\xa0 int salary;', '\xa0 public:', '\xa0\xa0\xa0 \n    // Setter', '\xa0\xa0\xa0 \n    void setSalary(int s) {', '\xa0\xa0\xa0\xa0\xa0 salary = s;', '\xa0\xa0\xa0 }', '\xa0\xa0\xa0 \n    // Getter', '\xa0\xa0\xa0 int getSalary() {', '\xa0\xa0\xa0\xa0\xa0 \n    return salary;', '\xa0\xa0\xa0 }', '};', 'int \n    main() {', '\xa0 Employee myObj;', '\xa0 myObj.setSalary(50000);', '\xa0 \n    cout << myObj.getSalary();', '\xa0 return 0;', '}']]"
C++ Classes,C++ Inheritance,https://www.w3schools.com/cpp/cpp_inheritance.asp,"In C++, it is possible to inherit attributes and methods from one class to another. We group the ""inheritance concept"" into two categories:|||To inherit from a class, use the : symbol.|||In the example below, the Car class (child) inherits the attributes and methods from the Vehicle class (parent):|||- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.",,derived class (child) - the class that inherits from another class@@@base class (parent) - the class being inherited from,,,"[['\n    // Base class', 'class Vehicle {', '\xa0 public: ', '\xa0\xa0\xa0 \n    string brand = ""Ford"";', '\xa0\xa0\xa0 void honk() {', '\xa0\xa0\xa0\xa0\xa0 \n    cout << ""Tuut, tuut! \\n"" ;', '\xa0\xa0\xa0 }', '};', '// Derived \n    class', <strong>class Car: public Vehicle</strong>, ' {', '\xa0 public: ', '\xa0\xa0\xa0 \n    string model = ""Mustang"";', '};', 'int main() {', '\xa0 Car myCar;', '\xa0 \n    myCar.honk();', '\xa0 cout << myCar.brand + "" "" + myCar.model;', '\xa0 \n    return 0;', '}']]"
C++ Classes,C++ Polymorphism,https://www.w3schools.com/cpp/cpp_polymorphism.asp,"Polymorphism means ""many forms"", and it occurs when we have many classes that are related to each other by inheritance.|||Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.|||For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):|||Remember from the Inheritance chapter that we use the : symbol to inherit from a class.|||Now we can create Pig and Dog objects and override the animalSound() method:|||- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.",,,,,"[['\n    // Base class', 'class Animal {', '\xa0 public:', '\xa0\xa0\xa0 void \n    animalSound() {', '\xa0\xa0\xa0 cout << ""The animal makes a sound \\n"" \n    ;', '\xa0 }', '};', '// Derived class', '\n    class Pig : public Animal {', '\xa0 public:', '\xa0\xa0\xa0 void \n    animalSound() {', '\xa0\xa0\xa0 cout << ""The pig says: wee wee \\n"" ;', '\xa0 \n    }', '};', '// Derived class', 'class Dog \n    : public Animal {', '\xa0 public:', '\xa0\xa0\xa0 void animalSound() \n    {', '\xa0\xa0\xa0 cout << ""The dog says: bow wow \\n"" ;', '\xa0 }', '\n    };'], ['\n    // Base class', 'class Animal {', '\xa0 public:', '\xa0\xa0\xa0 void \n    animalSound() {', '\xa0\xa0\xa0 cout << ""The animal makes a sound \\n"" \n    ;', '\xa0 }', '};', '// Derived class', '\n    class Pig : public Animal {', '\xa0 public:', '\xa0\xa0\xa0 void \n    animalSound() {', '\xa0\xa0\xa0 cout << ""The pig says: wee wee \\n"" ;', '\xa0\xa0 \n    }', '};', '// Derived class', 'class Dog \n    : public Animal {', '\xa0 public:', '\xa0\xa0\xa0 void animalSound() \n    {', '\xa0\xa0\xa0 cout << ""The dog says: bow wow \\n"" ;', '\xa0 }', '\n    };', 'int main() {', '\xa0 Animal \n    myAnimal;', '\xa0 Pig myPig;', '\xa0 Dog myDog;', '\xa0 \n    myAnimal.animalSound();', '\xa0 myPig.animalSound();', '\xa0 \n    myDog.animalSound();', '\xa0 return 0;', '}']]"
C++ Classes,C++ Files,https://www.w3schools.com/cpp/cpp_files.asp,"The fstream library allows us to work with files.|||To use the fstream library, include both the standard <iostream> AND the <fstream> header file:|||There are three classes included in the fstream library, which are used to create, write or read files:|||To create a file, use either the ofstream or fstream class, and specify the name of the file.|||To write to the file, use the insertion operator (<<).|||It is considered good practice, and it can clean up unnecessary memory space.|||To read from a file, use either the ifstream or fstream class, and the name of the file.|||Note that we also use a while loop together with the getline() function (which belongs to the ifstream class) to read the file line by line, and to print the content of the file:",,,,"ofstream|||Creates and writes to files&&&ifstream|||Reads from files&&&fstream|||A combination of ofstream and ifstream: creates, reads, and writes to files","[['\n    #include <iostream>', '#include <fstream>'], ['\n    #include <iostream>', '#include <fstream>', 'using namespace std;', '\n    int main() {', '\xa0 // Create and open a text file', '\xa0 ofstream MyFile(""filename.txt"");', '\xa0 // \n    Write to the file', '\xa0 MyFile << ""Files can be tricky, but it is fun \n    enough!"";', '\xa0 // \n    Close the file', '\xa0 MyFile.close();', '}'], ['\n    // Create a \n    text string, which is used to output the text file', 'string myText;', '\n', '// Read from the text file', 'ifstream MyReadFile(""filename.txt"");', '// Use a while \n    loop together with the getline() function to read the file line by line', 'while (getline (MyReadFile, \n    myText)) {', '\xa0 // Output the text from the file', '\xa0\xa0cout << myText;', '\n    }', '\n', '// Close the file', 'MyReadFile.close();']]"
C++ Classes,C++ Exceptions,https://www.w3schools.com/cpp/cpp_exceptions.asp,"When executing C++ code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.|||When an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw an exception (throw an error).|||Exception handling in C++ consist of three keywords: try, throw and catch:|||The try statement allows you to define a block of code to be tested for errors while it is being executed.|||The throw keyword throws an exception when a problem is detected, which lets us create a custom error.|||The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.|||The try and catch keywords come in pairs:|||Consider the following example:|||We use the try block to test some code: If the age variable is less than 18, we will throw an exception, and handle it in our catch block.|||In the catch block, we catch the error and do something about it. The catch statement takes a parameter: in our example we use an int variable (myNum) (because we are throwing an exception of int type in the try block (age)), to output the value of age.|||If no error occurs (e.g. if age is 20 instead of 15, meaning it will be be greater than 18), the catch block is skipped:|||You can also use the throw keyword to output a reference number, like a custom error number/code for organizing purposes:|||If you do not know the throw type used in the try block, you can use the ""three dots"" syntax (...) inside the catch block, which will handle any type of exception:",,,,,"[['\n    try {', '\xa0\xa0// Block of code to try', '\xa0 throw ', <em>exception</em>, '; \n    // Throw an exception when a problem arise', '}', 'catch () {', '\n    \xa0\xa0// Block of code to handle errors', '}'], ['\n    try {', '\xa0 int age = 15;', '\xa0 if (age >= 18) {', '\xa0\xa0\xa0 \n    cout << ""Access granted - you are old enough."";', '\xa0 } else {', '\xa0\xa0\xa0 \n    throw (age);', '\xa0 }', '}', 'catch (int \n    myNum) {', '\xa0 cout << ""Access denied - You must be at least 18 years \n    old.\\n"";', '\xa0 cout << ""Age is: "" << myNum; ', '}'], ['\n    int age = 20;'], ['\n    try {', '\xa0 int age = 15;', '\xa0 if (age >= 18) {', '\xa0\xa0\xa0 \n    cout << ""Access granted - you are old enough."";', '\xa0 } else {', '\xa0\xa0\xa0 \n    throw 505;', '\xa0 }', '}', 'catch (int myNum) {', '\xa0 \n    cout << ""Access denied - You must be at least 18 years old.\\n"";', '\xa0 \n    cout << ""Error number: "" << myNum; ', '}'], ['\n    try {', '\xa0 int age = 15;', '\xa0 if (age >= 18) {', '\xa0\xa0\xa0 \n    cout << ""Access granted - you are old enough."";', '\xa0 } else {', '\xa0\xa0\xa0 \n    throw 505;', '\xa0 }', '}', 'catch (...) {', '\xa0 cout << ""Access denied - You must be at least 18 years \n    old.\\n"";', '}']]"
C++ How To,Add Two Numbers,https://www.w3schools.com/cpp/cpp_howto_add_two_numbers.asp,"Learn how to add two numbers in C++:|||In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:",,,,,"[['\n  int x = 5;', 'int y = 6;', 'int sum = x + y;', 'cout << sum;'], ['\n  int x, y;', 'int sum;', 'cout << ""Type a number: "";', 'cin >> x;', 'cout << ""Type another number: "";', 'cin >> \n  y;', 'sum = x + y;', 'cout << ""Sum is: "" << sum;']]"
C++ Examples,C++ Examples,https://www.w3schools.com/cpp/cpp_examples.asp,,,,,,[]
C++ Examples,C++ Compiler,https://www.w3schools.com/cpp/cpp_compiler.asp,"With our online C++ compiler, you can edit C++ code, and view the result in your browser.|||Click on the ""Try it Yourself"" button to see how it works.|||The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.|||The icons are explained in the table below:|||If you don't know C++, we suggest that you read our C++ Tutorial from scratch.",C++ Compiler (Editor)|||C++ Compiler Explained,,,|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light),[]
C++ Examples,C++ Exercises,https://www.w3schools.com/cpp/cpp_exercises.asp,"You can test your C++ skills with W3Schools' Exercises.|||We have gathered a variety of C++ exercises (with answers) for each C++ Chapter.|||Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start C++ Exercises ❯|||If you don't know C++, we suggest that you read our C++ Tutorial from scratch.",,,,,[]
C++ Examples,C++ Quiz,https://www.w3schools.com/cpp/cpp_quiz.asp,"You can test your C++ skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about C++.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the C++ Quiz ❯|||If you don't know C++, we suggest that you read our C++ Tutorial from scratch.|||Get certified by completing the  course",,,,,[]
