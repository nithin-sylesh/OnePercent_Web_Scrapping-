Heading,Sub-Heading,Links,Description,List Headings,Unordered Lists,Ordered Lists,Table Data,Examples
Git Tutorial,Git HOME,https://www.w3schools.com/git/default.asp?remote={{remoteName}},"Git is a version control system.|||Git helps you keep track of code changes.|||Git is used to collaborate on code.|||In this tutorial, we will show you Git commands like this:|||For new users, using the terminal view can seem a bit complicated. Don't worry! We will keep it really simple, and learning this way gives you a good grasp of how Git works.|||In the code above, you can see commands (input) and output.|||Lines like this are commands we input:|||Lines like this are the output/response to our commands:|||In general, lines with $ in front of it is input. These are the commands you can copy and run in your terminal.|||Git and GitHub are different things.|||In this tutorial you will understand what Git is and how to use it on the remote repository platforms, like GitHub.|||You can choose, and change, which platform to focus on by clicking in the menu on the right:|||Insert the missing part of the command to check which version of Git (if any) is installed.|||Start the Exercise|||Test your Git skills with a quiz.|||Start Git Quiz",,,,,[]
Git Tutorial,Git Intro,https://www.w3schools.com/git/git_intro.asp?remote={{remoteName}},"Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.|||It is used for:",What is Git?|||What does Git do?|||Working with Git|||Why Git?,"Tracking code changes@@@Tracking who made changes@@@Coding collaboration|||Manage projects with Repositories@@@Clone a project to work on a local copy@@@Control and track changes with Staging and Committing@@@Branch and Merge to allow for work on different parts and versions of a project@@@Pull the latest version of the project to a local copy@@@Push local updates to the main project|||Initialize Git on a folder, making it a Repository@@@Git now creates a hidden folder to keep track of changes in that folder@@@When a file is changed, added or deleted, it is considered modified@@@You select the modified files you want to Stage@@@The Staged files are Committed, which   prompts Git to store a permanent snapshot of the files@@@Git allows you to see the full history of every commit.@@@You can revert back to any previous commit.@@@Git does not store a separate copy of every file in every commit, but   keeps track of changes made in each commit!|||Over 70% of developers use Git!@@@Developers can work together from anywhere in the world.@@@Developers can see the full history of the project.@@@Developers can revert to earlier versions of a project.",,,[]
Git Tutorial,Git Get Started,https://www.w3schools.com/git/git_getstarted.asp?remote={{remoteName}},"You can download Git for free from the following website: https://www.git-scm.com/|||To start using Git, we are first going to open up our Command shell.|||For Windows, you can use Git bash, which comes included in Git for Windows. For Mac and Linux you can use the built-in terminal.|||The first thing we need to do, is to check if Git is properly installed:|||If Git is installed, it should show something like git version X.Y|||Now let Git know who you are. This is important for version control systems, as each Git commit uses this information:|||Change the user name and e-mail address to your own. You will probably also want to use this when registering to GitHub later on.|||Note: Use global to set the username and e-mail for every repository on your computer.|||If you want to set the username/e-mail for just the current repo, you can remove global|||Now, let's create a new folder for our project:|||mkdir makes a new directory.|||cd changes the current working directory.|||Now that we are in the correct directory. We can start by initializing Git!|||Note: If you already have a folder/directory you would   like to use for Git:|||Navigate to it in command line, or open it in your file explorer, right-click and select ""Git Bash here""|||Once you have navigated to the correct folder, you can initialize Git on that folder:|||You just created your first Git Repository!|||Note: Git now knows that it should watch the folder you   initiated it on.|||Git creates a hidden folder to keep track of changes.|||Insert the missing part of the command to check which version of Git (if any) is installed.|||Start the Exercise",,,,,[]
Git Tutorial,Git New Files,https://www.w3schools.com/git/git_new_files.asp?remote={{remoteName}},"You just created your first local Git repo. But it is empty.|||So let's add some files, or create a new file using your favourite text editor. Then save or move it to the folder you just created.|||If you want to learn how to create a new file using a text editor, you can visit our HTML tutorial:HTML Editors|||For this example, I am going to use a simple HTML file like this:|||And save it to our new folder as index.html.|||Let's go back to the terminal and list the files in our current working directory:|||ls will list the files in the directory. We can see that index.html is there.|||Then we check the Git status and see if it is a part of our repo:|||Now Git is aware of the file, but has not added it to our repository!|||Files in your Git repository folder can be in one of 2 states:||| When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.|||We will cover the staging environment in the next chapter.|||Check the status of the Git:|||Start the Exercise",,"Tracked - files that Git knows about and are added to the repository@@@Untracked - files that are in your working directory, but not added to the   repository",,,[]
Git Tutorial,Git Staging Environment,https://www.w3schools.com/git/git_staging_environment.asp?remote={{remoteName}},"One of the core functions of Git is the concepts of the Staging Environment, and the Commit.|||As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment.|||Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.|||For now, we are done working with index.html. So we can add it to the Staging Environment:|||The file should be Staged. Let's check the status::|||Now the file has been added to the Staging Environment.|||You can also stage more than one file at a time. Let's add 2 more files to our working folder. Use the text editor again.|||A README.md file that describes the repository (recommended for all repositories):|||A basic external style sheet (bluestyle.css):|||And update index.html to include the stylesheet:|||Now add all files in the current directory to the Staging Environment:|||Using --all instead of individual filenames will stage all changes (new, modified, and deleted) files.|||Now all 3 files are added to the Staging Environment, and we are ready to do our first commit.|||Note: The shorthand command for   git add --all is git add -A|||Add index.html to the Stating Environment:|||Start the Exercise",,,,,[]
Git Tutorial,Git Commit,https://www.w3schools.com/git/git_commit.asp?remote={{remoteName}},"Since we have finished our work,  we are ready move from stage to commit for our repo.|||Adding commits keep track of our progress and changes as we work. Git considers each commit change point or ""save point"". It is a point in the project you can go back to if you find a bug, or want to make a change.|||When we commit, we should always include a message.|||By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when.|||The commit  command performs a commit, and the -m ""message"" adds a message.|||The Staging Environment has been committed to our repo, with the message:""First release of Hello World!""|||Sometimes, when you make small changes, using the staging environment seems like a waste of time. It is possible to commit changes directly, skipping the staging environment.The -a option will automatically stage every changed, already tracked file.|||Let's add a small update to index.html:|||And check the status of our repository. But this time, we will use the --short option to see the changes in a more compact way:|||Note: Short status flags are:|||We see the file we expected is modified. So let's commit it directly:|||Warning: Skipping the Staging Environment is not generally recommended.|||Skipping the stage step can sometimes make you include unwanted changes.|||To view the history of commits for a repository, you can use the log command:|||Commit the changes to the current repository with the message ""First release!|||Start the Exercise",,?? - Untracked files@@@A - Files added to stage@@@M - Modified files@@@D - Deleted files,,,[]
Git Tutorial,Git Help,https://www.w3schools.com/git/git_help.asp?remote={{remoteName}},"If you are having trouble remembering commands or options for commands, you can use Git help.|||There are a couple of different ways you can use thehelp command in command line:||| Let's go over the different commands.|||Any time you need some help remembering the specific option for a command, you can use git command -help:|||Note: You can also use --help   instead of -help to open the relevant Git   manual page|||To list all possible commands, use the help --all command:|||Warning: This will display a very long list of commands|||Note: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.|||Show the possible options for the status command in command line:|||Start the Exercise",,git command -help -  See   all the available options for the specific command@@@git help --all -  See all possible   commands,,,[]
Git Tutorial,Git Branch,https://www.w3schools.com/git/git_branch.asp?remote={{remoteName}},"In Git, a branch is a new/separate version of the main repository.|||Let's say you have a large project, and you need to update the design on it.|||How would that work without and with Git:|||Without Git:|||With Git:|||Branches allow you to work on different parts of a project without impacting the main branch.|||When the work is complete, a branch can be merged with the main project.|||You can even switch between branches and work on different projects without them interfering with each other.|||Branching in Git is very lightweight and fast!|||Let add some new features to our index.html page.|||We are working in our local repository, and we do not want to disturb or possibly wreck the main project.|||So we create a new branch:|||Now we created a new branch called ""hello-world-images""|||Let's confirm that we have created a new branch:|||We can see the new branch with the name ""hello-world-images"", but the * beside master specifies that we are currently on that branch.|||checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command:|||Now we have moved our current workspace from the master branch, to the new   branch|||Open your favourite editor and make some changes.|||For this example, we added an image (img_hello_world.jpg) to the working folder and a line of code in the index.html file:|||We have made changes to a file and added a new file in the working directory (same directory as the mainbranch).|||Now check the status of the current branch:|||So let's go through what happens here:|||So we need to add both files to the Staging Environment for this branch:|||Using --all instead of individual filenames will Stage all changed (new, modified, and deleted) files.|||Check the status of the branch:|||We are happy with our changes. So we will commit them to the branch:|||Now we have a new branch, that is different from the master branch.|||Note: Using the -b option   on checkout will create a new branch, and move to it, if it does not exist|||Now let's see just how quick and easy it is to work with different branches, and how well it works.|||We are currently on the branch hello-world-images. We added an image to this branch, so let's list the files in the current directory:|||We can see the new file img_hello_world.jpg, and if we open the html file, we can see the code has been altered. All is as it should be.|||Now, let's see what happens when we change branch to master|||The new image is not a part of this branch. List the files in the current directory again:|||img_hello_world.jpg is no longer there! And if we open the html file, we can see the code reverted to what it was before the alteration.|||See how easy it is to work with branches? And how this allows you to work on different things?|||Now imagine that we are not yet done with hello-world-images, but we need to fix an error on master.|||I don't want to mess with master directly, and I do not want to mess with hello-world-images, since it is not done yet.|||So we create a new branch to deal with the emergency:|||Now we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.|||Let's fix our imaginary error:|||We have made changes in this file, and we need to get those changes to the master branch.|||Check the status:|||stage the file, and commit:|||Now we have a fix ready for master, and we need to merge the two branches.|||Create a new branch called hello-world-images:|||Start the Exercise",,"Make copies of all the relevant files to avoid impacting the live version@@@Start working with the design and find that code depend on code in other   files, that also need to be changed!@@@Make copies of the dependant files as well. Making sure that every file   dependency references the correct file name@@@EMERGENCY! There is an unrelated error somewhere else in the project that   needs to be fixed ASAP!@@@Save all your files, making a note of the names of the copies you were   working on@@@Work on the unrelated error and update the code to fix it@@@Go back to the design, and finish the work there@@@Copy the code or rename the files, so the updated design is on the live   version@@@(2 weeks later, you realize that the unrelated error was not fixed in the   new design version because you copied the files before the fix)|||With a new branch called new-design, edit the code directly without   impacting the main branch@@@EMERGENCY! There is an unrelated error somewhere else in the project that   needs to be fixed ASAP!@@@Create a new branch from the main project called small-error-fix@@@Fix the unrelated error and merge the small-error-fix branch with the main   branch@@@You go back to the new-design branch, and finish the work there@@@Merge the new-design branch with main (getting alerted to the small error   fix that you were missing)|||There are changes to our index.html, but the file is not staged for   commit@@@img_hello_world.jpg is not   tracked",,,[]
Git Tutorial,Git Branch Merge,https://www.w3schools.com/git/git_branch_merge.asp?remote={{remoteName}},"We have the emergency fix ready, and so let's merge the master and emergency-fix branches.|||First, we need to change to the master branch:|||Now we merge the current branch (master) with emergency-fix:|||Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can ""Fast-forward"", just pointing both master and emergency-fix to the same commit.|||As master and emergency-fix are essentially the same now, we can delete emergency-fix, as it is no longer needed:|||Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it:|||Now, we are done with our work here and can stage and commit for this branch:|||We see that index.html has been changed in both branches. Now we are ready to merge hello-world-images into master. But what will happen to the changes we recently made in master?|||The merge failed, as there is conflict between the versions for index.html. Let us check the status:|||This confirms there is a conflict in index.html, but the image files are ready and stagedto be committed.|||So we need to fix that conflict. Open the file in our editor:|||We can see the differences between the versions and edit it like we want:|||Now we can stage index.html and check the status:|||The conflict has been fixed, and we can use commit to conclude the merge:|||And delete the hello-world-images branch:|||Now you have a better understanding of how branches and merging works. Time to start working with a remote repository!|||Merge the hello-you branch with the current branch:|||Start the Exercise",,,,,[]
Git and {{title}},{{title}} Get Started,https://www.w3schools.com/git/git_remote_getstarted.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},{{title}} Edit Code,https://www.w3schools.com/git/git_remote_edit_code.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},Pull from {{title}},https://www.w3schools.com/git/git_pull_from_remote.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},Push to {{title}},https://www.w3schools.com/git/git_push_to_remote.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},{{title}} Branch,https://www.w3schools.com/git/git_remote_branch.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},Pull Branch from {{title}},https://www.w3schools.com/git/git_branch_pull_from_remote.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},Push Branch to {{title}},https://www.w3schools.com/git/git_branch_push_to_remote.asp?remote={{remoteName}},,,,,,[]
Git and {{title}},GitHub Flow,https://www.w3schools.com/git/git_github_flow.asp?remote={{remoteName}},"On this page, you will learn how to get the best out of working with GitHub.|||The GitHub flow is a workflow designed to work well with Git and GitHub.|||It focuses on branching and makes it possible for teams to experiment freely, and make deployments regularly.|||The GitHub flow works like this:|||You should already have a good understanding of how this works from the previous chapters. This chapter focuses on understanding how the flow makes it easy for you to work together.|||Branching is the key concept in Git. And it works around the rule that the master branch is ALWAYS deployable.|||That means, if you want to try something new or experiment, you create a new branch! Branching gives you an environment where you can make changes without affecting the main branch.|||When your new branch is ready, it can be reviewed, discussed, and merged with the main branch when ready.|||When you make a new branch, you will (almost always) want to make it from the master branch.|||Note: Keep in mind that you are working with others. Using descriptive names for new branches, so everyone can understand what is happening.|||After the new branch is created, it is time to get to work. Make changes by adding, editing and deleting files. Whenever you reach a small milestone, add the changes to your branch by commit.|||Adding commits keeps track of your work. Each commit should have a message explaining what has changed and why. Each commit becomes a part of the history of the branch, and a point you can revert back to if you need to.|||Note: commit messages are very important! Let everyone   know what has changed and why. Messages and comments make it so much easier for yourself   and other people to keep track of changes.|||Pull requests are a key part of GitHub. A Pull Request notifies people you have changes ready for them to consider or review.||| You can ask others to review your changes or pull your contribution and merge it into their branch.|||When a Pull Request is made, it can be reviewed by whoever has the proper access to the branch. This is where good discussions and review of the changes happen.|||Pull Requests are designed to allow people to work together easily and produce better results together!|||If you receive feedback and continue to improve your changes, you can push your changes with new commits, making further reviews possible.|||Note: GitHub shows new commit and feedback in the ""unified   Pull Request view"".|||When the pull request has been reviewed and everything looks good, it is time for the final testing. GitHub allows you to deploy from a branch for final testing in production before merging with the master branch.|||If any issues arise, you can undo the changes by deploying the master branch into production again!|||Note: Teams often have dedicated testing environments used   for deploying branches.|||After exhaustive testing, you can merge the code into the master branch!|||Pull Requests keep records of changes to your code, and if you commented and named changes well, you can go back and understand why changes and decisions were made.|||Note: You can add keywords to your pull request for easier   searching!",Create a New Branch|||Open a Pull Request|||Review|||Deploy,Create a new Branch@@@Make changes and add Commits@@@Open a Pull Request@@@Review@@@Deploy@@@Merge,,,[]
Git and {{title}},{{title}} Pages,https://www.w3schools.com/git/git_remote_pages.asp?remote={{remoteName}},,,,,,[]
Git Contribute,{{title}} Fork,https://www.w3schools.com/git/git_remote_fork.asp?remote={{remoteName}},,,,,,[]
Git Contribute,Git Clone from {{title}},https://www.w3schools.com/git/git_clone.asp?remote={{remoteName}},,,,,,[]
Git Contribute,{{title}} Send Pull Request,https://www.w3schools.com/git/git_remote_send_pull_request.asp?remote={{remoteName}},,,,,,[]
Git Advanced,Git .gitignore,https://www.w3schools.com/git/git_ignore.asp?remote={{remoteName}},"When sharing your code with others, there are often files or parts of your project, you do not want to share.|||Examples|||Git can specify which files or parts of your project should be ignored by Git using a .gitignore file.|||Git will not track files and folders specified in .gitignore. However, the .gitignore file itself IS tracked by Git.|||To create a .gitignore file, go to the root of your local Git, and create it:|||Now open the file using a text editor.|||We are just going to add two simple rules:|||Now all .log files and anything in temp folders will be ignored by Git.|||Note: In this case, we use a single .gitignore which applies to the entire repository.||| It is also possible to have additional .gitignore files in subdirectories. These only apply to files or folders within that directory.|||Here are the general rules for matching patterns in .gitignore files: |||It is also possible to ignore files or folders but not show it in the distubuted .gitignore file.|||These kinds of ignores are specified in the .git/info/exclude file. It works the same way as.gitignore but are not shown to anyone else.|||In .gitignore add a line to ignore all .temp files:|||Start the Exercise",Rules for .gitignore,log files@@@temporary files@@@hidden files@@@personal files@@@etc.|||Ignore any files with the .log extension@@@Ignore everything in any directory named temp,," |||Blank lines are ignored||| &&&# text comment|||Lines starting with # are ignored||| &&&name|||All name files, name folders, and files and folders in any
name folder|||/name.log/name/file.txt/lib/name.log&&&name/|||Ending with / specifies the pattern is for a folder. Matches all files and folders in any
name folder|||/name/file.txt/name/log/name.logno match:/name.log&&&name.file|||All files with the name.file|||/name.file/lib/name.file&&&/name.file|||Starting with / specifies the pattern matches only 
files in the root folder|||/name.fileno match:
/lib/name.file&&&lib/name.file|||Patterns specifiing files in specific folders are always realative to root 
(even if you do not start with / )|||/lib/name.fileno match:
name.file/test/lib/name.file&&&**/lib/name.file|||Starting with ** before / specifies that it matches any folder in the 
repository. Not just on root.|||/lib/name.file/test/lib/name.file&&&**/name|||All name folders, and files and folders in any
name folder|||/name/log.file/lib/name/log.file/name/lib/log.file&&&/lib/**/name|||All name folders, and files and folders in any
name folder within the lib folder.|||/lib/name/log.file/lib/test/name/log.file/lib/test/ver1/name/log.file
no match:
/name/log.file&&&*.file|||All files withe .file extention|||/name.file/lib/name.file&&&*name/|||All folders ending with name|||/lastname/log.file/firstname/log.file&&&name?.file|||? matches a single non-specific character|||/names.file/name1.fileno match:
/names1.file&&&name[a-z].file|||[range] matches a single character in the 
specified range (in this case a character in the range of a-z, and also be 
numberic.)|||/names.file/nameb.fileno match:
/name1.file&&&name[abc].file|||[set] matches a single character in the specified 
set of characters (in this case either a, b, or c)|||/namea.file/nameb.fileno match:
/names.file&&&name[!abc].file|||[!set] matches a single character, except 
the ones spesified in the set of characters (in this case a, b, or c)|||/names.file/namex.fileno match:
/namesb.file&&&*.file|||All files withe .file extention|||/name.file/lib/name.file&&&name/!name/secret.log|||! specifies a negation or exception. Matches all files and folders in any
name folder, except name/secret.log|||/name/file.txt/name/log/name.logno match:/name/secret.log&&&*.file!name.file|||! specifies a negation or exception. All files withe .file extention, except name.file|||/log.file/lastname.fileno match:
/name.file&&&*.file!name/*.filejunk.*|||Adding new patterns after a negation will re-ignore a previous negated fileAll files withe .file extention, except the ones in name 
folder. Unless the file name is junk|||/log.file/name/log.fileno match:
/name/junk.file",[]
Git Advanced,Git Security SSH,https://www.w3schools.com/git/git_security_ssh.asp?remote={{remoteName}},"Up to this point, we have used HTTPS to connect to our remote repository.|||HTTPS will usually work just fine, but you should use SSH if you work with unsecured networks. And sometimes, a project will require that you use SSH.|||SSH is a secure shell network protocol that is used for network management, remote file transfer, and remote system access.|||SSH uses a pair of SSH keys to establish an authenticated and encrypted secure network protocol. It allows for secure remote communication on unsecured open networks.|||SSH keys are used to initiate a secure ""handshake"". When generating a set of keys, you will generate a ""public"" and ""private"" key.|||The ""public"" key is the one you share with the remote party. Think of this more as the lock.|||The ""private"" key is the one you keep for yourself in a secure place. Think of this as the key to the lock.|||SSH keys are generated through a security algorithm. It is all very complicated, but it uses prime numbers, and large random numbers to make the public and private key.|||It is created so that the public key can be derived from the private key, but not the other way around.|||In rhe command line for Linux, Apple, and in the Git Bash for Windows, you can generate an SSH key.|||Let's go through it, step by step.|||Start by creating a new key, using your email as a label:|||You will be prompted with the following through this creation:|||Select a file location, or press ""Enter"" to use the default file location.|||Entering a secure passphrase will create an additional layer of security. Preventing anyone who gains access to the computer to use that key without the passphrase. However, it will require you to supply the passphrase anytime the SSH key is used.|||Now we add this SSH key pair to the SSH-Agent (using the file location from above):|||You will be prompted to supply the passphrase, if you added one.|||Now the SSH key pair is ready to use.",,,,,[]
Git Advanced,{{title}} Add SSH,https://www.w3schools.com/git/git_remote_add_ssh.asp?remote={{remoteName}},,,,,,[]
Git Undo,Git Revert,https://www.w3schools.com/git/git_revert.asp?remote={{remoteName}},"revert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.|||Step 1: Find the previous commit:||||||Step 2: Use it to make a new commit:||||||Let's make a new commit, where we have ""accidentally"" deleted a file:|||Now we have a part in our commit history we want to go back to. Let's try and do that with revert.|||First thing, we need to find the point we want to return to. To do that, we need to go through the log.|||To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:|||So let's find the point we want to revert:|||We want to revert to the previous commit: 52418f7 (HEAD -> master) Just a regular update, definitely no accidents here..., and we see that it is the latest commit.|||We revert the latest commit using git revert HEAD (revert the latest change,  and then commit), adding the option--no-edit to skip the commit message editor (getting the default revert message):|||Now let's check the log again:|||Note: To revert to earlier commits, use   git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)|||On the next page, we'll go over git reset, which brings the repository back to an earlier state in the commits without making a new commit.|||Show the log of the repository, showing just 1 line per commit:|||Start the Exercise",Example,The first seven characters of the commit hash@@@the commit message,,,[]
Git Undo,Git Reset,https://www.w3schools.com/git/git_reset.asp?remote={{remoteName}},"reset is the command we use when we want to move the repository back to a previous commit, discarding any changes made after that commit.|||Step 1: Find the previous commit:||||||Step 2: Move the repository back to that step:||||||After the previous chapter, we have a part in our commit history we could go back to. Let's try and do that with reset.|||First thing, we need to find the point we want to return to. To do that, we need to go through the log.|||To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:|||So let's find the point we want to reset to:|||We want to return to the commit: 9a9add8 (origin/master) Added .gitignore, the last one before we started to mess with things.|||We reset our repository back to the specific commit using git reset commithash (commithash being the first 7 characters of the commit hash we found in thelog):|||Now let's check the log again:|||Warning: Messing with the commit history of a repository can be dangerous.   It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to   remote repositories, especially if others are working with them.|||Even though the commits are no longer showing up in the log, it is not removed from Git.|||If you know the commit hash you can reset to it:|||Now let's check the log again:|||reset to the commit with the hash abc1234:|||Start the Exercise",,The first seven characters of the commit hash - this is what we need to   refer to in our reset command.@@@the commit message,,,[]
Git Undo,Git Amend,https://www.w3schools.com/git/git_amend.asp?remote={{remoteName}},"commit --amend is used to modify the most recent commit.|||It combines changes in the staging environment with the latest commit, and creates a new commit.|||This new commit replaces the latestcommit entirely.|||One of the simplest things you can do with --amend is to change a commit message.|||Let's update the README.md and commit:|||Now let's check the log:|||Oh no! the commit message is full of spelling errors. Embarrassing. Let's amend that:|||And re-check the log:|||We see the previous commit is replaced with our amended one!|||Warning: Messing with the commit history of a repository can be dangerous.   It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to   remote repositories, especially if others are working with them.|||Adding files with --amend works the same way as above. Just add them to the staging environment before committing.|||Amend the previous commit to with the message ""Updated index"":|||Start the Exercise",,,,,[]
Git Undo,Git Exercises,https://www.w3schools.com/git/git_exercises.asp?remote={{remoteName}},"You can test your Git skills with W3Schools' Exercises.|||We have gathered a variety of Git exercises (with answers) for each Git Chapter.|||Try to solve an exercise by filling in the missing parts of a code. If you're stuck, hit the ""Show Answer"" button to see what you've done wrong.|||You will get 1 point foreach correct answer. Your score and total score will always be displayed.|||Good luck!|||Start Git Exercises ❯|||If you don't know Git, we suggest that you read our Git Tutorial from scratch.",,,,,[]
Git Undo,Git Quiz,https://www.w3schools.com/git/git_quiz.asp?remote={{remoteName}},"You can test your Git skills with W3Schools' Quiz.|||The test contains 25 questions and there is no time limit.|||The test is not official, it's just a nice way to see how much you know, or don't know, about Git.|||You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.|||Good luck!|||Start the Git Quiz ❯|||If you do not know Git, we suggest that you read our Git Tutorial from scratch.",,,,,[]
